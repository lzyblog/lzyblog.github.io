<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lzy_Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-27T08:43:30.695Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lzy_Blog</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在GitHub上托管代码</title>
    <link href="http://example.com/2020/12/27/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2020/12/27/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81/</id>
    <published>2020-12-27T05:34:40.123Z</published>
    <updated>2020-12-27T08:43:30.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h1><ul><li>首先你需要一个github账号，所有还没有的话先去注册吧！</li><li>我们使用git需要先安装git工具，这里给出下载地址，下载后一路直接安装即可：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></li></ul><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><ul><li>进入Github首页，点击<strong>New repository</strong>新建一个项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/dc31ad6f25861bbc77cf87aedee85834.png"></p><ul><li><p>填写相应信息后点击<strong>create</strong>即可<br>Repository name: 仓库名称<br>Description(可选): 仓库描述介绍<br>Public, Private : 仓库权限（公开共享，私有或指定合作者）<br>Initialize this repository with a README: 添加一个README.md<br>gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore<br>license: 证书类型，对应生成文件LICENSE<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/a8daa307c2fb5cfca92ad8afd8667357.png"></p></li><li><p>点击Clone or dowload会出现一个地址，copy这个地址备用。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/d6f0d035757ae5a71be52819987d6358.png"></p></li></ul><h1 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h1><ul><li><p>接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here，进入如下界面，MyCode即为我的项目文件名。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/ba9b7558b7ab673b34519c2fc29d29c4.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/1105ccee96316f1c78ded6c2c865274b.png"></p></li><li><p>接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地，后面URL为以上copy的地址</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/lzyblog/MyCode.git</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/12aedd272f9957df2c46237520a4f23e.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/e10d6acbe844d15c79eabbbf5562626e.png"></p><ul><li>进入克隆到本地的文件中，可以看到GitHub仓库里的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> MyCode</span><br></pre></td></tr></table></figure><ul><li>接着，将想要提交（上传）到GitHub的代码拷贝到本地计算机中的MyCode文件夹，然后执行“git add .”命令。这里的”.”表示将当前目录下所有改动的文件夹及文件添加到版本管理器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><ul><li>执行git commit -m “First commit”命令，提交到本地的版本控制库里，引号里面是你对本次提交的说明信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;First commit&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/f9acda0b7f3a3bea0f8169353d42fb97.png"></p><h1 id="本地上传"><a href="#本地上传" class="headerlink" title="本地上传"></a>本地上传</h1><ul><li>连接GitHUb，注意执行顺序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git config user.name <span class="string">&quot;github_username&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;github_email&quot;</span></span><br><span class="line">$ git add *</span><br><span class="line">$ git commi -m <span class="string">&quot;some msg&quot;</span>  <span class="comment"># some msg为描述信息</span></span><br></pre></td></tr></table></figure><ul><li>最后，执行” git push origin master“命令将本地仓库提交到远程的GitHub中，这里会用到注册的用户名和密码。输入密码的时候默认是没有任何提示符。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin main <span class="comment">#main也可以是master，具体看仓库</span></span><br></pre></td></tr></table></figure><p>这样，刷新GitHub仓库，你的代码就上传了！<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/a00faf273b5cb84e9a375e00c3f99b44.png"></p><h1 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h1><p>那么怎么从GitHub上下载开源代码呢？</p><ul><li><p>先在本地新建一个文件夹，把该文件夹作为一个本地仓库。然后使用终端命令(<code>Git Bash Here</code>)进入该文件夹。比如我把Github Pages作为这个项目的文件夹。</p></li><li><p>在GitHub中找到项目路径，复制。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/e0f86592c789331b4597c783acbbe4d8.png"></p></li><li><p>在终端执行如下代码   注意：这个命令一定要在刚才的目录下(GitHub Pages文件夹下)执行。等待几秒钟</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/xxxx.git</span><br></pre></td></tr></table></figure><p>然后就可以看到文件夹已经取下来了</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;下载Git&quot;&gt;&lt;a href=&quot;#下载Git&quot; class=&quot;headerlink&quot; title=&quot;下载Git&quot;&gt;&lt;/a&gt;下载Git&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;首先你需要一个github账号，所有还没有的话先去注册吧！&lt;/li&gt;
&lt;li&gt;我们使用git需要先安装g</summary>
      
    
    
    
    <category term="GitHub" scheme="http://example.com/categories/GitHub/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="http://example.com/2020/12/26/Node.js/"/>
    <id>http://example.com/2020/12/26/Node.js/</id>
    <published>2020-12-26T05:03:21.157Z</published>
    <updated>2020-12-26T05:06:21.288Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js|菜鸟教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/nodejs/nodejs-tutorial.html&quot;&gt;Node.js|菜鸟教程&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Node.js" scheme="http://example.com/categories/Node-js/"/>
    
    
    <category term="Node.js" scheme="http://example.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>UML软件建模技术</title>
    <link href="http://example.com/2020/12/21/UML%E8%BD%AF%E4%BB%B6%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2020/12/21/UML%E8%BD%AF%E4%BB%B6%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/</id>
    <published>2020-12-21T11:03:32.703Z</published>
    <updated>2020-12-30T07:01:19.446Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://8cd76980.wiz03.com/wapp/pages/view/share/s/2cRSC023Th7G2ouHSc1X-mcI11LFN60HM4Ot2CUbvE1bu5Yq">UML知识点</a></p><h1 id="UML与RUP"><a href="#UML与RUP" class="headerlink" title="UML与RUP"></a>UML与RUP</h1><ul><li><p><code>UML (Unified Modeling Language)</code>统一建模语言<br>为面向对象软件设计提供统一的、标准的、可视化的建模语言。</p></li><li><p><code>Rational统一过程(Rational Unified Process RUP)</code><br>统一软件开发过程采用用例来描述用户需求，同时提供了一套方法把用例转化为设计的类图，进一步变成最终的程序代码。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/59e0f0915e745d559363fee6802faed6.png"><br>使用RUP开发软件产品，每个软件产品的开发过程都应该包括多次循环。每个循环包括四个阶段：<strong>初始、细化、构造和交付</strong>。每个阶段又包括多个迭代过程。在RUP模型图中包括九个工作流，被称为RUP的核心工作流。核心工作流进一步分为六个核心过程工作流和三个核心支持工作流。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/5bd2cfedfad6ed627b7096345f6c2795.png"></p><h1 id="Rational-Rose"><a href="#Rational-Rose" class="headerlink" title="Rational Rose"></a>Rational Rose</h1><p>Rational Rose是Rational公司出品的一种面向对象的统一建模语言的可视化建模工具。用于可视化建模和公司级水平软件应用的组件构造。<a href="https://blog.csdn.net/hdkvsyralkvv_hk/article/details/105330982">Win10 安装 Rational Rose 教程（带超详细图文）</a><br>ROSE中的视图包括：<strong>用例视图（Use-case view）、逻辑视图（Logical view）、组件视图（Component view）、部署视图（Deployment View）</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/0b65326b93becab2868984df5e689f75.png"></p><h1 id="UML构成"><a href="#UML构成" class="headerlink" title="UML构成"></a>UML构成</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/c53060a22718a9a62d48824aa4b2f977.png"></p><ul><li>UML中的视图包括：逻辑视图（Logical view）、并发视图（Concurrency View）、组件视图（Component view）、配置视图（Deployment View）、用例视图（Use-case view）五种。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/116347b11c06998fdf2aeb9b631efb98.png"></li></ul><p><strong>用例视图</strong>：强调从系统的外部参与者（主要是用户）角度看到的或需要的系统功能。<br><strong>逻辑视图</strong>： 逻辑视图用来揭示系统功能的内部设计和协作情况。体现了系统的功能需求。<br><strong>并发视图</strong>：用来显示系统的并发工作状况<br><strong>组件视图</strong>：用来显示代码组件的组织方式。它描述了系统的实现模块和它们之间的依赖关系。<br><strong>部署视图</strong>：描述了软件到硬件的映射，反映了分布式特性。配置视图体现了系统的安装部署要求。</p><h1 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h1><p>图是一组元素的图形表示。为了对系统进行可视化，可以从不同的角度画图。在理论上，图可以包含任何事物及其关系的组合。<br>在UML中包含9类图： </p><ol><li><strong>类图(class diagram)</strong></li><li><strong>对象图(object diagram)</strong></li><li><strong>用例图(use case diagram)</strong></li><li><strong>顺序图(sequence diagram)</strong></li><li><strong>协作图(collaboration diagram)</strong></li><li><strong>状态图(statechart diagram)</strong></li><li><strong>活动图(activity diagram)</strong></li><li><strong>组件图(component diagram)</strong></li><li><strong>部署图(deployment diagram)</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/0e621fbfa74ecf5005bdd1f15abab92a.png"></p><h1 id="UML事物构造块"><a href="#UML事物构造块" class="headerlink" title="UML事物构造块"></a>UML事物构造块</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/cfc63cd5aa667696b13cab1d1345fa5a.png"></p><p><strong>事物构造块</strong>对模型中最具有代表性的<strong>成分的抽象</strong></p><ol><li><strong>结构事物</strong>：UML中的名词，模型的静态部分，描述概念或物理元素    </li><li><strong>行为事物</strong>：UML中的动词，模型的动态部分，一种跨越时间、空间的行为         </li><li><strong>分组事物</strong> ：UML中的容器，用来组织模型，是模型更加的结构化</li><li><strong>注释事物</strong> ：UML中的解释部分，和代码中的注释语句一样，是用来描述模型的。</li></ol><h2 id="结构事物"><a href="#结构事物" class="headerlink" title="结构事物"></a>结构事物</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><ul><li>类<br>是具有<strong>相同属性、相同操作</strong>的一组对象的集合的抽象描述。在图形上，类用一个矩形来表示，通常矩形中写有类的名称、类的属性和类的操作</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/5c85c0bfa690aa1a6d8e6a3d84c8c31d.png"></p><ul><li><strong>类图</strong><br>用来表示系统中的类和类与类之间的关系，它是对系统<strong>静态结构</strong>的描述 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/d3532f9b6719aa8f9464c793b6bcc811.png"></p><ul><li><strong>类之间的关系</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/232d66f21fca146673f45c5b621ede27.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/eed0a4b9093d8ad7f0ae4f750be7a085.png"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><strong>接口(interface)是描述了一个类或组件所提供的服务（操作）</strong>，或者说，接口描述了类或组件对外的、可见的动作。接口很少单独存在，而是依附于实现接口的类或组件<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/854d8007b2d977495895529a8b074e1d.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/44016f3ce0dcf00fdd673daa90376ae5.png"></p><h3 id="协作图"><a href="#协作图" class="headerlink" title="协作图"></a>协作图</h3><ul><li><p><strong>协作</strong><br>描述合作完成某个特定任务的一组类及其关联的集合，用于使用情形的实现建模。<br>在图形上，协作用一个包含名称的虚线椭圆表示。 Rose中不使用这种方法。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/3c950a631aaa3b977df834d1cde93be8.png"></p></li><li><p><strong>协作图</strong><br>除了显示消息变化（称为交互）外，协作图还显示了对象和它们之间的关系（称为上下文有关）<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/c3a8487e301e697c0d06f23dee647d9f.png"></p></li></ul><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><ul><li><p><strong>用例</strong><br>用例是对一组序列动作的描述，系统执行这些动作将对用例的参与者(actor ，有些书翻译成“角色”)产生可以观察的结果。<br>在图形上，<strong>用例</strong>用<strong>实线的椭圆</strong>表示，<strong>参与者</strong>用一个<strong>人形的图案</strong>表示。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/bcbb6913eb66ae0356964adae9b96804.png"></p></li><li><p><strong>用例图</strong><br>用于显示若干参与者（actor）以及这些参与者与系统提供的用例之间的连接关系。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/65339d71cdd2e44364446f8cf7c44bd8.png"></p></li><li><p><strong>用例之间的关系</strong></p><ol><li><strong>关联</strong><br>表示参与者和用例之间的交互。为通信途径，任何一方都可发送或可接收消息。<br>箭头指向：<strong>指向消息接收方。在UML中用直线表示</strong></li><li><strong>包含</strong><br>基本用例的行为包含了另一个用例的行为。基本用例描述在多个用例中都有的公共行为。包含关系本质上是比较特殊的依赖关系。<br>箭头指向：<strong>从基本用例到包含用例。</strong></li><li><strong>扩展</strong><br>展关系是指用例功能的延伸。与包含关系不同的是，扩展用例是可选的，如果缺少扩展用例。不会影响到基用例的完整性。<br>箭头指向：<strong>用带箭头的虚线段加《extend》表示，箭头指向基用例。</strong></li><li><strong>泛化</strong><br>代表一般与特殊的关系。它的意思和面向对象程序设计中的继承的概念是类似的。不同的是继承使用在实施阶段，泛化使用在分析、设计阶段。在泛化关系中子用例继承了父用例的行为和含义，子用例也可以增加新的行为和含义或者覆盖父用例中的行为和含义。<br>箭头指向：<strong>泛化关系用空心箭头表示，箭头指向的是父用例。</strong></li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/db21a6fa0eba1929f88f74595b4f3b4a.png"></p><h3 id="部署图"><a href="#部署图" class="headerlink" title="部署图"></a>部署图</h3><ul><li><p><strong>节点</strong><br>节点是系统在运行时存在的物理模型，代表一个<strong>可计算</strong>的资源，比如说一台数据库服务器。在图形上，节点用一个<strong>立方体</strong>来表示。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/fafcb978d058ebdf0e24d72031aba8de.png"></p></li><li><p><strong>部署图</strong><br>显示系统中软件和硬件的物理架构。通常部署图中显示实际的计算机和设备（用结点表示），以及各个结点之间的关系（还可以显示关系的类型）。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/acd882723a7d29d4ea4b17ef14628282.png"></p></li></ul><h3 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h3><ul><li><strong>组件</strong><br>组件是系统中物理的、可替代的部件，是一个描述了一些逻辑元素(如类、接口)的物理包。在图形上，组件由一个<strong>带有小方框的矩形</strong>表示。通常在矩形中只写该组件的名字。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/8891af439f7949b5f9acb1086f64baec.png"></p><ul><li><strong>组件图</strong><br>用来反映代码的物理结构。代码的物理结构用代码组件表示。组件可以是源代码、二进制文件或可执行文件组件。 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/28a6202362dd88c8cf07978be8ce1dd4.png"></p><h2 id="行为事物"><a href="#行为事物" class="headerlink" title="行为事物"></a>行为事物</h2><p>结构事物描述的是模型的静态部分，而行为事物描述的是模型的动态部分。一共有两类主要的行为事物。<br><strong>①交互(interaction)</strong><br>交互是由一组对象之间在特定上下文中，为达到特定的目的而进行的一系列消息交换而组成的动作。<br>   在图形上，交互的消息通常用带箭头的直线表示。（顺序图）<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/f348428b8501e68351ea2eef818f9b47.png"><br><strong>②状态机(state machine)</strong><br>状态机由一系列对象的状态组成。（状态图）<br><strong>③活动（activity)</strong><br>描述了一个操作执行时的过程信息。一个活动包含在操作执行过程中的一个步骤之间的先后序列关系。（活动图）</p><h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3><p><strong>状态图</strong>是对类所描述事物的补充说明，它显示了类的所有对象可能具有的状态，以及引起状态变化的事件 。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/c9ae3d642a4e6802cb9b847cf566c558.png"></p><h3 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h3><p>反映一个连续的活动流，相对于描述活动流（比如，用例或交互）来说，活动图更常用于描述某个操作执行时的活动状况。 活动图由<strong>各种动作状态</strong>组成。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/fe52dbd17de15dc045d05adf35bfbd22.png"></p><h3 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h3><p>用来反映若干个对象之间的<strong>动态协作关系</strong>，也就是随着时间的流逝，对象之间是如何交互的 。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/9d55900a9703dde9a8a755031c542a2e.png"></p><h3 id="协作图-1"><a href="#协作图-1" class="headerlink" title="协作图"></a>协作图</h3><p>除了显示消息变化（称为交互）外，协作图还显示了对象和它们之间的关系（称为上下文有关） 。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/c3a8487e301e697c0d06f23dee647d9f.png"></p><h2 id="分组事物"><a href="#分组事物" class="headerlink" title="分组事物"></a>分组事物</h2><ul><li>分组事物是UML模型中负责分组的部分，可以把它看作一个一个的盒子，每个盒子里面的对象关系相对复杂，而盒子与盒子之间的关系相对简单。最主要的分组事物是包。</li><li>**包(package)**是把元素组织成组的机制。结构事物、行为事物甚至其他的分组事物都可以放进包内。在图形上，包用一个在左上角带有一个小矩形的大矩形表示。   </li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/f86fe16e4a3a2477c7b0df6081495f8e.png"></p><h3 id="包图"><a href="#包图" class="headerlink" title="包图"></a>包图</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/b1196c9f228a79c810bfe2031c122b3e.png"></p><h2 id="注释事物"><a href="#注释事物" class="headerlink" title="注释事物"></a>注释事物</h2><p>注释事物是UML模型的解释部分。这些注释事物用来描述、说明和标注模型的任何元素。有一种主要的注释事物，称为注解(note)。在图形上，注解用一个右上角是折角的矩形表示 。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/a0d0beb3af94fd561779e9ed859f27aa.png"></p><h1 id="UML关系构造块"><a href="#UML关系构造块" class="headerlink" title="UML关系构造块"></a>UML关系构造块</h1><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p>依赖是两个事物间的语义关系，其中一个事物(独立事物)发生变化，会影响到另一个事物(依赖事物)的语义。<br> 表示方法：<strong>虚线加箭头</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/8707c876042d73b9a6805b7ab078d68c.png"></p><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h2><p>关联关系：类与类之间的联结，它使一个类知道另一个类的属性和方法。可以双向，也可以单向。<br>表示方法：双向关联可以<strong>实线加两个箭头或者没箭头，或者单向关联实线加一个箭头</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/1ba55358a9f33fd0d3d4f7c0f0fb7249.png"></p><h2 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h2><p>聚合关系是强的关联关系。是整体和部分的关系。部分可以单独存在<br>表示方法：<strong>空心菱形的实线，箭头指向部分，菱形指向整体</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/9825fed0e7b53bbb8cf371f197a4b1b7.png"></p><h2 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h2><p>组合关系是更强的关联关系。是整合和部分的关系。<strong>部分不能单独存在</strong><br>表示方法：<strong>实心菱形头加实线箭头</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/73ca9880cbe8158071088ef5e7b0f8ee.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/70b269e6911b3d7a59875ada0cc4f682.png"></p><h2 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h2><p>泛化是一种特殊\一般关系，是一般事物(父类)和该事物较为特殊的种类(子类)之间的关系，子类继承父类的属性和操作，除此之外，子类通常还添加新的属性和操作。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/716515ce2ef42c42f0a79bf71019d8e4.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/43475ab40431721714f321b8f18dcc3f.png"></p><h2 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h2><p>一个class类实现interface接口（可以是多个）的功能；实现是类与接口之间最常见的关系<br>表示方法：<strong>空心箭头加虚线</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/e1662e17b063e869f9a72ab3362e1623.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://8cd76980.wiz03.com/wapp/pages/view/share/s/2cRSC023Th7G2ouHSc1X-mcI11LFN60HM4Ot2CUbvE1bu5Yq&quot;&gt;UML知识点&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;UML与</summary>
      
    
    
    
    <category term="UML" scheme="http://example.com/categories/UML/"/>
    
    
    <category term="UML" scheme="http://example.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb网上书城项目</title>
    <link href="http://example.com/2020/12/14/JavaWeb%E7%BD%91%E4%B8%8A%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2020/12/14/JavaWeb%E7%BD%91%E4%B8%8A%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-12-14T13:12:03.263Z</published>
    <updated>2020-12-26T04:03:51.306Z</updated>
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯C语言组</title>
    <link href="http://example.com/2020/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AFC%E8%AF%AD%E8%A8%80%E7%BB%84/"/>
    <id>http://example.com/2020/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AFC%E8%AF%AD%E8%A8%80%E7%BB%84/</id>
    <published>2020-12-14T10:39:21.553Z</published>
    <updated>2020-12-14T12:53:56.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六届蓝桥杯省赛"><a href="#第六届蓝桥杯省赛" class="headerlink" title="第六届蓝桥杯省赛"></a>第六届蓝桥杯省赛</h1><h2 id="C语言A组"><a href="#C语言A组" class="headerlink" title="C语言A组"></a>C语言A组</h2><h3 id="方程整数解"><a href="#方程整数解" class="headerlink" title="方程整数解"></a>方程整数解</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/14/fbd570020853b16b486e8726e4060b39.png"><br>方程: a^2 + b^2 + c^2 = 1000<br>（或参见【图1.jpg】）<br>这个方程有整数解吗？有：a,b,c=6,8,30 就是一组解。<br>你能算出另一组合适的解吗？</p><p><strong>请填写该解中最小的数字。</strong></p><p>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************</span></span><br><span class="line"><span class="comment">解题思路：</span></span><br><span class="line"><span class="comment">a,b,c为三个整数，整数分正整数、负整数与零。</span></span><br><span class="line"><span class="comment">a,b,c的范围:31*31=961     32*32=1024(最大1000)</span></span><br><span class="line"><span class="comment">所以a,b,c取值范围为&#123;-31&lt;=a&lt;=31,-31&lt;=b&lt;=31,-31&lt;=c&lt;=31 | a,b,c∈Z&#125;</span></span><br><span class="line"><span class="comment">a,b,c全排列，输出符号条件的abc值</span></span><br><span class="line"><span class="comment">*******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(a=<span class="number">-31</span>;a&lt;<span class="number">32</span>;a++)</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">-31</span>;b&lt;<span class="number">32</span>;b++)</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">-31</span>;c&lt;<span class="number">32</span>;c++)</span><br><span class="line"><span class="keyword">if</span>(a*a+b*b+c*c==<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,c=%d\n&quot;</span>,a,b,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 -30 </span></span><br></pre></td></tr></table></figure><h3 id="星系炸弹"><a href="#星系炸弹" class="headerlink" title="星系炸弹"></a>星系炸弹</h3><p>在X星系的广袤空间中漂浮着许多X星人造“炸弹”，用来作为宇宙中的路标。<br>每个炸弹都可以设定多少天之后爆炸。<br>比如：阿尔法炸弹2015年1月1日放置，定时为15天，则它在2015年1月16日爆炸。<br>有一个贝塔炸弹，2014年11月9日放置，定时为1000天，请你计算它爆炸的准确日期。</p><p>请填写该日期，格式为 yyyy-mm-dd  即4位年份2位月份2位日期。比如：2015-02-19<br>请严格按照格式书写。不能出现其它文字或符号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本题用 Excel 或者用程序计算都可以 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这里需要注意的就是闰年和非闰年以及大月小月和 2 月, 闰年的 2 月有 29 天, 非闰年的 2 月有 28 天, 因此, 闰年有 366 天, 非闰年有 365 天.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">上半年是单月大，下半年是双月大。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(以除大拇指的突起算，从左手到右手，除2月(闰平年有28天，闰年有29天),其余大月31，小月30)</span></span><br><span class="line"><span class="comment">1月大、2月平、3月大、4月小、5月大、6月小、7月大、8月大、9月小、10月大、11月小、12月大。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">判断闰年的方法: (Y%400==0)||(Y%4==0&amp;&amp;Y%100!=0) 能被400整除或者能被4整除，不能被100整除 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">另外, 根据示例, 放置炸弹的那天按第 0 天计算.</span></span><br><span class="line"><span class="comment">2014年11月9日放置，定时为1000天</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">1000</span>;</span><br><span class="line"><span class="comment">//存放12月的日数 </span></span><br><span class="line"><span class="keyword">int</span> Mdays[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y=<span class="number">2014</span>;</span><br><span class="line"><span class="keyword">int</span> M=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> D=<span class="number">9</span>;</span><br><span class="line"><span class="comment">//2014年11月09日距离爆炸有1000天，在此循环1000次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sum;i++)</span><br><span class="line">&#123;</span><br><span class="line">D++; <span class="comment">//每循环一次日数+1</span></span><br><span class="line"><span class="keyword">if</span>(D&gt;Mdays[M<span class="number">-1</span>])&#123;  <span class="comment">//如果日数大于11月的日数，则日数重置为1,月数加1 </span></span><br><span class="line">D=<span class="number">1</span>;   <span class="comment">//日数重置 </span></span><br><span class="line">M++;   <span class="comment">//月数加1 </span></span><br><span class="line"><span class="keyword">if</span>(M&gt;<span class="number">12</span>)  <span class="comment">//如果月数大于12,则月数重置为1,年数加1 </span></span><br><span class="line">&#123;</span><br><span class="line">M=<span class="number">1</span>;  <span class="comment">//月数重置 </span></span><br><span class="line">Y++;  <span class="comment">//年数加1 </span></span><br><span class="line"><span class="comment">//新开始一年后，对是否是闰年进行判断</span></span><br><span class="line"><span class="keyword">if</span>((Y%<span class="number">400</span>==<span class="number">0</span>)||(Y%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;Y%<span class="number">100</span>!=<span class="number">0</span>))&#123;</span><br><span class="line">Mdays[<span class="number">1</span>]=<span class="number">29</span>;  <span class="comment">//闰年2月29天 </span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">Mdays[<span class="number">1</span>]=<span class="number">28</span>;  <span class="comment">//平年2月28天 </span></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>,Y,M,D);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 2017-8-5</span></span><br></pre></td></tr></table></figure><h3 id="奇妙的数字"><a href="#奇妙的数字" class="headerlink" title="奇妙的数字"></a>奇妙的数字</h3><p>小明发现了一个奇妙的数字。它的平方和立方正好把0~9的10个数字每个用且只用了一次。<br>你能猜出这个数字是多少吗？</p><p>请填写该数字，不要填写任何多余的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">平方和立方正好把0~9的10个数字每个用且只用了一次</span></span><br><span class="line"><span class="comment">1.定义变量x2,表示数字的平方,x3表示数字的立方</span></span><br><span class="line"><span class="comment">2.定义数组test[10],代表(0~9)10个数出现的次数</span></span><br><span class="line"><span class="comment">然后取出x2和x3的每一位</span></span><br><span class="line"><span class="comment">用数组的10个元素来标识各个数出现的次数,</span></span><br><span class="line"><span class="comment">每出现一次加1，最后再判断数组a的10个元素是不是1.</span></span><br><span class="line"><span class="comment">如果为1，则说明满足要求 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt; </span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1001</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> test[<span class="number">10</span>];  </span><br><span class="line">    <span class="built_in">memset</span>(test,<span class="number">0</span>,<span class="keyword">sizeof</span>(test));  </span><br><span class="line">    <span class="keyword">while</span>(a)  </span><br><span class="line">    &#123;  </span><br><span class="line">        test[a%<span class="number">10</span>]++;  </span><br><span class="line">        a/=<span class="number">10</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(b)  </span><br><span class="line">    &#123;  </span><br><span class="line">        test[b%<span class="number">10</span>]++;  </span><br><span class="line">        b/=<span class="number">10</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(test[i] != <span class="number">1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            flag = <span class="literal">false</span>;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> flag;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>   </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">int</span> x2,x3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> x2 = i*i;  </span><br><span class="line">        <span class="keyword">int</span> x3 = i*i*i;  </span><br><span class="line">        <span class="keyword">if</span>(solve(x2,x3))  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 69</span></span><br></pre></td></tr></table></figure><h3 id="格子中输出"><a href="#格子中输出" class="headerlink" title="格子中输出"></a>格子中输出</h3><p>StringInGrid函数会在一个指定大小的格子中打印指定的字符串。<br>要求字符串在水平、垂直两个方向上都居中。<br>如果字符串太长，就截断。<br>如果不能恰好居中，可以稍稍偏左或者偏上一点。</p><pre><code>    答案：width-2-strlen(s))/2,&quot; “,s,(width-strlen(s)-1)/2,” &quot;</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringInGrid</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buf, s);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(s)&gt;width<span class="number">-2</span>) buf[width<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;(height<span class="number">-1</span>)/<span class="number">2</span>;k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**%s的含义：printf(&quot;%s&quot;,10,s);</span></span><br><span class="line"><span class="comment">意思是输出字符串s，但至少占10个位置，不足的在字符串s左边补空格，这里等同于printf(&quot;%10s&quot;,s);</span></span><br><span class="line"><span class="comment">**关键之处是 %*s%s%s . 根据上面的分析我们知道, 其中间的 %s 是用来打印字符串的, 两边的 %s 是用来打印空格的. 由于需要对齐, </span></span><br><span class="line"><span class="comment">所以需要知道每行的总长度和字符串的长度才可以计算出要打印的空格的个数.</span></span><br><span class="line"><span class="comment">右边空格数5个：(width-strlen(s)-2)/2 </span></span><br><span class="line"><span class="comment">左边空格数5个： (width-strlen(s)-1)/2</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面“,”后面为所填内容 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*s%s%*s&quot;</span>,(width-<span class="built_in">strlen</span>(s)<span class="number">-2</span>)/<span class="number">2</span>,<span class="string">&quot;&quot;</span>,s,(width-<span class="built_in">strlen</span>(s)<span class="number">-2</span>)/<span class="number">2</span>,<span class="string">&quot;&quot;</span>);  <span class="comment">//填空</span></span><br><span class="line">          </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=(height<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; k&lt;height<span class="number">-1</span>; k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringInGrid(<span class="number">20</span>,<span class="number">6</span>,<span class="string">&quot;abcd1234&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+------------------+</span></span><br><span class="line"><span class="comment">|                  |</span></span><br><span class="line"><span class="comment">|     abcd1234     |</span></span><br><span class="line"><span class="comment">|                  |</span></span><br><span class="line"><span class="comment">|                  |</span></span><br><span class="line"><span class="comment">+------------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="九数组分数"><a href="#九数组分数" class="headerlink" title="九数组分数"></a>九数组分数</h3><p>1,2,3…9 这九个数字组成一个分数，其值恰好为1/3，如何组法？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = x[<span class="number">0</span>]*<span class="number">1000</span> + x[<span class="number">1</span>]*<span class="number">100</span> + x[<span class="number">2</span>]*<span class="number">10</span> + x[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> b = x[<span class="number">4</span>]*<span class="number">10000</span> + x[<span class="number">5</span>]*<span class="number">1000</span> + x[<span class="number">6</span>]*<span class="number">100</span> + x[<span class="number">7</span>]*<span class="number">10</span> + x[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a*<span class="number">3</span>==b) <span class="built_in">printf</span>(<span class="string">&quot;%d / %d\n&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=<span class="number">9</span>)&#123;</span><br><span class="line">test(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=k; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">&#123;t=x[k]; x[k]=x[i]; x[i]=t;&#125;</span><br><span class="line">f(x,k+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//划线部分应将x[k]和x[i]的值再交换回来， </span></span><br><span class="line">t=x[k]; x[k]=x[i]; x[i]=t; <span class="comment">// 填空处</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">f(x,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5832 / 17496</span></span><br><span class="line"><span class="comment">5823 / 17469</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="牌型种数"><a href="#牌型种数" class="headerlink" title="牌型种数"></a>牌型种数</h3><p>小明被劫持到X赌城，被迫与其他3人玩牌。<br>一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。<br>这时，小明脑子里突然冒出一个问题：<br>如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">递归函数要包含递归主题，递归出口（判断递归结束的条件）。</span></span><br><span class="line"><span class="comment">递归思想：由于不论顺序，所以假定从A开始选择个数（0~4）直到 K(13)。</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;   <span class="comment">//we表示种类数 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//n表示每次选择的dian点的牌的数量</span></span><br><span class="line"><span class="comment">//dian表示牌的点数</span></span><br><span class="line"><span class="comment">//sum为13，即牌每个人发13张  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> dian,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">sum+=n;</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dian==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">my(i,dian+<span class="number">1</span>,sum); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//牌数=13 </span></span><br><span class="line"><span class="keyword">int</span> dian=<span class="number">0</span>;<span class="comment">//点数&lt;=13 </span></span><br><span class="line">my(<span class="number">0</span>,dian,sum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//3598180</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第六届蓝桥杯省赛&quot;&gt;&lt;a href=&quot;#第六届蓝桥杯省赛&quot; class=&quot;headerlink&quot; title=&quot;第六届蓝桥杯省赛&quot;&gt;&lt;/a&gt;第六届蓝桥杯省赛&lt;/h1&gt;&lt;h2 id=&quot;C语言A组&quot;&gt;&lt;a href=&quot;#C语言A组&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="C" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>谈谈IOS和Android</title>
    <link href="http://example.com/2020/12/12/%E8%B0%88%E8%B0%88IOS%E5%92%8CAndroid/"/>
    <id>http://example.com/2020/12/12/%E8%B0%88%E8%B0%88IOS%E5%92%8CAndroid/</id>
    <published>2020-12-12T10:09:38.285Z</published>
    <updated>2020-12-12T11:18:30.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>Android （美国谷歌公司开发的移动操作系统）</p><ul><li>安卓是一种基于<code>Linux内核</code>（不包含GNU组件）的自由及开放源代码的操作系统。主要使用于移动设备，如智能手机和平板电脑，由美国Google公司和开放手机联盟领导及开发。</li><li>Android操作系统最初由Andy Rubin开发，主要支持手机。2005年8月由Google收购注资。2007年11月，Google与84家硬件制造商、软件开发商及电信营运商组建开放手机联盟共同研发改良Android系统。随后Google以Apache开源许可证的授权方式，发布了Android的源代码。</li><li>第一部Android智能手机发布于2008年10月。Android逐渐扩展到平板电脑及其他领域上，如电视、数码相机、游戏机、智能手表等。2011年第一季度，Android在全球的市场份额首次超过塞班系统，跃居全球第一。 2013年的第四季度，Android平台手机的全球市场份额已经达到78.1%。2013年09月24日谷歌开发的操作系统Android在迎来了5岁生日，全世界采用这款系统的设备数量已经达到10亿台。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/a7eff2fee1da45a99414127adaf9170d.png"></li><li>Android一词的本义指“机器人”，同时也是Google于2007年11月5日宣布的基于Linux平台的开源手机操作系统的名称，该平台由操作系统、中间件、用户界面和应用软件组成。</li><li>Android一词最早出现于法国作家利尔亚当（Auguste Villiers de l’Isle-Adam）在1886年发表的科幻小说《未来夏娃》（L’ève future）中。他将外表像人的机器起名为Android。</li><li>Android的Logo是由Ascender公司设计的，诞生于2010年，其设计灵感源于男女厕所门上的图形符号，于是布洛克绘制了一个简单的机器人，它的躯干就像锡罐的形状，头上还有两根天线，Android小机器人便诞生了。其中的文字使用了Ascender公司专门制作的称之为“Droid ” 的字体。Android是一个全身绿色的机器人，绿色也是Android的标志。颜色采用了PMS 376C和RGB中十六进制的#A4C639来绘制，这是Android操作系统的品牌象征。有时候，它们还会使用纯文字的Logo。</li><li>编程语言:C/C++(底层),Java,Kotlin等(应用层)。</li></ul><h1 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h1><p>IOS(Input Output System)，即输入输出系统，是由苹果公司开发的移动操作系统。</p><ul><li>苹果公司最早于2007年1月9日的Macworld大会上公布这个系统，最初是设计给iPhone使用的，后来陆续套用到iPod touch、iPad上。iOS与苹果的MacOS操作系统一样，属于类Unix的商业操作系统。原本这个系统名为iPhone OS，因为iPad，iPhone，iPod touch都使用iPhone OS，所以2010年WWDC大会上宣布改名为iOS（iOS为美国Cisco公司网络设备操作系统注册商标，苹果改名已获得Cisco公司授权）。</li><li>2016年1月，随着iOS 9.2.1版本的发布，苹果修复了一个存在了3年的漏洞。 [2]  2018年9月22日，美国苹果公司在最新的操作系统中秘密加入了基于iPhone用户和该公司其他设备使用者的“信任评级”功能。、</li><li>软件语言:<a href="https://baike.baidu.com/item/Swift/14080957">Swift</a>,<a href="https://baike.baidu.com/item/Objective-C/8374012">Objective-C</a>,<a href="https://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80/105958?fromtitle=c&fromid=7252092">C</a>,<a href="https://baike.baidu.com/item/C%2B%2B/99272">C++</a>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/64fe3ed21c4b81d505ab9f284970e7de.png"></li></ul><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul><li><p>应用的设备不同<br>IOS和安卓最大的区别在于本身所应用的设备不同。ios系统主要是应用在iPhone、IPad、itouch设备上的操作系统，安卓系统主要是应用在安卓智能手机上的操作系统。</p></li><li><p>开源与封闭<br>英特尔前CEO安迪·格鲁夫曾提到过一个理论“ <code>硬件性能随着摩尔定律飞速提升，软件总有办法尽量榨干硬件提升带来的性能。</code>” 这便是著名的安迪比尔定理。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/1df02760dd4d1f9d77e58de3167a9df9.png"><br>随着软件的飞速发展，老旧的硬件必定满足不了当前软件巨大的内存运行需求，自然会影响使用流畅度。<br>而系统的开放性主要体现在两个方面：<code>源代码</code>和<code>应用接口</code>。Android系统基于Linux开发，跟 Linux一脉相承，开放性极强。安卓拥有自己的开源<code>AOSP</code>(Android Open Source Project)，只要遵循<code>GPL</code>和<code>Apache Licence 2.0</code>开源协议，那么你就可以使用安卓源代码进行二次开发。而安卓由于源代码开放，自然可玩性也比iOS高,但这时的应用开发者有更多的权限去开发自己的App，给App增添更多功能，这无形中加重了手机硬件的运行负担，使得手机使用寿命大大缩短。<br>此外，安卓比iOS开放了更多的<code>应用接口API</code>，我们可以很自然地利用安卓实现很多在iOS上不折腾就没法做的功能。在安卓，你可以随心随意地更换输入法，随意用任何浏览器打开链接，随意从任何途经安装程序，随意调用第三方程序分享文件——这些在iOS上不越狱都做不到，即使越狱也未必比安卓做得更好。<br>而IOS系统最大的一个特点就是<code>沙盒机制</code>，<code>封闭性比较强</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/59f65d945b8e9f79e55eeed9a258da79.png"></p></li><li><p>系统安全性区别<br>IOS系统是一款比较强大的<code>操作系统</code>，在ios系统运行的程序不管程序多大都不会造成死机，玩起来非常的流程，而且系统的安全性比较高。<br>安卓系统是属于<code>代码系统</code>，如果所有的应用程序需要下载下来之后才能玩，系统用久之后会经常出现卡机或者是死机的现象，而且安卓系统还存在恶意的插件在系统上自动运行，系统漏洞多，导致个人资料被盗、系统耗电大，流量消耗大等，系统安全性相对来说比较低。</p></li></ul><h1 id="IOS系统流畅的真正原因"><a href="#IOS系统流畅的真正原因" class="headerlink" title="IOS系统流畅的真正原因"></a>IOS系统流畅的真正原因</h1><ul><li><p><strong>优先级别不同</strong><br>IOS对屏幕反应的优先级是最高的，它的响应顺序依次为<code>Touch--Media--Service--Core</code>架构，换句话说当用户只要触摸接触了屏幕之后，系统就会最优先去处理屏幕显示（Touch这个层级）然后才是媒体（Media），服务（Service）以及Core架构。；<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/bff085ae73ae81601e25138687131cfa.png"><br>而Android系统的优先级响应层级则是<code>Application--Framework--Library--Kernal</code>架构，和显示相关的图形图像处理这一部分属于Library，可以看到到第三位才是它，当触摸屏幕之后Android系统首先会激活应用，框架然后才是屏幕最后是核心架构。</p></li><li><p><strong>硬件工作配置不同：iOS基于GPU加速</strong><br>在处理器等配置到到了同等级的情况下，GPU就成为了一个凸显差异的重要因素。一些大型软件像是3D游戏对GPU性能要求都会比较高，而iOS系统对图形的各种特效处理基本上正好都是<code>基于GPU硬件</code>进行加速的，它可以不用完全借助CPU或者程序本身，而是通过GPU进行渲染以达到更流畅的操控表现。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/8f4db78aaa7626ea7a9e5acb9b088341.png"><br>而Android系统产品则并非如此，因为Android需要适应不同的手机硬件，需要满足各种差异配置，所以很多图形特效大多都要靠程序本身进行加速和渲染，并严重依赖CPU运算的操作自然会加大处理器的负荷，从而出现卡顿的问题。</p></li><li><p><strong>开发机制不同：安卓机制效率低</strong><br>Android的编程语言是<code>JAVA</code>，而iOS的则为<code>Objective-C</code>，IOS采用的是<code>沙盒运行机制</code>，安卓采用的是<code>Java虚拟机运行机制</code>。Objective-C的优势是<code>效率高</code>但比较“唯一”，而JAVA的优势则是<code>跨平台</code>不过运行效率相对偏低，其实这两个编程语言所带来的机制不同，就已经造成了各自系统之间的流畅性差异化。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/e80710c53aa2a1bdb7a5d43bed46a91e.png"><br>iOS的Objective-C，编译器gcc，而这个gcc编译出来的代码又被苹果专为iOS架构优化到了极致，运行过程中也不需要虚拟机在中间插手，执行效率自然很高。<br>Android是通过JAVA虚拟机来执行，并且系统需要占用大量内存来换取执行速度，再加上不定期的内存自动回收机制，从而直接导致了卡顿现象的出现。</p></li><li><p><strong>后台管理方式不同</strong><br>苹果是假后台，即<code>墓碑机制</code>，当你回到主界面的时候之前的软件就相当于暂停使用，不再消耗RAM（利用远程通知机制，如果你没启动qq，有朋友给你发消息的话，腾讯服务器会告诉<code>苹果服务器</code>，苹果服务器给你的手机发通知，不需要你的qq在后台）；<br>而安卓是真后台，即使你退出软件，软件也会在后台自启(比如接收qq信息，qq软件必须在运行状态来接收腾讯服务器传来的消息)，从而继续占用你的RAM，而RAM是有限的，当RAM剩余太少的时候你就会感觉到卡顿。同时，后台的程序运行也会占用CPU资源，使手机处理能力下降，这也是安卓手机需要通过使用更高的配置来提高流畅度的原因。<br><a href="https://zhuanlan.zhihu.com/p/137812632">关于iPhone的后台机制详细讲解，通俗易懂！</a></p></li><li><p><strong>线程不同</strong><br>苹果的单线程比安卓机强，大部分安卓机都是<code>堆核</code>，而苹果是<code>堆料</code>，安卓是<code>小核高频</code>，苹果是<code>大核低频</code>，在一个核上堆20多亿晶体管，堪称堆料狂魔，自然单线程神速，上面也说了，苹果在运行一个应用时，另一个是暂停的，所以神一般的单线程加上大部分情况下只运行一个，当然神速。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android&quot;&gt;&lt;a href=&quot;#Android&quot; class=&quot;headerlink&quot; title=&quot;Android&quot;&gt;&lt;/a&gt;Android&lt;/h1&gt;&lt;p&gt;Android （美国谷歌公司开发的移动操作系统）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安卓是一种基于&lt;cod</summary>
      
    
    
    
    <category term="IOS" scheme="http://example.com/categories/IOS/"/>
    
    
    <category term="IOS" scheme="http://example.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>编译原理</title>
    <link href="http://example.com/2020/12/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/12/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-09T11:44:08.068Z</published>
    <updated>2020-12-09T11:44:49.091Z</updated>
    
    
    
    
    <category term="编译原理" scheme="http://example.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="编译原理" scheme="http://example.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly主题魔改</title>
    <link href="http://example.com/2020/12/02/Butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9/"/>
    <id>http://example.com/2020/12/02/Butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9/</id>
    <published>2020-12-02T09:51:14.762Z</published>
    <updated>2020-12-21T13:06:03.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础美化"><a href="#基础美化" class="headerlink" title="基础美化"></a>基础美化</h1><p>基础美好请仔细查看<a href="https://butterfly.js.org/">Butterfly主题文档</a></p><h1 id="JS-CSS的引入"><a href="#JS-CSS的引入" class="headerlink" title="JS/CSS的引入"></a>JS/CSS的引入</h1><ul><li>JS/CSS一般写在<code>themes\butterfly\source</code>文件夹下对应CSS/JS文件夹里。</li><li>打开主题配置文件(<code>config.yml</code>);</li><li>定位搜索(Ctrl+F)找到<code>inject</code></li><li><code>head</code>引入CSS，<code>bottom</code>引入JS。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">   <span class="attr">head:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/xxx.css&quot;&gt;</span> <span class="comment">#相对路径引入</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;外链&quot;&gt;</span> <span class="comment">#外链方式引入：将文件上传到 cdn，如七牛云、又拍云、GitHub+Jsdeliver 等。</span></span><br><span class="line">   <span class="attr">bottom:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/GitHub用户名/GitHub用户名.github.io/js/background.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;xxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;xxx页面名&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/22b37d2a111a098b4a18becec22d8efb.png"></p><p>图标素材点击<a href="https://fontawesome.com/">Font Awesome</a>，找到对应图标点击找到<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/66c5304d4b7a11c6136927abd66275b6.png"></p><h1 id="图标动画"><a href="#图标动画" class="headerlink" title="图标动画"></a>图标动画</h1><p><a href="https://www.antmoe.com/posts/a811d614/index.html">感谢小康博主</a><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/69d9b869911a6fd7264af2834d2bf927.png"><br>理论上这些动效是可以给任意 DOM 元素添加的。添加方式很简单，引入一个 css 库：<a href="https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@latest/butterfly/css/font-awesome-animation.min.css">https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@latest/butterfly/css/font-awesome-animation.min.css</a></p><p>然后在 DOM 元素的类名添加相应的动画即可。</p><blockquote><p>例如分类可以写为 分类: /categories/ || fas fa-folder-open  <code>faa-wrench animated-hover</code></p></blockquote><h1 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h1><div class="note warning flat"><p>注意：标签外挂是Hexo独有的功能，並不是标签的Markdown格式。<br>以下的写法，只适用于Butterfly主题，用在其它主題上不会有效果，甚至可能会报错。使用前请留意</p></div><p>配置主题文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default flat"><p>default 提示标签符</p></div><div class="note primary flat"><p>primary 提示标签符</p></div><div class="note success flat"><p>success 提示标签符</p></div><div class="note info flat"><p>info 提示标签符</p></div><div class="note warning flat"><p>warning 提示标签符</p></div><div class="note danger flat"><p>danger 提示标签符</p></div><h1 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h1><p>找到主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="comment">#全局字体大小</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="comment">#代码字体大小</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="comment">#全局字体</span></span><br><span class="line">  <span class="attr">code-font-family:</span>  <span class="comment">#代码字体</span></span><br></pre></td></tr></table></figure><p><a href="https://www.zsfmyz.top/demo/font/">字体对照表</a></p><h1 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h1><p>新建\themes\butterfly\source\css\Myidea.css（css文件名称自定义）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置鼠标样式*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="页脚渐变"><a href="#页脚渐变" class="headerlink" title="页脚渐变"></a>页脚渐变</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚footer */</span></span><br><span class="line"><span class="comment">/* 渐变色滚动动画 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, #ee7752, #ce3e75, #<span class="number">23</span>a6d5, #<span class="number">23</span>d5ab);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">-moz-animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">-o-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/272f832b461c620d418265018f4f6d16.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*页脚a标签字体颜色*/</span></span><br><span class="line"><span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h1><p>在<code>C:\blog\lzyblog\source\_posts</code>目录下新建<code>background.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文章透明度"><a href="#文章透明度" class="headerlink" title="文章透明度"></a>文章透明度</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 文章页背景 */</span><br><span class="line"><span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="comment">/* 以下代表白色透明度为0.3*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 所有背景（包括首页卡片、文章页、页面页等） */</span></span><br><span class="line"><span class="selector-id">#aside_content</span> <span class="selector-class">.card-widget</span>, <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>, <span class="selector-class">.layout_page</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:not(.recent-posts)</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#page</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>, <span class="selector-class">.read-mode</span> <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>&#123;</span><br><span class="line">    <span class="comment">/* 以下代表白色透明度为0.3 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="昵称颜色"><a href="#昵称颜色" class="headerlink" title="昵称颜色"></a>昵称颜色</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 博主昵称颜色 */</span></span><br><span class="line"><span class="selector-class">.author-info__name</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7242</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/f60544faff00e4c69603da563eda7c40.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 首页中间打字效果上方 博客昵称颜色*/</span></span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#site_title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#80bdab</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 顶部导航栏 博客昵称颜色*/</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f9f2f4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="评论框"><a href="#评论框" class="headerlink" title="评论框"></a>评论框</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 评论框  */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vwrap</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交按钮 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#vcomment</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e58a8a</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">-o-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">-ms-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 评论区代码块 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v</span><span class="selector-attr">[data-class=v]</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c7254e</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F9F2F4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置评论框 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vcard</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消回复聊天框 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vquote</span> <span class="selector-class">.vcard</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Valine访客标签"><a href="#Valine访客标签" class="headerlink" title="Valine访客标签"></a>Valine访客标签</h1><p><a href="https://akilar.top/posts/d2222705/">感谢Akilar博主</a></p><ol><li>打开<code>[lzyblog]\themes\butterfly\layout\includes\third-party\comments\valine.pug</code>,按指示添加如下字段(<code>去掉+号</code>)。<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">serverURLs: &#x27;#&#123;theme.valine.serverURLs&#125;&#x27;,</span><br><span class="line">      emojiCDN: &#x27;#&#123;theme.valine.emojiCDN&#125;&#x27;,</span><br><span class="line">      emojiMaps: !&#123;emojiMaps&#125;,</span><br><span class="line">      enableQQ: #&#123;theme.valine.enableQQ&#125;,</span><br><span class="line">      path: window.location.pathname,</span><br><span class="line"><span class="addition">+     master: &#x27;#&#123;theme.valine.master&#125;&#x27;.split(&#x27;,&#x27;),</span></span><br><span class="line"><span class="addition">+     friends: &#x27;#&#123;theme.valine.friends&#125;&#x27;.split(&#x27;,&#x27;),</span></span><br><span class="line"><span class="addition">+     tagMeta: &#x27;#&#123;theme.valine.tagMeta || &quot;博主,小伙伴,访客&quot;&#125;&#x27;.split(&#x27;,&#x27;)</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>打开<code>[lzyblog]\_config.butterfly.yml,</code><ul><li>在valine配置项添加如下内容。<br>md5加密可以使用<a href="https://tool.chinaz.com/tools/md5.aspx">在线转码</a>,务必使用<code>32位[小]</code>进行转码。</li></ul></li></ol><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> valine:</span><br><span class="line">       appId:  # leancloud application app id</span><br><span class="line">       appKey:  # leancloud application app key</span><br><span class="line">       ........#去掉+号</span><br><span class="line"><span class="addition">+     master: # md5加密后的博主邮箱</span></span><br><span class="line"><span class="addition">+       - d4e7????4d361ad7????44a14e9e2a94  #可添加多个</span></span><br><span class="line"><span class="addition">+     friends: # md5加密后的小伙伴邮箱</span></span><br><span class="line"><span class="addition">+       - 5c?????bfe6rfc72a????e268ad3819c #可添加多个</span></span><br><span class="line"><span class="addition">+       - 7c?????bfe65fc02a????e2????3919c</span></span><br><span class="line"><span class="addition">+     tagMeta: &#x27;博主,小伙伴,访客&#x27; # 标签要显示的文字,默认&#x27;博主,小伙伴,访客&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>在CDN配置项添加如下内容。将Valine.min.js替换成HCLonely魔改的版本(+号替换-号）。</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-valine: https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js</span></span><br><span class="line"><span class="addition">+valine: https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure><h1 id="a标签颜色"><a href="#a标签颜色" class="headerlink" title="a标签颜色"></a>a标签颜色</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a标签默认颜色 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停时的颜色 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e58a8a</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*a标签颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://tools.jb51.net/static/colorpicker/">在线颜色选择器 | RGB颜色查询对照表</a></p><h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p><code>C:\lzyblog\source\link\index.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2020-06-03 17:53:02</span><br><span class="line">type: link</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>C:\lzyblog\source\ </code>目录下新建<code>_data </code>文件夹，文件夹内新建 <code>link.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="attr">1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lzyblog</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://lzyblog.github.io/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/19/1f52735f41052a8a163fbef9101b879e.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">越努力越幸运</span></span><br><span class="line">    <span class="attr">2:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.xxxxxx.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://xxxxx/favicon.ico</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">Test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">class2:</span></span><br><span class="line">   <span class="attr">class_name:</span> <span class="string">链接无效</span></span><br><span class="line">   <span class="attr">link_list:</span></span><br><span class="line">     <span class="attr">1:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">       <span class="attr">link:</span> <span class="string">https://lzyblog.github.io/</span></span><br><span class="line">       <span class="attr">avatar:</span> </span><br><span class="line">       <span class="attr">descr:</span> <span class="string">Test</span></span><br><span class="line">     <span class="attr">2:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">       <span class="attr">link:</span> <span class="string">https://lzyblog.github.io/</span></span><br><span class="line">       <span class="attr">avatar:</span> </span><br><span class="line">       <span class="attr">descr:</span> <span class="string">Test</span></span><br></pre></td></tr></table></figure><h1 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h1><p>找到主题配置文件里<code>theme_color</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span> <span class="comment">#(自定义主题色)</span></span><br><span class="line">   <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span> <span class="comment">#文章颜色</span></span><br><span class="line">   <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span> <span class="comment">#分页器颜色</span></span><br><span class="line">   <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span> <span class="comment"># 鼠标移动到按钮上的显示的颜色</span></span><br><span class="line">   <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span> <span class="comment">#选择文字的背景颜色</span></span><br><span class="line">   <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span> <span class="comment">#链接颜色</span></span><br><span class="line">   <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">   <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span> <span class="comment"># 小剪刀颜色、小摩托颜色</span></span><br><span class="line">   <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span> <span class="comment"># 代码`code`的颜色</span></span><br><span class="line">   <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span> <span class="comment"># 代码`code`的背景颜色</span></span><br><span class="line">   <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">   <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span> <span class="comment"># &gt;  &gt;&gt; &gt;&gt;&gt; 描述颜色</span></span><br><span class="line">   <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br></pre></td></tr></table></figure><h1 id="公告栏装饰"><a href="#公告栏装饰" class="headerlink" title="公告栏装饰"></a>公告栏装饰</h1><p>在 C:\lzyblog\themes\Butterfly_config.yml 里找到 <code>card_announcement: </code>下的 <code>content: </code>后面添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span> <span class="comment">#公告栏</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">城市的轮廓，你的孤独&lt;img</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/19/33a1542ce0a798e62e404f0bd948149f.png&quot;&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h1><p><a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a><br>PicGo,Typora下载<br><a href="https://www.lanzous.com/b00zdvy5e">点击下载—密码:6kjr</a></p><h1 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h1><p>非常感谢博主<a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a>提供的方法<br><a href="https://github.com/coneycode/hexo-git-backup">GitHub项目地址</a><br><a href="https://github.com/coneycode/hexo-git-backup/blob/master/README.md">官方文档</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在博客文件里右击-&gt;Git Bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-git-backup --save </span><br></pre></td></tr></table></figure><ul><li>在GuiHub中新建仓库,例如Hexo_Backup，权限为private，分支为master</li><li>复制所建库的SSH</li><li>在Hexo配置文件中添加</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line">       <span class="attr">backup:</span> <span class="string">git@github.com:xingjiahui/Hexo-Backup.git,master(分支名,新库为main)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b(back)</span><br></pre></td></tr></table></figure><blockquote><p>每次更新博客后，都需要<code>hexo b</code></p></blockquote><p>备份的用处:</p><ul><li>当hexo g 报错没有头绪时，可以使用备份文件</li><li>当本地文件丢失时，可以使用备份文件</li><li>使用前提，配好环境(已下载<code>Node.js和Git</code>)</li></ul><h1 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h1><p><a href="https://blog.lete114.top/article/eef7397d.html#%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9">Lete搜索配置</a><br>主题配置文件中找到local_search</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><p><code>安装插件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><blockquote><p>当文章过多 search.xml 文件大小会越来越大，会拖慢博客的加载速度<br>找到主题文件\source\js\local-search.js<br>修改<code> url: GLOBAL_CONFIG.root + path,</code> 为 url: “<a href="https://cdn.jsdelivr.net/gh/%60%E4%BD%A0GitHub%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0GitHub%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%60.github.io/search.xml&quot;">https://cdn.jsdelivr.net/gh/`你GitHub的用户名/你GitHub的用户名`.github.io/search.xml&quot;</a>,</p></blockquote><h1 id="valine评论系统"><a href="#valine评论系统" class="headerlink" title="valine评论系统"></a>valine评论系统</h1><p><a href="https://lete114.now.sh/article/Valine-LeanCloud-Config.html#%E5%89%8D%E8%A8%80">Lete保姆级valine教程</a><br><a href="https://www.leancloud.cn/">leancloud管理评论</a><br><a href="https://valine.js.org/">Valine文档</a><br>进入leancloud网站注册，并创建应用，找到应用key<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@1086c981d4982e49807f906e95be603883cef644/2020/11/17/d6a49b1aa90d7450e26c5f426ec117c4.png" width="500px" height="300px"><br>复制<code>AppID</code>和<code>AppKey</code>,找到Hexo配置文件中valine配置即可</p><h2 id="自定义表情（基于valine）"><a href="#自定义表情（基于valine）" class="headerlink" title="自定义表情（基于valine）"></a>自定义表情（基于valine）</h2><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">Butterfly官方文档</a></p><blockquote><p>在博客文件名`source<code>\目录下创建_data文件夹,</code>_data<code>文件夹里面创建</code>valine.json`文件，输入以下格式</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;QQ1&quot;</span>: <span class="string">&quot;QQ/aini.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ2&quot;</span>: <span class="string">&quot;QQ/aixin.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ3&quot;</span>: <span class="string">&quot;QQ/aoman.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ4&quot;</span>: <span class="string">&quot;QQ/baiyan.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ5&quot;</span>: <span class="string">&quot;QQ/bangbangtang.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ6&quot;</span>: <span class="string">&quot;QQ/baojin.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ7&quot;</span>: <span class="string">&quot;QQ/baoquan.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ8&quot;</span>: <span class="string">&quot;QQ/bishi.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ9&quot;</span>: <span class="string">&quot;QQ/bizui.gif&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后在Hexo主文件下_config.yml里面找到<code>valine</code>下<code>emojiCDN:</code> <a href="https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/(%E5%A1%AB%E5%85%A5%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BB%99%E7%9A%84%E5%9C%B0%E5%9D%80)">https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/(填入官方文档给的地址)</a></p></blockquote><p>寻找表情去前往<a href="https://github.com/GamerNoTitle/Valine-Magic">表情开源仓库</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">54O2OYplcci4GjXUK0GjalFz-gzGzoHsz</span> <span class="comment"># leancloud application app id</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">sB0Y5Ydm1XnlyKUY5uR3RxsW</span> <span class="comment"># leancloud application app key</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span> <span class="comment"># i18n: zh-CN/zh-TW/en/ja</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">请留下你的足迹（昵称栏输入QQ后按下Tab键，可以自动获取昵称和邮箱）</span> <span class="comment"># valine comment input placeholder (like: Please leave your footprints)</span></span><br><span class="line">  <span class="attr">nick:</span> <span class="string">昵称/QQ号(必填)</span></span><br><span class="line">  <span class="attr">mail:</span> <span class="string">邮箱(必填)</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># valine comment header info (nick/mail/link)</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Record reviewer IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line">  <span class="attr">bg:</span> <span class="comment"># valine background</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">emojiCDN:</span> <span class="string">https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">true</span> <span class="comment"># enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line">  <span class="attr">requiredFields:</span> <span class="string">nick,mail</span> <span class="comment"># required fields (nick/mail)</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><h1 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h1><p>1.悬浮音乐播放器<br><a href="https://github.com/MoePlayer/hexo-tag-aplayer">GitHub项目地址</a><br><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">官方文档</a><br>感谢：<a href="https://plushine.cn/52527.html#%E5%89%8D%E8%A8%80">XJHui’s Blog</a></p><p>2.创建音乐页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer(安装插件)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">插件文档</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aplayer: true（在Font-Matter中）</span><br><span class="line">&#123;% meting &quot;2751269737&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br><span class="line">参数介绍：</span><br><span class="line"><span class="code">    &quot;narrow&quot;: false,// （可选）播放器袖珍风格</span></span><br><span class="line"><span class="code">    &quot;autoplay&quot;: true,// （可选) 自动播放，移动端浏览器暂时不支持此功能</span></span><br><span class="line"><span class="code">    &quot;mode&quot;: &quot;random&quot;,// （可选）曲目循环类型，有 &#x27;random&#x27;（随机播放）, &#x27;single&#x27; (单曲播放), &#x27;circulation&#x27; (循环播放), &#x27;order&#x27; (列表播放)， 默认：&#x27;circulation&#x27;</span></span><br><span class="line"><span class="code">    &quot;showlrc&quot;: 3,// （可选）歌词显示配置项，可选项有：1,2,3</span></span><br><span class="line"><span class="code">    &quot;mutex&quot;: true,// （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span></span><br><span class="line"><span class="code">    &quot;theme&quot;: &quot;#e6d0b2&quot;,// （可选）播放器风格色彩设置，默认：#b7daff</span></span><br><span class="line"><span class="code">    &quot;preload&quot;: &quot;metadata&quot;,// （可选）音乐文件预载入模式，可选项： &#x27;none&#x27; &#x27;metadata&#x27; &#x27;auto&#x27;, 默认: &#x27;auto&#x27;</span></span><br><span class="line"><span class="code">    &quot;listmaxheight&quot;: &quot;513px&quot;,// (可选) 该播放列表的最大长度</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 音乐</span><br><span class="line">date: 2020-11-19 18:02:36</span><br><span class="line">aplayer: true</span><br><span class="line">---</span><br><span class="line"><span class="section"># 吉他指弹音乐歌单</span></span><br><span class="line">&#123;% meting &quot;5345536427&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/5601fa22acbc611a681a7980f3ad0c25.png"></p><h1 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h1><p><a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2">阿里云iconfont</a><br>找到喜欢的图标，添加入库：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/d33765ab9b09455c6b8d641e3a134212.png"><br>打开购物车，点击添加至项目。<br>然后复制代码，浏览器打开，复制到一个新建CSS文件里。<br>打开代码可以看到如下CSS样式：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/4939d458354cd2338ae01a3e14cb4dd4.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/846b77ff8ea72734aeba60e48dc91cc2.png"><br>把以上新建的CSS文件存到<code>\themes\Butterfly\source\css</code>目录下。<br>在博客配置文件下引入CSS。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/610ee90c11ff51aa1988b668a59dd959.png"><br>按格式使用<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/fb3f6c235a83610b301c7ed7994db7d2.png"><br>修改图标大小和颜色：在<code>\themes\Butterfly\source\css</code>目录下创建一个<code>Icon_size.css</code>文件(自定义名称),然后同样引入博客<code>配置文件head</code>下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*.icon-bilibili:before &#123;</span></span><br><span class="line"><span class="comment">  content: &quot;\e600&quot;;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">/* 卡片处小图标 */</span></span><br><span class="line"><span class="selector-class">.card_icon_bilibili</span> &#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF69B4</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_git</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6495ED</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_qq</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#FF8C00</span> ;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_csdn</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_zhihu</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00BFFF</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加2D人物模型"><a href="#添加2D人物模型" class="headerlink" title="添加2D人物模型"></a>添加2D人物模型</h1><p>在博客文件夹下右击,Git Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-hijiki(模型名)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">模型名及样式</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在根目录配置文件中添加如下代码：</span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  <span class="built_in">log</span>: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki(模型名)</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure><h1 id="博客运行时间"><a href="#博客运行时间" class="headerlink" title="博客运行时间"></a>博客运行时间</h1><p>来源：<a href="https://blog.hclonely.com/posts/57bd67ce/">HCLonely Blog</a></p><blockquote><p>在博客根目录/themes/Butterfly/layout/includes/<code>footer.pug</code>文件，在最后span=theme.ICP.text下一行添加以下内容：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#running-time</span><br><span class="line">    script.setInterval(()&#x3D;&gt;&#123;let create_time&#x3D;Math.round(new Date(&#39;2020-01-03 00:00:00&#39;).getTime()&#x2F;1000);let timestamp&#x3D;Math.round((new Date().getTime()+8*60*60*1000)&#x2F;1000);let second&#x3D;timestamp-create_time;let time&#x3D;new Array(0,0,0,0,0);if(second&gt;&#x3D;365*24*3600)&#123;time[0]&#x3D;parseInt(second&#x2F;(365*24*3600));second%&#x3D;365*24*3600;&#125;if(second&gt;&#x3D;24*3600)&#123;time[1]&#x3D;parseInt(second&#x2F;(24*3600));second%&#x3D;24*3600;&#125;if(second&gt;&#x3D;3600)&#123;time[2]&#x3D;parseInt(second&#x2F;3600);second%&#x3D;3600;&#125;if(second&gt;&#x3D;60)&#123;time[3]&#x3D;parseInt(second&#x2F;60);second%&#x3D;60;&#125;if(second&gt;0)&#123;time[4]&#x3D;second;&#125;currentTimeHtml&#x3D;&#39;本站已安全运行 &#39;+time[0]+&#39; 年 &#39;+time[1]+&#39; 天 &#39;+time[2]+&#39; 时 &#39;+time[3]+&#39; 分 &#39;+time[4]+&#39; 秒&#39;;document.getElementById(&quot;running-time&quot;).innerHTML&#x3D;currentTimeHtml;&#125;,1000);</span><br></pre></td></tr></table></figure><blockquote><p>2020-01-03 00:00:00为<code>网站起始时间</code></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础美化&quot;&gt;&lt;a href=&quot;#基础美化&quot; class=&quot;headerlink&quot; title=&quot;基础美化&quot;&gt;&lt;/a&gt;基础美化&lt;/h1&gt;&lt;p&gt;基础美好请仔细查看&lt;a href=&quot;https://butterfly.js.org/&quot;&gt;Butterfly主题文档&lt;/a&gt;</summary>
      
    
    
    
    <category term="Buffterfly" scheme="http://example.com/categories/Buffterfly/"/>
    
    
    <category term="Buffterfly" scheme="http://example.com/tags/Buffterfly/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://example.com/2020/12/02/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2020/12/02/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2020-12-02T05:27:07.497Z</published>
    <updated>2020-12-04T05:08:30.849Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p></li><li><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p></li><li><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p></li><li><p>Markdown 编写的文档后缀为 .md, .markdown。</p></li></ul><p><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown教程</a><br><a href="https://c.runoob.com/front-end/712">Markdown在线编辑器</a><br><a href="https://typora.io/">Typora编辑工具</a><br><a href="https://blog.csdn.net/zzh45828/article/details/105883083?utm_source=app">Typora搭配Markdown</a></p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a><span id="jump">快捷键</span></h2><p><code>非源代码模式</code>下使用：</p><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center">Ctrl + B</td></tr><tr><td align="center">斜体</td><td align="center">Ctrl + I</td></tr><tr><td align="center">引用</td><td align="center">Ctrl + Q</td></tr><tr><td align="center">插入链接</td><td align="center">Ctrl + L</td></tr><tr><td align="center">插入代码</td><td align="center">Ctrl + K</td></tr><tr><td align="center">插入图片</td><td align="center">Ctrl + G</td></tr><tr><td align="center">插入表格</td><td align="center">Ctrl + T</td></tr><tr><td align="center">提升标题</td><td align="center">Ctrl + H</td></tr><tr><td align="center">有序列表</td><td align="center">Ctrl + O</td></tr><tr><td align="center">无序列表</td><td align="center">Ctrl + U</td></tr><tr><td align="center">横线</td><td align="center">Ctrl + R</td></tr><tr><td align="center">撤销</td><td align="center">Ctrl + Z</td></tr><tr><td align="center">重做</td><td align="center">Ctrl + Y</td></tr></tbody></table><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/84a26db56c9c0099690b44375a4e1c00.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文本高亮：==高亮文本==</span><br><span class="line">下标：水 H~2~O(用~中间的字体会标在下方)</span><br><span class="line">上标：面积 m^3^(尖符合中间的字会标记在上方)</span><br></pre></td></tr></table></figure><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<code>段落的换行是使用两个以上空格加上回车</code>。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*我是斜体*</span></span><br><span class="line"><span class="strong">**我是粗体**</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*我是粗斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">~~我是删除线~~</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"></span></span></span></span></span><br></pre></td></tr></table></figure><p><em>我是斜体</em><br><strong>我是粗体</strong><br><strong><em>我是粗斜体</em></strong><br><del>我是删除线</del></p><h2 id="字号、颜色"><a href="#字号、颜色" class="headerlink" title="字号、颜色"></a>字号、颜色</h2><p>通过html标记实现</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">23</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体，颜色#0099ff 字号23<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font color="#0099ff" size="23" face="黑体">我是黑体，颜色#0099ff 字号23</font><br>颜色值可以查看<a href="https://www.sojson.com/web/online.html">调色板</a></p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>markdown不支持空格，需要使用html标记语言<code>&amp;nbsp;</code></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">- - -</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">---------</span></span></span><br></pre></td></tr></table></figure><hr><hr><hr><hr><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文本<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><u>下划线文本</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^要注明的文本</span>]:<span class="link">这是对注明文本的补充说明。</span></span><br></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>（1）无序列表<br>无序列表使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)作为列表标记，这些标记后面要添加<code>一个</code>空格，然后再填写内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>（2）有序列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第一项</span><br><span class="line"><span class="number">2.</span> 第二项</span><br><span class="line"><span class="number">3.</span> 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>（3）列表嵌套<br>列表嵌套只需在子列表中的选项前面添加<code>四个空格</code>即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><p>（1）引用<br>Markdown 区块引用是在段落开头使用 <code>&gt;</code>符号 ，然后后面紧跟一个<code>空格符号</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p></blockquote></blockquote></blockquote></blockquote><p>（2）代码区块<br>1.代码区块使用 4 个空格或者<code>一个制表符（Tab) </code>，要与上面内容隔一个换行符。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a=1;</span><br><span class="line">int b=1;</span><br><span class="line">printf(a+b);</span><br></pre></td></tr></table></figure><pre><code>int a=1;int b=1;printf(a+b);</code></pre><p>2.可以用  ```  包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.单个代码块用单个 ` 包裹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C语言的&#96;scanf()&#96;怎么使用。</span><br></pre></td></tr></table></figure><p>C语言的<code>scanf()</code>怎么使用。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址  &quot;链接标题&quot;</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com/  &quot;百度&quot;</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">链接地址</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">www.baidu.com</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/" title="百度">百度</a><br>或者<br><a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>1.<strong>标题</strong>跳转（只限英文标题）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我向跳转到标题</span>](<span class="link">#要去哪个标题</span>)</span><br></pre></td></tr></table></figure><p><a href="#Typora">我向跳转到Typora</a><br>2.<strong>瞄点</strong>设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标页面设置：<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;jump&quot;</span>&gt;</span></span>快捷键<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">点击页面设置：[<span class="string">点我跳转到快捷键</span>](<span class="link">#jump</span>)</span><br></pre></td></tr></table></figure><p><a href="#jump">点我跳转到快捷键</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line">例如：![<span class="string">RUNOOB 图标</span>](<span class="link">http://static.runoob.com/images/runoob-logo.png</span>)</span><br></pre></td></tr></table></figure><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>可以使用快捷键Ctrl+T（非源代模式）<br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h2><pre><code>-: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h1><p>(1）对于 Markdown 中的语法符号，前面加<code>反斜线\</code>即可显示符号本身。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\\  --- \反斜线</span><br><span class="line">\<span class="emphasis">* ----  *</span>星号</span><br><span class="line">\<span class="emphasis">_----下划线</span></span><br><span class="line"><span class="emphasis">\&#123;\&#125; \[\] \(\) ----  &#123;&#125; [] ()</span></span><br><span class="line"><span class="emphasis">\#  ----  #</span></span><br><span class="line"><span class="emphasis">\+   ---- +</span></span><br><span class="line"><span class="emphasis">\-   -----   -</span></span><br><span class="line"><span class="emphasis">\.  ----- .</span></span><br><span class="line"><span class="emphasis">\!  ---- !</span></span><br></pre></td></tr></table></figure><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><p>可以使用<strong>HTML标记</strong>语言进行一些扩展。</p><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">orange</span>&gt;</span>背景色是：orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table><h2 id="Emoji表情符号"><a href="#Emoji表情符号" class="headerlink" title="Emoji表情符号"></a>Emoji表情符号</h2><p>emoji表情使用:EMOJICODE:的格式，详细列表可见 <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a><br>但是部分平台不支持。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:smile:</span><br><span class="line">:heart<span class="emphasis">_eyes:</span></span><br><span class="line"><span class="emphasis">:yum:</span></span><br><span class="line"><span class="emphasis">:kissing_</span>heart:</span><br></pre></td></tr></table></figure><h2 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h2><p><a href="https://blog.csdn.net/testcs_dn/article/details/44229085">markdown编辑器使用LaTex数学公式</a><br>1.行内公式：使用两个”$”符号引用公式:(与最左边隔开一个空格)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$公式$</span><br><span class="line">$\sqrt&#123;x^&#123;2&#125;&#125;$ </span><br></pre></td></tr></table></figure><p>显示结果:<br> $\sqrt{x^{2}}$ </p><p>2.行间公式：使用两对“$$”符号引用公式<br><a href="https://www.mohu.org/info/symbols/symbols.htm">常用数学符号的 LaTeX 表示方法</a></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>部分平台不支持，属于Typora扩展语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">c&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;c</span><br><span class="line">c(yes)-&gt;e</span><br><span class="line">c(no)-&gt;op1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/9cd7e37d1fd654d36c1832fe87254d28.png"></p><h2 id="Todo列表"><a href="#Todo列表" class="headerlink" title="Todo列表"></a>Todo列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 已处理的事情1</span><br><span class="line"><span class="bullet">-</span> [ ] 已处理的事情2</span><br><span class="line"><span class="bullet">-</span> [x] 未处理的事情1</span><br><span class="line"><span class="bullet">-</span> [x] 未处理的事情2</span><br><span class="line"><span class="bullet">-</span> [x] 未处理的事情3</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> 已处理的事情1</li><li><input disabled type="checkbox"> 已处理的事情2</li><li><input checked disabled type="checkbox"> 未处理的事情1</li><li><input checked disabled type="checkbox"> 未处理的事情2</li><li><input checked disabled type="checkbox"> 未处理的事情3</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Markdo</summary>
      
    
    
    
    <category term="Markdown" scheme="http://example.com/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode每日一道</title>
    <link href="http://example.com/2020/11/24/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93/"/>
    <id>http://example.com/2020/11/24/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93/</id>
    <published>2020-11-24T12:16:51.310Z</published>
    <updated>2020-12-04T04:55:49.145Z</updated>
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="http://example.com/2020/11/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-24T12:16:02.604Z</published>
    <updated>2020-11-29T12:43:12.063Z</updated>
    
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理笔记</title>
    <link href="http://example.com/2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-24T12:14:13.807Z</published>
    <updated>2020-11-29T12:46:53.541Z</updated>
    
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络笔记</title>
    <link href="http://example.com/2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-24T12:13:43.190Z</published>
    <updated>2020-11-29T12:47:43.238Z</updated>
    
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>操作系统笔记</title>
    <link href="http://example.com/2020/11/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-24T12:12:48.878Z</published>
    <updated>2020-12-29T11:05:51.686Z</updated>
    
    <content type="html"><![CDATA[<p><code>感谢!!</code><br><a href="https://blog.csdn.net/gl620321/article/details/107128661?utm_source=app">思维导图来源</a><br><a href="https://mubu.com/doc/Cd-Y4YOfkh#">操作系统王道幕布笔记—ZaxTyson</a><br><a href="https://www.bilibili.com/video/BV1YE411D7nH?p=1">操作系统王道学习视频</a></p><h1 id="操作系统引论及概述"><a href="#操作系统引论及概述" class="headerlink" title="操作系统引论及概述"></a>操作系统引论及概述</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/04/41a83c1d8dace273dc87b961c251a70f.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/24b735899f12b5416d21e4c0ebb4c288.png"></p><h2 id="OS功能和目标"><a href="#OS功能和目标" class="headerlink" title="OS功能和目标"></a>OS功能和目标</h2><p><code>操作系统</code>(Operating System，OS)是计算机系统中最重要的系统软件，它管理整个计算机系统的软件资源和硬件资源，是用户与计算机硬件的桥梁，是其它软件和程序的运行基础。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/c2d24416e4d4d5732a88766f3d7817f2.png"><br>（1）<code>作为系统资源的管理者</code></p><ul><li><code>处理机</code>管理<br>计算机系统中最重要的资源是中央处理机（简称CPU），任何计算都必须在CPU上进行。<br>在处理机管理中，最核心的问题是CPU时间的分配问题，这涉及分配的策略和方法。</li><li><code>存储器</code>管理<br>存储管理的主要工作是对内存储器进行合理分配、有效保护和扩充。<br>内存是现代计算机系统的中心，是可以被CPU和I/O设备共同访问的数据仓库。<br>内存通常是CPU直接寻址和访问的、唯一的大容量存储器。</li><li><code>设备</code>管理<br>设备管理是操作系统中最庞杂、琐碎的部分，其原因是：<br>①设备管理涉及很多实际的物理设备，这些设备品种繁多、用法各异。<br>②各种外部设备都能和主机并行工作，而且，有些设备可被多个进程所共享。<br>③主机和外部设备，以及各类外部设备之间的速度极不匹配，极差很大。</li><li><code>文件</code>管理<br>以上三种管理都是针对计算机的硬件资源的管理。<br>文件系统管理则是对软件资源的管理。为了管理庞大的系统软件资源及用户提供的程序和数据，操作系统将它们组织成文件的形式，操作系统对软件的管理实际上是对文件系统的管理。</li><li><code>作业</code>管理<br>作业指用户在一次计算过程中或者事务处理过程中，要求计算机所作工作的集合。<br>作业由程序、数据和作业说明书组成。在批处理系统中，作业是占据内存的基本单位。<br>作业管理是通过管理让这些作业按照自己所想要的方式来进行工作。</li></ul><p>（2）<code>作为用户和计算机硬件之间的接口</code></p><ul><li>命令接口<br>命令接口<code>允许用户直接使用</code>，命令接口又分<code>联机命令接口</code>和<code>脱机命令接口</code>。<br>联机命令接口：用户说一句，系统做一句（<code>交互式命令接口</code>）。<br>脱机命令接口：用户说一堆，系统做一堆（批<code>处理命令接口</code>）。</li><li>程序接口<br>用户程序<code>间接使用</code></li><li>GUI（图像用户界面）</li></ul><h2 id="OS特征"><a href="#OS特征" class="headerlink" title="OS特征"></a>OS特征</h2><p>OS四大特征：<code>并发</code>、<code>共享</code>、<code>虚拟</code>、<code>异步</code>。</p><ul><li><p>并发<br><code>并发</code>: 指两个或多个事件在同一<code>时间间隔内</code>发生。宏观上是同时发生的,但微观上是交替发生的。<br><code>并行</code>: 指两个或多个事件在同一<code>时刻同时</code>发生。<br>并发和共享是操作系统的两个最基本特征。<br>操作系统并发性指计算机系统中同时存在着多个运行着的程序。</p><blockquote><p>例如：8-9点一号执行，9-10点二号执行，10-11点三号执行，为并发情况。而在8点一二号一起执行为并行情况。</p></blockquote></li><li><p>共享<br>资源共享指系统中的资源可供内存中多个并发执行的进程共同调用。<br><code>互斥共享</code><br>｜ 同一个时间段只允许一个进程访问资源(摄像头/麦克风)<br><code>同时共享</code><br>｜ 允许一个时间段多个进程“同时”(宏观上)访问某些资源（微观上是分时共享），比如硬盘读写<br>并发和共享互为存在条件。</p></li><li><p>虚拟<br>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体(前者)是实际存在的,而逻辑上对应物(后者)是用户感受到的。</p></li><li><p>异步<br>异步是指,在多道程序环境下,允许多个程序并发执行,但由于资源有限,进程的执行不是一贯到底的,是<code>走走停停</code>（等待资源进程阻塞）,以不可预知的速度向前推。</p></li></ul><h2 id="OS发展与分类"><a href="#OS发展与分类" class="headerlink" title="OS发展与分类"></a>OS发展与分类</h2><ul><li><p>手工操作阶段<br>纸带机（用户独占全机，人机速度矛盾，资源利用率极低）。</p></li><li><p>单道批处理系统<br>引入了脱机输入/输出技术（磁带），通过<code>监督程序</code>（操作系统雏形）控制作业输入输出。<br>外围机负责把输入纸带录入磁带。<br>缓解了人机速度矛盾，提高了资源利用率，但是CPU是串行的，大量CPU时间浪费在I/O等待上。</p></li><li><p>多道批处理系统<br>磁带往内存输入多道程序，并发执行，输入、计算、输出互不干扰<br>操作系统诞生，引入了中断技术，资源利用率大幅上升，但是缺少人机交互功能，用户响应时间长（用户提交作业之后只能等待作业完成）。</p></li><li><p>分时操作系统<br>分时操作系统：计算机以<code>时间片</code>为单位<code>轮流</code>为各个用户/作业服务,各个用户可通过终端与计算机进行交互。<br>主要优点:用户请求可以被即时响应,解决了人机交互问题。允许多个用户同时使用一台计算机,并且用户对计算机的操作相互独立,感受不到别人的存在。<br>主要缺点:不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的,循环地为每个用户/作业服务一个时间片,不区分任务的紧急性。</p></li><li><p>实时操作系统<br><code>硬实时系统</code>：必须在绝对严格的规定时间内完成处理。<br><code>软实时系统</code>：能接受偶尔违法时间规定。<br>主要优点:能够优先响应一些紧急任务,某些紧急任务不需时间片排队。在实时操作系统的控制下,计算机系统接收到外部信号后及时进行处理,并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</p></li><li><p>网络操作系统<br>网络操作系统:是伴随着计算机网络的发展而诞生的,能把网络中各个计算机有机地结合起来,实现数据传送等功能,实现网络中各种资源的共享(如文件共享)和各台计算机之间的通信。(如: Windows NT就是一种典型的网络操作系统,网站服务器就可以使用)</p></li><li><p>分布式操作系统<br>分布式操作系统:主要特点是分布性和并行性。系统中的各台计算机地位相同,任何工作都可以分布在这些计算机上,由它们并行、协同完成这个任务。</p></li></ul><h2 id="OS运行机制-体系结构"><a href="#OS运行机制-体系结构" class="headerlink" title="OS运行机制/体系结构"></a>OS运行机制/体系结构</h2><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><ul><li><p>指令<br>指令就是处理器(CPU)能识别、处理的最基本命令。<br><code>特权指令</code>：如内存清零指令。（不允许用户程序使用）<br><code>非特权指令</code>：如普通的运算指令。</p></li><li><p>处理机状态<br><code>用户态</code>：此时CPU只能执行非特权指令。<br><code>核心态</code>：特权命令、非特权命令都可执行。</p><blockquote><p>处理机状态用程序状态寄存器(PSW)中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态。</p></blockquote></li><li><p>程序<br><code>内核程序</code>：系统的管理者，可以执行特权和非特权指令，运行在核心态。<br><code>应用程序</code>：只能执行非特权指令，运行在用户态。</p></li></ul><h3 id="OS内核"><a href="#OS内核" class="headerlink" title="OS内核"></a>OS内核</h3><p>计算机最底层的软件，是操作系统最核心的部分。实现操作系统<code>内核功能</code>的程序才是<code>内核程序</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/222957e356925c52dca1823b5730791a.png"></p><ul><li><code>时钟管理</code><br>实现计时功能。</li><li><code>中断处理</code><br>负责实现中断机制。</li><li><code>原语</code><br>是一种特殊的程序，处于操作系统最底层，是最接近硬件的部分。<br>运行时间短，调用频繁，具有<code>原子性</code>——运行只能一气呵成，不可中断。</li><li><code>系统资源管理</code><br>进程管理、存储管理、设备管理。<blockquote><p>有的操作系统不把这个作为“内核功能”（微内核)，不同操作系统，对内核功能的划分可能不一样。</p></blockquote></li></ul><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p>操作系统的体系结构：<code>大内核</code>和<code>微内核</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/926936683836e9fe7e5cbf31a498d3c5.png"></p><ul><li><p>大内核<br>将操作系统的<code>主要功能模块</code>都作为系统内核，运行在核心态。<br>高性能，但是内核代码庞大难以维护。</p></li><li><p>微内核<br>只把<code>基本概念</code>保留在内核。<br>功能少，功能清晰方便维护，但是需要频繁的在核心态和用户态之间切换，性能低。</p></li></ul><blockquote><p>OS体系结构可以类比于企业的管理问题：<code>内核</code>就是企业的<code>管理层</code>，负责一些重要的工作。只有管理层才能执行<code>特权指令</code>，普通员工只能执行<code>非特权指令</code>。<code>用户态</code>、<code>核心态</code>之间的<code>切换</code>相当于普通员工和管理层之间的工作交流。<br><code>大内核</code>：企业初创时体量不大，管理层的人会负责大部分的事情。<br><code>微内核</code>：随着企业体力越来越大，管理层只负责最核心的一些工作。</p></blockquote><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p>中断机制的诞生：<br>早期计算机，各程序只能串行执行，系统资源利用率低。<br>为了解决上述问题，人们发明操作系统，引入中断机制，实现了多道程序并发执行。<br><code>本质：发生中断</code>就意味着<code>需要操作系统介入,开展管理工作</code>。</p><h3 id="中断的概念和作用"><a href="#中断的概念和作用" class="headerlink" title="中断的概念和作用"></a>中断的概念和作用</h3><p>中断信号可以使CPU从<code>用户态</code>切换为<code>核心态</code>,<code>使操作系统获得计算机的控制权</code>。有了中断才能实现多道程序并发执行。</p><blockquote><p>由于操作系统的管理工作(比如进程切换、分配I/O设备等)需要使用<code>特权指令</code>,因此CPU要从用户态转为核心态。</p></blockquote><p><code>中断</code>是CPU从用户态-&gt;核心态切换的<code>唯一途径</code>。<br>核心态-&gt;用户态切换只需要执行一个<code>特权指令</code>，将<code>PSW</code>设置为<code>0</code>。</p><h3 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h3><ul><li><p><code>内中断</code>(异常/例外/陷入)<br>信号来源CPU<code>内部</code>，<code>与当前执行的指令有关</code><br><code>自愿中断(指令中断) </code>：</p><pre><code>      系统调用时使用的访管指令(陷入指令/trap指令)</code></pre><p><code>强迫中断</code>：</p><pre><code>      1.硬件故障（缺页错误）2.软件中断（除0错误）</code></pre><p>陷阱、陷入(trap)</p><pre><code>      有意而为之的异常，系统调用</code></pre><p>故障(fault)</p><pre><code>      错误条件引起的，可能被故障处理程序修复的，如缺页</code></pre><p>终止(abort)</p><pre><code>      致命错误，无法修复，终止处理程序不再将控制返回给应用程序，如除0</code></pre></li><li><p><code>外中断</code>(狭义中断)<br>信号来源CPU<code>外部</code>，<code>与当前执行的指令无关</code><br><code>外设请求</code>：</p><pre><code>       外设(比如打印机)I/O操作完成发出中断信号       键盘输入一个字符​</code></pre><p><code>人工干预</code>：</p><pre><code>        用户强制终止一个进程</code></pre></li></ul><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组<code>系统调用</code>组成。<br>系统调用是操作系统提供给应用程序(程序员/编程人员)使用的接口,可以理解为一种可供应用程序调用的特殊函数,应用程序可以发出<code>系统调用请求</code>来获得操作系统的服务,操作系统会对各个请求进行<code>协调管理</code>。</p><blockquote><p>例如A和B共用打印机，A按下打印后，打印机工作，B接着又按下打印，打印机不会把A和B的打印内容混合在一起。</p></blockquote><p>应用程序通过<code>系统调用请求</code>操作系统的服务。<br>​系统中的各种共享资源都由操作系统统一掌管,因此在用户程序中,凡是与资源有关的操作(如存储分配、I/O操作、文件管理等) ,都必须通过系统调用的方式向操作系统提出服务请求,由操作系统代为完成。这样可以保证系统的稳定性和安全性,防止用户进行非法操作。<br>系统调用相关的处理需要在<code>核心态</code>下完成。</p><h3 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/e7ab8bab64bae5282f57c5f7297e7ec8.png"></p><ul><li>系统调用是操作系统向上提供的接口</li><li>有的库函数是对于系统调用的进一步封装</li><li>大多数高级语言提供的库函数间接进行系统调用</li></ul><h3 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/7f5ff4cb6568a412aaa0f91b3528db13.png"></p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/02066158f4beb9f2c557383fcf86ec8a.png"></p><h2 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h2><ul><li>进程的定义：<strong>程序段、数据段、PCB</strong>三部分组成了<strong>进程实体(进程映像)</strong> </li><li>一般情况下,我们把进程实体就简称为进程,例如,所谓创建进程,实质上是创建进程实体中的PCB;而撤销进程,实质上是撤销进程实体中的PCB</li></ul><blockquote><p>注意: PCB是进程存在的唯一标志!</p></blockquote><p>从不同的角度,进程可以有不同的定义,比较传统典型的定义有:</p><ol><li>进程是程序的一次<strong>执行过程</strong>。</li><li>进程是一个程序及其数据在处理机上顺序执行时所<strong>发生的活动</strong>。</li><li>进程是具有独立功能的程序在数据集合上<strong>运行的过程</strong>，它是系统进行资源分配和调度的一个独立单位（强调“动态性”）</li><li>引入进程实体的概念后，可把进程定义为:进程是进程实体的运行过程，是系统进行<strong>资源分配</strong>和<strong>调度</strong>的一个独立单位。</li></ol><blockquote><p>注：严格来说，进程实体和进程并不一样,进程实体是<code>静态的</code>，进程则是<code>动态的</code>。不过,除非题目专门考察二者区别，否则可以认为进程实体就是进程。因此我们也可以说“进程由程序段、数据段、PCB三部分组成</p></blockquote><h2 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h2><ul><li><p>程序段<br>存放程序代码本身</p></li><li><p>数据段<br>存放程序运行过程中处理的各种数据（如全局变量、局部变量、宏定义的常量等）</p></li><li><p>PCB</p></li></ul><p><strong>进程管理所需的数据</strong>都放在这里，PCB是进程存在的唯一标志，操作系统通过PCB来管理进程<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/ce7872a1bfbd5dafc1453de9322ff949.png"></p><h2 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h2><p>个系统里面通常由数千个PCB，为了更有效地管理，需要用适当的方式把他们组织起来</p><ul><li><p>链接方式<br>按照进程状态将PCB分为多个队列<br>操作系统持有指向个个队列的指针<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/6c73d88223c3f0bbb779a74d23ea0828.png"></p></li><li><p>索引方式<br>根据进程状态不同，建立几张索引表<br>操作系统持有指向各索引表的指针<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/7884d54769251ab2cf4a7907c1903ab7.png"></p></li></ul><h2 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h2><p>进程和程序是两个截然不同的概念，相比于程序，进程拥有以下特征：</p><ul><li><p><strong>动态性</strong><br>最基本特征。进程是程序的一次执行过程，是动态地产生、变化和消亡的</p></li><li><p><strong>并发性</strong><br>内存中有多个进程实体，各进程可以并行执行</p></li><li><p><strong>独立性</strong><br>进程是能独立运行、获得资源、接受调度的基本单位</p></li><li><p><strong>异步性</strong><br>各进程按各自独立的、不可预测的速度向前推进，异步性会导致并发程序执行结果的不确定性，操作系统要提供“进程同步机制”来解决异步问题</p></li><li><p><strong>结构性</strong><br>每一个进程都会配置PCB，结构上看，进程由程序段、数据段、PCB组成</p></li></ul><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><p>基本状态：运行态、就绪态、阻塞态/等待态</p><ul><li><p><strong>运行态(Running)</strong><br>占有CPU，并在CPU上运行<br>单核处理器一个时刻只有一个进程处于运行态，双核两个</p></li><li><p><strong>就绪态(Ready)</strong><br>进程已经具备一切运行条件，除了没有空闲CPU，导致暂时不能运行<br>万事俱备，只差CPU</p></li><li><p><strong>阻塞态(Waiting/Blocked)</strong><br>等待某一事件而暂时不能运行，比如等待操作系统分配打印机、等待磁盘读写<br>为了提高CPU利用效率，进程需要先准备好其它所需资源，才能得到CPU的服务</p></li><li><p><strong>创建状态(New)</strong><br>操作系统为该进程分配所需内存等系统资源，为其创建、初始化PCB(分配PID等等)</p></li><li><p><strong>终止状态(Terminated)</strong><br>进程运行结束，或者出现Bug导致无法继续执行，操作系统需要撤销进程<br>完成资源回收，撤销PCB</p></li></ul><h2 id="进程间转换"><a href="#进程间转换" class="headerlink" title="进程间转换"></a>进程间转换</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/9eb8a430b7220f00df5ca847dca45b51.png"></p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><ul><li>社么是进程控制？<br>进程控制的主要功能是对系统中的所有进程实施有效的管理,它具有创建新进程、撤销已有进程、实现进程状态转换等功能。简而言之就是<strong>实现进程状态切换</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/29d4cd4920843ffc47a4b3733fec4c4b.png"><br>某一个进程，把它的PCB从一个队列放到另一个队列，但是并没有把PCB当中的状态标志改成相应的新的状态，为防止这个问题，引入了原语操作。</p><ul><li><p>如何实现进程控制？<br>当关中断指令接收到外部中断信号时，会被忽略掉，暂时不会处理，这就保证了原语执行不被中断。直到执行到开中断指令，接收到外部中断信号才会开始处理。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/157f417dd8079f5c82c6d3a5c22eeea6.png"></p></li><li><p>进程控制相关原语<br>进程控制会导致进程状态的转换。无论哪个原语,要做的无非三类事情:</p><ol><li>更新PCB中的信息(如修改进程状态标志、将运行环境保存到PCB、从PCB恢复运行环境)<br>a.  所有的进程控制原语一定都会修改进程状态标志<br>b.  剥夺当前运行进程的CPU使用权必然需要保存其运行环境<br>c. 某进程开始运行前必然要恢复期运行环境</li><li>将PCB插入合适的队列</li><li>分配/回收资源</li></ol></li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul><li>进程通信就是进程之间的信息交换。</li><li>进程是分配系统资源的单位（包括内存地址空间），因此<strong>各进程</strong>拥有各自的<strong>内存地址空间</strong>，它们<strong>相互独立</strong>。</li><li>为了保证安全，一个进程不能直接访问另一个进程的地址空间</li></ul><p>但是进程之间的信息交换又是必须实现的，为了保证进程间的安全通信，操作系统提供了一些方法实现。</p><ul><li><p><strong>共享存储</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/08d60258f07e088ecebb337c84671d64.png"></p></li><li><p><strong>管道通信</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/3dc4f522b8dbc5abb2d6e4862e7bd5c2.png"></p></li><li><p><strong>消息传递</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/0fb02f609238179957d8dcfeb780e78c.png"></p></li></ul><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程的引入"><a href="#线程的引入" class="headerlink" title="线程的引入"></a>线程的引入</h2><p>在没引入进程之前，系统中各个程序只能串行执行<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/297ecbbc8b3077873cfda1029ba5344a.png"></p><ul><li><p>资源分配、调度<br>传统进程机制中，进程是资源分配、调度的基本单位<br>引入线程后，进程是<code>资源分配</code>的基本单位，线程是<code>调度</code>的基本单位</p></li><li><p>并发性<br>传统进程机制，只能进程间并发<br>现在<code>各线程之间</code>也能并发</p></li><li><p>系统开销<br>传统进程并发，需要切换进程的运行环境，系统开销大<br>同一个进程内的线程间并发，不需要切换环境，开销小</p></li></ul><blockquote><p>切换进程运行环境：类比图书馆看书，陌生人要用桌子，你需要把自己的书收走，他把自己的书放桌子上。<br>同一进程内的线程切换：你的舍友要用这张桌子，可以不把桌子上的书收走</p></blockquote><h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><ul><li>线程是处理机调度的单位</li><li>多CPU计算机中，各个线程可占用不同的CPU</li><li>每个线程都有一个线程ID、线程控制块（TCP）</li><li>线程也有就绪、阻塞、运行三种基本状态</li><li>线程几乎不拥有系统资源，资源分配给进程</li><li>同一进程的不同线程间共享进程的资源</li><li>由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预</li><li>同一进程中的线程切换，不会引起进程切换</li><li>不同进程中的线程切换，会引起进程切换</li><li>切换进程内的线程，系统开销很小</li><li>切换进程，系统开销较大</li></ul><h2 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h2><ul><li><p><strong>用户级线程</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/b8c3889fbf0a66a4dcd10cf684baf310.png"></p></li><li><p><strong>内核级线程</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/b614794c5a841e7d52093be2763cd3cc.png"></p></li><li><p><strong>组合方式</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/c390886b3e93a3c770ccee727878775e.png"></p></li></ul><h2 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h2><ul><li><p><strong>多对一模型</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/37604f2c714399daf4da29dba2868864.png"></p></li><li><p><strong>一对一模型</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/b3e90c5a7ae02d68a824870fdaed90e4.png"></p></li><li><p><strong>多对多模型</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/27/fbf8215e4d8ed0bdedea85a035f45908.png"></p></li></ul><h1 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h1><ul><li><p>基本概念<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/9158e9abe09a10247f33e3f357527e6a.png"></p></li><li><p>调度的三个层次</p><ol><li><strong>高级调度（作业调度）</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/40eff0049b00c052639b18441bc4bc18.png"></li><li><strong>中级调度（内存调度）</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/89750f6f38ab70cda27a00a136c7b32d.png"></li><li><strong>低级调度（进程调度）</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/3459e6ca2806ec06e91c00b4820d5a2a.png"></li><li><strong>区别</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/3b55461b8822dd42ed0fdbaf4cd9d8e7.png"></li></ol></li><li><p>补充：<strong>七状态模型</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/a66c794973c8f59af02ed109a637ba42.png"></p></li></ul><h2 id="调度的时机和方式"><a href="#调度的时机和方式" class="headerlink" title="调度的时机和方式"></a>调度的时机和方式</h2><ul><li><p>什么适合需要进程调度？</p><ol><li><strong>进程自动放弃处理机</strong><br> 进程正常终止<br> 运行过程中发生异常终止<br> 进程主动请求阻塞（等待I/O）</li><li><strong>进程被动放弃处理机</strong><br> 时间片用完<br> 更紧急的事情需要处理（I/O中断）<br> 更高优先级的进程进入就绪队列</li></ol></li><li><p>不能进行进程调度与切换的情况</p><ol><li><strong>在处理中断的过程中</strong>（中断处理过程很复杂，很难做到同时完成进程切换）</li><li><strong>在原子操作的过程中（原语）</strong>。原子操作不可中断，要一气呵成</li><li><strong>进程在操作系统内核程序临界区中</strong>。</li></ol></li><li><p><strong>临界资源</strong>是指：进程需要互斥访问的资源，<strong>临界区</strong>：访问临界资源的代码</p></li><li><p><strong>内核程序临界区</strong>：访问内核数据结构的代码，比如进程的就绪队列（就绪进程PCB组成）。</p></li><li><p>进程访问就绪队列时会加锁，还没退出临界区（临界资源没解锁）的期间，是无法进行调度和切换的。<strong>内核临界区</strong>访问临界资源应该尽快完成，否则会影响内核其它管理功能。</p></li><li><p><strong>普通临界区</strong>访问临界资源不会直接影响操作系统内核管理工作，这个时候可以调度和切换。比如打印机完成打印之前，进程不允许调度就会导致CPU一直空闲。</p></li></ul><blockquote><p>进程在操作系统<strong>内核程序临界区</strong>中不能进行调度与切换  （√）<br>进程处于<strong>临界区</strong>时不能进行处理机调度    （×）</p></blockquote><ul><li><p>进程调度的方式</p><ol><li><strong>非剥夺(抢占)式</strong><br>只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。实现简单，开销小，但是无法实时处理紧急任务，适合早期批处理系统。</li><li><strong>剥夺(抢占)式</strong><br>如果有更重要更紧急的进程需要使用处理机，直接剥夺当前进程资源。适合分时操作系统、实时操作系统。</li></ol></li><li><p>进程的切换与过程</p><ol><li>“狭义的进程调度”与“进程切换”的区别<br>狭义调度指：从就绪队列中选择一个要运行的进程，这个进程可能是刚刚暂停的，也可能是另一个进程，后一种情况就需要进程切换<br>进程切换：一个进程让出处理机，由另一个进程占用处理机的过程<br>广义进程调度：包含了选择一个进程和进程切换两个步骤</li><li>进程切换的过程<br>保存原进程的数据<br>恢复新进程的数据（数据包括：程序计数器，程序状态字，各种数据寄存器等现场信息）</li></ol></li></ul><blockquote><p>进程切换是有代价的，过于频繁的调度、切换会导致效率低下，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少</p></blockquote><h2 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h2><ul><li><p><strong>CPU利用率</strong>：指CPU“忙碌”的时间占总时间的比例<br>  CPU忙碌时间(+IO时间)/总时间</p></li><li><p><strong>系统吞吐量</strong>：单位时间内完成作业的数量<br>  总共完成的作业数/总时间</p></li><li><p><strong>周转时间</strong>：是指从作业被提交给系统开始，到作业完成为止的这段时间间隔，作业被提交给系统开始到作业完成的时间，包括高级调度、低级调度的时间、进程在CPU执行的时间、等待I/O的时间</p><ol><li><strong>周转时间</strong>=作业完成时间-作业提交时间</li><li><strong>平均周转时间</strong>=各作业周转时间之和/作业数</li><li><strong>带权周转时间</strong>= 作业周转时间 / 作业实际运行时间 = （作业完成时间 - 作业提交时间）/ 作业实际运行时间<br>周转时间相同的情况下，作业运行时间长的，用户体验更好（浪费的时间少，带权周转时间一定大于 1，越小越好</li><li><strong>平均带权周转时间</strong>=各作业带权周总时间之和/作业数</li></ol></li><li><p><strong>等待时间</strong>：指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低</p><ol><li>等待时间=进程/作业处于等待处理机状态时间之和</li><li>对于进程：等待时间是进程建立之后，等待被服务的时间之和（等待I/O的时间不计入）</li><li>对于作业：作业在外存后备队列等待被调度的时间 + 建立进程之后的等待时间</li></ol></li><li><p><strong>响应时间</strong>：用户提交请求到首次产生响应所用的时间</p></li></ul><h2 id="调度算法-早期系统"><a href="#调度算法-早期系统" class="headerlink" title="调度算法(早期系统)"></a>调度算法(早期系统)</h2><h3 id="先来先服务FCFS"><a href="#先来先服务FCFS" class="headerlink" title="先来先服务FCFS"></a>先来先服务FCFS</h3><ul><li><strong>先来先服务</strong>（FCFS：First Come First Service）<ol><li>公平角度考虑，作业/进程谁先到后备/就绪队列的谁先得到服务，非抢占式算法</li><li>优点：公平，算法简单</li><li>缺点：对<strong>长作业（进程）有利，对短作业不利</strong>（带权周转时间很大）比如下面例题中P3的带权周转时间为8</li><li>不会导致饥饿</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/dceb6edebf04cf607997876d58907fd5.png"></p><h3 id="作业优先SJF"><a href="#作业优先SJF" class="headerlink" title="作业优先SJF"></a>作业优先SJF</h3><ul><li><strong>短作业优先</strong>（SJF：Shortest Job First）<ol><li>算法思想：追求最少的平均等待时间，最少平均周转时间，最少平均带权周转时间</li><li>算法规则：<strong>需要服务时间最短的作业。进程先得到服务</strong></li><li>可以调度作业和进程（短进程优先算法SPF: Shortest Process First）</li><li>SJF和SPF是<strong>非抢占式</strong>算法，抢占式版本：<strong>最短剩余时间优先算法</strong>(SRTN,Shortest Remaining Time Next)</li><li>优点：“最短的”平均等待时间、平均周转时间，最短剩余时间优先算法更短</li><li>缺点：不公平，短作业有利，长作业不利。    </li><li>可能导致饥饿，如果有源源不断的短作业到来，长作业可能一直得不到服务（饿死）</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/cd4050ae0953e51e7519dd5603430bed.png"></p><h3 id="最短剩余时间优先SRTN"><a href="#最短剩余时间优先SRTN" class="headerlink" title="最短剩余时间优先SRTN"></a>最短剩余时间优先SRTN</h3><ul><li><strong>最短剩余时间优先算法</strong>(SRTN,Shortest Remaining Time Next)<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/8e127ff4f943a6e48afc4fe1687d2083.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/2302f774fa71363932727c7e4b575f55.png"></li></ul><h3 id="高响应比优先HRRN"><a href="#高响应比优先HRRN" class="headerlink" title="高响应比优先HRRN"></a>高响应比优先HRRN</h3><ul><li><strong>高响应比优先</strong>（HRRN：Highest Response Ratio Next）<ol><li>算法思想：综合考虑作业/进程的等待时间和服务时间</li><li>算法规则：每次调度时选择<strong>响应比最高</strong>的作业/进程。<strong>响应比=(等待时间+要求服务时间)/要求服务时间</strong>（响应比&gt;=1）</li><li>非抢占式，除非当前作业/进程主动放弃处理机，才需要调度</li><li>优点：综合考虑了<strong>等待时间和运行时间</strong>，等待时间相同时，要求服务时间短的优先(SJF的优点)，要求服务时间相同时，等待时间长的优先(FCFS的优点)</li><li>对于长作业来说，随着等待时间越来越久，其响应比也会越来越大，从而避免了长作业饥饿的问题</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/b7428d46a12c3b8cbeb07fb9a2dc2e25.png"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/6f9fb03aed74db90e1eb9a5f9de21bc2.png"></p><h2 id="调度算法（交互式系统）"><a href="#调度算法（交互式系统）" class="headerlink" title="调度算法（交互式系统）"></a>调度算法（交互式系统）</h2><h3 id="时间片轮转RR"><a href="#时间片轮转RR" class="headerlink" title="时间片轮转RR"></a>时间片轮转RR</h3><ul><li><strong>时间片轮转</strong>（RR：Round-Robin)<ol><li>常用于分时操作系统，注重响应时间，而非周转时间</li><li>算法思想：公平、轮流地为各个进程服务，让每个进程在一定时间间隔内都可以得到响应</li><li>算法规则：按照各进程到达就绪队列的顺序,轮流让各个进程执行一个时间片(如100ms) </li><li>若进程未在一个时间片内执行完,则剥夺处理机,将进程重新放到就绪队列队尾重新排队。</li><li>用于进度调度（作业在放入内存并建立进程后才能被分配处理机时间片）</li><li>抢占式算法，由时钟中断通知CPU时间片已到，不会饥饿</li><li>缺点：高频率进程切换，有一定的开销，不区分任务的紧急程度</li><li>优点：公平；响应快，适用于分时操作系统</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/5032c3cd79a2b114c0fd32e44967e576.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/d54338fb3b4bc407ef4d7351130b235f.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/9ee3f45cddc0a8de9b8fc91e5134d7b2.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/0c7efc1ec90a7dc093c9643b1309ae10.png"></p><h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h3><ul><li><strong>优先级调度算法</strong><ol><li>调度时选择<strong>优先级高</strong>的进程，可以作业调度和进程调度以及I/O调度</li><li>适用于实时操作系统，可能发生饥饿</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/e5c391c62f67a9b137493df6f145b5fa.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/037e8caec9acb4e01465e29df0365a24.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/28/0d7a887e9e40726b2837f8f634c457d8.png"></p><h3 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h3><ul><li>对其他算法权衡折中，抢占式，可能导致饥饿</li><li>算法规则<ol><li>设置多级就绪队列，各级队列优先级从高到低，时间片从小到大</li><li>新进程到达时先进入第1级队列，按FCFS原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队列队尾。如果此时已经是在最下级的队列，则重新放回该队列队尾</li><li>只有第k级队列为空时，才会为k+1级队头的进程分配时间片</li><li><a href="https://www.bilibili.com/video/BV1YE411D7nH?p=17">动画演示</a></li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/bb186770ed9559f785aa6812cdabd2cc.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/dd10ab244dd7d5cc396a45cd05cb0ddc.png"></p><h1 id="进程同步与互斥"><a href="#进程同步与互斥" class="headerlink" title="进程同步与互斥"></a>进程同步与互斥</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f86ad32bfaea48db1e57a2a8becbd20d.png"></p><ul><li><p><strong>进程同步</strong></p><ol><li>进程具有异步性，各并发执行的进程以各自独立、不可预测的速度向前推进。</li><li>有时需要保证不同的进程按照特地的次序推进，比如管道读、写数据两个操作必需按照“写数据-&gt;读数据”的顺序执行，所以引入进程同步的问题</li><li>进程同步又叫进程的“直接制约关系”，它是指为了完成某种任务而建立两个或多个进程</li><li>这些进程因为需要在某些位置上协调工作次序而产生制约关系。</li></ol></li><li><p><strong>进程互斥</strong></p><ol><li><p>临界资源：一个时间段内只允许一个进程使用的资源（比如一些物理设备，变量数据，内存缓冲区）</p></li><li><p>对临界资源的访问必需互斥地进行，互斥又叫“间接制约关系”</p></li><li><p>进程互斥指一个进程访问某些临界资源时，另一个想要访问该临界资源的进程必需等待，直到资源被释放。</p></li><li><p>对临界资源的互斥访问，可以在逻辑上分为如下四个部分</p><pre><code> do&#123;     entry section;  //进入区 &#123;上锁&#125;     critical section;  //临界区  &#123; 访问临界资源的那段代码&#125;     exit section;     //退出区   &#123;解锁&#125;     remainder section; //剩余区 &#123;做其他处理&#125; &#125;</code></pre></li></ol></li><li><p>为了实现对临界资源的互斥访问，需要遵循以下原则</p><ol><li><strong>空间让进</strong><br>临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区</li><li><strong>忙则等待</strong><br>当已有进程进入临界区时，其他试图进入临界区的进程必须等待</li><li><strong>有限等待</strong><br>对请求访问的进程，应保证能在有限时间内进入临界区(保证不会饥饿)</li><li><strong>让权等待</strong><br>当进程不能进入临界区时，应立即释放处理机，防止进程忙等待</li></ol></li></ul><h2 id="进程互斥软件实现"><a href="#进程互斥软件实现" class="headerlink" title="进程互斥软件实现"></a>进程互斥软件实现</h2><ul><li><strong>单标志法</strong><br>算法思想：两个进程在<strong>访问完临界区后</strong>会把使用临界区的权限转交给另一个进程。也就是说<strong>每个进程进入临界区的权限只能被另一个进程赋予</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/731b6f044ab528989f2fa1062396c447.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/237f9e041fdfd0123289a1d09713d5f5.png"></p><ul><li><strong>双标志先检查法</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/51e07e90ddadfa31dc0ff035d3c891cb.png"></p><ul><li><strong>双标志后检查法</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/275bd64a2e8d4613edd4a404aa3c59fc.png"></p><ul><li><strong>Peterson算法</strong><br>Perterson算法用软件方法解决了进程互斥问题，<strong>遵循了空闲让进、忙则等待、有限等待三个原则</strong>，但是依然<strong>未遵循让权等待</strong>的原则</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/6f567cdad0d1515a8d8a9d30abc7f3a8.png"></p><h2 id="进程互斥硬件实现"><a href="#进程互斥硬件实现" class="headerlink" title="进程互斥硬件实现"></a>进程互斥硬件实现</h2><ul><li><strong>中断屏蔽方法</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/09f753f261223ebfb6d88b1e6a373acc.png"></p><ul><li><strong>TestAndSet指令</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2933780d4e37df6a0c7fb0c40ba8c764.png"></p><ul><li><strong>Swap指令</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/a5fe75ea3d34489db4e19d09fc58d1f8.png"></p><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><p>针对以上两种实现方法无法实现的问题，1965年，荷兰学者<strong>Dijkstra</strong>提出了一种卓有成效的实现进程互斥、同步的方法——<strong>信号量机制</strong></p><ul><li>用户进程可以通过使用操作系统提供的<strong>一对原语</strong>来对<strong>信号量</strong>进行操作,从而很方便的实现了进程互斥、进程同步。</li><li>信号量其实就是一个变量(可以是 个整数,也可以是更复杂的记录型变量),可以用一个信号量来<strong>表示系统中某种资源的数量</strong>,比如:系统中只有一台打印机,就可以设置一个初值为1的信号量</li><li><strong>原语</strong>是一种特殊的程序段,其<strong>执行只能一气呵成,不可被中断</strong>。原语是由<strong>关中断/开中断指令</strong>实现的。</li><li>软件解决方案的主要问题是由“进入区的各种操作无法一气呵成” ,因此如果能把进入区、退出区的操作都用“原语”实现,使这些操作能“一气呵成”就能避免问题。</li><li><strong>一对原语</strong>：<code>wait(S)</code>原语和<code>signal(S)</code>原语,可以理解为函数,函数名分别为wait和signal,括号里的<code>信号量S</code>就是参数。</li><li>wait, signal原语常<code>简称为P,V操作</code>(来自荷兰语proberen和verhogen) 。因此,做题的时候常把wait(S).signal(S)两个操作分别写为<code>P(S)</code>、<code>V(S)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f28cd6bd7144dacbc922b8a94f7010e1.png"></p><ul><li><strong>整型信号量</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/550c20f518820ecebbf51f460d359efe.png"></p><ul><li><strong>记录型信号量</strong><br><a href="https://www.bilibili.com/video/BV1YE411D7nH?p=21">动画演示</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/bd4a1a080acd5ddc975d40729772c320.png"></p><ul><li><strong>信号量机制实现进程互斥</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f1d372d4dc89e34140a6f575b0835a82.png"></p><ul><li><strong>信号量机制实现进程同步</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9725eea0587c84eecbf0439147dab141.png"></p><ul><li><strong>信号量机制实现前驱关系</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/7e90239a4e0b457ceb54070e5c1667d1.png"></p><ul><li><strong>总结</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/787e8c3e0180caba244bdbfcbfd19b9e.png"></p><h2 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h2><ul><li><strong>问题分析</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/11365e55cebc6b74328eb9f4e2b7633c.png"></p><ul><li><strong>如何实现</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/5938225a1587db4475d9a3ac114b64b3.png"></p><p><strong>能否改变相邻P、V操作的顺序？</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/922cca5307bc0561a31645071261302d.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/d533b343f32b290106ec998a784adc7d.png"></p><h2 id="多生产者消费者问题"><a href="#多生产者消费者问题" class="headerlink" title="多生产者消费者问题"></a>多生产者消费者问题</h2><ul><li><strong>问题分析</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/c11ccc721e66cd7735a5dbebad46145c.png"></p><ul><li><strong>如何实现</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/e69f38723527235f89f85c6134974161.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2d71cc4b72391d7dc071d3cc1d397ec9.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/229c421bee513c9d5ba5a00a83ef767f.png"></p><h2 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h2><ul><li><strong>问题分析</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/111a2f89ec29d6f0627531314054fddf.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2769a0617e764e289a3a302b1eadf690.png"></p><ul><li><strong>如何实现</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/47fd14ae737b5dbd33fbc82bb9be63f4.png"></p><h2 id="读写者问题"><a href="#读写者问题" class="headerlink" title="读写者问题"></a>读写者问题</h2><ul><li><strong>问题分析</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/a7723d8eda3906f698501c25a2e2992a.png"></p><ul><li><strong>如何实现</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/79fa92ea5478be4a56028b3ab0097124.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/7770a31fe3df6639fa87b04344ddd074.png"></p><h2 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h2><ul><li><strong>问题分析</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2c373a09712c045b2d8c9cef8e5ce06b.png"></p><ul><li><strong>如何解决</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/741802daff0d4ff4b9ea60c5a7ba550d.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9003fdffc57851ace8a5a64ac4bf5cc8.png"></p><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><ul><li><p>为什么引入管程<br>信号量机制编写程序困难，PV顺序错误可能导致死锁</p></li><li><p><strong>管程的定义</strong><br>  管程是一种高级的同步机制，是一种特殊的软件模块，包括：</p><ol><li>局部于管程的共享数据结构说明</li><li>对数据结构进行操作的一组过程（函数）</li><li>对共享数据初始化的语句</li><li>管程有一个名字（就是OOP里面的封装思想）</li></ol></li><li><p><strong>管程的基本特征</strong></p><ol><li>管程中的共享数据结构只能被管程内部的过程（函数）访问</li><li>一个进程只能通过调用管程内的过程（函数）才能访问管程内的数据</li><li>每次仅允许一个进程在管程内执行某个内部过程（这个特性是编译器实现的）</li></ol></li><li><p><strong>用管程解决生产者消费者问题</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/4b9be5f3242e839af4169b37c902d306.png"></p><ul><li><strong>Java</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/cc2559b64af379f7a31b797ea898dfd7.png"></p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/dbc130be6a2f1a4bfc16d762c4695f46.png"></p><ul><li><p>什么是死锁<br>并发环境下，各进程因为竞争资源造成的：互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象</p></li><li><p>死锁、饥饿、死循环</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/da6e2ff9f6d44e4670622ea6c2d9e0e8.png"></p><ul><li><p>死锁产生的条件<br>  对不可剥夺资源分配不合理可能导致死锁</p><ol><li><strong>互斥条件</strong><br>争抢互斥资源</li><li><strong>不剥夺条件</strong><br>进程获得的资源未使用完成，其它进程不能强行夺走，只能等待主动释放</li><li><strong>请求和保持条件</strong><br>进程已经保持了至少一个资源，但是又提出新的资源请求，同时该资源被其它进程占有，此时请求进程被阻塞，但是对自己拥有资源又保持不放</li><li><strong>循环等待条件</strong><br>死锁时存在循环等待链，但是存在循环等待链不一定出现死锁（同类资源大于1，可能链条外的某个进程释放了资源）</li></ol></li><li><p>死锁的处理策略</p><ol><li><strong>预防死锁</strong><br>破坏产生死锁的条件</li><li><strong>避免死锁</strong><br>避免系统进入不安全状态（银行家算法）</li><li><strong>检测和解除</strong><br>允许死锁发生，操作系统负责检测死锁并解除</li></ol></li></ul><h2 id="死锁的处理"><a href="#死锁的处理" class="headerlink" title="死锁的处理"></a>死锁的处理</h2><h3 id="不允许死锁发生"><a href="#不允许死锁发生" class="headerlink" title="不允许死锁发生"></a>不允许死锁发生</h3><ul><li><strong>静态策略：预防死锁</strong><ol><li><strong>破坏互斥条件</strong><br>将物理互斥的资源改造为逻辑共享设备，SPOOLing技术将打印机改造成共享设备</li><li><strong>破坏不剥夺条件</strong><br>方案一：某个进程所需的资源得不到满足时，主动释放自己保持的资源，以后再重新申请<br>方案二：操作系统协助，将资源剥夺给优先级高的资源<br>实现复杂，可能造成获得资源前一阶段的工作白做，而且反复申请资源增加系统开销，可能导致进程饥饿</li><li><strong>破坏请求和保持条件</strong><br>静态分配法：进程分配好需要的资源再投入运行，运行时不再申请<br>实现简单，但是资源利用率极低，可能导致某些进程饥饿​</li><li><strong>破坏循环等待条件</strong><br>顺序资源分配法：首先给系统资源编号，每一个进程必需按照进程递增的顺序请求资源（大编号无法请求小编号资源，也就不能线程循环等待的情况）<br>按编号申请资源，编程很麻烦不方便添加新设备，需要重新分配编号；进程实际使用资源的顺序可能和编号顺序不一致，导致需要提前申请不必要的资源导致浪费​</li></ol></li><li><strong>动态策略：避免死锁</strong><ol><li>什么是安全序列<br>系统按照这种序列分配资源，能让每个进程都顺利完成</li><li>什么是系统的不安全状态<br>只要存在一个安全序列，系统就是安全状态<br>找不到安全序列，系统就是不安全状态，意味着可能所有进程都无法顺利执行下去（如果有进程提前归还资源，那系统也有可能可以回到安全状态）<br>不安全状态可能发生死锁（不一定发生），安全状态一定不会死锁</li><li>银行家算法</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/6b8c8a1fc9771cbf256a401f7cfa6d14.png"></p><h3 id="允许死锁发生"><a href="#允许死锁发生" class="headerlink" title="允许死锁发生"></a>允许死锁发生</h3><ul><li><strong>死锁检测</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/bb14c3d0b17ec907154b4e26ca70deff.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/72761f62025d9ab2c856d77967fb88a9.png"></p><ul><li><strong>死锁解除</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/499e642ccb42f3b8792987a11109a31f.png"></p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/339f84440daad4b17a82464ae8c6d840.png"></p><h2 id="内存基础"><a href="#内存基础" class="headerlink" title="内存基础"></a>内存基础</h2><ul><li><p>什么是内存</p><ul><li><strong>储存单元</strong><br>按字节编址：一个存储单元1字节，8个二进制位<br>按字长编址：一个存储单元1个字长，字长16位的计算机一个存储单元16个二进制位<br>2^10=1K    2^20=1M   2^30=1G<br>4G内存的地址长度: 4*2^30=2^32  ，所以需要32个二进制位(32位操作系统最大支持4GB内存，指针大小4字节)</li><li><strong>内存地址</strong><br>内存从0开始，每一个地址对应一个存储单元</li></ul></li><li><p>进程运行的基本原理</p><ul><li><strong>指令的工作原理</strong><br>CPU按照程序段的指令去内存某个位置存取数据，一条 指令由操作码+若干参数组成<br>编译生成的指令中一般使用逻辑地址</li><li><strong>逻辑地址/物理地址</strong><br>逻辑地址（相对地址）<br>物理地址（绝对地址）</li></ul></li><li><p>从写程序到程序运行</p><ol><li><strong>编辑源文件</strong></li><li><strong>编译</strong><br>源代码文件(.c)生成目标模块(.o)，将高级语言翻译为机器语言<br>每一个目标模块都具有独立的逻辑地址 0-xxx</li><li><strong>链接</strong><br>目标模块生成装入模块(可执行文件,如.exe)，链接完成使得各模块形成整体的链接地址</li><li><strong>装入(载)</strong><br>将装入模块装入内存运行，装入后形成物理地址</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/8e00f6dbac6c69dbfeb08565f887d6a6.png"></p><ul><li><p>三种链接方式</p><ol><li><strong>静态链接</strong><br>装入前链接成一个完整模块</li><li><strong>装入时动态链接</strong><br>运行前边装入边链接</li><li><strong>运行时动态链接</strong><br>运行时需要什么模块才装入并链接</li></ol></li><li><p>三种装入方式</p><ol><li><strong>绝对装入</strong><br>编译时产生绝对地址，只适用于单道程序环境(那时候还没有操作系统，编译器负责实现)</li><li><strong>可重定位装入(静态重定位)</strong><br>编译链接后的装入模块地址是逻辑地址，装入时进行重定位，将指令中逻辑地址+装入的起始物理地址得到真实的物理地址<br>一个作业装入内存时，必需分配其要求的全部内存空间，内存不够就不能装入<br>作业一旦进入内存，运行期间就不能再移动，也不能再申请内存空间，因为地址都写死了<br>早期多道批处理操作系统使用</li><li><strong>动态运行时装入(动态重定位)</strong><br>运行时才将逻辑地址转换为物理地址，需要设置重定位寄存器(或者叫基址寄存器)<br>允许程序在内存中发生移动，而且程序可以分配到不连续的储存区，也支持动态申请内存<br>只需装入部分代码即可投入运行，可以向用户提供一个比存储空间大得多的地址空间<br>现代操作系统使用</li></ol></li></ul><h1 id="内存空间分配与回收"><a href="#内存空间分配与回收" class="headerlink" title="内存空间分配与回收"></a>内存空间分配与回收</h1><p>为用户进程分配的内存必须是一个连续的内存空间</p><h2 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h2><ul><li><strong>单一连续分配</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/0081a0e4a2e83c34175718736ba82557.png"></p><ul><li><strong>固定分区分配</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/5058bbf39550bd01e121ff658145bcd0.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/67c30dbd1599bee950756f950ef917ca.png"></p><ul><li><strong>动态分区分配</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/08767bf29ec2c778d70e77b5f4b1ab02.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9d28c7547a80d70088163e835a6a5b0d.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/dfd3883c7a984ac035dcfbbe0394ce49.png"></p><blockquote><p>回收内存时，回收区前后的空闲分区应该合并</p></blockquote><ul><li><strong>动态分区分配算法</strong><ol><li><strong>首次适应(First Fit)</strong><br>空闲分区按地址递增顺序排列，每次分配内存时查找空闲分区链(表)，找到第一个满足要求的分区即可<br>每次从低地址部分查找，高地址的大分区更有可能被保存下来<br>效果最佳</li><li><strong>最佳适应(Best Fit)</strong><br>空闲分区按容量递增顺序链接，每次分配内存时按顺序查找内存分区链(表)，找到第一个可以满足的空闲分区<br>优先使用最小连续内存区，尽可能多的留下大块空闲区，满足大进程需求，但是会留下非常多难以利用的外部碎片</li><li><strong>最坏适应(Worst Fit)</strong><br>有叫最大适应算法(Largest Fit)<br>空闲分区按容量递减顺序排序，每次分配找到能满足要求的第一个空闲分区<br>优先使用最大的连续空闲区，使得分配后的剩余空闲区不会太下，方便使用，但是如果后面需要大内存区间就没办法了</li><li><strong>邻近适应(Next Fit)</strong><br>又叫循环首次适应算法<br>空闲分区按地址递增顺序构成循环链表，每次内存分配时从所以才查找结束位置开始，找到第一个能满足要求的空闲分区<br>无论是低地址还是高地址的空闲分区，都有相同的概率被使用，导致最后无大分区可用​</li><li><strong>对比</strong></li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/50d2425ddf6b7419c25b81048e422055.png"></p><h2 id="非连续分配管理方式"><a href="#非连续分配管理方式" class="headerlink" title="非连续分配管理方式"></a>非连续分配管理方式</h2><p>为用户进程分配的内存可以是一个分散的内存空间<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/28aefd8d61408a8fc73fa4de0eb88cb9.png"></p><h3 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h3><h4 id="分页管理"><a href="#分页管理" class="headerlink" title="分页管理"></a>分页管理</h4><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9aa76ab94a1dbfae0f77f253568a809a.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/b95575785e694b93bba47d918ef7ed94.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/09faeccfa419d0484cda4eeaea7080f3.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/0fec9bc2dfe05653f27ef07bccbcf388.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/a3133228d3b4efc94a2469d17d0b5203.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/36b98f7da4ecbc6b1e226b84d7135526.png"></p><blockquote><p>基本分页存储管理的思想：把内存分成一个个相等的小分区，在按分区大小把进程拆分成一个个小部分 (x)</p></blockquote><h4 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h4><ul><li><p>页表寄存器(PTR)<br>  保存页表在内存中的起始地址F和页表长度M<br>  进程未执行的时候，F和M放在PCB中，进程被调度时，操作系统内核将其放到PTR中</p></li><li><p>地址转换过程</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2eb2b028d5cd785c98260d6fbc118c24.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/b8eaa75727fb2d37f95172d5dcd91c50.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/c12017d76287105807bebd09920d3783.png"></p><ul><li>对页表项目的探讨</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2154b9952fc29517e016662477ea7b1b.png"></p><h4 id="快表地址变换机构"><a href="#快表地址变换机构" class="headerlink" title="快表地址变换机构"></a>快表地址变换机构</h4><ul><li><p>局部性原理</p><ol><li>时间局部性:如果执行了程序中的某条指令,那么不久后这条指令很有可能再次执行;如果某个数据被访问过,不久之后该数据很可能再次被访问。(因为程序中存在大量的循环)</li><li>空间局部性:一旦程序访问了某个存储单元,在不久之后,其附近的存储单元也很有可能被访问。(因为很多数据在内存中都是连续存放的）</li></ol></li><li><p>什么是快表(TLB)<br>  又称联想寄存器(TLB) ,是一种访问速度比内存快很多的高速缓冲存储器,用来存放当前访问的若干页表项,以加速地址变换的过程。与此对应,内存中的页表常称为慢表。</p></li><li><p>地址变换过程</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/ec475874aa13a75c6efae864ad8089bb.png"></p><h4 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h4><ul><li><p>单级页表的问题<br>Q1：所有的页表项都要连续存放，页表很大时，需要占用很多很多个连续的页框。<br>比如32位逻辑地址分页储存，页面大小4K，则页表最多2^20项，一项占4B，一共需要1024个连续的页框才能放得下<br>Q2：没有必要让整个页表常驻内存，进程在一段时间可能只访问某几个特定的页面</p></li><li><p>两级页表原理</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/76d6a57cd465b8976246e5e9196edc2e.png"></p><ul><li>如何实现地址变换</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/657bc76d734af9c9af1d0a9464585fc3.png"></p><ul><li>注意事项</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/dec992c358e87fa5e9f4fd8b36c3ea51.png"></p><h3 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/16e9a89e972005edfe77c27ae941e8f2.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/7996687da1d81625eb2e670b73bf4631.png"></p><ul><li><strong>什么是段表</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/04c6fd47091dcdf52e5a5bed77b9ff8a.png"></p><ul><li><strong>如何实现地址变换</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/263cf986df0af5c56a30be57805b6bcf.png"></p><ul><li><strong>分段VS分页</strong>-</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/7158352d0aca697027068159d02d8cd8.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/8ab1305deb6e4491afc4e182ac4b9d0b.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/83f024c57174873268a1e390b80a2e68.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/242d7ee1fa0e36a0309c03ec7eb7a326.png"></p><h3 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h3><ul><li>分段分页的优缺点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/391b4cf087b6c14ebbb1766382492a23.png"></p><ul><li><strong>段页式管理</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/137833abba4059c0befbb3b083a488a1.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/203f30c57ff875d37631b93836ab3cec.png"></p><ul><li><strong>段表、页表</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/efc6d68c9181d25b30b1f1d2dd93bfad.png"></p><ul><li><strong>如何实现地址变换</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/cc29b1687f721912dec313f5802eeb7f.png"></p><h1 id="内存空间的扩充"><a href="#内存空间的扩充" class="headerlink" title="内存空间的扩充"></a>内存空间的扩充</h1><h2 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/b8d088c6d7e777d60267200f96df9531.png"></p><h2 id="交换-对换-技术"><a href="#交换-对换-技术" class="headerlink" title="交换(对换)技术"></a>交换(对换)技术</h2><p>内存紧张时，把进程暂时换出到外存（例：进程的中级调度(内存调度)，挂起态，七状态模型）<br>磁盘分为对换区(swap)和文件区，前者连续分配追求I/O速度，后者离散分配追求存储空间利用率<br>优先换出阻塞进程、低优先级进程（可能导致饥饿）、还要考虑进程在内存的驻留时间，PCB不会换出</p><h2 id="虚拟储存技术"><a href="#虚拟储存技术" class="headerlink" title="虚拟储存技术"></a>虚拟储存技术</h2><ul><li>传统存储方式的缺点<br>  连续分配/非连续分配<ol><li>一次性<br>作业必须一次性全部装入内存后才能开始运行。大作业无法运行,多道程序并发度下降。</li><li>驻留性<br>作业在运行期间一直驻留在内存，内存中驻留大量的暂时用不到的数据，浪费了宝贵的内存资源。</li></ol></li><li>局部性原理    <ol><li>时间局部性<br>现在访问的指令、数据在不久后很可能再次访问</li><li>空间局部性<br>现在访问的内存单元周围的内存空间很可能在不久之后访问</li><li>高速缓存<br>频繁访问的数据放到更高速的储存器中</li></ol></li><li>虚拟内存的定义和特征<br>  程序不需要全部装入内存即可运行，运行时根据需要动态调入数据，内存不够时，换出一些数据到外存<ol><li>多次性<br>作业无需在运行时一次装入内存，而是允许分多次调用</li><li>对换性<br>作业无需在运行时常驻内存，允许作业换入、换出</li><li>虚拟性<br>从逻辑上扩充了内存容量，用户看到的容量，远大于实际容量</li></ol></li></ul><h1 id="如何实现虚拟内存"><a href="#如何实现虚拟内存" class="headerlink" title="如何实现虚拟内存"></a>如何实现虚拟内存</h1><h2 id="请求调页"><a href="#请求调页" class="headerlink" title="请求调页"></a>请求调页</h2><p>访问的信息不存在时，操作系统负责将需要的信息从外存调入内存</p><h2 id="页面置换"><a href="#页面置换" class="headerlink" title="页面置换"></a>页面置换</h2><p>内存空间不足时，将内存中暂时不用的信息换到外存<br>页面的换入换出需要磁盘I/O，时间开销是很大的，缺页率越小越好</p><h3 id="最佳置换算法OPT"><a href="#最佳置换算法OPT" class="headerlink" title="最佳置换算法OPT"></a>最佳置换算法OPT</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/a31e68c46d08157aff900e68175fcdb7.png"></p><h3 id="先进先出置换算法FIFO"><a href="#先进先出置换算法FIFO" class="headerlink" title="先进先出置换算法FIFO"></a>先进先出置换算法FIFO</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/8fbfe8dec801c9679911f48024b89abe.png"></p><h3 id="最近最久未使用算法LRU"><a href="#最近最久未使用算法LRU" class="headerlink" title="最近最久未使用算法LRU"></a>最近最久未使用算法LRU</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/12db53c5ecacba69329f1a320fd0f6ec.png"></p><h3 id="时钟置换算法CLOCK"><a href="#时钟置换算法CLOCK" class="headerlink" title="时钟置换算法CLOCK"></a>时钟置换算法CLOCK</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/3fbda0061a096757ee0b6d7975e53ed3.png"></p><ul><li><strong>改进型时钟置换算法</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/fbc5786e66054fa21ae3e66f4636370e.png"></p><h3 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/6367b523aa247845d9ad05bbde1f773c.png"></p><h2 id="虚拟内存的实现"><a href="#虚拟内存的实现" class="headerlink" title="虚拟内存的实现"></a>虚拟内存的实现</h2><h3 id="请求分页存储管理"><a href="#请求分页存储管理" class="headerlink" title="请求分页存储管理"></a>请求分页存储管理</h3><ul><li><strong>页表机制</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/87530d9abd6297d27c42da9d19b5e2e3.png"></p><ul><li><p><strong>缺页中断机构</strong></p><ul><li>访问的页面不存在时，产生缺页中断(属于内中断的故障 fault)，操作系统缺页中断处理程序中断，进程放到阻塞队列，待调页完成后将进程唤醒，放到就绪队列</li><li>如果内存有空闲块，则为进程分配一个空闲块，将缺页装入其中，并修改页表相应页表项</li><li>如果内存没有空闲块，由页面置换算法选择一个页面淘汰(若该页面在内存期间被修改过，则需要先将其写回外存)，腾出一个空间再装入缺页​​</li><li>一条指令执行期间，可能产生多次缺页中断</li></ul></li><li><p><strong>地址变换机构</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/0e3537ef13a2ea5aca18407cb91af5ab.png"></p><h2 id="请求分段存储管理"><a href="#请求分段存储管理" class="headerlink" title="请求分段存储管理"></a>请求分段存储管理</h2><h2 id="请求段页式存储管理"><a href="#请求段页式存储管理" class="headerlink" title="请求段页式存储管理"></a>请求段页式存储管理</h2><h1 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h1><p>进程1只能访问进程1的内存，不能越界访问其它进程或者操作系统的内存区<br>方法一：在CPU中设置上限/下限寄存器，保存进程可访问的物理地址的上下限<br>方法二：重定位寄存器(基址寄存器)+界地址寄存器(限长寄存器)<br>重定位寄存器中保存了进程的起始物理地址P1，界地址寄存器保存了进程的最大逻辑地址P2, 进程可以访问的物理内存位置是P1~P1+P2</p><h1 id="页面分配策略"><a href="#页面分配策略" class="headerlink" title="页面分配策略"></a>页面分配策略</h1><ul><li><strong>相关概念</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/e5e89721b565c0911c692b8012b2892e.png"></p><ul><li><p><strong>固定分配局部置换</strong>)</p><ul><li>系统为每个进程分配一定数量的物理块,在整个运行期间都不改变。</li><li>若进程在运行中发生缺页,则只能从该进程在内存中的页面中选出一页换出,然后再调入需要的页面。</li><li>缺点:很难在刚开始就确定应为每个进程分配多少个物理块才算合理。(采用这种策略的系统可以根据进程大小、优先级、或是根据程序员给出的参数来确定为一个进程分配的内存块数)</li></ul></li><li><p><strong>可变分配全局置换</strong></p><ul><li>刚开始会为每个进程分配一定数量的物理块。操作系统会保持一个空闲物理块队列。</li><li>当某进程发生缺页时,从空闲物理块中取出一块分配给该进程;若已无空闲物理块,则可选择一个未锁定的页面换出外存,再将该物理块分配给缺页的进程。</li><li>只要某进程缺页,都将获得新的物理块,仅当空闲物理块用完时,系统才选择一个未锁定的页面调出。</li><li>被选择调出的页可能是系统中任何一个进程中的页,因此这个被选中的进程拥有的物理块会减少,缺页率会增加。</li></ul></li><li><p><strong>可变分配局部置换</strong></p><ul><li>刚开始会为每个进程分配一定数量的物理块。当某进程发生缺页时,只允许从该进程自己的物理块中选出一个进行换出外存。</li><li>如果进程在运行中频繁地缺页,系统会为该进程多分配几个物理块,直至该进程缺页率趋势适当程度;</li><li>反之,如果进程在运行中缺页率特别低,则可适当减少分配给该进程的物理块。</li></ul></li><li><p><strong>调入页面的时机</strong></p><ul><li><strong>预调页策略</strong><br>  运行前调入，根据空间局部性原理,一次调入若干个相邻的页面可能比一次调入一个页面更高效。但如果提前调入的页面中大多数都没被访问过,则又是低效的。<br>  因此可以预测不久之后可能访问到的页面,将它们预先调入内存,但目前预测成功率只有50%左右。故这种策略主要用于进程的首次调入,由程序员指定应该调入的部分。</li><li><strong>请求调页策略</strong><br>运行时调入，进程在运行期间发现缺页时才将所缺页面调入内存。由这种策略调入的页面一定会被访问到,但由于每次只能调入一页,而每次调页都要磁盘I/O操作,因此I/O开销较大。</li></ul></li><li><p><strong>从何处调页</strong></p><ul><li><strong>对换区空间足够</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/cf3dd8df63ee90c85d95c7c43987561e.png"></li><li><strong>对换区空间不够</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/258a8a5c20df486e189abb531c735fa3.png"></li><li><strong>Unix方式</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2d352762246646b4e081b7b4e4f8e2e7.png"></li></ul></li><li><p><strong>抖动(颠簸)现象</strong><br>给进程分配的物理块太少，刚刚换出的页面马上又要换入内存,刚刚换入的页面马上又要换出外存，这种频繁的页面调度行为称为抖动或颠簸。</p></li><li><p><strong>工作集</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/c3e0c087bb7b935766cc5956a55a248b.png"></p><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/8cb3890c5cfca0ce03f7e5c3893cd027.png"></p><ul><li>文件的属性<ol><li>文件名<br>主要是给用户看，同一个目录下不允许重名文件</li><li>标识符<br>一个系统内各文件标识符唯一，对用户毫无可读性，给操作系统看的</li><li>类型<br>文件扩展名</li><li>位置<br>文件存放路径，给用户看的，在外存中的地址用户是看不到的</li><li>大小</li><li>创建时间</li><li>上次修改/访问时间</li><li>所有者信息</li><li>保护信息</li></ol></li></ul><h1 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h1><ul><li>什么是逻辑结构</li></ul><p><strong>逻辑结构</strong>：在用户看来，文件内部的数据是如何组织起来<br><strong>物理结构</strong>：操作系统看来，文件的数据如何存放在外存中</p><ul><li><strong>无结构文件</strong><br>又叫流式文件，比如txt，由一些二进制或者字符流组成</li></ul><h2 id="有结构文件"><a href="#有结构文件" class="headerlink" title="有结构文件"></a>有结构文件</h2><ul><li><p>又叫记录式文件，比如数据库表，由一组相似的记录组成</p></li><li><p>记录是一组相关数据线的集合，每条记录有一个数据项可作为关键字</p></li><li><p>根据记录的长度是否相等，分为：定长记录，可变长记录</p></li><li><p><strong>顺序文件</strong></p><ul><li><strong>链式存储</strong><br>逻辑上相邻的记录，在物理上离散存储。<br>无论是定长/可变长记录，都无法实现随机存取，只能从链头开始遍历</li><li><strong>顺序存储</strong><br>逻辑上相邻的记录，在物理上也相邻。<br>没有说明的情况下，顺序文件指采用顺序存储的顺序文件</li></ul><ol><li><strong>可变长记录</strong><br>无法实现随机存取</li><li><strong>定长记录</strong><br>可以实现随机存储。如果采用串结构(记录顺序与关键字无关)，无法快速找到某个关键字对应的记录，如果采用顺序结构(记录按关键字排序的)，可以使用折半查找快速找到记录</li></ol></li><li><p><strong>索引文件</strong></p><ul><li>索引表本身是定长记录的顺序文件，索引表项包含索引号，长度，指针，真正的记录可以在物理上离散存储。</li><li>索引号可以是关键字，这样就能折半查找加快检索速度，用于对信息处理及时性要求高的场合，解决了顺序文件增删不便的问题</li><li>可以用不同的数据项建立多个索引表</li></ul></li><li><p><strong>索引顺序文件</strong></p><ul><li>将记录分组，每一个组对应一个索引表项</li><li>检索记录时先检索索引表，找到分组，再顺序查找分组</li><li>记录过多时，可以建立多级索引表</li><li>记录N的表，平均查找次数是N/2</li></ul></li></ul><h1 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h1><ul><li><p><strong>文件控制块(FCB)</strong><br>一个FCB 对应一个文件，一个FCB就是一个目录项，FCB的有序集合叫“文件目录”<br>FCB包含了文件的基本信息，存取控制信息，使用信息等等，最重要的是文件名、文件存放的物理地址<br>对目录的操作:搜索、创建文件、删除文件、显示文件、修改文件</p></li><li><p><strong>单级目录结构</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/8a0b4efcd29db4cced9e2cb247b09f15.png"></p><ul><li><strong>两级目录结构</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/3cf10a2b20534a4d42023945fdc63f72.png"></p><ul><li><strong>多级(树形)目录结构</strong><br>共享不方便</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/aef4051a93db04e86ca7c72c2c2fbd2f.png"></p><ul><li><strong>无环图目录结构</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f6590892b721e118e6ec125c451395f5.png"></p><ul><li><strong>索引节点(FCB改进）</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/458da625bb3ef4b7d0550f5824fd4e60.png"></p><h1 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h1><ul><li><strong>文件块、物理块</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9e0536d5a5a087ba0172451339110976.png"></p><h2 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h2><ul><li>优点：支持随机访问；顺序访问时速度最快（移动磁头所需的时间短）</li><li>缺点：不方便文件扩展，每次扩展都得迁移到一段连续的空间，代价大；存储空间利用率低，产生磁盘碎片</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9cf825dd079e0bc8c633914c5f798618.png"></p><h2 id="链接分配"><a href="#链接分配" class="headerlink" title="链接分配"></a>链接分配</h2><ul><li><strong>隐式链接</strong><br>方便拓展，磁盘利用率高<br>不支持随机访问，查找效率低</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/c933ccf03e736d7999a3246d65c5e030.png"></p><ul><li><strong>显式链接</strong><br>逻辑块号转物理块号不需要访问磁盘，因此支持随机访问；扩展方便且不会有磁盘碎片<br>缺点是FAT要占用一定的存储空间</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/ea24291a7c921ad7b56dd5101f5cf6a2.png"></p><h2 id="索引分配"><a href="#索引分配" class="headerlink" title="索引分配"></a>索引分配</h2><p>每一个文件建立一张索引表，其中记录文件的逻辑块对应的物理块。存放索引表的磁盘块叫索引块，存放文件数据的磁盘块叫数据块。</p><ul><li><strong>链接方案</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/7b06a91634ab0108bc54fd9820475128.png"></p><ul><li><strong>多层索引</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2583fd053336ff2a32b63f4b24fdb46f.png"></p><ul><li><strong>混合索引</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/c4fdb3f9861d1a37e234bf73cebb3290.png"></p><ul><li><strong>对比</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2387e02852ddb16f92beea74b851a9e5.png"></p><h2 id="对比-2"><a href="#对比-2" class="headerlink" title="对比"></a>对比</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/8e0caa75cbdb07a6acf1bcd1acc047fa.png"></p><h1 id="文件存储空间管理"><a href="#文件存储空间管理" class="headerlink" title="文件存储空间管理"></a>文件存储空间管理</h1><ul><li><strong>存储空间划分与初始化</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/0960e40a11a50610a063a89c9291b238.png"></p><h2 id="管理方法"><a href="#管理方法" class="headerlink" title="管理方法"></a>管理方法</h2><ul><li><strong>空闲表法</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9f93c30bbc2e803a2bd12fabcc9ebcbc.png"></p><ul><li><p><strong>空闲链表法</strong></p><ol><li>空闲盘块链<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/e80227bfee4ddd88ea0543e0db25ca0d.png"></li><li>空闲盘区链<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/4960ca076e0d2fc5de879058a70715a1.png"></li></ol></li><li><p><strong>位示图法</strong><br>(字号, 位号) = (行号, 列号) -&gt; 盘块号<br>字长16 = 一行有 16 个磁盘块，注意 0 开始 还是 1 开始<br>盘块号 = 字长*字号 + 位号</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9e8ea8088ae40d789f6d8cf260f36f43.png"></p><ul><li><strong>成组链接法</strong><br>适用于大型文件系统，文件卷的目录区中，专门用一个磁盘块作为超级块，系统启动时读入内存，并且保持内外存超级块数据同步<br>比较复杂，看视频：<a href="https://www.bilibili.com/video/BV1YE411D7nH?p=52">https://www.bilibili.com/video/BV1YE411D7nH?p=52</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/d3d0b43a9930c6674bc7cb467cc2a4ec.png"></p><h1 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h1><ul><li>创建文件(creat)<ol><li>在外存中找到文件所需的空间</li><li>根据文件路径找到对应目录，创建文件对应的目录项​</li></ol></li><li>删除文件(delete)<ol><li>根据路径找到目录文件，找到文件名对应的目录项</li><li>回收文件占用的磁盘块</li><li>.删除目录项​​</li></ol></li><li>打开文件(open)<ol><li>根据路径找到目录文件，找到文件名对应的目录项，检测用户权限</li><li>将目录项复制到该进程在内存中的打开文件表中，返回表目编号​(索引号/文件描述符) </li></ol></li><li>关闭文件(close)<ol><li>删除进程的打开文件表中对应项</li><li>回收分配给该文件的内存空间等资源</li><li>系统打开文件表的打开计数器count-=1(归零时删除该项)​​</li></ol></li><li>读文件(read)<br>  需提供进程打开文件表中的索引号，读入的数据量，数据在内存中存放的位置<br>  从读指针​指向的外存位置读取指定大小的数据到指定的内存区域</li><li>写文件(write)<br>  需要提供打开文件表中的索引号，写出的数据量，写回外存的数据位置(写指针指向)</li></ul><h1 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h1><ul><li><strong>基于索引结点的共享(硬链接)</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/3c9338371fa86c7786b4ccb44689caed.png"></p><ul><li><strong>基于符号链的共享(软链接)</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/ae84e44309b34cfd622f053f47190759.png"></p><h1 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h1><ul><li>口令保护<br>  FCB中保存口令，访问时与用户提供的口令对比<br>  开销小，d但是不够安全</li><li>加密保护<br>  用密码对文件数据流加密，访问时用密码解密，比如异或加密<br>  保密性强，不需要存储密码，但是加密/解密要花费一定的时间</li><li>访问控制<br>  每一个文件FCB中增加一个访问控制表(ACL)，控制各用户的访问权限<br>  精简的访问列表，以组为单位，标记其访问权限，比如Linux里面分：所有者，所属组，其他人</li></ul><h1 id="文件系统的层次结构"><a href="#文件系统的层次结构" class="headerlink" title="文件系统的层次结构"></a>文件系统的层次结构</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9703c1be05bce180167e6fa59878359c.png"></p><h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><h2 id="磁盘的结构"><a href="#磁盘的结构" class="headerlink" title="磁盘的结构"></a>磁盘的结构</h2><ul><li><strong>磁盘/磁道/扇区</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/e2fd159374ac453b5c36d9e943ad7cf1.png"></p><ul><li><strong>如何在磁盘中读写数据</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/fb1c99d8be588db49c4ac54666d26e99.png"></p><ul><li><strong>盘面/柱面/物理地址</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/897ccf51aaaff4967dc66f561ac62f80.png"></p><ul><li><strong>磁盘分类</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f8d0cbc3ad9baf31d441fc3c5062c63e.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/ebbceb79d6505750496e61cf6fe1bc1b.png"></p><h2 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h2><ul><li><strong>读写时间</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/ab37e3ed8e17a95235ae54100ea8f8db.png"></p><ul><li><strong>调度算法</strong><ol><li><strong>先来先服务(FCFS)</strong><br>根据进程请求访问磁盘的先后顺序调度<br>公平；如果大量进程访问的磁道很分散，虚拟会很差​</li><li><strong>最短寻道时间优先(SSTF)</strong><br>优先处理当前磁头最近的磁道，保证寻道时间最短（眼前最优，未必整体最优）<br>性能较好，但是可能产生饥饿现象</li><li><strong>扫描算法(SCAN)</strong><br>又叫电梯算法，在SSTF算法的基础上，规定磁头只有移动到磁道尽头（最外侧或者最内侧）才能往回移动<br>性能较好，不会饥饿；但是只能扫描到最边上的磁道才能改变磁头方向，越外侧的的磁道，响应频率越高</li><li><strong>LOOK调度算法</strong><br>改进SCAN算法，磁头边移动边观察(LOOK)，如果移动方向没有请求了，就不必继续扫描，直接调头</li><li><strong>循环扫描算法(C-SCAN)</strong><br>只有磁头朝着某个方向移动（比如磁道号增大方向）时才处理访问请求，移动到最边上后直接返回到另一边（0号磁道），返回途中不处理请求</li><li><strong>相比SACN算法</strong><br>各个位置的磁道响应频率很平均​</li><li><strong>C-LOOK算法</strong><br>改进C-SCAN算法，磁头移动方向上如果没有请求了，就直接返回到最靠近边缘的请求磁道即可</li></ol></li></ul><h2 id="减少磁盘延时"><a href="#减少磁盘延时" class="headerlink" title="减少磁盘延时"></a>减少磁盘延时</h2><ul><li><p><strong>交替编号</strong><br>一个盘面上，让逻辑相邻的扇区在物理上有一定间隔，使读取连续逻辑扇区所需的延迟时间更小<br>​（如果没有间隔，读入N号扇区时数据时需要一些时间处理，导致错过N+1号扇区，磁盘需要再转一圈才能读到N+1）</p></li><li><p><strong>磁盘物理地址设计</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2ddce19efb6ffb45e550e494c2674ca5.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/96815efaafe28326e1cf29720642d2f2.png"></p><ul><li><strong>错位命名</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/346b8e84564845047ac77b7a84733f2d.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/5842e0c4e82f9a00c9df4f1718b63d71.png"></p><h2 id="磁盘管理-1"><a href="#磁盘管理-1" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ul><li><strong>磁盘初始化</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/4042a22e2a51b1943d413286e53f2c9d.png"></p><ul><li><strong>引导快</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f407760fd3c9f41870514841b10bec42.png"></p><ul><li><strong>坏块管理</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/62341e5c566ea63d0ee9af4e96922f1d.png"></p><h1 id="I-O管理"><a href="#I-O管理" class="headerlink" title="I/O管理"></a>I/O管理</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/841fa902a42c4e677331af7912ad4fde.png"></p><h2 id="I-O设备分类"><a href="#I-O设备分类" class="headerlink" title="I/O设备分类"></a>I/O设备分类</h2><ul><li><p>按使用特性分类</p><ol><li>人机交互类外设<br>鼠标、键盘、打印机等等，传输速度慢</li><li>存储类<br>移动硬盘、光盘等，传输速度块</li><li>物理通信设备<br>调制解调器等，速度一般</li></ol></li><li><p>按传输速度分类</p><ol><li>低速设备<br>鼠标、键盘等，每秒几百字节</li><li>中速设备<br>激光打印机等，每秒数千到上万字节</li><li>高速设备<br>磁盘等，每秒数千至千兆字节</li></ol></li><li><p>按信息交换的单位</p><ol><li>块设备<br>如磁盘等，传输数据块，可寻址（随机读写）</li><li>字符设备<br>鼠标键盘，传输字符，不可寻址，输入输出采用中断驱动方式</li></ol></li></ul><h2 id="I-O控制器"><a href="#I-O控制器" class="headerlink" title="I/O控制器"></a>I/O控制器</h2><ul><li><p><strong>机械部件</strong><br>执行具体的I/O操作，比如鼠标键盘的按钮，显示器的屏幕，移动硬盘的磁臂</p></li><li><p><strong>电子部件</strong><br>  CPU和机械部件的中介，通常是插入主板的电路板<br>  又叫I/O控制器，设备控制器</p><ol><li><strong>接受和识别CPU的命令</strong><br>控制寄存器保存命令和参数</li><li><strong>向CPU报告设备状态</strong><br>状态寄存器记录设备状态，如：1表示空闲，0表示忙碌</li><li><strong>数据交换</strong><br>数据寄存器用于双方数据交换的缓冲区</li><li><strong>地址识别</strong><br>通过CPU提供的地址判断读写哪个寄存器</li></ol></li><li><p><strong>组成</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/212f3c6c9cf226974950b81c08da30d4.png"></p><ul><li><strong>内存映像I/O 和 寄存器独立编址</strong><br>统一编址/独立编址</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/369f9a725ef40b92687193a32d81504e.png"></p><h2 id="I-O控制方式"><a href="#I-O控制方式" class="headerlink" title="I/O控制方式"></a>I/O控制方式</h2><ul><li><strong>程序直接控制</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/c8207bb3ce99d3f28812105daa163e65.png"></p><ul><li><strong>中断驱动方式</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/4de1d22c12ae1af7c5a51dd2372aba92.png"></p><ul><li><strong>直接存储器存取(DMA)方式</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/e82bebeab44dfc1375309c774b8ab8cd.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/5fb3a4d8e66831b9a01b5a333cd44336.png"></p><ul><li><strong>通道控制方式</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/378f1ea022a8162db2dc88dab6cbb2c8.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/b465db97c2c140914517931a72fc01de.png"></p><ul><li><strong>对比</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f9b61bfe6d6533744162e109d4db4b29.png"></p><h2 id="I-O软件层次结构"><a href="#I-O软件层次结构" class="headerlink" title="I/O软件层次结构"></a>I/O软件层次结构</h2><ul><li><strong>用户层软件</strong><br>提供易用的库函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/26e762ed21e497fc84190d106516923e.png"></p><ul><li><strong>设备独立性软件</strong><br>提供调用接口(read/write系统调用)<br>设备保护<br>差错处理<br>设备分配与回收<br>数据缓冲区管理<br>建立逻辑设备名到物理设备名的映射关系<br>根据设备类型调用相应的驱动程序</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2a03874beb3992f636423569dbceb5b4.png"></p><ul><li><strong>设备驱动程序</strong><br>设置设备的寄存器<br>检测设备状态</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/61e39c3eaed5fcf1f08fc77e7b7551c0.png"></p><ul><li><strong>中断处理程序</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/95ce891b6852f81a2cb3120f8e0ffd61.png"></p><h2 id="I-O核心子系统"><a href="#I-O核心子系统" class="headerlink" title="I/O核心子系统"></a>I/O核心子系统</h2><p>由设备独立性软件、设备驱动程序、中断处理程序组成，<br>属于操作系统内核部分，即I/O系统</p><h3 id="假脱机技术-SPOOLing"><a href="#假脱机技术-SPOOLing" class="headerlink" title="假脱机技术(SPOOLing)"></a>假脱机技术(SPOOLing)</h3><p>在用户层软件实现，但是408大纲将其归入I/O核心子系统</p><ul><li><p> <strong>脱机技术</strong><br>脱机技术指的是脱离主机的控制进行输入输出操作<br>很久以前是纸带输入，速度太慢，于是通过外围控制机将纸带数据输入到磁带，再输入主机，输出同理<br>缓解CPU与慢速I/O设备的速度矛盾</p></li><li><p><strong>假脱机技术实现原理</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/294494befcdb3cef54c51186ac1d7eec.png"></p><ul><li><strong>共享打印机原理分析</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/d51701e8bf1fbb9d0630f32d079cac26.png"></p><h3 id="设备分配与回收"><a href="#设备分配与回收" class="headerlink" title="设备分配与回收"></a>设备分配与回收</h3><ul><li><p>设备分配应该考虑的因素</p><ol><li>设备的固有属性<br>独占设备、共享设备、虚拟设备(SPOOLing技术将独占设备改造成虚拟的共享设备)</li><li>设备分配算法<br>先来先服务、优先级高者优先、短任务优先等等</li><li>设备分配的安全性<br>安全分配方式：串行使用设备，为进程分配一个设备后将进程阻塞，I/O完成再唤醒。不会产生死锁<br>不安全分配方式：进程请求I/O，操作系统负责分配设备，进程可以继续执行或者请求新的I/O，直到某个I/O无法满足才阻塞进程。可能产生死锁</li></ol></li><li><p>静态分配和动态分配<br>  进程运行前分配全部资源/运行时动态分配，见死锁那章</p></li><li><p>数据结构<br>  一个通道控制多个设备控制器，一个设备控制器控制多个设备</p></li><li><p>分配过程</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2799b9f792d0c4b37f05bed3e5d01870.png"></p><ul><li>分配过程改进</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/7402da3e85d0454564595bcb4eea6bc7.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/b685ebaa2793533d4851c732b59421a3.png"></p><h3 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h3><ul><li><p>缓冲区的作用</p><ol><li>缓冲区可以使用专门的硬件寄存器实现，成本高容量小，更多时候使用内存做缓冲区</li><li>缓和CPU与I/O的速度矛盾</li><li>减少对CPU的中断频率，放宽对CPU中断的时间限制（中断驱动的字符型设备）</li><li>解决数据粒度不匹配的问题（字符型/块型）</li><li>提高CPU与I/O的并行性</li></ol></li><li><p><strong>单缓冲</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/6ec49ee53ac77d8ac79f5a3d0a667f8a.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/3e7298c4ccbc0d42abb56c651dbad863.png"></p><ul><li><strong>双缓冲</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/36e52d2b73e0353f30cf5fb6d5637e36.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/36a14ebcdb5bafdecd043eaa936e6ece.png"></p><ul><li><strong>循环缓冲</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/2125e12c4ca05881880fee2526d95275.png"></p><ul><li><strong>缓冲池</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9438f9747cbace132ec876cde0751043.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;感谢!!&lt;/code&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/gl620321/article/details/107128661?utm_source=app&quot;&gt;思维导图来源&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mub</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>HTML+CSS+JS</title>
    <link href="http://example.com/2020/11/24/HTML+CSS+JavaScript/"/>
    <id>http://example.com/2020/11/24/HTML+CSS+JavaScript/</id>
    <published>2020-11-24T12:11:59.134Z</published>
    <updated>2020-12-28T13:56:53.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><ul><li><p>HTML：Hyper Text Markup Language（超文本标记语言）<br>超文本包括：文字、图片、音频、视频、动画等</p></li><li><p>W3C</p><ol><li>World Wide Web Consortium（万维网联盟）</li><li>成立于1994年，Web技术领域最权威和具影响力<br>的国际中立性技术标准机构</li></ol></li><li><p>W3C标准包括</p><ol><li>结构化标准语言（XHTML 、XML）</li><li>表现标准语言（CSS）</li><li>行为标准（DOM、ECMAScript ）</li></ol></li><li><p>网页基本结构</p><pre><code>  &lt;!DOCTYPE html&gt;  //告诉浏览器使用什么规范  &lt;html&gt;  &lt;head&gt;      &lt;title&gt; 我的第一个网页&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;      我的第一个网页  &lt;/body&gt;  &lt;/html&gt;</code></pre></li></ul><h2 id="Head标签"><a href="#Head标签" class="headerlink" title="Head标签"></a>Head标签</h2><ul><li><p>&lt;title&gt;标签<br>设定显示在浏览器标题栏中的内容</p><pre><code>  &lt;title&gt;家用电器排行榜&lt;/title&gt;</code></pre></li><li><p>&lt;meta&gt;标签<br>定义网页的字符集、关键字、描述信息等内容</p><pre><code>  &lt;meta charset=&quot;UTF-8&quot; /&gt;  &lt;meta name=“keywords” content=&quot;关键字1,关键字2,关键字3,...&quot; /&gt;  &lt;meta name=&quot;description&quot; content=&quot;网页描述内容&quot; /&gt;  &lt;meta http-equiv=&quot;refresh&quot; content=“刷新间隔时间;url=页面地址”&gt;  &lt;meat http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=某种字符集&quot;&gt;</code></pre></li></ul><blockquote><p>gb2312包含全部中文字符，utf-8 则包含全世界所有国家需要用到的字符，页面编码应与页面文件保存时的编码一致</p></blockquote><h2 id="Body标签"><a href="#Body标签" class="headerlink" title="Body标签"></a>Body标签</h2><ul><li><p>设置正文颜色与背景颜色<br>body标签封装了页面的主体内容</p><pre><code>  &lt;body bgcolor=&quot;页面背景颜色值&quot; text=&quot;页面正文颜色值&quot;&gt;</code></pre></li><li><p>添加网页背景图片</p><pre><code>  &lt;!-- fixed设置背景图片固定不动--&gt;  &lt;body background=&quot;背景图片的URI&quot; bgproperties=&quot;fixed&quot;&gt;</code></pre></li><li><p>设置网页链接文字颜色</p><pre><code>  &lt;body link=&quot;未访问状态颜色值&quot; vlink=&quot;访问过后的颜色值&quot; alink=&quot;正在访问中的颜色&quot;&gt;</code></pre></li><li><p>设置网页边距</p><pre><code>  &lt;body leftmargin=&quot;左边距值&quot; rightmargin=&quot;右边距值&quot; topmargin=&quot;上边距值&quot; bottommargin=&quot;底边距值&quot;&gt;</code></pre></li></ul><h2 id="文字与段落标记"><a href="#文字与段落标记" class="headerlink" title="文字与段落标记"></a>文字与段落标记</h2><ul><li><p>特殊文字</p></li><li><p>注释</p><pre><code>  &lt;!--注释内容--&gt;</code></pre></li><li><p>字体设置</p><pre><code>  &lt;font face=&quot;字体名称&quot; size=&quot;字号&quot; color=&quot;颜色值&quot;&gt;文字内容&lt;/font&gt;</code></pre></li></ul><blockquote><p>size字号取值范围从1到7，或者从+1到+7、从-1到-7（正负取值相对于页面默认字号）</p></blockquote><ul><li><p>字体样式标签</p><pre><code>  &lt;strong&gt;加粗&lt;/strong&gt;、&lt;b&gt;加租&lt;/b&gt;  &lt;em&gt;斜体&lt;/em&gt;  &lt;sup&gt;设置为上标&lt;/sup&gt;  &lt;sub&gt;设置为小标&lt;/sub&gt;  &lt;big&gt;设置为大字号&lt;/big&gt;  &lt;small&gt;设置为小字号&lt;/small&gt;  &lt;u&gt;设置下划线&lt;/u&gt;  &lt;s&gt;设置删除线&lt;/s&gt;</code></pre></li><li><p>标题标签</p><pre><code>  &lt;h1&gt; 一级标题&lt;/h1&gt;  &lt;h2&gt; 二级标题&lt;/h2&gt;  &lt;h3&gt; 三级标题&lt;/h3&gt;  &lt;h4&gt; 四级标题&lt;/h4&gt;  &lt;h5&gt; 五级标题&lt;/h5&gt;  &lt;h6&gt; 六级标题&lt;/h6&gt;</code></pre></li><li><p>段落标签</p><pre><code>  &lt;p&gt;这个一个段落&lt;/p&gt;</code></pre></li><li><p>换行标签</p><pre><code>  &lt;br/&gt;</code></pre></li><li><p>预格式化标签<br>预格式化可以保留在源代码中使用Enter、空格等键产生的各种格式</p><pre><code>  &lt;pre&gt; .. &lt;/pre&gt;</code></pre></li><li><p>居中标记</p><pre><code>  &lt;center&gt;居中&lt;/center&gt;</code></pre></li><li><p>缩排标记<br>缩排标记可以使一段文字产生一定位置的缩进，使用多次缩排标记可以实现多次缩排</p><pre><code>  &lt;blockquot&gt;...&lt;/blockquot&gt;</code></pre></li><li><p>水平线标签</p><pre><code>  &lt;hr/&gt;  &lt;hr width=&quot;宽度&quot; height=&quot;高度&quot; size=&quot;粗细&quot; align=&quot;水平对齐方式&quot; color=&quot;颜色&quot; noshade&gt;</code></pre></li></ul><blockquote><p>noshade表示设置实心的不带阴影的效果</p></blockquote><h2 id="列表标记"><a href="#列表标记" class="headerlink" title="列表标记"></a>列表标记</h2><ul><li><p>有序列表<br>以数字或字母等可以表示顺序的符号为项目前导符来排列列表项的列表</p><pre><code>  &lt;ol&gt;      &lt;li&gt;列表项一&lt;/li&gt;      &lt;li&gt;列表项二&lt;/li&gt;      &lt;li&gt;列表项三&lt;/li&gt;  &lt;/ol&gt;</code></pre></li></ul><p>前导符设置：前导符可以取1、A、a、I、i这几种，默认为”1”</p><pre><code>    &lt;ol type=&quot;前导符&quot;&gt;</code></pre><p>起始编号设置：</p><pre><code>    &lt;ol start=&quot;起始编号位序&quot;&gt;</code></pre><ul><li><p>无序列表<br>以无序次含义的符号为前导符的列表</p><pre><code>  &lt;ul&gt;      &lt;li&gt;列表项一&lt;/li&gt;      &lt;li&gt;列表项二&lt;/li&gt;      &lt;li&gt;列表项三&lt;/li&gt;  &lt;/ul&gt;</code></pre></li></ul><p>前导符设置：前导符可以取disc（实心圆点）、circle（空心圆点）、square（实心小方块），默认为”disc”</p><pre><code>    &lt;ul type=&quot;前导符&quot;&gt;</code></pre><ul><li><p>定义列表<br>一种具有两个层次的列表，可以用于对名词的解释，其中名词为第一层次，解释为第二层次</p><pre><code>  &lt;dl&gt;      &lt;dt&gt;名词一&lt;/dt&gt;          &lt;dd&gt;解释一&lt;/dd&gt;          &lt;dd&gt;解释二&lt;/dd&gt;          ...      &lt;dt&gt;名词二&lt;/dt&gt;          &lt;dd&gt;解释一&lt;/dd&gt;          &lt;dd&gt;解释二&lt;/dd&gt;  &lt;/dl&gt;</code></pre></li></ul><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul><li><p>语法</p><pre><code>  &lt;table width=“200” border=“8”&gt;      &lt;tr&gt;          &lt;td&gt; 第1 个单元格的内容&lt;/td&gt;          &lt;td&gt; 第2 个单元格的内容&lt;/td&gt;          ……      &lt;/tr&gt;      &lt;tr&gt;          &lt;td&gt; 第1 个单元格的内容&lt;/td&gt;          &lt;td&gt; 第2 个单元格的内容&lt;/td&gt;          ……      &lt;/tr&gt;  &lt;/table&gt;</code></pre></li><li><p>设置表格边框和大小</p><pre><code>  &lt;table border=&quot;边框宽度&quot; bordercolor=&quot;边框颜色&quot; width=&quot;宽度&quot; height=&quot;高度&quot;&gt;</code></pre></li><li><p>设置表格背景颜色和对齐方式</p><pre><code>  &lt;table bgcolor=&quot;颜色值&quot; align=&quot;对齐方式&quot;&gt;</code></pre></li><li><p>设置背景图片</p><pre><code>  &lt;table background=&quot;图片路径&quot;&gt;</code></pre></li><li><p>设置表格边框间隔</p><pre><code>  &lt;table cellpadding=&quot;内容与边框距离值&quot; cellspacing=&quot;边框之间间距值&quot;&gt;</code></pre></li><li><p>设置表格的标题</p><pre><code>  &lt;caption align=&quot;水平对齐方式left/right/center&quot; valign=&quot;垂直对齐方式top/bottom&quot;&gt;表格标题&lt;/caption&gt;</code></pre></li><li><p>&lt;tr&gt;标签<br>一个&lt;tr&gt;&lt;/tr&gt;表示一行</p><pre><code>  &lt;tr height=&quot;行高&quot; align=&quot;水平对齐方式&quot; valign=&quot;垂直对齐方式&quot; bordercolor=&quot;颜色值&quot; bgcolor=&quot;颜色值&quot;&gt;&lt;/tr&gt;</code></pre></li><li><p>&lt;td&gt;和&lt;th&gt;标签</p><table><thead><tr><th align="center">常用属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">align</td><td align="center">水平对齐方式，取值left，right，center</td></tr><tr><td align="center">valign</td><td align="center">垂直对齐方式，取值top，middle，bottom</td></tr><tr><td align="center">bgcolor</td><td align="center">单元格背景颜色</td></tr><tr><td align="center">background</td><td align="center">单元格背景图片</td></tr><tr><td align="center">bordercolor</td><td align="center">单元格边框颜色</td></tr><tr><td align="center">width</td><td align="center">单元格宽度，单位为像素或者百分比</td></tr><tr><td align="center">height</td><td align="center">单元格高度</td></tr><tr><td align="center">rowspan</td><td align="center">单元格的跨行操作</td></tr><tr><td align="center">colspan</td><td align="center">单元格的跨列操作</td></tr></tbody></table></li></ul><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><ul><li><p>常见的图像格式</p><ol><li>位图：JPG、PNG、GIF</li><li>矢量图：ai、cdf、fh、swf</li></ol></li><li><p>区别</p><ol><li>位图：色彩丰富，表现力强，容量大，用于网页</li><li>矢量图：图片放大，清晰度不变，不适用于色彩，丰富的图片，用于印刷行业、网页logo等。</li></ol></li><li><p>设置图片大小和提示</p><pre><code>  &lt;img src=&quot;path&quot; alt=&quot;text&quot; title=&quot;text&quot; width=&quot;x&quot; height=&quot;y&quot; /&gt;</code></pre></li></ul><p>src为图像路径，alt为图像的替代文章，title为鼠标悬停提示文字，width，height为宽高</p><ul><li><p>设置图片与周围对象的间距</p><pre><code>  &lt;img src=&quot;图片路径&quot; hspace=&quot;水平间距&quot; vaspace=&quot;垂直间距&quot;&gt;</code></pre></li><li><p>设置图片的对齐方式</p><pre><code>  &lt;img src=&quot;图片文件路径&quot; align=&quot;top/bottom/middle/left/right&quot;&gt;</code></pre></li><li><p>设置图片边框</p><pre><code>  &lt;img src=&quot;图片文件路径&quot; border=&quot;边框宽度&quot;&gt;</code></pre></li></ul><h2 id="滚动字幕"><a href="#滚动字幕" class="headerlink" title="滚动字幕"></a>滚动字幕</h2><ul><li><p>设置滚动字幕<br>默认情况下，&lt;marquee&gt;标签得到的滚动字幕是从右向左的</p><pre><code>  &lt;marquee&gt;滚动文字&lt;/marquee&gt;</code></pre></li><li><p>设置滚动方向</p><pre><code>  &lt;marquee direction=&quot;滚动方向&quot;&gt;滚动文字&lt;/marquee&gt;</code></pre></li></ul><table><thead><tr><th align="center">direction属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">up</td><td align="center">从下往上滚动</td></tr><tr><td align="center">down</td><td align="center">从上往下滚动</td></tr><tr><td align="center">left</td><td align="center">从左往右滚动</td></tr><tr><td align="center">right</td><td align="center">从右往左滚动</td></tr></tbody></table><ul><li><p>设置滚动字幕的滚动行为</p><pre><code>  &lt;marquee behavior=&quot;滚动行为&quot;&gt;滚动文字&lt;/marquee&gt;</code></pre></li></ul><table><thead><tr><th align="center">behavior属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">scroll</td><td align="center">设置文字循环往复滚动（默认）</td></tr><tr><td align="center">slide</td><td align="center">设置文字只进行一次滚动</td></tr><tr><td align="center">alternate</td><td align="center">设置文字循环交替往返进行滚动</td></tr></tbody></table><ul><li><p>设置字幕的滚动速度和滚动延迟特性</p><pre><code>  &lt;marquee scrollamount=&quot;滚动速度值(默认为6)&quot; scrolldelay=&quot;延迟时间(毫秒为单位)&quot;&gt;滚动文字&lt;/marquee&gt;</code></pre></li><li><p>设置字幕的滚动区域及其背景色</p><pre><code>  &lt;marquee bgcolor=&quot;颜色值&quot; width=&quot;宽度&quot; height=&quot;高度&quot;&gt;滚动字幕&lt;/marquee&gt;</code></pre></li><li><p>设置字幕的滚动区域与周围对象的间距</p><pre><code>  &lt;marquee hspace=&quot;水平间距&quot; vspace=&quot;垂直间距&quot;&gt;滚动文字&lt;/marquee&gt;</code></pre></li></ul><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><ul><li><p>视频标签</p><pre><code>      &lt;video controls&gt;          &lt;source src=&quot;video/video.webm&quot; type=&quot;video/webm&quot;/&gt;          &lt;source src=&quot;video/video.mp4&quot; type=&quot;video/mp4&quot;/&gt;      &lt;/video&gt;</code></pre></li></ul><blockquote><p>cotrols表示提供播放、暂停和音量 的控件</p></blockquote><ul><li><p>自动播放</p><pre><code>  &lt;video autoplay&gt;      &lt;source src=&quot;video/video.webm&quot; type=&quot;video/webm&quot;/&gt;      &lt;source src=&quot;video/video.mp4&quot; type=&quot;video/mp4&quot;/&gt;  持 你的浏览器不支持video 元素  &lt;/video&gt;</code></pre></li><li><p>音频标签</p><pre><code>  &lt;audio controls&gt;      &lt;source src=&quot;music/music.mp3&quot; type=&quot;audio/mpeg&quot;/&gt;      &lt;source src=&quot;music/music.ogg&quot; type=&quot;audio/ogg&quot;/&gt;  持 你的浏览器不支持audio 元素  &lt;/audio&gt;</code></pre></li></ul><h2 id="结构元素"><a href="#结构元素" class="headerlink" title="结构元素"></a>结构元素</h2><pre><code>    &lt;header&gt;&lt;h2&gt; 网页头部&lt;/h2&gt; &lt;/header&gt;    &lt;section&gt;&lt;h2&gt; 网页主体部分&lt;/h2&gt;&lt;/section&gt;    &lt;footer&gt;&lt;h2&gt; 网页底部&lt;/h2&gt;&lt;/footer&gt;    &lt;artice&gt;独立的文章内容&lt;/artice&gt;    &lt;aside&gt;相关内容或应用&lt;/aside&gt;    &lt;nav&gt;导航类辅助内容&lt;/nav&gt;</code></pre><h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><p>框架的基本结构分框架集和框架两个部分，因为只分隔窗口，不涉及页面的具体内容，所以不需要&lt;body&gt;包裹</p><ul><li><p>框架集标记<br>&lt;frameset&gt;的作用主要是定义浏览器窗口的分割方式、各分隔窗口(框架)的大小，以及设置框架边框的颜色和粗细等属性。</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">border</td><td align="center">设置边框粗细</td></tr><tr><td align="center">bordercolor</td><td align="center">边框颜色</td></tr><tr><td align="center">frameboder</td><td align="center">是否显示边框，可取值0或和1，或者no和yes</td></tr><tr><td align="center">framespacing</td><td align="center">框架之间的间距</td></tr><tr><td align="center">rows</td><td align="center">按行，即上下(垂直)方式分割</td></tr><tr><td align="center">cols</td><td align="center">按列，即左右(水平)方式分割</td></tr></tbody></table></li><li><p>左右分隔窗口</p><pre><code>  &lt;frameset cols=&quot;value1,value2,..&quot;&gt;      &lt;frame&gt;      &lt;frame&gt;      ...  &lt;/frameset&gt;</code></pre></li><li><p>上下分割窗口</p><pre><code>  &lt;frameset rows=&quot;value1,value2,..&quot;&gt;      &lt;frame&gt;      &lt;frame&gt;      ...  &lt;/frameset&gt;</code></pre></li><li><p>嵌套分隔窗口</p><pre><code>  &lt;frameset rows=&quot;80%,*,..&quot;&gt;      &lt;frame/&gt;      &lt;frameset cols=&quot;20%,*,..&quot;&gt;          &lt;frame&gt;          &lt;frame&gt;          ...      &lt;/frameset&gt;      ...  &lt;/frameset&gt;</code></pre></li><li><p>使用&lt;frameset&gt;标签设置框架边框</p><pre><code>  &lt;frameset frameborder=&quot;0|1|no|yes&quot; framespacing=&quot;边框间距&quot; border=&quot;边框宽度&quot; bordercolor=&quot;颜色值&quot;&gt;</code></pre></li><li><p>框架标记&lt;frame&gt;<br>&lt;frame&gt;用于设置子窗口，是个单标记，必须放在frameset中</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">设置在框架中显示的页面的URL地址</td></tr><tr><td align="center">bordercolor</td><td align="center">设置边框颜色</td></tr><tr><td align="center">frameboder</td><td align="center">是否显示边框，可取值0或和1，或者no和yes</td></tr><tr><td align="center">border</td><td align="center">设置边框粗细</td></tr><tr><td align="center">name</td><td align="center">设置框架名称，可作为超链接的target的属性值</td></tr><tr><td align="center">noresize</td><td align="center">使用时不能调整窗口的大小</td></tr><tr><td align="center">scorlling</td><td align="center">设置是否显示滚动条，可取值yes,no和auto</td></tr><tr><td align="center">marginwidth</td><td align="center">设置内容与框架窗口左右边框的距离</td></tr><tr><td align="center">marginheight</td><td align="center">设置内容与框架窗口上下边框的距离</td></tr></tbody></table></li><li><p>设置框架显示内容<br>设置指定某个页面的内容</p><pre><code>  &lt;frame src=&quot;需要显示页面的URL&quot;&gt;</code></pre></li><li><p>设置框架边距</p><pre><code>  &lt;frame frameborder=&quot;0|1|no|yes&quot; bordercolor=&quot;颜色值&quot;&gt;</code></pre></li><li><p>设置框架名称</p><pre><code>  &lt;frame name=&quot;框架名称&quot;&gt;</code></pre></li><li><p>设置框架固定大小</p><pre><code>  &lt;frame noresize=&quot;noresize&quot;&gt;</code></pre></li><li><p>设置框架滚动条</p><pre><code>  &lt;frame scrolling=&quot;auto|no|yes&quot;&gt;</code></pre></li><li><p>设置框架边距</p><pre><code>  &lt;frame marginheight=&quot;上、下边距&quot; marginwidth=&quot;左、右边距&quot;&gt;</code></pre></li><li><p>不支持框架标签<br>有些浏览器不支持框架，会显示空白页，这时，需要使用&lt;noframes&gt;显示提示信息</p><pre><code>  &lt;noframes&gt;      &lt;body&gt;          抱歉，你的浏览器版本太低，不支持框架，无法看到页面内容，请使用较新的浏览器来浏览      &lt;/body&gt;  &lt;/noframes&gt;</code></pre></li><li><p>浮动框架标签<br>&lt;iframe&gt;是一种特殊的框架页面，可以作为HTML文档的一部分,，放在body标签里面</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">设置在浮点框架中显示的页面的URL地址</td></tr><tr><td align="center">width</td><td align="center">设置浮动框架的宽度</td></tr><tr><td align="center">height</td><td align="center">设置浮动框架的高度</td></tr><tr><td align="center">align</td><td align="center">设置浮动框架的对齐方式</td></tr><tr><td align="center">frameboder</td><td align="center">是否显示边框，可取值0或和1，或者no和yes</td></tr><tr><td align="center">name</td><td align="center">设置框架名称，可作为超链接的target的属性值</td></tr><tr><td align="center">noresize</td><td align="center">使用时不能调整窗口的大小</td></tr><tr><td align="center">scorlling</td><td align="center">设置是否显示滚动条，可取值yes,no和auto</td></tr><tr><td align="center">bordercolor</td><td align="center">设置边框颜色</td></tr><tr><td align="center">marginwidth</td><td align="center">设置内容与框架窗口左右边框的距离</td></tr><tr><td align="center">marginheight</td><td align="center">设置内容与框架窗口上下边框的距离</td></tr></tbody></table></li><li><p>在页面中嵌入浮动框架</p><pre><code>  &lt;iframe src=&quot;源文件地址&quot;&gt;</code></pre></li><li><p>浮动框架的大小</p><pre><code>  &lt;iframe src=&quot;源文件地址&quot; width=&quot;宽度&quot; heigth=&quot;高度&quot;&gt;</code></pre></li><li><p>浮点框架的对齐方式</p><pre><code>  &lt;iframe src=&quot;源文件地址&quot; align=&quot;对齐方式&quot;&gt;</code></pre></li><li><p>实现页面间的相互跳转</p><ol><li><p>在被打开的框架上加name属性</p><pre><code> &lt;iframe name=&quot;mainFrame&quot; src=&quot;a.html&quot;/&gt;</code></pre></li><li><p>在超链接上设置target目标窗口属性为希望显示的框架窗口名</p><pre><code> &lt;a href=&quot;a.html&quot; target=&quot;mainFrame&quot;&gt; 下边显示第二页&lt;/a&gt;</code></pre></li></ol></li></ul><h2 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h2><ul><li>块元素<br>  无论内容多少，该元素独占一行（p、h1-h6…）</li><li>行内元素<br>  内容撑开宽度，左右都是行内元素的可以排在一<br>行(a、strong、em…)</li></ul><h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><ul><li><p>普通链接</p><pre><code>  &lt;a href=&quot;目标端点&quot; target=&quot; 目标窗口位置&quot;&gt; 链接文字或图像&lt;/a&gt;</code></pre></li></ul><table><thead><tr><th align="center">target属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">_blank</td><td align="center">在新窗口打开链接文档</td></tr><tr><td align="center">_self</td><td align="center">在同一个框架或同一窗口中打开链接文档(默认属性)</td></tr><tr><td align="center">_parent</td><td align="center">在上一级窗口中打开，一般在框架页面中经常使用</td></tr><tr><td align="center">_top</td><td align="center">在浏览器的整个窗口中打开，忽略如何框架</td></tr><tr><td align="center">框架名称</td><td align="center">在指定的框架窗口中打开链接文档</td></tr></tbody></table><ul><li><p>锚链接（从A页面的甲位置跳转到本页中的乙位置）</p><ol><li><p>创建跳转标记</p><pre><code> &lt;a name=&quot;marker&quot;&gt; 乙位置&lt;/a&gt;</code></pre></li><li><p>创建跳转链接</p><pre><code> &lt;a href=&quot;#marker&quot;&gt; 甲位置&lt;/a&gt;</code></pre></li></ol></li><li><p>功能性链接（电子邮件、QQ、MSN）</p><pre><code>  &lt;a href=&quot;mailto:bdqnWebmaster@bdqn.cn&quot;&gt; 联系我们&lt;/a&gt;</code></pre></li><li><p>脚本链接</p><pre><code>  &lt;a href=&quot;javascript:alert(&#39;你好，欢迎访问！&#39;)&quot;&gt;欢迎访问&lt;/a&gt;</code></pre></li><li><p>文件下载<br>当链接的目标文档类型属于.doc、.Rar、.zip、.exe等</p><pre><code>  &lt;a href=&quot;task.exe&quot;&gt;可执行文件下载&lt;/a&gt;</code></pre></li><li><p>图片链接</p><pre><code>  &lt;a href=&quot;目标地址&quot;&gt;&lt;img src=&quot;图片地址&quot;&gt;&lt;/a&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML基础&quot;&gt;&lt;a href=&quot;#HTML基础&quot; class=&quot;headerlink&quot; title=&quot;HTML基础&quot;&gt;&lt;/a&gt;HTML基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTML：Hyper Text Markup Language（超文本标记语言）&lt;br&gt;超</summary>
      
    
    
    
    <category term="HTML+CSS+JS" scheme="http://example.com/categories/HTML-CSS-JS/"/>
    
    
    <category term="HTML+CSS+JS" scheme="http://example.com/tags/HTML-CSS-JS/"/>
    
  </entry>
  
  <entry>
    <title>算法随笔</title>
    <link href="http://example.com/2020/11/24/%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/"/>
    <id>http://example.com/2020/11/24/%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/</id>
    <published>2020-11-24T12:11:03.333Z</published>
    <updated>2020-12-04T04:53:01.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="菲波拉契"><a href="#菲波拉契" class="headerlink" title="菲波拉契"></a>菲波拉契</h2><blockquote><p>有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？<br>//这是一个菲波拉契数列问题</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？   </span></span><br><span class="line"><span class="comment">//这是一个菲波拉契数列问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1=f2=1;</span></span><br><span class="line"><span class="comment">f3=f1+f2=2;</span></span><br><span class="line"><span class="comment">fn=f(n-1)+f(n-2);</span></span><br><span class="line"><span class="comment">1,1,2,3,5,8,13,21...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第1个月的兔子对数：1\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第2个月的兔子对数：1\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,f,m=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">24</span>;i++)&#123;</span><br><span class="line">f=f2;   <span class="comment">//引进f保存叠加变量 </span></span><br><span class="line">f2=f1+f2;</span><br><span class="line">f1=f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个月的兔子对数：%d\n&quot;</span>,i,f2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><blockquote><p>判断101-200之间有多少个素数，并输出所有素数。<br>程序分析：判断素数的方法：用一个数分别去<code>除2到sqrt(这个数)</code>，如果能被整除， 则表明此数不是素数，反之是素数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"><span class="comment">//判断素数的方法：用一个数分别去除2~sqrt(这个数)，如果能被整除，则表明不是素数，反之为素数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);i++) <span class="comment">//从 2到算术平方根遍历 </span></span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)    <span class="comment">//存在约数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//非素数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(isPrime(i))&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,i);</span><br><span class="line">count++; </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n素数：只有1和它本身这两个因子的数！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n素数个数:%d\n&quot;</span>,count); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.输出斐波纳契数列前40个数据。<br>（要求：利用函数调用实现，输出来时为一排10个，则输出有4行；若一排8个，则输出有5行。）</p><p>2.输出魔方阵。如3行3列、4行4列、5行5列（如输入3，则输出的魔方阵为3行3列，如输入4，输出的魔方阵为4行4列。）<br><a href="https://blog.csdn.net/leipinyuan/article/details/79090126">魔方阵</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础算法&quot;&gt;&lt;a href=&quot;#基础算法&quot; class=&quot;headerlink&quot; title=&quot;基础算法&quot;&gt;&lt;/a&gt;基础算法&lt;/h1&gt;&lt;h2 id=&quot;菲波拉契&quot;&gt;&lt;a href=&quot;#菲波拉契&quot; class=&quot;headerlink&quot; title=&quot;菲波拉契&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C语言程序设计</title>
    <link href="http://example.com/2020/11/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2020/11/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-11-24T12:10:10.816Z</published>
    <updated>2020-12-13T12:37:54.242Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_45583303/article/details/105373477">MSDN Library官方文档下载与安装（MFC）</a></p><p><a href="https://blog.csdn.net/huijunma2010/article/details/86553407">C语言编译器哪个好_6款好用的C语言编译器推荐</a></p><p><a href="https://bloodshed-dev-c.en.softonic.com/">Dev-C++编译器下载地址</a></p><h1 id="程序设计和C语言"><a href="#程序设计和C语言" class="headerlink" title="程序设计和C语言"></a>程序设计和C语言</h1><p><strong><em><code>程序</code>，就是一组计算机能识别和执行的指令。</em></strong></p><h2 id="计算机语言的发展"><a href="#计算机语言的发展" class="headerlink" title="计算机语言的发展"></a>计算机语言的发展</h2><p>计算机语言就是指计算机和人都能识别的语言。</p><ul><li>机器语言<br>计算机工作基于<code>二进制</code>，从根本上说，计算机只能识别和接受由0和1组成的指令。<br><code>机器指令</code>：计算机能直接识别和接受的二进制代码。例如：1011 0110 0000 0000 代表一次加法<br>机器语言就是<code>机器指令的集合</code>。</li><li>汇编语言<br>汇编语言又叫符号语言，指用一些英文和数字表示一个指令，例如ADD代表“加”。<br>计算机并不能直接识别符号，需要通过<code>汇编语言</code>把符号语言的指令转化为<code>机器指令</code>。</li></ul><blockquote><p>机器语言和汇编语言完全依赖于具体机器特性，是面向机器的语言，称为计算机**<em><code>低级语言</code>**</em>。</p></blockquote><ul><li>高级语言<br>高级语言不依赖于具体机器，所编写的程序对任何型号的计算机都适用。<br>当然，计算机也不能直接识别高级语言程序，需要通过<code>编译器</code>转化为机器指令。</li></ul><blockquote><p>高级语言经历了不同的发展阶段：（1）非结构化的语言（2）结构化语言（3）面向对象的语言。</p></blockquote><h2 id="C语言的发展及特点"><a href="#C语言的发展及特点" class="headerlink" title="C语言的发展及特点"></a>C语言的发展及特点</h2><p>1970年美国AT&amp;T贝尔实验室的Ken Thompson以<code>BCPL语言</code>为基础设计了B语言，1972-1973年，<code>D.M.Ritchie</code>在B语言的基础上设计出了C语言。开发C语言的目的在于<code>尽可能降低用它所写的软件对硬件平台的依赖程度，使之具有可移植性</code>  。<br><code>C语言特点</code>:</p><ul><li>语言简洁、紧凑，使用方便、灵活。<br>C语言一共只有37个关键字、9中控制语句。只包含极少与硬件有关的拆分，C语言不直接提供输入输出等语句（这些都由编译系统所提供的库函数实现），相当简洁。</li><li>运算符丰富<br>C语言运算符包含范围很广泛，共有34种运算符。</li><li>数据类型丰富。</li><li>具有结构化的控制语句。</li><li>语法限制不太严格，程序设计自由度大。</li><li><strong><em>C语言允许<code>直接访问物理地址</code>，能进行位（bit）操作，能实现汇编语言的大部分功能，<code>可以直接对硬件进行操作</code></em></strong>。</li><li>用C语言编写的程序可移植性好。</li></ul><h2 id="C语言结构"><a href="#C语言结构" class="headerlink" title="C语言结构"></a>C语言结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  //编译预处理指令</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//定义主函数 </span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//函数开始的标志</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;HelloWorld!&quot;</span>); <span class="comment">//输出语句</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//函数执行完毕时返回函数值0</span></span><br><span class="line">&#125;<span class="comment">//函数结束的标志</span></span><br></pre></td></tr></table></figure><ul><li>一个程序由一个或多个源程序文件组成。<br>①预处理指令。（#include&lt;stdio.h&gt;)<br>②全局声明。在函数之外进行数据声明，对整个源程序文件范围内有效，在函数中声明的变量为局部变量，只在函数范围内有效。<br>③函数定义。</li><li>函数是C程序的主要组成部分。<br>一个C语言程序是由一个或多个函数组成的，其中必须包含一个main函数（有且只有一个main函数）。</li><li>一个函数包括两个部分<br>①函数首部<br>即函数第1行，包括函数名、函数类型、函数属性、函数参数名、参数类型。<br>②函数体<br>包含声明部分和执行部分。</li><li>程序总是从main函数开始执行的。</li><li>程序中对计算机的操作是由函数中的C语言完成的。</li><li>在每个数据声明和语句的最后必须有一个分号。</li><li>C语言本身不提供输入输出语句。</li><li>程序应当包含注释。</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>一个程序主要包括<code>对数据的描述</code>和<code>对操作的描述</code>。操作的描述即要求计算机进行操作的步骤，也就是<code>算法</code>。</p><blockquote><p>著名计算机科学家沃思(Nikiklaus Wirth)提出一个公式： <strong><em><code>算法+数据结构=程序</code></em></strong></p></blockquote><h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h2><ul><li><strong><em>有穷性</em></strong><br>一个算法应包含有限的操作步骤，而不能是无限的。</li><li><strong><em>确定性</em></strong><br>算法中每一个步骤都应当是确定的，而不应当是含糊的、模棱两可的。</li><li><strong><em>有零个或多个输入</em></strong><br>输入就是在执行算法时需要从外界取得必要的信息。</li><li><strong><em>有一个或多个输出</em></strong><br>算法的目的就是为了求解，“解”就是输出。</li><li><strong><em>有效性</em></strong><br>算法中的每一个步骤都应当能有效地执行，并得到确定的结果。</li></ul><h2 id="算法的优劣"><a href="#算法的优劣" class="headerlink" title="算法的优劣"></a>算法的优劣</h2><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>时间复杂度和空间复杂度<br>①时间复杂度：算法运行所需的时间。<br>②空间复杂度：算法运行所需的存储空间的多少。</li></ul><h2 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h2><ul><li>自然语言</li><li>流程图<br>①顺序结构<br>②选择结构<br>③循环结构</li><li>N-S流程图</li><li>伪代码</li><li>计算机语言</li></ul><h2 id="结构化程序设计方法"><a href="#结构化程序设计方法" class="headerlink" title="结构化程序设计方法"></a>结构化程序设计方法</h2><ul><li>自顶向下</li><li>逐步细化</li><li>模块化设计</li><li>结构化编码</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th align="center">类型</th><th align="center">16位</th><th align="center">32位</th><th align="center">64位</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">short int</td><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">2</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">unsigned int</td><td align="center">2</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">long</td><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">long long</td><td align="center">8</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">unsigned long</td><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr></tbody></table><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>在程序运行过程中，其值不能被改变的量称为常量。</p><ul><li><p>整型常量。如1000，123。<br>①八进制整数：常数前加0进行修饰。如0123。<br>②十六进制整数：常量前加0x作为前缀。如0x123。</p></li><li><p>实型常量。<br>①十进制小数形式。如123.4，0.3。<br>②指数形式。如12.34e3（代表12.34*10的三次方）</p></li><li><p>字符常量<br>①普通字符。如’a’,’3’。<br>②转义字符。以字符”&quot;开头的字符序列。</p></li><li><p>字符串常量。如”China”。</p></li><li><p>符号常量。用#define指令，指定用一个符号代表一个常量。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> PI 3.1415      <span class="comment">//注意行末没有分号</span></span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量代表一个有名字的、具有特定属性的一个**<em><code>存储单元</code>**</em>，可以用来存放数据，页就是存放变量的值，在程序运行时间，变量的值是可以改变的。 </li><li>变量必须<code>先定义，后使用</code>。变量名和变量值是不同的概念，变量名是存储空间的名字，变量值是存放在存储空间的数据。</li><li>在编译时，通过变量名找到相应的内存地址，从该存储单元中读取数据。</li></ul><h2 id="常变量"><a href="#常变量" class="headerlink" title="常变量"></a>常变量</h2><p>C99允许使用<code>常变量</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//a被定义为一个整型变量，指定值为3，而且在变量存在期间其值不能改变。</span></span><br></pre></td></tr></table></figure><p>常变量和符号变量的区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> pi=<span class="number">3.1415</span></span><br></pre></td></tr></table></figure><ul><li>符号常量使用#define定义，是预编译指令，它是用符号常量代表一个字符串，在预编译时仅是进行字符替换，在预编译后，符号常量就不存在了（全置换为3.1415了），对符号常量是不分配存储单元的。</li><li>常变量占用存储单元，有变量值，只是该值不变而已。</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识就是一个对象的名字。</p><ul><li>C语言规定标识符只能使用<code>字母、数字和下划线</code>组成，且不能以数字开头。</li><li>C语言区分大小写，sun和SUM是两个不同的变量。</li><li>标识符不能是关键字。</li></ul><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><ul><li><p>基本整型（int型）<br>编译系统分配给int型数据2个字节或者<code>4</code>个字节（由具体的C编译系统自行决定）。<br>整型在存储单元中的存储方式是：用整数的补码形式存放。<br>一个正数的补码是此数的二进制形式，如5的二进制形式是101，如果用两个字节存放一个整数，则在存储单元中数据形式为 0000 0000 0000 0101。第一个数字为符号位，0代表整数，1代表负数。<br>求负数的补码方法：**<em>先将此数的绝对值写成二进制形式，然后对其后面所有各二进制按位取反，再加1**</em>。如-5：1111 1111 1111 1011。</p></li><li><p>短整型（short int）<br>int数据4个字节，短整型2个字节，存储方式和int型相同。</p></li><li><p>长整型（long int)</p></li><li><p>双长整型（long long int)</p><blockquote><p>sizeof(short)&lt;=sizeof(int)&lt;=sizeof(long)&lt;=sizeof(long long)</p></blockquote></li><li><p>无符号和有符号<br>有符号(sighed)整型数据存储单元中最高位代表符号（0为正，1为负）。<br>无符号(unsighed)，存储单元中全部二进制都用作存放数值本身，而没有符号。无符号只能存放不带符号的整数，如123，而不能存放负数，如-123。但由于最高位不要来表示符号，而用来表示数值，所以<code>无符号整型变量可以存放的正数范围比一般整型变量中整数的范围扩大一倍</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> num=<span class="number">10</span>;  <span class="comment">//signed可以省去</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> NUM=<span class="number">10</span>;  <span class="comment">//不能为负数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>,NUM);  <span class="comment">//指定用%u格式输出</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字符型数据"><a href="#字符型数据" class="headerlink" title="字符型数据"></a>字符型数据</h2><p>字符是以<code>整数形式</code>（字符的ASCII代码）存放在内存单元中的。例如</p><table><thead><tr><th align="center">字符</th><th align="center">ASCII代码</th><th align="center">二进制形式</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">65</td><td align="center">1000001</td></tr><tr><td align="center">a</td><td align="center">97</td><td align="center">1100001</td></tr><tr><td align="center">1</td><td align="center">49</td><td align="center">0110001</td></tr><tr><td align="center">%</td><td align="center">32</td><td align="center">0100000</td></tr><tr><td align="center">%</td><td align="center">37</td><td align="center">0100101</td></tr><tr><td align="center">\n</td><td align="center">10</td><td align="center">0001010</td></tr></tbody></table><p>可以看到，以上的字符的ASCII代号码最多用<code>7个二进制</code>就可以表示。所有，在C中，**<em>指定一个字节(8位)存储一个字符**</em>。此时，字节中第一位置为0，如“a”十进制数97，二进制数为0110 0001。</p><blockquote><p>字符‘1’只是代表一个形状为1的符号，在需要时按原样输出，在内存中以ASCII码形式存储，占1个字节。整数1是以整数形式存储方式（以二进制补码方式）存储的，占2个或4个字节。</p></blockquote><p><strong><em><code>字符变量</code></em></strong><br>字符变量用<code>char</code>定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c=<span class="string">&#x27;?&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c\n&quot;</span>,c,c);<span class="comment">// 63 ?</span></span><br><span class="line"><span class="comment">//%d输出整型，%c输出字符，一个字符既可以以字符形式输出，也可以以整型形式输出。</span></span><br><span class="line"><span class="comment">//定义c为字符型变量并使初值为字符&#x27;?&#x27;。&#x27;?&#x27;的ASCII代码是63，系统把整数63赋给变量c。</span></span><br><span class="line"><span class="comment">//c是字符变量，实际上是一个字节的整型变量，由于常用来存放字符，故称为字符变量。</span></span><br><span class="line"><span class="comment">//可以把0~127之间的整数赋给一个字符变量</span></span><br></pre></td></tr></table></figure><h2 id="浮点型数据"><a href="#浮点型数据" class="headerlink" title="浮点型数据"></a>浮点型数据</h2><p>浮点型数据是用来<code>表示具有小数点的实数</code>的。在C语言中，实数是以<code>指数形式</code>存放在存储单元中的。一个实数表示为指数可以有不止一种形式，如3.14159可以表示为：3.14159<em>10^0,0.314159</em>10^1,0.0314159<em>10^2等，可以看到：小数点的位置是可以在314159几个数字之间和之前或之后浮点的，只要在小数点位置浮动的同时改变指数的值，就可以保证其指不变。由于小数点位置可以浮点，所以实数的指数形式称为**</em><code>浮点数</code>***。</p><blockquote><p>规范化指数形式：小数部分中小数点前的数字为0、小数点后第1位数字不为0的表示形式。如0.1314159*10^1。</p></blockquote><p>浮点数类型包括float(单精度浮点型)、double(双精度浮点型)、long double(长双精度浮点型)。</p><ul><li>float型(单精度浮点型)<br>编译系统为每一个float型变量分配<code>4</code>个字节，数值以规范化的<code>二进制数指数形式</code>存放在存储单元中。存储时，分成小数部分和指数部分两个部分，分别存放。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a=<span class="number">3.14159f</span>;<span class="comment">//加f后缀，表示单精度浮点型</span></span><br></pre></td></tr></table></figure><ul><li><p>double型(双精度浮点型）<br>为了扩大能表示的数值范围，用8个字节存储一个double型数据，可以得到15位有效数字。</p></li><li><p>long double型(长双精度型)<br>分配16字节。</p></li></ul><h2 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h2><ul><li>基本的算术运算符</li></ul><blockquote><p>两个实数消除结果为双精度实数，<code>两个整数相除结果为负数</code>，如5/3=1，舍去小数部分。但是，如果除数或被除数中有一个负数，则舍入方向是不固定的。如-5/3可能为-1或者-2。多数C编译系统采取“<code>向零取整</code>”的方法，即5/3=1，-5/3=-1，取整后向零靠拢。</p></blockquote><ul><li>自增、自减运算符<br>作用是使变量的值加1或减1，只能用于变量。常用于循环，使循环变量加1；也用于指针变量，使指针指向下一个地方。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">++i,--i; <span class="comment">//在使用i之前，先使i的值加(减)1，先加后用 </span></span><br><span class="line">i++,i--;  <span class="comment">//在使用i之后，使i的值加(减)1，先用后加</span></span><br><span class="line"><span class="comment">//例i=3</span></span><br><span class="line">j=++i;  <span class="comment">//i的值先变成4，在赋值给j，j的值为4</span></span><br><span class="line">j=i++;  <span class="comment">//先将i的值赋给j，j的值为3，然后i变为4</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/smwikipedia/articles/1229984.html">i++ : 顺序点(sequence point) 与 副作用 (side effect)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2</span>,b=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//在执行b+=()+()时++a的值已经是4了,++a的作用就是程序执行进行a=a+1的操作,两个括号使这个过程被执行了两次，所以由3变成4.</span></span><br><span class="line"><span class="comment">//计算机处理这种运算式的时候，不是依次读入每个字符的，而是整体一起读入的，然后再进行变量替换的，两个++a对于计算机而已，就是a自加2次，然后算完的a再进行计算其他优先低的运算符</span></span><br><span class="line">b+=(++a)+(++a);  <span class="comment">//b=b+(++a=3)+(++a=4);//b=3+4+4(到这一步的表达式的时候a值为4，传回的是引用参数类型，最后一个a为4，返回引用两个a都是4)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b); <span class="comment">//b=11</span></span><br></pre></td></tr></table></figure><h2 id="优先级与结合性"><a href="#优先级与结合性" class="headerlink" title="优先级与结合性"></a><span id="priority">优先级与结合性</span></h2><p>用算术运算符和括号将运算对象（操作符）连接起来的式子称为<code>C算术表达式</code>。如a*b/c-1.5+’a’。</p><ul><li>优先级<br>按符号优先级顺序执行，例如先乘除后加减。</li><li>结合性<br>优先级相同时，算术运算符的结合方向为“从左至右”，例如a-b+c。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/c7a92f12de8994c61d6b12dc1dccc5c6.png"><blockquote><p><strong><em>优先级</em></strong><br>赋值运算符  &lt;  &amp;&amp;和||  &lt;  关系运算符  &lt;  算术运算符  &lt;  !(非）</p></blockquote></li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>可以利用强制类型转换运算符将一个表达式转换为所需类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">double</span>)a;</span><br><span class="line">(<span class="keyword">int</span>)(x+y);</span><br><span class="line">(<span class="keyword">float</span>)(<span class="number">5</span>%<span class="number">3</span>);</span><br></pre></td></tr></table></figure><blockquote><p>强制类型转换时，得到一个所需类型的中间数据，而原来变量的类型未发生变化。</p></blockquote><h2 id="C运算符"><a href="#C运算符" class="headerlink" title="C运算符"></a>C运算符</h2><table><thead><tr><th>C运算符</th><th>说明</th></tr></thead><tbody><tr><td>算术运算符</td><td>+  -  *  / % ++  –</td></tr><tr><td>关系运算符</td><td>&gt; &lt; == &gt;= &lt;= !=</td></tr><tr><td>逻辑运算符</td><td>！ &amp;&amp; ||</td></tr><tr><td>位运算符</td><td>&lt;&lt;   &gt;&gt;  ~ | ^ &amp;</td></tr><tr><td>赋值运算符</td><td>=</td></tr><tr><td>条件运算符</td><td>?:</td></tr><tr><td>逗号运算符</td><td>,</td></tr><tr><td>指针运算符</td><td>*和&amp;</td></tr><tr><td>求字节数运算符</td><td>sizeof</td></tr><tr><td>强制类型转换运算符</td><td>(类型)</td></tr><tr><td>成员运算符</td><td>.  -&gt;</td></tr><tr><td>下标运算符</td><td>[]</td></tr><tr><td>其他</td><td>如函数调用运算符()</td></tr></tbody></table><h2 id="C语句"><a href="#C语句" class="headerlink" title="C语句"></a>C语句</h2><p>语句的作用是向计算机系统发出操作指令，要求执行相应的操作。</p><ul><li>控制语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()...<span class="keyword">else</span>... <span class="comment">//条件语句</span></span><br><span class="line"><span class="keyword">for</span>()...       <span class="comment">//循环语句</span></span><br><span class="line"><span class="keyword">while</span>()...     <span class="comment">//循环语句</span></span><br><span class="line"><span class="keyword">do</span>...<span class="keyword">while</span>()   <span class="comment">//循环语句</span></span><br><span class="line"><span class="keyword">continue</span>       <span class="comment">//结束本次循环语句</span></span><br><span class="line"><span class="keyword">break</span>   <span class="comment">//中止循环语句</span></span><br><span class="line"><span class="keyword">switch</span>         <span class="comment">//多分支选择语句</span></span><br><span class="line"><span class="keyword">return</span>         <span class="comment">//返回语句</span></span><br><span class="line"><span class="keyword">goto</span>           <span class="comment">//转向语句，在结构化程序中基本不用goto语句</span></span><br></pre></td></tr></table></figure><ul><li>函数调用语句<br>由一个函数调用加分号构成</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is a c statement&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>表达式语句<br>一个表达式的最后加一个分号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i++    <span class="comment">//表达式</span></span><br><span class="line">i++;   <span class="comment">//表达式语句</span></span><br></pre></td></tr></table></figure><ul><li>空语句<br>只有一个分号，可以用来作为流程的转向点或者循环语句中的循环体。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;</span><br></pre></td></tr></table></figure><ul><li>复合语句<br>使用{}把一些语句和声明语句括起来称为复合语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> pi=<span class="number">3.14</span>,r=<span class="number">2.5</span>,area;</span><br><span class="line">area=pi*r*r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;area=%f&quot;</span>,area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><ul><li><p>赋值运算符(=)</p></li><li><p>复合赋值运算符<br>在赋值符(=)之前加上其他运算符。例如+=,-=,*=,/=，%</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a+=<span class="number">3</span>;    <span class="comment">//等价于 a=a+3</span></span><br><span class="line">x*=y+<span class="number">8</span>;  <span class="comment">//等价于 x=x*(y+3)</span></span><br><span class="line">x%=<span class="number">3</span>;    <span class="comment">//等价于 x=x%3</span></span><br></pre></td></tr></table></figure><ul><li>赋值表达式<br>由赋值运算符将一个变量和表达式连接起来。<br>赋值运算符左侧值称为左值，左值不能为表达式和常量，而应该是变量。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=(b=<span class="number">3</span>*<span class="number">4</span>);  <span class="comment">//正确</span></span><br><span class="line">(a=b)=<span class="number">3</span>*<span class="number">4</span>; <span class="comment">//不正确</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a=b);<span class="comment">//可以在printf函数中完成赋值和输出</span></span><br></pre></td></tr></table></figure><ul><li><p>赋值过程中的类型转换<br>① 浮点型数据赋给整型变量时，先对浮点数取整，即舍弃小数部分，然后赋予整型变量。</p><pre><code>  int i=3.56;//i=3</code></pre><p>②整型数据赋给单、双精度变量时，数值不变，但以浮点数形式存储到变量中。</p><pre><code>  float f=23;  //先转换成23.0，再按指数形式存储</code></pre><p>③double型赋值给float变量时，先将双精度转换为单精度，即只取6~7位有效数字，存储到float变量的4个字节中，float型赋值给double变量时，数值不变，在内存中以8个字节存储，有效位数扩展到15位。<br>④字符型赋值给整型变量时，将字符的ASCII代码赋给整型变量。</p><pre><code>  int i=&#39;A&#39;; //i=65</code></pre><p>⑤将一个占字节多的整型数据赋给一个占字节少的整型变量或字符变量，只将其低字节原封不动地送到被赋值的变量（即发生“截断”）。</p><pre><code>  int i=289;  char c=&#39;a&#39;;  c=i;   //c的值为33，如果用%c输出，即字符“！”。  //因为整型是4字节，字符型是1字节，所以只取得了int型变量值289二进制最后8位，即0010 0001，为33。</code></pre></li><li><p>赋值表达式和赋值语句</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max=a   <span class="comment">//赋值表达式，末尾没有分号</span></span><br><span class="line">max=a;<span class="comment">//赋值语句</span></span><br></pre></td></tr></table></figure><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><ul><li><p>所谓输入输出是以<code>计算机主机</code>为主体而言的。从计算机向输出设备（如显示器、打印机等）输出数据称为<code>输出</code>，从输入设备（如键盘、磁盘、光盘等）向计算机输入数据称为<code>输入</code>。</p></li><li><p>C语言本身不提供输入输出语句，输入输出操作是由C标准函数库中的函数来实现的。printf和<br>scanf不是C语言的关键字，而是库函数的名字。</p></li><li><p>在使用系统库函数时，要在程序开头用预处理指令#include把有关头文件放到本程序中。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include是将所需要的“头文件”包括到源文件中。</span></span><br><span class="line"><span class="comment">//stido是standard input&amp;output(标准输入和输出)的缩写。</span></span><br><span class="line"><span class="comment">//.h是header的缩写</span></span><br><span class="line"><span class="comment">//此语句的意思就是将stido.h头文件的内容调出来取代本行的#include指令。</span></span><br></pre></td></tr></table></figure><h2 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h2><ul><li><p><strong><em>printf(格式控制，输出序列);</em></strong></p></li><li><p>格式控制<br>①格式声明：由%和格式字符组成。如%d，作用是将数据指定格式输出。<br>②普通字符：需要按原样输出。</p></li><li><p>输出列表<br>程序需要输出的数据，可以是常量、变量或表达式。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a,b);</span><br></pre></td></tr></table></figure><blockquote><p>printf是函数，因此格式控制和输出序列但是函数的参数。</p></blockquote><h2 id="格式字符"><a href="#格式字符" class="headerlink" title="格式字符"></a>格式字符</h2><ul><li><strong><em>d格式符</em></strong></li></ul><p>用来输出一个有符号的十进制整数。<br>输出时可以指定数据的<code>域宽（即所占列数）</code>，如%5d，指定输出占5列，输出的数据在此5列区域的<code>右侧</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d\n%5d\n&quot;</span>,<span class="number">12</span>,<span class="number">-134</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   12  //12前有3个空格 </span></span><br><span class="line"><span class="comment"> -134  //-134前有1个空格</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>输出long(长整型)：<code>%ld</code><br>输出long long(双长整型)：<code>%lld</code></p></blockquote><ul><li><strong><em>c格式符</em></strong></li></ul><p>用来输出一个字符。也可在指定域宽。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cahr ch=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a);</span><br></pre></td></tr></table></figure><blockquote><p>一个整数，如果在0~127范围中，也可以使用%c输出字符形式。系统会将整数作为ASCII码转换成相应字符输出。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a=<span class="number">121</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a);  <span class="comment">//输出y</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">377</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a);<span class="comment">//输出y</span></span><br><span class="line"><span class="comment">// 当整数比较大时，会按其最后一个字节(8位)的信息以字符形式输出。</span></span><br><span class="line"><span class="comment">//377最后一个字节信息是0111 1001，即十进制的121，是y的ASCII码。</span></span><br></pre></td></tr></table></figure><ul><li><strong><em>s格式符</em></strong></li></ul><p>用来输出一个字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,<span class="string">&quot;CHINA&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><em>f格式符</em></strong></li></ul><p>用来输出实数（包括单双精度、长双精度），以小数形式输出。</p><p>①基本型，用%f<br>不指定输出长度，则系统默认：<code>实数中整数部分全部输出，小数部分输出6位。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a=<span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%l\n&quot;</span>,a/<span class="number">3</span>);  <span class="comment">// 0.333333 a虽然是双精度，但使用%l只能输出6位小数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②指定数据宽度和小数位数，用**<em>%<code>m</code>.<code>n</code>f**</em>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对上例a的值指定宽度和小数位数输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%20.15f\n&quot;</span>,a/<span class="number">3</span>);</span><br><span class="line"><span class="comment">//   0.333333333333333 注意0前面有3个空间</span></span><br></pre></td></tr></table></figure><blockquote><p>一个双精度只能保证<code>15位</code>有效数值，单精度只能保证<code>6位</code>有效数字。</p></blockquote><p>③ 输出的数据向左对齐，用%-m.nf。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(%<span class="number">-25.15f</span>,%<span class="number">25.15f</span>\n<span class="string">&quot;,a,a);</span></span><br><span class="line"><span class="string">// 3333.333333333333500     ,     3333.333333333333500（空白处为5个空格）</span></span><br></pre></td></tr></table></figure><ul><li>e格式符<br>%e指定以指数形式输出实数。</li><li>i格式符<br>%i与%d相同。</li><li>o格式符<br>%o以八进制整数形式输出。</li><li>x格式符<br>%x以十六进制数形式输出整数。</li><li>u格式符<br>%u输出无符号（unsigned）型数据，以十进制整数形式输出。</li><li>g格式符<br>%g用来输出浮点数。</li><li>% 附加字符 格式字符<br>双%输出一个%<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f%%%\n&quot;</span>,<span class="number">1.0</span>/<span class="number">3</span>);</span><br><span class="line"><span class="comment">//0.333333%</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><p><strong><em>scanf(格式控制，地址列表)</em></strong><br>格式控制同printf一样，地址列表是由若干个地址组成的表列，可以是<code>变量的地址或字符串的首地址</code>。</p><ul><li>格式控制后面应当是变量地址，不是变量名。</li><li>输入数据顺序应与格式控制一一对应。</li><li>输入空格、回车、Tab键或遇非法字符（不属于数值的字符）则认为该数据结束。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sacnf(<span class="string">&quot;a=%f,b=%f,c=%f&quot;</span>,&amp;a,&amp;b,&amp;c); <span class="comment">//在输入时应输入a=1,b=3,c=2 一一对应</span></span><br></pre></td></tr></table></figure><h2 id="字符输入输出"><a href="#字符输入输出" class="headerlink" title="字符输入输出"></a>字符输入输出</h2><ul><li><strong><em>putchar输出一个字符</em></strong><br><code>putchar(c)</code><br>c可以是字符或者整型（0~127）,也可以输出转义字符。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a=<span class="string">&#x27;B&#x27;</span>,b=<span class="string">&#x27;O&#x27;</span>,c=<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line"><span class="built_in">putchar</span>(a);</span><br><span class="line"><span class="built_in">putchar</span>(b);</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BOY</span></span><br></pre></td></tr></table></figure><ul><li><strong><em>getchar输入一个字符</em></strong><br><code>getchar()</code><br>getchar函数没有参数，只能接收一个字符，并且可以接收屏幕上无法显示的字符，如转义字符。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a,b,c;</span><br><span class="line">a=getchar();</span><br><span class="line">b=getchar();</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="built_in">putchar</span>(a);</span><br><span class="line"><span class="built_in">putchar</span>(b);</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输入信息时，并不是在键盘上输入一个字符就立即送到计算机中去，这些字符先暂存在键盘的<code>缓冲区</code>，只有按了<code>Enter</code>键才把这些字符输入到计算机中去。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c1,c2;</span><br><span class="line">c1=getchar();</span><br><span class="line">c2=c1+<span class="number">32</span>;     <span class="comment">//大写转小写</span></span><br><span class="line">purchar(c2);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><p>在顺序结构中，各语句是按自上而下的顺序执行的，实际上，很多情况下，需要根据某个条件来判断是否执行指定的操作，这就是要引用选择结构的原因。<br>c语言有两种选择语句：<br>① <strong><em>if</em></strong> 语句，用来实现两个分支的选择结构<br>② <strong><em>switch</em></strong> 语句，用来实现多分支的选择结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现两个数升序输出</span></span><br><span class="line"><span class="comment">//注意，实现两个数的互换，不能直接赋值，必须借助第三个变量，就比如将A和B两个杯子的水互换一样。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">flaot a,b,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f,%f&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)&#123; <span class="comment">//交换</span></span><br><span class="line">t=a;</span><br><span class="line">a=b;</span><br><span class="line">b=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5.2f,%5.2f\n&quot;</span>,a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>表达式可以是关系表达式、逻辑表达式、数值表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if形式</span></span><br><span class="line"><span class="keyword">if</span>(表达式) 语句<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************</span></span><br><span class="line"><span class="comment">//if...else...形式</span></span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************</span></span><br><span class="line"><span class="comment">//if...else if...形式</span></span><br><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>) 语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>) 语句<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">3</span>) 语句<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式n) 语句n</span><br><span class="line"><span class="keyword">else</span>语句n+<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h2><p>用关系运算符将两个数值或数值表达式连接起来的式子，称关系表达式。</p><table><thead><tr><th align="center">关系运算符</th><th align="center">优先级</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">高</td></tr><tr><td align="center">&lt;=</td><td align="center">高</td></tr><tr><td align="center">&gt;</td><td align="center">高</td></tr><tr><td align="center">&gt;=</td><td align="center">高</td></tr><tr><td align="center">==</td><td align="center">低</td></tr><tr><td align="center">！=</td><td align="center">低</td></tr></tbody></table><blockquote><p>前4种关系运算符(&lt;,&lt;=,&gt;,&gt;=)优先级别相同，后2种也相同。</p></blockquote><h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h2><table><thead><tr><th align="center">逻辑运算符</th><th align="center">含义</th><th align="center">举例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与</td><td align="center">a&amp;&amp;b</td><td align="center">如果a和b都为真，则结果为真，否则为假</td></tr><tr><td align="center">||</td><td align="center">逻辑或</td><td align="center">a||b</td><td align="center">如果a和b有一个以上为真，则结果为真，二者都为假时，结果为假</td></tr><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">!a</td><td align="center">如果a为假，则！a为真，如果a为真，则！a为假</td></tr></tbody></table><hr><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">!a</th><th align="center">!b</th><th align="center">a&amp;&amp;b</th><th align="center">a||b</th></tr></thead><tbody><tr><td align="center">真</td><td align="center">真</td><td align="center">假</td><td align="center">假</td><td align="center">真</td><td align="center">真</td></tr><tr><td align="center">真</td><td align="center">假</td><td align="center">假</td><td align="center">真</td><td align="center">假</td><td align="center">真</td></tr><tr><td align="center">假</td><td align="center">真</td><td align="center">真</td><td align="center">假</td><td align="center">假</td><td align="center">真</td></tr><tr><td align="center">假</td><td align="center">假</td><td align="center">真</td><td align="center">真</td><td align="center">假</td><td align="center">假</td></tr></tbody></table><blockquote><p>表示逻辑运算结果时，1代表真，0代表假。<br>判断一个量是否为“真”时，0代表假，非0代表真，即将一个非零的数值认作为“真”。`</p></blockquote><p><a href="#priority">优先级</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>&gt;<span class="number">3</span>&amp;&amp;<span class="number">8</span>&lt;<span class="number">4</span>-!<span class="number">0</span>  <span class="comment">//为0</span></span><br><span class="line"><span class="comment">//先根据优先级自左向右扫描求解</span></span><br><span class="line"><span class="comment">//5&gt;3为1,!0为1，8&lt;3为0，最后1&amp;&amp;0为0</span></span><br></pre></td></tr></table></figure><blockquote><p>C99中增加一种逻辑型变量_Boole，在头文件中stdbool.h中，将bool定义为_Bool的同义词,同时定义了true和false两个常量。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;score);</span><br><span class="line"><span class="keyword">bool</span> a,b;    <span class="comment">//a,b被定义为逻辑变量</span></span><br><span class="line">a=score&gt;=<span class="number">60</span>;</span><br><span class="line">b=score&lt;=<span class="number">69</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="literal">true</span>&amp;&amp;b==<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The grade is C\n&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><p>赋值号右侧为条件表达式，？是条件运算符，有3个操作对象，是C语言中唯一的一个<code>三目运算符</code>。</p><pre><code>    max=(a&gt;b)?a:b;</code></pre><p>当(a&gt;b)为真时将a赋给max，为假时b赋给max，可以用来求最大值。</p><blockquote><p>条件运算符优先级比关系运算符和算术运算符都低。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">ch=(c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)?(ch+<span class="number">32</span>):ch; <span class="comment">//判断是否为大写字母，是大写转换成小写。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>switch语句的作用是根据表达式的值，使流程跳转到不同的语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)   <span class="comment">//表达式类型应为整数类型（包括字符型）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:   <span class="comment">//case后面跟一个常量（或常量表达式）</span></span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//break跳出选择。</span></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> 常量n:</span><br><span class="line">语句n;</span><br><span class="line"><span class="keyword">default</span>:   <span class="comment">//没有匹配到case就会执行default语句</span></span><br><span class="line">语句n+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> grade;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;grade);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your score:&quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(grade)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;85~100\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;70~84\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;60~69\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;60\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter data error!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="while语言"><a href="#while语言" class="headerlink" title="while语言"></a>while语言</h2><p>先判断条件表达式，当循环条件为真时，执行循环体语句，否则跳出循环。</p><pre><code>    whie(表达式) 语句</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum=sum+i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h2><p>先执行循环体，然后判断循环条件是否成立。</p><pre><code>    do        语句    while(表达式);</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum=sum+i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for语句可以用于循环次数不确定而只给出循环结束条件的情况。</p><pre><code>    for(循环变量初始化;循环条件;循环变量增值)        语句    for(int i=1;i&lt;=100;i++)        sum=sum+i;</code></pre><blockquote><p>当循环条件为空语句时，此时循环进入死循环。</p></blockquote><ul><li><p>逗号表达式<br>可以使用逗号连接多个表达式</p><pre><code>  for(int i=0,j=100;i&lt;=j;i++,j--);</code></pre></li></ul><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>break使流程跳到循环体之外，接着执行循环体下面的语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">50</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已达到%d&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>countinue用于结束本次循环，即跳过循环体中下面尚未执行的语句，转到循环体结束点之前，接着执行循环变量增值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出下列4*5的矩阵</span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">2 4 6 8 10</span></span><br><span class="line"><span class="comment">3 6 9 12 15</span></span><br><span class="line"><span class="comment">4 8 12 16 20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;  <span class="comment">//i控制4行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++,n++)&#123; <span class="comment">//j控制5列</span></span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">0</span>)   <span class="comment">//n累计输出数据的个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">//输出5个后换行</span></span><br><span class="line"><span class="comment">//if(i==3&amp;&amp;j==1) break;  //遇到第3行第1列终止循环，结果导致第三行空白</span></span><br><span class="line"><span class="comment">//if(i==3$$j==1) continue; //第3行第1列的数字3不会输出。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i*j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组用来描述一批具有<code>同名的同属性</code>的数据。</p><pre><code>    数据类型 数组名[常量表达式];    int arr[10];</code></pre><ul><li><p>数组是一组有序数据的集合。</p></li><li><p>用数组名和下标来唯一确定数组中的元素</p></li><li><p>数组的每一个元素都属于同一个数据类型。</p></li><li><p>数组下标是从0开始的是，数组长度是固定的。。</p></li><li><p>C语言不允许对数组的大小作动态定义，数组大小不依赖于程序运行过程中变量的值。</p></li><li><p>数组的存储形式。<br>以int arr[10]为例，经过声明定义后，在内存中划分一片存储空间，存放了一个有10个整型元素的数组(空间大小为<code>4*10=40字节</code>,int为4字节)。</p></li><li><p>一维数组初始化</p><pre><code>  int arr[10]=&#123;0,1,2,3,4,5,6,7,8,9&#125;;  int arr[]=&#123;1,3,2,4&#125;; //系统根据元素个数分配大小  int arr[10]=&#123;1,2,3&#125;; //其余数据初始化为0，如果是字符型数组初始化为&#39;\0&#39;,如果是指针型数组，初始化为NULL，即空指针。  int arr[10]=&#123;0&#125;;  //全为0数组</code></pre></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">arr[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--) <span class="comment">//逆序输出，下标9~0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维数组实例"><a href="#一维数组实例" class="headerlink" title="一维数组实例"></a>一维数组实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理Fibonacci数列问题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//前两个赋值为1</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">f[i]=f[i<span class="number">-2</span>]+f[i<span class="number">-1</span>]; <span class="comment">//先后求f[2]~f[19]的值</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">//输出5个后换行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%12d&quot;</span>,f[i]);  <span class="comment">//输出一个数，确定域宽</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">           1           1           2           3           5</span></span><br><span class="line"><span class="comment">           8          13          21          34          55</span></span><br><span class="line"><span class="comment">          89         144         233         377         610</span></span><br><span class="line"><span class="comment">         987        1597        2584        4181        6765</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//每次将相邻的两个数比较，将小的调到前头。</span></span><br><span class="line"><span class="comment">//如果有n个数，则要进行n-1趟比较</span></span><br><span class="line"><span class="comment">//在第1趟中要进行n-1次两两比较，在j趟比较中要进行n-j次两两比较</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input 10 numbers:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;   <span class="comment">//实现9次循环，9趟比较 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>-j;i++)&#123;  <span class="comment">//每一趟进行9-j比较 </span></span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123; <span class="comment">//比较然后交换 </span></span><br><span class="line">t=a[i];</span><br><span class="line">a[i]=a[i+<span class="number">1</span>];</span><br><span class="line">a[i+<span class="number">1</span>]=t;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the sorted numbers:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组常称为矩阵，用矩阵形式（行和列）表示二维数组，是<code>逻辑上的概念</code>，而在内存中，各元素是<code>连续存放</code>的，不是二维的，是<code>线性</code>的。</p><pre><code>    数据类型 数组名[行下标][列下标]    int a[3,4]; //表示3行4列的数组</code></pre><p>二维数组初始化</p><pre><code>    int a[3][4]=&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;;//按行存放    int a[3][4]=&#123;&#123;1&#125;,&#123;5&#125;,&#123;9&#125;&#125;;  //只对一部分赋值</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个二维数组的行和例互换，存到另一个二维数组中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">3</span>][<span class="number">2</span>],i,j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array a:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)  <span class="comment">//处理a数组中的一行中各元素，从0开始，0，1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++) <span class="comment">//处理a数组中某一列元素，0,1,2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,a[i][j]);</span><br><span class="line">b[j][i]=a[i][j];   <span class="comment">//a数组元素赋值给b数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array b:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,b[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">array a:</span></span><br><span class="line"><span class="comment">    1    2    3</span></span><br><span class="line"><span class="comment">    4    5    6</span></span><br><span class="line"><span class="comment">array b:</span></span><br><span class="line"><span class="comment">    1    4</span></span><br><span class="line"><span class="comment">    2    5</span></span><br><span class="line"><span class="comment">    3    6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求3*4矩阵其中值最大的那个元素的值，及其所在行号和列号。</span></span><br><span class="line"><span class="comment">//打擂台算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,row=<span class="number">0</span>,colum=<span class="number">0</span>,max;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,&#123;<span class="number">-10</span>,<span class="number">10</span>,<span class="number">-5</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">max=a[<span class="number">0</span>][<span class="number">0</span>];  <span class="comment">//认为a[0][0]最大，为擂主</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&gt;max)  <span class="comment">//如果大于max，就取代原值</span></span><br><span class="line">&#123;</span><br><span class="line">max=a[i][j];</span><br><span class="line">row=i;   <span class="comment">//记下行号</span></span><br><span class="line">colum=j;  <span class="comment">//记下列号</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=%d\nrow=%d\ncolum=%d\n&quot;</span>,max,row,colum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><p>用来存放字符数据的数组，数组中一个元素存放一个字符。</p><pre><code>    char c[10];    c[0]=&#39;I&#39;;    c[1]=&#39;a&#39;;</code></pre><p>由于字符型数据是以整数形式存放的，因此也可以用整型数组存放字符数据。</p><pre><code>    int c[10];    c[0]=&#39;a&#39;;</code></pre><p>字符数组初始化</p><pre><code>    char c[10]=&#123;&#39;I&#39;,&#39;&#39;,&#39;a&#39;,&#39;m&#39;,&#39;&#39;,&#39;h&#39;,&#39;a&#39;,&#39;p&#39;,&#39;p&#39;,&#39;y&#39;&#125;;</code></pre><p>C语言规定以字符’<code>\0</code>‘作为结束标志，例如”C program”共9个字符，在字符数组中它占10个字节，最后一个’\0’是系统自动加上去的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出一个菱形图</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> diamond[<span class="number">5</span>][<span class="number">5</span>]=&#123;&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,&#123;<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,diamond[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment"> * *</span></span><br><span class="line"><span class="comment">*   *</span></span><br><span class="line"><span class="comment"> * *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><p>引入<code>#include&lt;string.h&gt;</code>函数库</p><ul><li>puts——输出字符串<br>  puts(String);</li><li>gets——输入字符串<br>  gets(String);</li><li>strcat——字符串连接<br>  strcat(str1,str2) //str2连接到str1后面</li><li>strcpy和strncpy——字符串复制<br>  strcpy(str1,string);  //string复制到str1<br>  strcpy(str2,string,n); //string前n个字符复制到str2</li><li>strcmp——字符串比较<br>  strcmp(str1,str2);//按照ASCII码</li><li>strlen——字符串长度<br>  strlen(str);</li><li>strlwr——转换为小写<br>  strlwr(str);</li><li>strupr——转换为大写<br>  strupr(str);</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有3个字符串，要求找出其中最大者</span></span><br><span class="line"><span class="comment">//思路：成绩一个3行20列的二维数组，每一行容纳20个字符</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">3</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> stirng[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">gets(str[i]);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(str[<span class="number">0</span>],str[<span class="number">1</span>])&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">string</span>,str[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">string</span>,str[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(str[<span class="number">2</span>],<span class="built_in">string</span>)&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">string</span>,str[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nThe largest string is:\n&quot;</span>,<span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入一行字符，统计其中有多少个单词，单词之间用空格隔开</span></span><br><span class="line"><span class="comment">//思路：如果当前字符为空格，则表示未出现新单词，使word=0,num不累加</span></span><br><span class="line"><span class="comment">//如果当前不为空格，前一字符为空格(word=0),新单词出现，num加1，word=1；</span></span><br><span class="line"><span class="comment">//若前一字符为非空格(word=1），未出现新单词，num不加1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">81</span>];</span><br><span class="line"><span class="keyword">int</span> i,num=<span class="number">0</span>,word=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">gets(<span class="built_in">string</span>); <span class="comment">//输入一个字符串给字符数组string</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;(c=<span class="built_in">string</span>[i])!=<span class="string">&#x27;\0&#x27;</span>;i++)&#123;  <span class="comment">//只要字符不是&#x27;\0&#x27;就继续执行循环</span></span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;              <span class="comment">//如果是空格，使word置0</span></span><br><span class="line">word=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(word==<span class="number">0</span>)&#123;</span><br><span class="line">word=<span class="number">1</span>;<span class="comment">//将自己置1，代表自己非空格</span></span><br><span class="line">num++;<span class="comment">//num累加1，代表增加一个单词</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;There ara %d words in this line.\n&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>无参函数<pre><code>  类型名 函数名()  &#123;      //函数体包括声明部分和语句部分  &#125;</code></pre></li><li>有参函数<pre><code>  类型名 函数名(形式参数列表)  &#123;      //函数体  &#125;</code></pre><h2 id="虚实结合"><a href="#虚实结合" class="headerlink" title="虚实结合"></a>虚实结合</h2><pre><code>  int max(int x,int y); //x，y为形参  int a=1,b=2,m;  m=max(1,2);   //a,b为实参</code></pre>形参并不占内存中的存储单元，当被调用时，临时分配内存单元。<br>实参向形参的数据传递是”值传递’，单向传递，形参不能传给实参，因为他们具有不同的存储单元。</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数的返回值是通过return语句获得的。<br>函数类型决定返回值的类型。</p><pre><code>    int max(int x,int y)    &#123;    return(x&gt;y?x:y);    &#125;</code></pre><p>对于不带返回值，可以定义函数为void，定义后不允许出现return语句。</p><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>用户自定义函数，需要在主调函数中对被调函数做<code>声明</code>。其作用是把函数的具体信息(函数名、函数参数个数，参数类型等)通知给编译系统。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>; <span class="comment">//函数声明 ，可以不带参数名</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的递归调用"><a href="#函数的递归调用" class="headerlink" title="函数的递归调用"></a>函数的递归调用</h2><ul><li><p>函数不可以嵌套定义，但可以嵌套调用。</p></li><li><p>当调用一个函数的过程中又出现直接或间接地调用该函数本身，称为函数的递归调用。</p></li><li><p>通过使用if语句来终止无止尽的递归。</p></li><li><p>一个递归的问题可以分为”回溯”和”递推”两部分。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用递归的方法求n！</span></span><br><span class="line"><span class="comment">//当n=0,1时，n!=1; 当n&gt;1时，n!=n*(n-1)!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>;  <span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">int</span> n,y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input an integer number&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">y=fac(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>,n,y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n&lt;0,data error!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)</span><br><span class="line">f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">f=fac(n<span class="number">-1</span>)*n;  <span class="comment">//n&gt;1时，n!=n*(n-1)</span></span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Hanoi(汉诺问题)</span></span><br><span class="line"><span class="comment">古代有一个梵塔，塔内有3个座A，B，C，开始时A座上有64个盘子，盘子大小不等，大的在下，小的在上。有一个老和尚想把这64个盘子从A座移到C座，但规定每次只能移动一个盘，且在移动过程中在3个座上始终保存大盘在下，小盘在上。在移动过程中可以利用B座。要求编程序输出移动盘子的过程。</span></span><br><span class="line"><span class="comment">解题思路：</span></span><br><span class="line"><span class="comment">①老和尚1命令第2个和尚将63个盘子从A移到B。</span></span><br><span class="line"><span class="comment">②自己将1一个盘子（最底下的、最大的盘子）从A移到C。</span></span><br><span class="line"><span class="comment">③再命令第2个和尚将63个盘子从B移到C。</span></span><br><span class="line"><span class="comment">第2个和尚依次递归。</span></span><br><span class="line"><span class="comment">例如先分析将A座上3个盘子移到C座：</span></span><br><span class="line"><span class="comment">①将A座上2个盘子移到B座（借助C）。 A-&gt;C,A-&gt;C,C-&gt;B</span></span><br><span class="line"><span class="comment">②将A座上1个盘子移到C座。A-&gt;C</span></span><br><span class="line"><span class="comment">③将B座上2个盘子移到C座上（借助A）。B-&gt;A  B-&gt;C,A-&gt;C</span></span><br><span class="line"><span class="comment">分析可知：</span></span><br><span class="line"><span class="comment">移动n个盘子要经历(2^n-1)步，3个盘子要7步。</span></span><br><span class="line"><span class="comment">①将A座上n-1个盘子移到B座（借助C）。 A-&gt;C,A-&gt;C,C-&gt;B</span></span><br><span class="line"><span class="comment">②将A座上1个盘子移到C座。A-&gt;C</span></span><br><span class="line"><span class="comment">③将B座上n-1个盘子移到C座上（借助A）。B-&gt;A  B-&gt;C,A-&gt;C</span></span><br><span class="line"><span class="comment">①③步都是n-1个盘子从一个座移到另一个座上。</span></span><br><span class="line"><span class="comment">因此，可以分解成两类操作：</span></span><br><span class="line"><span class="comment">（1）将n-1个盘子从一个座移到另一个座上(n&gt;1)。这就是大和尚让小和尚做的工作</span></span><br><span class="line"><span class="comment">（2）将1个盘子从一个座移到另一座上。这是大和尚自己做的工作。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编程思路：</span></span><br><span class="line"><span class="comment">分别用两个函数实现以上两类操作，用hanoi函数实现上面第1类操作（即模拟小和尚的认为），用move函数实现第2类操作（模拟大和尚的任务）。</span></span><br><span class="line"><span class="comment">函数调用hanoi(n,one,two,three)表示将n个盘子从”one“移到”three“座的过程（借助”two“）。</span></span><br><span class="line"><span class="comment">函数调用move(x,y)表示将1个盘子从x座移到y座的过程。x,y代表A,B,C座之一。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> one,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span>; <span class="comment">//对hanoi函数的声明</span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input the number of diskes:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The step to move %d diskes:\n&quot;</span>,m);</span><br><span class="line">hanoi(m,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> one,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//将n个盘从one座借助two座，移到three座</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span>;  <span class="comment">//对move函数的声明，因为主函数不需要调用，所以可以在函数内声明</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">move(one,three); </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hanoi(n<span class="number">-1</span>,one,three,two);</span><br><span class="line">move(one,three);</span><br><span class="line">hanoi(n<span class="number">-1</span>,two,one,three);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%c\n&quot;</span>,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input the number of diskes:3</span></span><br><span class="line"><span class="comment">The step to move 3 diskes:</span></span><br><span class="line"><span class="comment">A-&gt;C</span></span><br><span class="line"><span class="comment">A-&gt;B</span></span><br><span class="line"><span class="comment">C-&gt;B</span></span><br><span class="line"><span class="comment">A-&gt;C</span></span><br><span class="line"><span class="comment">B-&gt;A</span></span><br><span class="line"><span class="comment">B-&gt;C</span></span><br><span class="line"><span class="comment">A-&gt;C</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><ul><li><p>数组元素可以作为函数实参，不能用作形参。(因为形参是函数被调用时临时分配内存，不可能为单个数组元素分配存储单元，数组都是连续存放的）</p></li><li><p>数组名可以作为函数实参或者形参。注意，数组名做实参时，向形参传递的是数组元素<code>首地址</code>。</p></li><li><p>当形参数组名获得了实参数组的首地址后，它们共占同一存储单元，具有相同的值。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序:对数组中10个整数由小到大排序 </span></span><br><span class="line"><span class="comment">//每一轮找出未经排序的数中最小的一个</span></span><br><span class="line"><span class="comment">//由于形参数组已经使用选择符排序了，形参数组改变实参数组也随之改变了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> n)</span></span>; <span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter array:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">sort(a,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The sorted array:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">array</span>[j]&lt;<span class="built_in">array</span>[k])</span><br><span class="line">k=j;</span><br><span class="line">t=<span class="built_in">array</span>[k];</span><br><span class="line"><span class="built_in">array</span>[k]=<span class="built_in">array</span>[i];</span><br><span class="line"><span class="built_in">array</span>[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h2><ul><li><p>在一个函数内定义的变量是<code>局部变量</code>，只在本函数范围内有效。</p></li><li><p>在函数外定义的变量是<code>全局变量</code>，可以为本文件中其他函数所共用。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">5</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>; <span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">8</span>;            <span class="comment">//局部变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>,max(a,b));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//形参a,b的作用范围</span></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">c=a&gt;b?a:b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：max=8</span></span><br><span class="line">为什么结果为<span class="number">8</span>呢？</span><br><span class="line">因为全局变量a被局部变量a屏蔽了，相当于全局变量a在<span class="number">6</span>~<span class="number">8</span>行不存在，所以函数max是比较<span class="number">8</span>和<span class="number">5</span>的大小。</span><br></pre></td></tr></table></figure><blockquote><p>全局变量在程序的全部执行过程中都占用存储单元。</p></blockquote><h2 id="变量的存储方式和生存期"><a href="#变量的存储方式和生存期" class="headerlink" title="变量的存储方式和生存期"></a>变量的存储方式和生存期</h2><p>从变量的作用域来看，变量可以分<code>全局变量</code>和<code>局部变量</code>。<br>从变量生存期来看，变量的存储可以分<code>静态存储方式</code>和<code>动态存储方式</code>。</p><ul><li>静态存储方式：指在程序运行期间由系统分配固定的存储空间的方式。</li><li>动态存储方式：指在程序运行期间根据需要进行动态的分配存储空间的方式。</li></ul><p>内存中共用户使用的存储空间分3部分：<br>①程序区<br>②静态存储区<br>③动态存储区<br>数据分别存放在静态存储区和动态存储区中，全局变量全部存放在静态存储区中，在程序开始执行时给全局变量分配存储区，程序执行完毕后释放，在执行过程中占据固定的存储空间。<br>在动态存储区中存放以下数据：<br>①函数形式参数<br>②函数中没有用关键字static声明的变量，即自动变量<br>③函数调用时的现场保护和返回地址等</p><h2 id="存储类别"><a href="#存储类别" class="headerlink" title="存储类别"></a>存储类别</h2><p>每一个变量和函数都有两个属性：数据类型和数据的存储类别（如静态存储和动态存储）。<br>C的存储类别包括4种：自动的(auto)、静态的(static)、寄存器的(register)、外部的(extern)。</p><ul><li>自动变量auto<br>自动变量动态分配存储空间，属于动态存储类别，数据存储在动态存储区中，函数调用结束后即释放，函数中的形参和定义的局部变量都属于此类。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">int</span> b,c=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中a是形参，b和c是自动变量，对c赋初值3，执行完f函数后，自动释放a,b,c所占的内存单元</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上关键字”auto“可以省略，不写auto则隐含指定为”自动存储类别“。</p></blockquote><ul><li><p>静态局部变量static<br>静态局部变量属于静态存储类别，在静态存储区内分配存储单元，在程序整个运行期间都不释放。</p><blockquote><p>对静态局部变量是在编译时赋初值的，即只赋值一次，以后每次调用函数时不用重新赋值而是保留上次函数调用结束时结束的值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出1到5的阶乘值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)    <span class="comment">//先后5次调用fac函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>,i,fac(i));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> f=<span class="number">1</span>;  <span class="comment">//f保留了上次调用结束的值</span></span><br><span class="line">f=f*n;  <span class="comment">//上次的f值的基础上再乘以n</span></span><br><span class="line"><span class="keyword">return</span> f;<span class="comment">//返回值f是n!的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1！=1</span></span><br><span class="line"><span class="comment">2！=2</span></span><br><span class="line"><span class="comment">3！=6</span></span><br><span class="line"><span class="comment">4！=24</span></span><br><span class="line"><span class="comment">5！=120</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>寄存器变量register<br>变量的值一般是存放在内存中的，当程序用到哪一个变量的值是，由控制器发出指令将内存中该变量的值送到运算器进行运算，如果需要存数，再从运算器将数据送到内存中。<br>如果有一些变量使用频繁，为提高效率，允许将局部变量的值放到<code>CPU中的寄存器</code>中，这种变量叫寄存器变量。</p><pre><code>  register int f;</code></pre></li></ul><h2 id="外部变量extern"><a href="#外部变量extern" class="headerlink" title="外部变量extern"></a>外部变量extern</h2><p>此类属于全局变量范围，全局变量作用域从<code>变量的定义处</code>开始，到本程序文件的末尾。并通过extern可以扩展变量的作用域。</p><ul><li>在一个文件内扩展外部变量的作用域<br>可以是把作用域扩展到<code>变量定义处之前</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio,h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> A,B,C;   <span class="comment">//扩展外部变量的作用域，可以省略数据类型</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入3个整数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;A,&amp;B,&amp;C);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最大值:%d\n&quot;</span>,max());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> A,B,C;     <span class="comment">//定义外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">m=A&gt;B?A:B;</span><br><span class="line"><span class="keyword">if</span>(C&gt;m)</span><br><span class="line">m=C;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将外部变量的作用域扩展到其他文件<br>如果一个程序包括两个文件，两个文件都需要用到同一个外部变量Num，则可以在任一个文件中<code>定义外部变量</code>Num，在另一个文件中用<code>extern对Num做外部声明</code>，即”extern Num“。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file1.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> A;    <span class="comment">//定义外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span>)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="keyword">extern</span> A;   <span class="comment">//作用域扩展</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将外部变量的作用域限制在本文件中<br>static声明可以将外部变量只限于本文件引用。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file1.c</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> A;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="keyword">extern</span> A;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...<span class="comment">//运行出错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部函数和外部函数"><a href="#内部函数和外部函数" class="headerlink" title="内部函数和外部函数"></a>内部函数和外部函数</h2><ul><li><p>内部函数<br>如果一个函数只能被本文件内其他函数所调用，则称为<code>内部函数</code>（静态函数）。</p><pre><code>  static 类型名 函数名（形参名）  static int fun(int a,intb);</code></pre></li><li><p>外部函数<br>如果定义函数时省略extern，则默认为外部函数。</p><pre><code>  extern int fun(int a,int b);</code></pre></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别定义3个函数用来输入字符串、删除字符、输出字符串。分别放在3个文件中，main函数在另一文件中，由它来调用以上3个函数。</span></span><br><span class="line"><span class="comment">//file.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">enter_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span>;    <span class="comment">//对函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">delete_string</span><span class="params">(<span class="keyword">char</span> str[],<span class="keyword">char</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span>;</span><br><span class="line"><span class="keyword">char</span> c,str[<span class="number">80</span>];</span><br><span class="line">enter_string(str);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c);</span><br><span class="line">delete_string(str,c);</span><br><span class="line">printf_string(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enter_string</span><span class="params">(<span class="keyword">char</span> str[<span class="number">80</span>])</span>  <span class="comment">//定义外部函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">gets(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file3.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_string</span><span class="params">(<span class="keyword">char</span>[],<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=j=<span class="number">0</span>;str[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(str[i]!=ch)</span><br><span class="line">str[j++]=str[i];</span><br><span class="line">str[j]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file4.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>enter_string为函数原型，函数原型能够把函数的作用域扩展到定义该函数的文件之外（不需要extern),典型例子是#include指令的作用。</p></blockquote><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>感谢<a href="https://blog.csdn.net/best_xiaolong/article/details/110152320?utm_source=app">C语言指针，这可能是史上最干最全的讲解啦（附代码）！！！</a></p><ul><li>指针的使用使得不同区域的代码可以轻易的共享内存数据,可以动态的分配内存。</li><li>指针使得一些复杂的链接性的数据结构的构建成为可能，比如链表，链式二叉树等等。</li><li>有些操作必须使用指针。如操作申请的堆内存。</li><li>C语言中的一切函数调用中，值传递都是“按值传递”的。如果我们要在函数中修改被传递过来的对象，就必须通过这个对象的指针来完成。</li></ul><h2 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h2><ul><li>计算机访问某个数据的时候，首先要通过<code>地址总线</code>传送数据存储或者读取的位置，然后在通过<code>数据总线</code>传送需要存储或者读取的数据。一般地，int整型的位数等于数据总线的宽度，指针的位数等于地址总线的宽度。</li><li>计算机是以<code>一个字节(8位)</code>为基本访问单元，小于一个字节的数据，必须通过位操作来进行访问。所以可以认为，计算每次都是从第p个字节开始访问的。访问的长度将由编译器根据实际类型进行计算.<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/fedde9697c0f70e1d88f3b8e0306fae7.png"></li><li><code>sizeof</code>关键字是编译器用来计算某些类型的数据的长度的，以<code>字节</code>为基本单位。<pre><code>  sizeof(char)=1;    sizeof(int)=4;</code></pre></li></ul><h2 id="数据具有地址"><a href="#数据具有地址" class="headerlink" title="数据具有地址"></a>数据具有地址</h2><p>内存在<code>物理上</code>是由一组<code>DRAM芯片</code>组成的。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/8a1d29718a181cd42b1b1c775be52bdd.png"><br>而作为一个程序员，我们不需要了解内存的物理结构，<code>操作系统</code>将<code>RAM等硬件和软件结合起来</code>，给程序员提供的一种对内存使用的抽象。这种抽象机制使得程序使用的是<code>虚拟存储器</code>,而不是直接操作和使用真实存在的物理存储器。所有的虚拟地址形成的集合就是<code>虚拟地址空间</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/81d7302266706682d303fe496474e92c.png"><br>也就是说，内存是一个很大的，线性的字节数组（平坦寻址）。每一个字节都是固定的大小，由8个二进制位组成。<code>且都有一个唯一的编号,编号从0开始，一直到最后一个字节</code>。<br>如上图中，这是一个256M的内存，他一共有256x1024x1024  = 268435456个字节，那么它的地址范围就是 0 ~268435455  。<br>由于内存中的每一个字节都有一个唯一的编号。<br>因此，在程序中使用的变量，常量，甚至数函数等数据，当他们被载入到内存中后，都有自己唯一的一个编号，这个编号就是这个数据的地址。<br>指针就是这样形成的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;    </span><br><span class="line"><span class="keyword">int</span>  num = <span class="number">97</span>;    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch 的地址:%p&quot;</span>,&amp;ch);   </span><br><span class="line"><span class="comment">//ch 的地址:0028FF47    </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num的地址:%p&quot;</span>,&amp;num); </span><br><span class="line"> <span class="comment">//num的地址:0028FF40    </span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> ch 的地址:0028FF47</span></span><br><span class="line"><span class="comment"> num的地址:0028FF40</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>指针的值实质是内存单元（即字节）的编号，所以指针单独从数值上看，也是整数，他们一般用16进制表示。</li><li>指针的值（虚拟地址值）使用一个机器字的大小来存储。</li><li>也就是说,对于一个机器字为w位的电脑而言,它的虚拟地址空间是0~2w － 1 ,程序最多能访问2w个字节。</li><li>这就是为什么xp这种32位系统最大支持4GB内存的原因了。<br>我们可以大致画出变量ch和num在内存模型中的存储。（假设 char占1个字节，int占4字节）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/039219167813dd4cf772ef2df8648e55.png"></p><h2 id="变量和内存"><a href="#变量和内存" class="headerlink" title="变量和内存"></a>变量和内存</h2><p>用上面例子中的  int num = 97 这个局部变量来分析变量在内存中的存储模型。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/039219167813dd4cf772ef2df8648e55.png"><br>已知：num的类型是int，占用了4个字节的内存空间，其值是97，地址是0028FF40。我们从以下几个方面去分析。</p><ul><li>内存的数据<br>内存的数据就是变量的值对应的二进制。<br>97的二进制是 : 00000000 00000000 00000000 0110000 , 但使用的小端模式存储时，低位数据存放在低地址，所以图中画的时候是倒过来的。</li><li>内存数据的类型<br>内存的数据类型决定了这个数据占用的字节数，以及计算机将如何解释这些字节。<br>num的类型是int，因此将被解释为 一个整数。</li><li>内存数据的名称<br>内存的名称就是变量名。实质上，内存数据都是以地址来标识的，根本没有内存的名称这个说法，这只是高级语言提供的抽象机制 ，方便我们操作内存数据。<br>而且在C语言中，并不是所有的内存数据都有名称，例如使用malloc申请的堆内存就没有。</li><li>内存数据的地址<br>如果一个类型占用的字节数大于1，则其变量的地址就是地址值最小的那个字节的地址。<br>因此num的地址是 0028FF40。内存的地址用于标识这个内存块。</li><li>内存数据的生命周期<br>num是main函数中的局部变量，因此当main函数被启动时，它被分配于栈内存上，当main执行结束时，消亡。</li></ul><h2 id="什么是指针"><a href="#什么是指针" class="headerlink" title="什么是指针"></a>什么是指针</h2><ul><li>在程序中定义一个变量，在对程序进行编译时，系统就会给这个变量分配内存单元，并根据变量类型，分配一定长度的空间。<br>例如：对int型变量分配4个字节，<code>内存区的每一个字节都有一个编号</code>，即“地址”，它相当于旅馆中的房间号，地址所标识的内存单元中存放的数据就相当于居住的旅客。</li><li>由于通过地址能找到所需的单元变量，可以说，<code>地址指向该变量单元</code>，因此将地址形象化地称为“<code>指针</code>”。<br>例如：有一个房间号为2008的房间，地址就是2008，或者说2008指向这个房间。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/3deace18cca60dd5b8169b8cc9fe6db9.png"></li><li>在C语言中，对变量的访问有<code>直接访问</code>和<code>间接访问</code>。<br>例如以下，直接通过<code>变量名i</code>找到存储单元称为直接访问方式。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/7e1ea1bfca185d8222b5820e060057e4.png"><br>另外一种指通过把变量i的地址存放在另一变量中，然后通过该变量来间接找到变量i的地址，从而访问变量i，称为“<code>间接访问</code>”。而这个存储变量地址的特殊变量称为“<code>指针变量</code>”。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *i_pointer; <span class="comment">//定义指向整型的指针变量，能存放整型数据地址(int *)，*只是表示它为指针变量</span></span><br><span class="line">i_pointer=&amp;i;   <span class="comment">//将i的地址存放到i_pointer中,即(2000),&amp;为取地址操作符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*i_pointer);<span class="comment">//*为取值操作符，取出所指向地址的值。</span></span><br><span class="line"><span class="comment">//即找到存放变量i地址的变量i_pointer，从中取出i的地址(2000),然后到2000字节开始的存储单元中取出i的值(3)</span></span><br></pre></td></tr></table></figure><blockquote><p>总之，一个变量的地址称为该变量的“<code>指针</code>”。例如，地址2000是变量i的指针<br>存放另一变量的地址的变量(指针)，称为“<code>指针变量</code>”，例如，i_pointer就是指针变量。<br>指针变量就是地址变量，用来存放地址，指针变量的值是地址(即指针)。<code>指针是一个地址，指针变量是存放地址的变量</code>。</p></blockquote><h2 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h2><p>存放地址的变量是指针变量，它用来指向另一个对象（如变量、数组、函数等）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过指针变量访问整型变量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">100</span>,b=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *pointer1,*pointer2; <span class="comment">//定义指向整型的指针变量</span></span><br><span class="line">pointer1=&amp;a;             <span class="comment">//把a的地址赋值pointer1</span></span><br><span class="line">pointer2=&amp;b;<span class="comment">//把b的地址赋值pointer2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的地址:%p\n&quot;</span>,pointer1); <span class="comment">//%p为指针格式符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b的地址:%p\n&quot;</span>,pointer2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>,*pointer1,*pointer2);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a的地址:000000000062FE0C</span></span><br><span class="line"><span class="comment">b的地址:000000000062FE08</span></span><br><span class="line"><span class="comment">a=100,b=10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>定义指针变量<pre><code>  类型名 *指针变量名；  int *p1;  //指向int型变量的指针变量  float *p2; //指向float型变量的指针变量  char *p3; //指向char型变量的指针变量</code></pre></li><li>不同数据类型在内存中所占的字节数和存放方式是不同的，必须指定数据类型，才能按存储单元的长度以及数据的存储形式正确的存取数据。</li><li>一个变量的指针的含义包括两个方面：<code>一是以存储单元编号表示的地址(如编号为2000的字节)，一是它指向的存储单元的数据类型(如int，char)</code>，所以在说明变量类型时，不能单一说“a是一个指针变量”，而应该完整地说“a是指向整型数据的指针变量”。</li><li>指针变量只能存放地址，不能存放数据。</li></ul><h2 id="引用指针变量"><a href="#引用指针变量" class="headerlink" title="引用指针变量"></a>引用指针变量</h2><ul><li><p>给指针变量赋值</p><pre><code>  p=&amp;a;  //把a的地址赋给变量p</code></pre><p>指针变量p的值是变量a的地址，p指向a。</p></li><li><p>引用指针变量指向的变量<br>如果已执行”p=&amp;a”,即p指向了a的地址，则</p><pre><code>  printf(&quot;%d&quot;,*p); //*取值运算符  *p=1;  //表示将整数1赋给p所指向的变量a，即等价于a=1</code></pre><p>以整数的形式输出指针变量p所指向的变量a的值。</p></li><li><p>引用指针变量的值</p><pre><code>  printf(&quot;%o&quot;,p);  //以八进制输出变量p的值，即p指向的a的地址。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入a和b两个整数，按先大后小的顺序输出a和b </span></span><br><span class="line"><span class="comment">//输入a和b两个整数，按先大后小的顺序输出a和b </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个整数(输入一个数，按下回车):\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">int</span> *p1,*p2,*t;</span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">t=p1;  <span class="comment">//t为中间变量也要是同类型指针变量</span></span><br><span class="line">p1=p2;</span><br><span class="line">p2=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d\n&quot;</span>,a,b); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Max:%d,min:%d&quot;</span>,*p1,*p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">请输入两个整数(输入一个数，按下回车):</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">a=3,b=100</span></span><br><span class="line"><span class="comment">Max:100,min:3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/4826b2e82d5fe87d981cafdc6629a4db.png"></p><blockquote><p>a和b的值并未交换，但p1和p2的值却改变了。p1的值由&amp;a变成了&amp;b，p2的值由&amp;b变成了&amp;a，也就是a和b的地址发生交换，值不变，这样输出<em>p1和</em>p2时，实际上是输出变量b和a的值。</p></blockquote></li><li><p>如果已经执行了语句pointer_1=&a;则&amp;<em>pointer_1与&amp;a相同。因为&amp;和</em>优先级相同，但按自右向左方向结合，因此先进行*pointer_i的运算，它就是变量a，再执行&amp;运算。</p></li><li><p><em>&amp;a的含义是先进行&amp;a运算，得到a的地址，再进行</em>运算，即&amp;a所指向的变量，也就是变量a。与*pointer_1作用一样。</p></li><li><p>(*pointer_1)++等价于a++;</p></li></ul><h2 id="指针变量作为函数参数"><a href="#指针变量作为函数参数" class="headerlink" title="指针变量作为函数参数"></a>指针变量作为函数参数</h2><p>作用是将一个变量的地址传送到另一个函数中。<br><code>实参为地址(p)，形参为指向的变量(int *p)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">int</span> *p1,*p2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个整数(输入一个数，按下回车):\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未交换：a=%d,b=%d\n&quot;</span>,a,b); <span class="comment">//未交换 </span></span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">swap(p1,p2);  <span class="comment">//实现交换 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换后：a=%d,b=%d\n&quot;</span>,a,b);   <span class="comment">//函数中是交换a和b值，故发生交换变化 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Max:%d,min:%d&quot;</span>,*p1,*p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span>  <span class="comment">//*p1和*p2就是a，b变量 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t=*p1;  <span class="comment">//t=a </span></span><br><span class="line">*p1=*p2; <span class="comment">//a=b</span></span><br><span class="line">*p2=t;   <span class="comment">//b=t</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入a,b,c三个整数，按大小顺序输出。</span></span><br><span class="line"><span class="comment">//a&lt;b,ab交换,a&lt;c,ac交换 ,b&lt;c,bc交换</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2,<span class="keyword">int</span> *p3)</span></span>;<span class="comment">//函数声明，该函数使得a&gt;b&gt;c </span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入3个整数:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">int</span> *p1,*p2,*p3;</span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line">p3=&amp;c;</span><br><span class="line"><span class="comment">//extern swap(p1,p2); //扩展作用域</span></span><br><span class="line">exchange(p1,p2,p3);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&gt;%d&gt;%d&quot;</span>,a,b,c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2,<span class="keyword">int</span> *p3)</span> <span class="comment">//等价于 int *p1=p1 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> *q)</span></span>;  <span class="comment">//函数声明 </span></span><br><span class="line"><span class="keyword">if</span>(*p1&lt;*p2)</span><br><span class="line">swap(p1,p2);</span><br><span class="line"><span class="keyword">if</span>(*p1&lt;*p3)</span><br><span class="line">swap(p1,p3);</span><br><span class="line"><span class="keyword">if</span>(*p2&lt;*p3)</span><br><span class="line">swap(p2,p3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t=*p;</span><br><span class="line">*p=*q;</span><br><span class="line">*q=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组和指针"><a href="#数组和指针" class="headerlink" title="数组和指针"></a>数组和指针</h2><ul><li>一个变量有地址，一个数组包含若干元素，每个数组元素都在内存中占用存储单元，它们都有相应的地址。</li><li>指针变量既然可以指向变量，当然也可以指向数组元素(把某一元素的地址放到一个指针变量中)。</li><li><code>所谓数组元素的指针就是数组元素的地址</code>。</li><li>指针变量指向一个数组元素<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>; /</span><br><span class="line"><span class="keyword">int</span> *p;    </span><br><span class="line">p=&amp;[<span class="number">0</span>];   <span class="comment">//把a[0]元素的地址赋给指针变量p，也就是指向第0号元素。</span></span><br><span class="line"><span class="comment">//由于数组名就是数组首元素的地址，故p=&amp;[0]等价于p=a</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/a026acc530af4c753fc1f6ea7d8247bc.png"></li></ul><h2 id="引用数组元素"><a href="#引用数组元素" class="headerlink" title="引用数组元素"></a>引用数组元素</h2><p>①下标法，如a[i]形式<br>②<code>指针法，如*(a+i)或*(p+i)</code> //表示从a[0]开始通过i累加查找数组元素<br>其中a是<code>数组名</code>(首元素的地址)，p是指向数组元素的指针变量，其初值<code>p=a</code>。<br>即通过数组名计算数组元素地址，找出元素的值。</p><blockquote><p>p+1并不是将p的值(地址)简单地加1，而是加上一个数组元素所占的字节数。例如，int型数组每个元素占4字节，p+1意味着p的值(地址)加4个字节，以使它指向下一个元素。p+1所代表的地址实际上是<code>(p+1)*d</code>,d是一个数组元素所占的字节数(依据数据类型)。</p></blockquote><p>③<code>用指针变量指向数组元素</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过数组名计算数组元素地址，找出元素的值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入10个整数:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="comment">//通过数组名和元素序号计算元素地址，再找到该元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,*(a+i));   </span><br><span class="line"><span class="comment">//(a+i)是a数组中序号为i的元素的地址，*(a+i)是该元素的值。 </span></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入10个整数:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// p=a(p=&amp;a[0])表示指针指向数组a的首地址，p++每次指向下一个元素</span></span><br><span class="line"><span class="keyword">for</span>(p=a;p&lt;(a+<span class="number">10</span>);p++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,*p);   </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="数组名做函数参数"><a href="#数组名做函数参数" class="headerlink" title="数组名做函数参数"></a>数组名做函数参数</h2><pre><code>    f(int arr[],int n)</code></pre><p>在编译时是将arr按指针变量处理的，相当于将函数的首部写成</p><pre><code>    f(int *arr,int n)</code></pre><blockquote><p>C语言调用函数时虚实结合的方法都是采用“<code>值传递</code>”方式，当用变量名作为函数参数时传递的是变量的值，当用<code>数组名</code>作为函数参数时，由于数组名代表的是数组<code>首元素地址</code>，因此传递的值是<code>地址</code>，所以要求<code>形参为指针变量</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/e6c4326ff26c355b50dc5847ed1888ba.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///将数组a中n个整数按相反顺序存放 </span></span><br><span class="line"><span class="comment">//将a[0]与a[n-1]对换,a[1]与a[n-2]对换。。。。 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//void reserve(int a[],int n);  //reverse函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>; <span class="comment">//传递指针变量 </span></span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;原数组:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> reserve(a,<span class="number">10</span>); <span class="comment">//数组名作地址，等价于传递了首元素地址 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n倒序后:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span> <span class="comment">//x为指针变量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p,t,*i,*j,m;</span><br><span class="line">m=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">i=a;   <span class="comment">//i指向a，即指向数组第一个元素 </span></span><br><span class="line">j=a+n<span class="number">-1</span>;  <span class="comment">//j指向数组的最后一个元素 ，从0开始要减1 </span></span><br><span class="line">p=a+m;<span class="comment">//p指向中间值</span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;=p;i++,j--)</span><br><span class="line">&#123;</span><br><span class="line">t=*i;</span><br><span class="line">*i=*j;</span><br><span class="line">*j=t;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">void reverve(int a[],int n)  //x是数组名 </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int t,i,j,m;</span></span><br><span class="line"><span class="comment">m=(n-1)/2;   //中间变量 </span></span><br><span class="line"><span class="comment">for(i=0;i&lt;=m;i++)  //小于中间值就发生提供 </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">j=n-1-i;  //j指向对应的元素，例a[0]对应倒数第一个元素 a[n-1]</span></span><br><span class="line"><span class="comment">t=a[i];</span></span><br><span class="line"><span class="comment">a[i]=a[j];</span></span><br><span class="line"><span class="comment">a[j]=t;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从十个数中找出其中最大值和最小值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_min_value</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>; <span class="comment">//函数声明 </span></span><br><span class="line"><span class="keyword">int</span> max,min;  <span class="comment">//全局变量 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入10个整数:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); </span><br><span class="line">&#125; </span><br><span class="line">max_min_value(a,<span class="number">10</span>);  <span class="comment">//数组名当参数 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nmax=%d,min=%d\n&quot;</span>,max,min);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_min_value</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p,*a_end; <span class="comment">//定义两个指针变量 </span></span><br><span class="line">a_end=a+n;    <span class="comment">//指向最后一个元素地址 </span></span><br><span class="line">max=min=*a;  <span class="comment">//设a[0]为最大最小值 </span></span><br><span class="line"><span class="keyword">for</span>(p=a+<span class="number">1</span>;p&lt;a_end;p++) <span class="comment">//p=a+1即a[1],p&lt;a[n],p++即a下一个元素 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*p&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=*p;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(*p&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=*p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.形参和实参都用数组名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">f(a,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实参用数组名，形参用指针变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">f(a,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.实参形参都用指针变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],*p=a;</span><br><span class="line">f(p,<span class="number">10</span>);    <span class="comment">//传地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span>  <span class="comment">//接收地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.实参为指针变量，形参为数组名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],*p=a;</span><br><span class="line">f(p,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span>  <span class="comment">//实现同一首地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组与指针"><a href="#多维数组与指针" class="headerlink" title="多维数组与指针"></a>多维数组与指针</h2><p>二维数组在内存中是线性存放的，但在逻辑上可以认为是“数组的数组”，分行和列来理解。</p><pre><code>    int a[3][4]=&#123;&#123;1,3,5,7&#125;,&#123;9,11,13,15&#125;,&#123;17,19,21,23&#125;&#125;;</code></pre><p>设二维数组的首行的首地址为2000，则有：</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/09/01d7f1351a27ceb6940a80be6dc48455.png"></p><table><thead><tr><th align="center">表示形式</th><th align="center">含义</th><th align="center">地址</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">二维数组名，指向一维数组a[0]，即0行首地址</td><td align="center">2000</td></tr><tr><td align="center">a[0],* (a+0),* a</td><td align="center">0行0列元素地址</td><td align="center">2000</td></tr><tr><td align="center">a+1,&amp;a[1]</td><td align="center">1行首地址</td><td align="center">2016</td></tr><tr><td align="center">a[1],*(a+1)</td><td align="center">1行0列元素a[1] [0]的地址</td><td align="center">2016</td></tr><tr><td align="center">a[1]+2,*(a+1)+2,&amp;a[1] [2]</td><td align="center">1行2列元素a[1] [2]的地址</td><td align="center">2024</td></tr><tr><td align="center">*(a[1]+2), *( *(a+1)+2),a[1] [2]</td><td align="center">1行2列元素a[1] [2]的地址</td><td align="center">元素值为13</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>&#125;,&#123;<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;************指向第一个元素的地址***************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*a:%d\n&quot;</span>,*a); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0]:%d\n&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0]:%d\n&quot;</span>,&amp;a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0][0]:%d\n&quot;</span>,&amp;a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;************指向第二行的地址，相差16字节*************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a+1:%d\n&quot;</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(a+1):%d\n&quot;</span>,*(a+<span class="number">1</span>));  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[1]:%d\n&quot;</span>,a[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[1]:%d\n&quot;</span>,&amp;a[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[1][0]:%d\n&quot;</span>,&amp;a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;************指向第三行的地址，相差16字节***************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a+2:%d\n&quot;</span>,a+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(a+2):%d\n&quot;</span>,*(a+<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[2]:%d\n&quot;</span>,a[<span class="number">2</span>]); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[2]:%d\n&quot;</span>,&amp;a[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[2][0]:%d\n&quot;</span>,&amp;a[<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">************指向第一个元素的地址***************</span></span><br><span class="line"><span class="comment">a:6487536</span></span><br><span class="line"><span class="comment">*a:6487536</span></span><br><span class="line"><span class="comment">a[0]:6487536</span></span><br><span class="line"><span class="comment">&amp;a[0]:6487536</span></span><br><span class="line"><span class="comment">&amp;a[0][0]:6487536</span></span><br><span class="line"><span class="comment">************指向第二行的地址，相差16字节*************</span></span><br><span class="line"><span class="comment">a+1:6487552</span></span><br><span class="line"><span class="comment">*(a+1):6487552</span></span><br><span class="line"><span class="comment">a[1]:6487552</span></span><br><span class="line"><span class="comment">&amp;a[1]:6487552</span></span><br><span class="line"><span class="comment">&amp;a[1][0]:6487552</span></span><br><span class="line"><span class="comment">************指向第三行的地址，相差16字节***************</span></span><br><span class="line"><span class="comment">a+2:6487568</span></span><br><span class="line"><span class="comment">*(a+2):6487568</span></span><br><span class="line"><span class="comment">a[2]:6487568</span></span><br><span class="line"><span class="comment">&amp;a[2]:6487568</span></span><br><span class="line"><span class="comment">&amp;a[2][0]:6487568</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>指向多维数组元素的指针变量<br>把二维数组a分解为一维数组a[0],a[1],a[2]之后，设p为指向二维数组的指针变量。可定义为：</p><pre><code>  int(*p)[4];</code></pre><p>它表示p是一个指针变量，它指向包含<code>4个元素的一维数组</code>。若指向第一个一维数组a[0],其值等于a,a[0],或&amp;a[0][0]等。<br><code>而p+i则指向一维数组a[i]</code>。</p><blockquote><p>从前面分析可得出<code>*(p+i)+j</code>是二维数组<code>i行j列</code>的元素的地址，而<code>*(*(p+i)+j)</code>则是i行j列元素的<code>值</code>。</p></blockquote></li><li><p>二维数组指针变量说明的一般形式为：</p><pre><code>  类型说明符(*指针变量名)[长度]</code></pre><p>其中“<code>类型说明符</code>”为所指数组的<code>数据类型</code>。”<code>*</code>“表示其后的变量是<code>指针类型</code>。“<code>长度</code>”表示<code>二维数组分解为多个一维数组时，一维数组的长度，也就是二维数组的列数</code>。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用指针输出二维数组的指 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>&#125;,&#123;<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>];  <span class="comment">//二维数组指针   4为每个一维数组的长度</span></span><br><span class="line"><span class="keyword">int</span> i,j;   <span class="comment">//行列 </span></span><br><span class="line">p=a;    <span class="comment">//指针指向二维数组a的首地址 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d  &quot;</span>,*(*(p+i)+j));</span><br><span class="line"><span class="comment">//*(*(p+i)+j)则是i行j列元素的值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="字符串与指针"><a href="#字符串与指针" class="headerlink" title="字符串与指针"></a>字符串与指针</h2> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/09/13a3ccf618dabfdbeeb9f215cb06c0c0.png" width="400px" height="400px"><pre><code>     //char string[]=&quot;I love China!&quot;;    char *string=&quot;I love China!&quot;;  //定义一个字符指针     printf(&quot;%s\n&quot;,string);</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//实现字符数组的复制 (下标法)</span></span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">&quot;I Love China!&quot;</span>,b[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;*(a+i)!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">*(b+i)=*(a+i);</span><br><span class="line">&#125;</span><br><span class="line">*(b+i)=<span class="string">&#x27;\0&#x27;</span>;  <span class="comment">//最后补上0，若不补会不知道字符串结尾在哪 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String a is:%s\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String b is:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;b[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b[i]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//实现字符数组的复制 </span></span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">&quot;I Love China!&quot;</span>,b[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;*(a+i)!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">*(b+i)=*(a+i);</span><br><span class="line">&#125;</span><br><span class="line">*(b+i)=<span class="string">&#x27;\0&#x27;</span>;  <span class="comment">//最后补上0，若不补会不知道字符串结尾在哪 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String a is:%s\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String b is:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;b[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b[i]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String a is:I Love China!</span></span><br><span class="line"><span class="comment">String b is:I Love China!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>字符指针做函数参数<br>①用字符数组作参数<br>②形参用字符指针变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span>;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//区别以下两种写法 第二种不能运行 </span></span><br><span class="line"><span class="keyword">char</span> b[]=<span class="string">&quot;We are family!&quot;</span>;</span><br><span class="line"><span class="comment">//如果用指针指向字符串(常量存储区),则它不能被修改</span></span><br><span class="line"><span class="comment">//char *b=&quot;We are family!&quot;;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String a=%s\nstring b=%s\n&quot;</span>,a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncopy string a to string b:\n&quot;</span>);</span><br><span class="line">copy_string(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nstring a=%s\nstring b=%s\n&quot;</span>,a,b);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;*from!=<span class="string">&#x27;\0&#x27;</span>;from++,to++)</span><br><span class="line">&#123;</span><br><span class="line">*to=*from;</span><br><span class="line">&#125;</span><br><span class="line">*to=<span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String a=I Love China!</span></span><br><span class="line"><span class="comment">string b=We are family!</span></span><br><span class="line"><span class="comment">copy string a to string b:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">string a=I Love China!</span></span><br><span class="line"><span class="comment">string b=I Love China!!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="https://fishc.com.cn/blog-9-1097.html">C++内存分配方式详解——堆、栈、自由存储区、全局/静态存储区和常量存储区</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以上copy_string还有六种简化版写法</span></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((*to=*from)!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">to++;</span><br><span class="line">from++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  *比++优先级高</span></span><br><span class="line"><span class="keyword">while</span>((*to++=*from++)!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*from!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*to++=*from++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//&#x27;\0&#x27;整型为0,当循环条件为0，即退出循环</span></span><br><span class="line"><span class="keyword">while</span>(*to++=*from++)</span><br><span class="line">&#123;</span><br><span class="line">;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;*to++=*from++;)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1,*p2;</span><br><span class="line">p1=from;</span><br><span class="line">p2=to;</span><br><span class="line"><span class="keyword">while</span>((*p2++=*p1++)!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>字符指针变量和字符数组的区别</p></li><li><p>字符数组由若干个元素组成，每个元素中放一个字符，而字符指针变量中存放的是地址(字符串第1个字符的地址)，决不是将字符串放到字符指针变量中。</p></li><li><p>赋值方法。对字符数组只能对各个元素赋值，不能用以下方法对字符数组赋值。</p><pre><code>  char str[20];  str=&quot;I love China!&quot;;</code></pre></li></ul><p>而对字符指针变量，可以采用下面方法赋值：</p><pre><code>    char *a;    a=&quot;I love Chia!&quot;;</code></pre><p>但注意赋给a的不是字符，而是字符串第一个元素的地址。</p><ul><li><p>对字符指针变量赋初值</p><pre><code>  char *a=&quot;I love China!&quot;;  等价于  char *a;  a=&quot;I love China!&quot;;</code></pre></li></ul><p>而对数组的初始化:</p><pre><code>    char str[20]=&#123;&quot;I love China!&quot;&#125;;    不能等价于    char str[20];    str[]=&quot;I love China&quot;;</code></pre><ul><li><p>如果定义了一个字符数组，在编译时为它分配内存单元，它有确定的地址。而定义一个字符指针变量时，给指针变量分配内存单元，在其中可以放一个字符变量的地址也就是说，该指针变量可以指向一个字符型数据，但如果未给它赋予一个地址值，则它并未具体指向一个确定的字符数据。</p><pre><code>  char str[10];  scanf(&quot;%s&quot;,str);  //以上是完全可以的，但下面方法不行  char *a;  scanf(&quot;%s&quot;,a);</code></pre></li><li><p>指针变量的值是可以变化的，使其指向不同的数据</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">a+=<span class="number">7</span>;  <span class="comment">//指向第7个数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I Love China!</span></span><br><span class="line"><span class="comment">China!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>另外需要说明的是，若定义了一个指针变量，并使它指向一个字符串，就可以用下标形式引用指针变量所指的字符串中的字符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The sixth character is %c\n\n&quot;</span>,a[<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;a[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The sixth character is e</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">I Love China!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h2><p><code>用函数指针变量调用函数</code>。一个函数在编译时被分配给一个入口地址，这个函数的入口地址就称为函数的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较a和b的大小，求大值 </span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c语言不允许嵌套注释，下列这种方法可以方便使用 </span></span><br><span class="line"><span class="comment">//相当于开关，用哪段代码就填1，不用就0 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(0)  <span class="comment">//#为预编译,(1)为真，就执行下面代码到endif为止</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">c=max(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,max=%d\n\n&quot;</span>,a,b,c);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">c=a;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(1)</span></span><br><span class="line"><span class="comment">//将main函数改为</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>,<span class="keyword">int</span>); <span class="comment">//定义指向函数的指针 </span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">p=max;    <span class="comment">//使p指向max函数 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">c=(*p)(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,max=%d\n\n&quot;</span>,a,b,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>函数指针变量常用的用途之一是<code>把指针作为参数传递到其他函数</code>。函数的指针也可以作为参数，以实现函数地址的传递，这样就能够在被调用的函数中使用实参函数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实参函数名    f1            f2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span>(*x1)(<span class="keyword">int</span>),<span class="keyword">int</span>(*x2)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,i,j;</span><br><span class="line">a=(*x1)(i);  <span class="comment">//调用f1函数</span></span><br><span class="line">b=(*x2)(i,j); <span class="comment">//调用f2函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上函数的原理可以简述如下：有一个函数(sub()),它有两个形参(x1,x2)，定义x1和x2为指向函数的指针变量。在调用函数sub时，实参为两个函数名f1和f2,给形参传递的是函数f1和f2的地址。这样在函数sub中就可以调用f1和f2函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span> </span><br><span class="line"><span class="comment">/*有两个整数a和b，由用户输入1，2或3。*/</span> </span><br><span class="line"><span class="comment">/*如输入1，程序就给出a和b中最大者*/</span></span><br><span class="line"><span class="comment">/*输入2就给出a和b中最小者，输入3则求和*/</span></span><br><span class="line"><span class="comment">/*******************************************************/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">//函数声明 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> (*p)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span>; <span class="comment">//fun函数声明 </span></span><br><span class="line"><span class="keyword">int</span> a,b,n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter a and b:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b=&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please choose 1,2or3\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) fun(a,b,max);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) fun(a,b,min);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>) fun(a,b,add); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span>(*p)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">result=(*p)(x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)</span><br><span class="line">z=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">z=y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">if</span>(x&lt;y)</span><br><span class="line">z=x;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">z=y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;min=&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;add=&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Enter a and b:</span></span><br><span class="line"><span class="comment">a=2</span></span><br><span class="line"><span class="comment">b=3</span></span><br><span class="line"><span class="comment">please choose 1,2or3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">min=2ff</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="返回指针值的函数"><a href="#返回指针值的函数" class="headerlink" title="返回指针值的函数"></a>返回指针值的函数</h2><pre><code>    类型名 *函数名(参数列表)    int *a(int x,int y); //带回整型指针值</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有若干个学生的成绩 (每个学生有4门课程)</span></span><br><span class="line"><span class="comment">要求在用户输入学生序号以后，能输出该学生的全部成绩</span></span><br><span class="line"><span class="comment">用指针函数来实现 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span>score[][<span class="number">4</span>]=&#123;&#123;<span class="number">60.0</span>,<span class="number">70.0</span>,<span class="number">80.5</span>,<span class="number">90.5</span>&#125;,&#123;<span class="number">56.0</span>,<span class="number">55.0</span>,<span class="number">67.0</span>,<span class="number">88.0</span>&#125;,&#123;<span class="number">99.0</span>,<span class="number">78.0</span>,<span class="number">78.8</span>,<span class="number">79.8</span>&#125;,&#123;<span class="number">56</span>,<span class="number">78</span>,<span class="number">77</span>,<span class="number">90</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> *<span class="title">search</span><span class="params">(<span class="keyword">double</span>(*pointer)[<span class="number">4</span>],<span class="keyword">int</span> n)</span></span>;  <span class="comment">//指针函数声明，返回指向double型的指针 </span></span><br><span class="line"><span class="keyword">double</span> *p;</span><br><span class="line"><span class="keyword">int</span> i,m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of Studnet:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The scores of NO.%d are:\n&quot;</span>,m);</span><br><span class="line">p=search(score,m);  <span class="comment">//把地址赋给p </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5.2f\t&quot;</span>,*(p+i));  <span class="comment">//打印 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">double</span> *<span class="title">search</span><span class="params">(<span class="keyword">double</span> (*pointer)[<span class="number">4</span>],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> *p;</span><br><span class="line">p=*(pointer+n);  <span class="comment">//序号加行数的索引 </span></span><br><span class="line"><span class="keyword">return</span> p;  <span class="comment">//返回地址 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Please enter the number of Studnet:1</span></span><br><span class="line"><span class="comment">The scores of NO.1 are:</span></span><br><span class="line"><span class="comment">56.00   55.00   67.00   88.00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>指针函数和函数指针的区别</li><li>指针函数是带指针的函数，其本质是一个函数</li><li>函数指针是指向函数的指针变量，因而函数指针本身首先应是指针变量，只不过该指针变量指向函数。</li></ul><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>一个数组，若其元素均为指针类型的数据，称为指针数组，也就是说，指针数组中的每一个元素都相当于一个指针变量。<br>一维数组的定义形式为：</p><pre><code>    类型名 数组名[数组长度]    int *name[4];</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;<span class="comment">//整型数组</span></span><br><span class="line"><span class="comment">//指针数组，5个指针指向a数组的对应元素 </span></span><br><span class="line"><span class="keyword">int</span> *name[<span class="number">5</span>]=&#123;&amp;a[<span class="number">0</span>],&amp;a[<span class="number">1</span>],&amp;a[<span class="number">2</span>],&amp;a[<span class="number">3</span>],&amp;a[<span class="number">4</span>]&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,*name[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1  3  5  7  9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将下边字符串按字符顺序(由小到大)输出</span></span><br><span class="line"><span class="comment">char *name[]=&#123;&quot;Fishc.com&quot;,&quot;www.fishc.com&quot;,&quot;home.fishc.com&quot;,&quot;Fishc.com/dz&quot;&#125;; </span></span><br><span class="line"><span class="comment">我们可以声明一个数组指针来指向；</span></span><br><span class="line"><span class="comment">将排序利用strcmp()函数来解决</span></span><br><span class="line"><span class="comment">各个功能抽象为函数或文件 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">char</span> *name[]=&#123;<span class="string">&quot;Fishc.com&quot;</span>,<span class="string">&quot;www.fishc.com&quot;</span>,<span class="string">&quot;home.fishc.com&quot;</span>,<span class="string">&quot;Fishc.com/dz&quot;</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n=<span class="number">4</span>;</span><br><span class="line">sort(name,n);</span><br><span class="line">print(name,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *t;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(name[k],name[j])&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">k=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=i)</span><br><span class="line">&#123;</span><br><span class="line">t=name[i];</span><br><span class="line">name[i]=name[k];</span><br><span class="line">name[k]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,name[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Fishc.com</span></span><br><span class="line"><span class="comment">Fishc.com/dz</span></span><br><span class="line"><span class="comment">home.fishc.com</span></span><br><span class="line"><span class="comment">www.fishc.com</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>字符在内存中存放形式:<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/60c4d36002b6af45500021b0cf3129e7.png"><br>可以声明数组指针：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/e67f6074740f9eec435d31b12221b8cf.png"></p><h2 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h2><pre><code>    char **p;</code></pre><p>p的前面有两个<em>号。</em>运算符的结合性是<code>从右到左</code>，因此*<em>p相当于</em>(<em>p),显然</em>p是指针变量的定义形式。如果没有最前面的<em>，那就是定义了一个指向字符数据的指针变量。现在它前面又有一个</em>号，表示<code>指针变量p是指向一个字符指针变量的。*p就是p所指向的另一个指针变量</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *name[]=&#123;<span class="string">&quot;I Love China&quot;</span>,<span class="string">&quot;Lzyblog&quot;</span>,<span class="string">&quot;github&quot;</span>,<span class="string">&quot;Very Good!&quot;</span>&#125;;<span class="comment">//指针数组每一个指针指向了字符串的首地址 </span></span><br><span class="line"><span class="keyword">char</span> **p; <span class="comment">//指向指针的指针 </span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">p=name+i; <span class="comment">//指向下一个元素，即下一个字符串 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I Love China</span></span><br><span class="line"><span class="comment">Lzyblog</span></span><br><span class="line"><span class="comment">github</span></span><br><span class="line"><span class="comment">Very Good!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="指针数组作main函数的形参"><a href="#指针数组作main函数的形参" class="headerlink" title="指针数组作main函数的形参"></a>指针数组作main函数的形参</h2><p>指针数组的一个重要应用是<code>作为main函数的形参</code>。</p><pre><code>    int main() //一般形式    int main(int agrc,char *argv[]); //main函数带参数</code></pre><p>main函数是由<code>操作系统</code>调用的，那么main函数形参的值不可能是在程序中得到的，而是和命令一起给出的。也就是在一个命令行中包括<code>命令名</code>和<code>需要传给main函数的参数</code>。</p><p>命令行的一般形式为:</p><pre><code>    命令名 参数1 参数2...参数n</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the number of string is:%d\n&quot;</span>,argc<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;argc;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the string %d is:%s\n&quot;</span>,i,argv[i]);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到运行后形成的.exe文件<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/5ccb7555bdacc776487665fdd0ceb61d.png"><br>打开DOS命令行:<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/a3f91c0630712c2f61490b72f7e3b859.png"></p><h2 id="指针总结"><a href="#指针总结" class="headerlink" title="指针总结"></a>指针总结</h2><ul><li>指针数据类型总结</li></ul><table><thead><tr><th align="center"><strong>定义</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">int i;</td><td align="center"><strong>定义整型变量</strong></td></tr><tr><td align="center">int *p;</td><td align="center"><strong>p为指向整型数据的指针变量</strong></td></tr><tr><td align="center">int a[n];</td><td align="center"><strong>定义整型数组a，它有n个元素</strong></td></tr><tr><td align="center">int *p[n];</td><td align="center"><strong>定义指针数组p，它由n个指向整型数据的指针元素组成</strong></td></tr><tr><td align="center">int (*p)[n];</td><td align="center"><strong>p为指向含n个元素的一维数组的指针变量</strong></td></tr><tr><td align="center">int f();</td><td align="center"><strong>f为带回整型函数值的函数</strong></td></tr><tr><td align="center">int *p();</td><td align="center"><strong>p为带回一个指针的函数，该指针指向整型数据</strong></td></tr><tr><td align="center">int (*p)();</td><td align="center"><strong>p为指向函数的指针，该函数返回一个整型值</strong></td></tr><tr><td align="center">int **p;</td><td align="center"><strong>p是一个指针变量，它指向一个指向整型数据的指针变量</strong></td></tr></tbody></table><ul><li>指针运算小结</li></ul><p><strong>①指针变量加(减)一duh个整数</strong><br>例如:p++、p–、p+i、p-i、p+=i、p-=i等。</p><p><strong>②指针变量赋值</strong><br>将一个变量地址赋给一个指针变量，如:</p><pre><code>    p=&amp;a;        //将变量a的地址赋给p    p=array;     //将数组array首元素地址赋给p    p=&amp;array[i]; //将数组array第i个元素的地址赋给p    p=max;    //max为已定义的函数，将max的入口地址赋给p    p1=p2;      //p1和p2都是指针变量，将p2的值赋给p1</code></pre><p><strong>③指针变量可以有空值，即该指针变量不指向任何变量，可以这样表示:</strong></p><pre><code>    p=NULL;</code></pre><p><strong>④两个指针变量可以相减。</strong><br>如果两个指针变量都指向一个数组中的元素，则两个指针变量值之差是两个指针之间的元素个数。</p><p><strong>⑤两个指针变量比较</strong><br>若两个指针指向同一个数组的元素，则可以进行比较。指向前面的元素的指针变量”小于”指向后面元素的指针变量。</p><h2 id="关于void类型"><a href="#关于void类型" class="headerlink" title="关于void类型"></a>关于void类型</h2><p>void真正发挥的作用在于：</p><ul><li><p>对函数返回的确定</p></li><li><p>对函数参数的限定</p><pre><code>  void abc(void);</code></pre></li><li><p>void指针和const指针<br>ANSI C新标准增加了一种”void”指针类型，即不指定它是指向哪一种类型数据的指针变量。</p></li></ul><pre><code>    void *p;</code></pre><p>表示指针变量p不指向一个确定的类型数据，它的作用仅仅是用来<code>存放一个地址</code>。<br>void指针它可以指向<code>任何类型数据</code>。也就是说，可以用任何类型的指针直接给void指针赋值.但是，如果需要将void指针的值赋给其他类型的指针，则需要进行强制类型转换。</p><p><code>Const作用</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//const放前面使变量常量化，使其不能改变，每一个字符都是const变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//声明一个名为str的指针变量</span></span><br><span class="line"><span class="comment">//它指向一个字符型常量，初始化str为指向字符串</span></span><br><span class="line"><span class="comment">//I Love China! </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(1) </span></span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&#x27;L&#x27;</span>;  <span class="comment">//这条语句是错的，但可以改变str指针的值 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">str=<span class="string">&quot;I Love MyCountry!\n\n&quot;</span>; <span class="comment">//合法！ </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *<span class="keyword">const</span> str=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//常量指针是一个固定的指针，不可以改变它的值，但它所指的数据可以改变 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&#x27;I&#x27;</span>;  <span class="comment">//合法！ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(0) </span></span><br><span class="line">str=<span class="string">&quot;I Love MyCountry!\n\n&quot;</span>; <span class="comment">//非法！ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *<span class="keyword">const</span> str=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//常量指针是一个固定的指针，不可以改变它的值，但它所指的数据可以改变 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&#x27;I&#x27;</span>;  <span class="comment">//非法！ </span></span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;I Love MyCountry!\n\n&quot;</span>; <span class="comment">//非法！ </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>扩展知识点<br>hmemcpy() //万能断点<br>memcpy()</p><pre><code>  void *memcpy()(void *dest,const void *src,size_t count);</code></pre></li></ul><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>预处理命令如包含命令#include&lt;stdio.h&gt;,宏定义命令#define PI 3.1415926等。<br>在源程序中这些命令都放在函数之外，而且一般都放在源文件的前面，它们称为预处理部分。</p><h2 id="define"><a href="#define" class="headerlink" title="define"></a>define</h2><ul><li>无参宏定义</li></ul><p>无参宏的宏名后不带参数。<br>其定义的一般形式为：</p><pre><code>    #define 标识符 字符串    #define PI 3.1415926   //不带分号，它的作用是用PI代替3.1415926</code></pre><p>其中的“#”表示这是一条预处理命令。。<br>凡是以“#”开头的均为<code>预处理命令</code>。<br><code>define</code>为宏定义命令。”标识符”为所定义的宏名。”字符串”可以是常数、表达式、格式串等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> s;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the radius:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;r);</span><br><span class="line">s=PI*r*r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%g\n\n&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>宏定义是用宏名表示一个字符串，只是一种简单的代换，字符串中可以含任何字符，可以是常数，也可以是表达式。</li><li>宏定义不是说明或语句，在行末<code>不必加分红</code>，如加上分号则连分号也一起置换。</li><li>宏定义必须写在函数之外，其作用域为宏定义命令起到源程序结束。如要终止其作用域可使用<code>#undef</code>命令，例#undef PI。</li><li>宏名在源程序中若用引号括起来，则预处理程序不对其作宏代换。</li><li>宏定义允许嵌套，在宏定义的字符串中可以使用已经定义的宏名。在宏展开时由预处理程序层层代换。</li><li>习惯上宏名用大写字母表示，以便于于变量区别。但也允许用小写字母。</li><li>也可以用宏定义表示数据类型，使书法方便。</li></ul><pre><code>    #define INTEGER1 int    typedef INTEGER2 int;</code></pre><ul><li>宏定义和typedef定义的区别</li></ul><p>宏定义只是简单的字符串代换，是在<code>预处理</code>完成的。<br><code>typedef</code>是在<code>编译时</code>处理的，它不是作简单的代换，而是对类型说明符<code>重新命名</code>。被命名的标识符<code>具有类型定义说明的功能</code>,且后面带分号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P1N1 char*</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* P1N2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P1N1 x,y; <span class="comment">//替换后变成: char *x,y;  //x为指针变量，y为字符型 </span></span><br><span class="line">P1N2 a,b; <span class="comment">//替换后变成: char *a,*b; //a和b都为指针类型，占4个字节 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;By #define : %d %d\n\n&quot;</span>,<span class="keyword">sizeof</span>(x),<span class="keyword">sizeof</span>(y)) ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;By typedef : %d %d\n\n&quot;</span>,<span class="keyword">sizeof</span>(a),<span class="keyword">sizeof</span>(b)) ;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">By #define : 8 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By typedef : 8 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>指针的长度跟CPU的位数相等，大部分CPU都是32位，所以指针的长度是32bit，也就是4个字节。(任何指针长度都是4个字节，不管是什么指针)</p></blockquote><ul><li>带参宏定义</li></ul><p>C语言允许带有参数。在宏定义中的参数称为形式参数，在宏调用中的参数称为实际参数。<br>对带参数的宏，在调用中，不仅要宏展开，而且要用实参去代换形参。<br>带参宏定义的一般形式为：</p><pre><code>    #define 宏名(形参表) 字符串</code></pre><p>带参宏调用的一般形式为：宏名(实参表);</p><pre><code>    #define M(y) y*y+3*y  //宏定义    ...    k=M(5);     //宏调用    ...</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) (a&gt;b)?a:b</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* P1N2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,max;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Input two numbers: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">max=MAX(x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The Max is %d\n&quot;</span>,max);</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">Input two numbers: 3 9</span></span><br><span class="line"><span class="comment">The Max is 9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li><p>带参宏定义中，宏名和形参表之间不能用空格重新。</p></li><li><p>在带参宏定义中，形式参数不分配内存单元，因此不必作类型定义。而宏调用中的实参有具体的值。要用它的去代换形参，因此必须作类型说明。这用函数的实参与形参传递不同，在函数中，形参和实参是两个不同的量，各有自己的作用域，调用时要把实参值赋予形参，进行“值传递”。而在带参宏中，<code>只是符号代换，不存在值传递的问题</code>。</p></li><li><p>在宏定义中的形参是标识符，而宏调用中的实参可以是表达式。</p><pre><code>  #define ADD(y) (y)  SAY(a+b+c);</code></pre></li><li><p>在宏定义中，字符串内的形参通常要用括号括起来以避免出错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define SQ(y) (y)*(y)  //不加括号,160/(a+1)*(a+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQ(y) ((y)*(y))<span class="comment">//加了括号,160/((a+1)*(a+1))</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,sq;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input a number: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">sq=<span class="number">160</span>/SQ(a+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sq = %d\n&quot;</span>,sq);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">input a number: 3</span></span><br><span class="line"><span class="comment">sq = 10</span></span><br><span class="line"><span class="comment">input a number: 3</span></span><br><span class="line"><span class="comment">sq = 160</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><ul><li><p>一个include命令只能指定一个被包含文件，若有多个文件要包含，则需要用多个include命令。</p></li><li><p>文件包含允许被嵌套，即在一个被包含的文件中又可以包含另一个文件。</p></li><li><p>包含命令中的文件名可以用双引号括起来，也可以用尖括号括起来。</p><pre><code>  #include“stdio.h”  #include&lt;math.h&gt;</code></pre></li><li><p>使用尖括号表示在包含文件目录中去查找(包含目录是由用户在设置环境时设置的)，而不在源文件目录去查找。</p></li><li><p>使用双引号则表示首先在当前的源文件目录中查找，若未找到才到包含目录中去查找。用户编程时可根据自己文件所在的目录来选择某一种命令形式。</p></li></ul><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><table><thead><tr><th align="center">条件编译指令</th><th>说明</th></tr></thead><tbody><tr><td align="center"><strong>#if</strong></td><td>如果条件为真，则执行相应操作</td></tr><tr><td align="center"><strong>#elif</strong></td><td>如果前面条件为假，而该条件为真，则执行相应操作</td></tr><tr><td align="center"><strong>#else</strong></td><td>如果前面条件均为假，则执行相应操作</td></tr><tr><td align="center"><strong>#endif</strong></td><td>结束相应的条件编译指令</td></tr><tr><td align="center"><strong>#ifdef</strong></td><td>如果该宏已定义，则执行相应操作</td></tr><tr><td align="center"><strong>#ifndef</strong></td><td>如果该宏没有定义，则执行相应操作</td></tr></tbody></table><ul><li>预处例程序提供了条件编译的功能。可以按不同的条件去编译不同的程序部分，因而产生不同的目标代码文件。这对于程序的移植和调试是很有用的。</li><li>条件编译由三种规则：</li></ul><p><strong>①第一种形式:</strong></p><pre><code>    #ifdef 标识符        程序段1    #else        程序段2    #endif</code></pre><p>它的功能是，如果标识符已被#define命令定义过则对程序段1进行编译；否则对程序段2进行编译。<br>如果没有程序段2(它为空),本格式中的#else可以没有,即可以写为:</p><pre><code>    #ifdef 标识符        程序段    #endif</code></pre><p><strong>③第二种形式:</strong></p><pre><code>    #ifndef 标识符        程序段1    #else        程序段2    #endif</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORRECT <span class="meta-string">&quot;China&quot;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter your country : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CORRECT     <span class="comment">//如果没有宏定义 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORRECT <span class="meta-string">&quot;China&quot;</span>  <span class="comment">//则宏定义 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cmp(str,CORRECT)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nYeah! You are Chinese!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nYou are not Chinese!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(str1[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(str2[j]==str1[i])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(!str2[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">Please enter your country : China</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Yeah! You are Chinese!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p> <strong>③第三种形式:</strong></p><pre><code>     #if 常量表达式         程序段1     #else         程序段2     #endif</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//相当与开关，确定求圆还是正方形的面积 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROUND 1  <span class="comment">//1为真 指求园的面积，0为假，求正方形的面积 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926  <span class="comment">//圆周率 </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">double</span> s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input a number: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;r);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ROUND</span></span><br><span class="line">s=r*r*PI;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Area of round if:%6.5f\n\n&quot;</span>,s);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">s=r*r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Area of spuare if:%6.5f\n\n&quot;</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input a number: 3</span></span><br><span class="line"><span class="comment">Area of round if:28.27433</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>将不同类型的数组组合成一个有机的整体，以便于引用。</p><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><p>定义一个结构的一般形式为：</p><pre><code>    struct 结构名    &#123;        成员列表    &#125;;</code></pre><p>成员列表由若干个成员组成，每个成员都是该结构的一个组成部分。对对每个成员也必须作类型说明，其形式为:</p><pre><code>    类型说明符 成员名;</code></pre><ul><li>定义结构类型变量的方法</li></ul><p><strong>①先声明结构体类型再定义变量名</strong></p><pre><code>    类型名      结构体   变量名1，变量名2    struct student student1,student2;</code></pre><p>定义了student1和student2为strcut student类型的变量,即它们具有strcut student类型的结构。</p><p><strong>②在声明类型的同时定义变量</strong></p><pre><code>    strcut 结构体名    &#123;        成员表列    &#125;变量名变量;    strcut student    &#123;        int num;        char name[20];        char sex;        int age;        float score;        char addr[30];    &#125;student1,student2</code></pre><p>在定义了结构体变量后，系统会为之分配内存单元<br>例如：student1和student2在内存中各占(4+20+1+4+4+30=67)个字节。</p><p><strong>③直接定义结构体类型变量</strong></p><pre><code>    struct    &#123;        成员表列    &#125;变量名表列;</code></pre><p>即不出现结构体名。</p><ul><li>结构体嵌套</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">birthday</span>;</span> <span class="comment">//成员birthday被说明为data结构类型，成员名可与程序中其他变量同名，互不干扰。</span></span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy1,boy2;</span><br></pre></td></tr></table></figure><h2 id="结构体变量的引用"><a href="#结构体变量的引用" class="headerlink" title="结构体变量的引用"></a>结构体变量的引用</h2><p>不能将一个结构体变量作为一个整体进行输出<br>正确引用方式：</p><pre><code>    结构体变量名.成员名    student1.num  //表示student1变量中的num成员    student1.num=100; //对变量成员赋值</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy1,boy2;</span><br><span class="line"></span><br><span class="line">boy1.num=<span class="number">007</span>;</span><br><span class="line">boy1.name=<span class="string">&quot;Jake&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input sex and score\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c %f&quot;</span>,&amp;boy1.sex,&amp;boy1.score);</span><br><span class="line"></span><br><span class="line">boy2=boy1;  <span class="comment">//把boy1全体成员赋给boy2 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\nName = %s\n&quot;</span>,boy2.num,boy2.name);<span class="comment">// </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\nScore = %f\n&quot;</span>,boy2.sex,boy2.score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Please input sex and score</span></span><br><span class="line"><span class="comment">M 91</span></span><br><span class="line"><span class="comment">Number = 7</span></span><br><span class="line"><span class="comment">Name = Jake</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment">Score = 91.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>如果成员本身又属于一个结构体类型，则要用若干个成员运算符，一级一级地找到最低的一级的成员。只能对最低级的成员进行赋值或存取以及运算。<br>例如以上结构体嵌套：</p><pre><code>  student1.num;  student1.birthday.month  //多个点运算符访问最低级成员</code></pre></li><li><p>对结构体变量的成员可以向普通变量一样进行各种运算(根据其类型决定可以进行的运算)</p></li><li><p>可以引用结构体变量成员的地址，也可以引用结构体变量的地址。<br>结构体变量的地址注意用在函数参数，传递结构体变量的地址。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy1;</span><br><span class="line">boy1.num=<span class="number">007</span>;</span><br><span class="line">boy1.name=<span class="string">&quot;Jake&quot;</span>;</span><br><span class="line"><span class="comment">//结构体地址和第一个成员地址一样</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The address of struct is %o \n&quot;</span>,&amp;boy1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The address of num is %o \n&quot;</span>,&amp;boy1.num);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The address of struct is 30577000</span></span><br><span class="line"><span class="comment">The address of num is 30577000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="结构体变量初始化"><a href="#结构体变量初始化" class="headerlink" title="结构体变量初始化"></a>结构体变量初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line">&#125;a=&#123;<span class="number">101</span>,<span class="string">&quot;LEE SIN&quot;</span>,<span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//a.num=101;  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num=%d\nname=%s\nsex=%s\n&quot;</span>,a.num,a.name,a.sex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>结构体数组每一个元素都是一个结构体类型的数据，它们都分别包括各个成员项。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 3</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> phone[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">man</span>[<span class="title">NUM</span>];</span> <span class="comment">//结构体数组 </span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;NUM;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input name:\n&quot;</span>);</span><br><span class="line">gets(man[i].name); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input phone:\n&quot;</span>);</span><br><span class="line">gets(man[i].phone); </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tname\t\t\t\t\tphone\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;NUM;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%20s\t\t\t%20s\n&quot;</span>,man[i].name,man[i].phone);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input name:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">input phone:</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">input name:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">input phone:</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">input name:</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">input phone:</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">        name                                    phone</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                   1                                       2</span></span><br><span class="line"><span class="comment">                   3                                       4</span></span><br><span class="line"><span class="comment">                   5                                       6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="结构体数组定义"><a href="#结构体数组定义" class="headerlink" title="结构体数组定义"></a>结构体数组定义</h2><pre><code>    //第一种方法    struct student    &#123;        int num;        char sex;    &#125;;    struct student a[3];  //a为结构体数组名    //第二种方法    struct student    &#123;        int num;        char sex;    &#125;a[3];</code></pre><h2 id="结构体数组初始化"><a href="#结构体数组初始化" class="headerlink" title="结构体数组初始化"></a>结构体数组初始化</h2><pre><code>    //第一种方法    struct student    &#123;        int num;        char sex;    &#125;a[3]=&#123;&#123;1,'M'&#125;,&#123;2,'M'&#125;,&#123;3,'M'&#125;&#125;;    //第二种方法    struct student    &#123;        int num;        char sex;    &#125;;    struct student a[3]=&#123;&#123;1,'M'&#125;,&#123;2,'M'&#125;,&#123;3,'M'&#125;&#125;;</code></pre><h2 id="指向结构体类型数据的指针"><a href="#指向结构体类型数据的指针" class="headerlink" title="指向结构体类型数据的指针"></a>指向结构体类型数据的指针</h2><ul><li><p>一个结构体变量的指针就是该结构体变量所占据的内存段的<code>起始地址</code>。</p></li><li><p>可以设一个指针变量，用来指向一个结构体变量，此时该指针变量的值是结构体变量的起始地址。</p></li><li><p>指针变量也可以用来指向结构体数组中的元素。</p></li><li><p>结构体变量声明的一般形式:</p><pre><code>  struct 结构名 *结构指针变量名  struct student *pstu; </code></pre></li><li><p>赋值是把结构变量的首地址赋予该指针变量，不能把结构名赋予该指针变量。因为结构名只能表示一个结构形式，编译系统并不对它分配内存空间。</p></li><li><p>有了结构指针变量，就能更方便地访问结构变量的各个成员。<br>其访问形式如下:</p><pre><code>  (*结构指针变量).成员名  (*pstu).num;  //或者  结构指针变量-&gt;成员名  pstu-&gt;num</code></pre></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy=&#123;<span class="number">102</span>,<span class="string">&quot;Lzy&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">88.0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">pstu</span>;</span></span><br><span class="line">pstu=&amp;boy;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\n Name = %s\n&quot;</span>,boy.num,boy.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\n Score = %f\n\n&quot;</span>,boy.sex,boy.score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\n Name = %s\n&quot;</span>,(*pstu).num,(*pstu).name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\n Score = %f\n\n&quot;</span>,(*pstu).sex,(*pstu).score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\n Name = %s\n&quot;</span>,pstu-&gt;num,pstu-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\n Score = %f\n\n&quot;</span>,pstu-&gt;sex,pstu-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Number = 102</span></span><br><span class="line"><span class="comment"> Name = Lzy</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment"> Score = 88.000000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Number = 102</span></span><br><span class="line"><span class="comment"> Name = Lzy</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment"> Score = 88.000000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Number = 102</span></span><br><span class="line"><span class="comment"> Name = Lzy</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment"> Score = 88.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="结构指针变量作函数参数"><a href="#结构指针变量作函数参数" class="headerlink" title="结构指针变量作函数参数"></a>结构指针变量作函数参数</h2><p>将一个结构体变量的值传递给另一个函数，有3个方法:</p><ul><li>用结构体变量的成员作参数</li><li>用结构体变量作实参</li><li>用指向结构体变量(或数组)的指针作实参，将结构体变量(或数组)的地址传给形参</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有一个结构体变量stu，内含学生学号、姓名和3门课程的成绩。通过调用函数print将它们输出。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> score[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student)</span></span>;  <span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line">stu.num=<span class="number">8</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(stu.name,<span class="string">&quot;I Love China!!&quot;</span>);<span class="comment">//使用stu.name=&quot;I Love China!!&quot;，结构体成员必须定义成char *name;</span></span><br><span class="line">stu.score[<span class="number">0</span>]=<span class="number">98.5</span>;</span><br><span class="line">stu.score[<span class="number">1</span>]=<span class="number">99.0</span>;</span><br><span class="line">stu.score[<span class="number">2</span>]=<span class="number">99.5</span>;</span><br><span class="line">print(stu);   <span class="comment">//结构体变量作实参</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student stu)</span>  <span class="comment">//接收到结构体变量，知道了结构体变量的位置,相当于将整个结构体复制过去</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tnum: %d\n&quot;</span>,stu.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tname: %s\n&quot;</span>,stu.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_1: %5.2f\n&quot;</span>,stu.score[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_2: %5.2f\n&quot;</span>,stu.score[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_3: %5.2f\n&quot;</span>,stu.score[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     num     : 8</span></span><br><span class="line"><span class="comment">        name    : I Love China!!</span></span><br><span class="line"><span class="comment">        score_1 : 98.50</span></span><br><span class="line"><span class="comment">        score_2 : 99.00</span></span><br><span class="line"><span class="comment">        score_3 : 99.50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改用指向结构体变量的指针作实参 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> score[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line">stu.num=<span class="number">8</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(stu.name,<span class="string">&quot;I Love China!!&quot;</span>);<span class="comment">//stu.name=&quot;I Love China!!&quot;</span></span><br><span class="line">stu.score[<span class="number">0</span>]=<span class="number">98.5</span>;</span><br><span class="line">stu.score[<span class="number">1</span>]=<span class="number">99.0</span>;</span><br><span class="line">stu.score[<span class="number">2</span>]=<span class="number">99.5</span>;</span><br><span class="line">print(&amp;stu);      <span class="comment">//传结构体变量的地址 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *p)</span> <span class="comment">//接收结构体变量地址，用结构体指针p指向它 ，复制过去的只是地址，比上一种方法效率高</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tnum: %d\n&quot;</span>,p-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tname: %s\n&quot;</span>,p-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_1: %5.2f\n&quot;</span>,p-&gt;score[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_2: %5.2f\n&quot;</span>,p-&gt;score[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_3: %5.2f\n&quot;</span>,p-&gt;score[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态存储分配"><a href="#动态存储分配" class="headerlink" title="动态存储分配"></a>动态存储分配</h2><p>全局变量是分配在内存中的静态存储区的，非静态的局部变量是分配在内存中的动态存储区的，这个存储区是一个称为<code>栈(stack)</code>的区域。<br>此外，C语言和允许建立内存动态分配区域，以存放一些临时用的数据，这些数据不必在程序的声明部分定义，也不必等到函数结束时才释放，而是需要时随时开辟，不需要时随时释放。<br>这些数据是存放在一个特别的自由存储区，称为<code>堆区(heap)</code>。<br>对内存的动态分配主要通过系统提供的库函数来实现的,主要有malloc,calloc,free,realloc这4个函数。</p><pre><code>    #include&lt;stdlib.h&gt;</code></pre><ul><li><p><strong>malloc函数</strong></p><pre><code>  void *malloc(unsigned int size);  malloc(100); //开辟100字节的临时分配域，函数值为其第1个字节的地址</code></pre></li></ul><p>在内存的动态存储区中分配一个长度为size的连续空间。形参size的类型定为无符号整型(不允许为负数)。此函数的值(即”返回值”)是所分配区域的<code>第一字节的地址</code>，或者说，此函数是一个指针型函数，返回的指针指向该分配域的开头位置。</p><blockquote><p>注意指针的基类型为void,即不指向任何类型的数据，只提供一个地址。如果此函数未能成功地执行(例如内存空间不足),则返回<code>空指针(NULL)</code>。</p></blockquote><ul><li><p><strong>calloc函数</strong></p><pre><code>  void *calloc(unsigned n,unsigned size);  p=calloc(50,4);  //开辟50*4个字节的临时分配域，把起始地址赋给指针变量p</code></pre></li></ul><p>在内存的动态存储区中分配n个长度为size的连续空间，这个空间一般比较大，足以<code>保存一个数组</code>。<br>用calloc函数可以为一维数组开辟动态存储空间，n为数组元素个数，每个元素长度为size。这就是动态数组。函数返回指向所分配域的起始位置的指针；如果分配不成功，返回NULL。</p><ul><li><p><strong>free函数</strong></p><pre><code>  void free(void *p)  free(p);  //释放指针变量p所指向的已分配的动态空间</code></pre></li></ul><p>释放指针变量p所指向的动态空间，使这部分空间能重新被其它变量使用。<br>p是最近一次调用calloc或malloc函数时得到的函数返回值。free函数无返回值。</p><ul><li><p><strong>realloc函数</strong></p><pre><code>  void *realloc(void *p,unsigned int size)  realloc(p,50);   //将p所指向的已分配的动态空间改为50字节</code></pre></li></ul><p>如果已经通过malloc函数或者calloc函数获得了动态空间，想改变其大小，可以使用realloc函数<code>重新分配</code>。<br>使用realloc函数将p所指向的动态空间的大小改为size。p的值不变。如果重新分配不唱歌，返回NULL。</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表是动态地进行存储分配的一种结构。<br>链表的组成：</p><ul><li>头指针<br>存放一个地址，该地址指向第一个元素</li><li>结点<br>用户需要的实际数据和链接节点的指针(数据域和指针域)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/438aed32557a8ad5fd91581d99a1f5f7.png"></p><p>根据下图建立链表</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/22856f77e6266b65c762fb94d68d77fe.png"></p><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//数据域 </span></span><br><span class="line"><span class="keyword">long</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="comment">//指针域 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span> <span class="comment">//指向struct student的指针 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>,*<span class="title">head</span>,*<span class="title">p</span>;</span><span class="comment">//头指针 </span></span><br><span class="line"></span><br><span class="line">a.num=<span class="number">10101</span>;</span><br><span class="line">a.score=<span class="number">89.5</span>;</span><br><span class="line">b.num=<span class="number">10103</span>;</span><br><span class="line">b.score=<span class="number">90</span>;</span><br><span class="line">c.num=<span class="number">10107</span>;</span><br><span class="line">c.score=<span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">head=&amp;a;  <span class="comment">//头指针指向第一个元素 </span></span><br><span class="line">a.next=&amp;b; <span class="comment">//存放下一个元素的地址 </span></span><br><span class="line">b.next=&amp;c; <span class="comment">//存放下一个元素的地址 </span></span><br><span class="line">c.next=<span class="literal">NULL</span>; <span class="comment">// </span></span><br><span class="line">p=head;  <span class="comment">//使指针p指向head </span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld %5.1f\n&quot;</span>,p-&gt;num,p-&gt;score); <span class="comment">//输出p指向的结点的数据 </span></span><br><span class="line">p=p-&gt;next;  <span class="comment">//使p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>); <span class="comment">//最后一个指针指向NULL </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10101  89.5</span></span><br><span class="line"><span class="comment">10103  90.0</span></span><br><span class="line"><span class="comment">10107  85.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="动态链表"><a href="#动态链表" class="headerlink" title="动态链表"></a>动态链表</h2><p>所谓动态链表是指在程序执行过程中<code>从无到有</code>地建立起一个链表，即一个一个地开辟结点和输入各结点数据，并建立起前后相链的关系。<br>根据下面的分析写程序建立一个含有学生(学号、成绩)数据的单向动态链表。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/e1f408b7fa777e88c9ca528a7c7ee638.png"></p><ul><li>约定学号不会为0，如果输入学号为0，则表示建立链表的过程完成，该结点不会连接到链表中</li><li>如果输入的p1-&gt;num≠0，则输入的是第一个结点数据(n=1)，令heaad=p1,即把p1的值赋给head,也就是使head也指向新开辟的结点p1所指向的新开辟的结点就成为链第一个结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/b064f1235a628c1ffa102ac1fddbf7fd.png"></li><li>再开辟另一个结点并使p1指向它，接着输入该结点的数据</li><li>如果输入的p1-&gt;num不等于0，则应链入第2个结点(n=2)，将新结点的地址赋给第一个结点的next成员</li><li>接着使p2=p1,也就是使p2指向刚才建立的结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/07899a62115e93e738c7b8e3c2e26e7e.png"></li><li>再开辟一个结点并使p1指向它，并输入该结点的数据</li><li>在第三次循环中，由于n=3(n≠1),又将p1的值赋给p2-&gt;next,也就是将第3个结点连接到第2个结点之后,并使p2=p1,使p2指向最后一个结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/dad0a42dc7e428ec02b64e99d9af8317.png"></li><li>再开辟一个新结点，并使p1指向它，输入该结点的数据。由于p1-&gt;num的值为0,不再执行循环,此新结点不应被连接到链表中</li><li>将NULL赋给p2-&gt;next</li><li>建立链表过程至此结束，p1最后所指的结点未链入链表中，第三个结点的next成员的值为NULL,它不指向任何结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/4edfab5febfc3d57d5324441f4dd2733.png"></li></ul><h2 id="链表输出"><a href="#链表输出" class="headerlink" title="链表输出"></a>链表输出</h2><ul><li>首先要知道链表第一个结点的地址,也就是要知道head的值。</li><li>然后设一个指针变量p,先指向第一个结点,输出p所指的结点,然后使p后移一个结点,再输出,直到链表的尾结点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/ff33f3e7ac2f23d6d07c098b69e195b1.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student) <span class="comment">//student结构的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span>;  <span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>;  <span class="comment">//打印链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//全局变量，用来记录存放了多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--当num为0结束输入--\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line">stu=creat();  <span class="comment">//得到head头指针 </span></span><br><span class="line">print(stu);  <span class="comment">//根据头指针找到链表并输出 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span> <span class="comment">//只是创建了一个指针，并没有分配内存大小 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="comment">//动态申请空间，并使p1,p2指向这个新生成的空间 </span></span><br><span class="line">p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);<span class="comment">//LEN是结构体的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入第1个学生的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score);</span><br><span class="line"></span><br><span class="line">head=<span class="literal">NULL</span>;  <span class="comment">//初始化 </span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num != <span class="number">0</span>) <span class="comment">//不等于0 </span></span><br><span class="line">&#123;</span><br><span class="line">n++;   <span class="comment">//出现新结点 </span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p1;  <span class="comment">//头节点指向 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line">p2=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score); </span><br><span class="line"> &#125; </span><br><span class="line"> p2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> head;  <span class="comment">//首地址，链表的标识记号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease are %d records!\n\n&quot;</span>,n);</span><br><span class="line"></span><br><span class="line">p=head;   <span class="comment">//使p指向第1个结点 </span></span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>) <span class="comment">//不是空表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//输出一个结点中的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号为 %d 的成绩是: %f\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">p=p-&gt;next;   <span class="comment">//p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>);<span class="comment">//p不为空地址 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">--当num为0结束输入--</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">Please enter the num :01</span></span><br><span class="line"><span class="comment">Please enter the score :99</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :02</span></span><br><span class="line"><span class="comment">Please enter the score :78</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :03</span></span><br><span class="line"><span class="comment">Please enter the score :66</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :0</span></span><br><span class="line"><span class="comment">Please enter the score :0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 99.000000</span></span><br><span class="line"><span class="comment">学号为 2 的成绩是: 78.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 66.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="链表删除"><a href="#链表删除" class="headerlink" title="链表删除"></a>链表删除</h2>从一个动态链表中删去一个结点,并不是真正从内存中把它抹掉,而是把它从链表中分离开来,只要撤销原来的链接关系即可。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/66f3e5fafdc6ffbc594a4d77e675c0b6.png"></li></ul><p>写一函数以删除动态链表中指定的结点。<br>解题思路：</p><ul><li><p>从p指向的第一个结点开始，检查该结点中的num值是否等于输入的要求删除的那个学号</p></li><li><p>如果相等就将该结点删除，若不相等，就将p后移一个结点，再如此进行下去，直到遇到表尾为止。</p></li><li><p>可以设两个指针变量p1和p2,先使p1指向第一个结点</p></li><li><p>如果要删除的不是第一个结点,则使p1后移指向下一个结点(将p1-&gt;next赋给p1),在此之前应将p1的值赋给p2,使p2指向刚才检查过的那个结点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/5fd8e0e9c712c50255acec82b8dc72e8.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)  <span class="comment">//student结构的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span>;  <span class="comment">//创建链表</span></span><br><span class="line"><span class="comment">//del函数用于删除结点,*head即链表的头指针，num是要删除的结点num </span></span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>; <span class="comment">//打印链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//全局变量，用来记录存放了多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>,*<span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--当num为0结束输入--\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line">stu=creat();  <span class="comment">//得到head头指针 </span></span><br><span class="line">p=stu;</span><br><span class="line">print(p);  <span class="comment">//根据头指针找到链表并输出 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num to delete :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">print(del(p,num));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span> <span class="comment">//只是创建了一个指针，并没有分配内存大小 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="comment">//动态申请空间，并使p1,p2指向这个新生成的空间 </span></span><br><span class="line">p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);<span class="comment">//LEN是结构体的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入第1个学生的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score);</span><br><span class="line"></span><br><span class="line">head=<span class="literal">NULL</span>;  <span class="comment">//初始化 </span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num != <span class="number">0</span>) <span class="comment">//不等于0 </span></span><br><span class="line">&#123;</span><br><span class="line">n++;   <span class="comment">//出现新结点 </span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p1;  <span class="comment">//头节点指向 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line">p2=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score); </span><br><span class="line"> &#125; </span><br><span class="line"> p2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> head;  <span class="comment">//首地址，链表的标识记号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease are %d records!\n\n&quot;</span>,n);</span><br><span class="line"></span><br><span class="line">p=head;   <span class="comment">//使p指向第1个结点 </span></span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>) <span class="comment">//不是空表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//输出一个结点中的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号为 %d 的成绩是: %f\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">p=p-&gt;next;   <span class="comment">//p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>);<span class="comment">//p不为空地址 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="comment">//如果头结点指向NULL，这是一个空链表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nThis list is null!\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;  <span class="comment">//goto直接跳到end </span></span><br><span class="line">&#125;</span><br><span class="line">p1=head; <span class="comment">//p1指向head </span></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num!=num&amp;&amp;p1-&gt;next!=<span class="literal">NULL</span>) <span class="comment">//指向第一个结点数据不等于所删除数据,且不是最后一个结点 </span></span><br><span class="line">&#123;</span><br><span class="line">p2=p1;   <span class="comment">//p1的值给p2 </span></span><br><span class="line">p1=p1-&gt;next; <span class="comment">//p1指向下一个结点 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num==p1-&gt;num)  <span class="comment">//找到所要删除的学号 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p1==head)  <span class="comment">//为头结点时 </span></span><br><span class="line">&#123;</span><br><span class="line">head=p1-&gt;next;  <span class="comment">//头结点给p1的下一个,把p1去掉 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p1-&gt;next就是B-&gt;C,p2-&gt;next就是A-&gt;B,next为指向下一地址的指针 </span></span><br><span class="line">p2-&gt;next=p1-&gt;next;  <span class="comment">//例A(p2),B(p1),C三个结点，改成A,C </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nDelete No: %d succeed!\n&quot;</span>,num);</span><br><span class="line">n=n<span class="number">-1</span>;  <span class="comment">//n为全局变量，接收学生个数 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//到达尾结点 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d not been found!\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">--当num为0结束输入--</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">Please enter the num :01</span></span><br><span class="line"><span class="comment">Please enter the score :90</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :02</span></span><br><span class="line"><span class="comment">Please enter the score :78</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :03</span></span><br><span class="line"><span class="comment">Please enter the score :66</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :0</span></span><br><span class="line"><span class="comment">Please enter the score :0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 90.000000</span></span><br><span class="line"><span class="comment">学号为 2 的成绩是: 78.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 66.000000</span></span><br><span class="line"><span class="comment">Please enter the num to delete :2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Delete No: 2 succeed!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 2 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 90.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 66.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="链表插入"><a href="#链表插入" class="headerlink" title="链表插入"></a>链表插入</h2><p>对链表的插入是指将一个结点插入到一个已有的链表中。<br>为了能正确插入，必须解决两个问题:<br>①怎样找到插入的位置<br>②怎样实现插入</p></li><li><p>我们可以先用指针变量p0指向待插入的结点,p1指向第一个结点。将p0-&gt;num与p1-&gt;num相比较,如果p0-&gt;num&gt;p1-&gt;num,此时将p1后移,并使p2指向刚才p1所指的结点。<br>三种情况：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/b269953d32c1271e7b610a34b89822d1.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/d884a8af5a256a5340c1b75929fc7979.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)  <span class="comment">//student结构的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span>;  <span class="comment">//创建链表</span></span><br><span class="line"><span class="comment">//del函数用于删除结点,*head即链表的头指针，num是要删除的结点num </span></span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="comment">//第一个参数是需要被插入的链表，第二个参数是待插入的结构的地址 </span></span><br><span class="line"><span class="function">struct student *<span class="title">insert</span><span class="params">(struct student *head,struct student *stud)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>; <span class="comment">//打印链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//全局变量，用来记录存放了多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>,*<span class="title">p</span>,<span class="title">stud</span>;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--当num为0结束输入--\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line">stu=creat();  <span class="comment">//得到head头指针 </span></span><br><span class="line">p=stu;</span><br><span class="line">print(p);  <span class="comment">//根据头指针找到链表并输出 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num to delete :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">print(del(p,num));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num to insert :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;stud.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;stud.score);</span><br><span class="line">p=insert(stu,&amp;stud);</span><br><span class="line">print(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span> <span class="comment">//只是创建了一个指针，并没有分配内存大小 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="comment">//动态申请空间，并使p1,p2指向这个新生成的空间 </span></span><br><span class="line">p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);<span class="comment">//LEN是结构体的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入第1个学生的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score);</span><br><span class="line"></span><br><span class="line">head=<span class="literal">NULL</span>;  <span class="comment">//初始化 </span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num != <span class="number">0</span>) <span class="comment">//不等于0 </span></span><br><span class="line">&#123;</span><br><span class="line">n++;   <span class="comment">//出现新结点 </span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p1;  <span class="comment">//头节点指向 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line">p2=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score); </span><br><span class="line"> &#125; </span><br><span class="line"> p2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> head;  <span class="comment">//首地址，链表的标识记号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease are %d records!\n\n&quot;</span>,n);</span><br><span class="line"></span><br><span class="line">p=head;   <span class="comment">//使p指向第1个结点 </span></span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>) <span class="comment">//不是空表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//输出一个结点中的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号为 %d 的成绩是: %f\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">p=p-&gt;next;   <span class="comment">//p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>);<span class="comment">//p不为空地址 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="comment">//如果头结点指向NULL，这是一个空链表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nThis list is null!\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;  <span class="comment">//goto直接跳到end </span></span><br><span class="line">&#125;</span><br><span class="line">p1=head; <span class="comment">//p1指向head </span></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num!=num&amp;&amp;p1-&gt;next!=<span class="literal">NULL</span>) <span class="comment">//指向第一个结点数据不等于所删除数据,且不是最后一个结点 </span></span><br><span class="line">&#123;</span><br><span class="line">p2=p1;   <span class="comment">//p1的值给p2 </span></span><br><span class="line">p1=p1-&gt;next; <span class="comment">//p1指向下一个结点 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num==p1-&gt;num)  <span class="comment">//找到所要删除的学号 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p1==head)  <span class="comment">//为头结点时 </span></span><br><span class="line">&#123;</span><br><span class="line">head=p1-&gt;next;  <span class="comment">//头结点给p1的下一个,把p1去掉 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p1-&gt;next就是B-&gt;C,p2-&gt;next就是A-&gt;B,next为指向下一地址的指针 </span></span><br><span class="line">p2-&gt;next=p1-&gt;next;  <span class="comment">//例A(p2),B(p1),C三个结点，改成A,C </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nDelete No: %d succeed!\n&quot;</span>,num);</span><br><span class="line">n=n<span class="number">-1</span>;  <span class="comment">//n为全局变量，接收学生个数 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//到达尾结点 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d not been found!\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct student *<span class="title">insert</span><span class="params">(struct student *head,struct student *stud)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p0</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"></span><br><span class="line">p1=head; <span class="comment">//p1指向head头结点 </span></span><br><span class="line">p0=stud; <span class="comment">//p0指向待插入的结构 </span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p0;</span><br><span class="line">p0-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//两种情况退出while </span></span><br><span class="line"><span class="keyword">while</span>((p0-&gt;num&gt;p1-&gt;num)&amp;&amp;(p1-&gt;next!=<span class="literal">NULL</span>))</span><br><span class="line">&#123; </span><br><span class="line">p2=p1;</span><br><span class="line">p1=p1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p0-&gt;num&lt;=p1-&gt;num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(head==p1) <span class="comment">//p1是头结点,插入头部 </span></span><br><span class="line">&#123;</span><br><span class="line">head=p0;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>   <span class="comment">//普通情况，插入中间 </span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p0;</span><br><span class="line">&#125;</span><br><span class="line">p0-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//p0的num最大,插入到末尾 </span></span><br><span class="line">&#123;</span><br><span class="line">p1-&gt;next=p0;</span><br><span class="line">p0-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n=n+<span class="number">1</span>;   <span class="comment">//增加了数据 </span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">--当num为0结束输入--</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">Please enter the num :01</span></span><br><span class="line"><span class="comment">Please enter the score :88</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :02</span></span><br><span class="line"><span class="comment">Please enter the score :78</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :03</span></span><br><span class="line"><span class="comment">Please enter the score :67</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :0</span></span><br><span class="line"><span class="comment">Please enter the score :0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 88.000000</span></span><br><span class="line"><span class="comment">学号为 2 的成绩是: 78.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 67.000000</span></span><br><span class="line"><span class="comment">Please enter the num to delete :2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Delete No: 2 succeed!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 2 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 88.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 67.000000</span></span><br><span class="line"><span class="comment">Please enter the num to insert :4</span></span><br><span class="line"><span class="comment">Please enter the score :100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 88.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 67.000000</span></span><br><span class="line"><span class="comment">学号为 4 的成绩是: 100.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h1><p>使几个不同的变量<code>共同占同一段内存</code>的结构称为“共用体”类型的结构。<br>定义共同体类型变量的一般形式为:</p><pre><code>  union 共用体名  &#123;      成员表列  &#125;变量表列;</code></pre></li></ul><p>例如</p><pre><code>    union data    &#123;        int;        char ch;        float f;    &#125;a,b,c;    //或    union data    &#123;        int i;        char ch;        float f;    &#125;;    union data a,b,c;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_45583303/article/details/105373477&quot;&gt;MSDN Library官方文档下载与安装（MFC）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csd</summary>
      
    
    
    
    <category term="C" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>软件工程笔记</title>
    <link href="http://example.com/2020/11/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-24T12:09:17.802Z</published>
    <updated>2020-12-29T12:46:24.649Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://xxzy2020.com:4000/">http://xxzy2020.com:4000/</a></p><h1 id="软件与软件工程"><a href="#软件与软件工程" class="headerlink" title="软件与软件工程"></a>软件与软件工程</h1><h2 id="软件的概念"><a href="#软件的概念" class="headerlink" title="软件的概念"></a>软件的概念</h2><ul><li>软件与软件的组成<br>一系列按照特定顺序组织的计算机数据和指令的集合（程序），以及与这些程序相关的文档、数据的集合。<br><code>软件 = 知识 + 程序 + 文档 + 数据</code></li></ul><p>什么是程序, 什么是文档, 什么是数据, 什么是知识？</p><ul><li>软件是计算机程序及其有关的数据和文档的完整集合;</li><li>计算机程序是能够完成功能的可执行的指令序列;</li><li>数据是程序能适当处理的信息，具有适当的数据结构;</li><li>软件文档是开发、使用和维护程序所需要的图文资料;</li><li>软件蕴含着“完成特定功能和性能”的知识和经验,软件具有技术和文化双重属性</li></ul><h3 id="软件生存周期"><a href="#软件生存周期" class="headerlink" title="软件生存周期"></a>软件生存周期</h3><p><strong>软件生存周期</strong>：软件从概念形成、进化、运行到退役的全过程。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/4949dd674e4b4524e5f6cbe3baa529c3.png"></p><h3 id="软件的特点"><a href="#软件的特点" class="headerlink" title="软件的特点"></a>软件的特点</h3><ol><li>软件是一种逻辑实体，不是物理实体，他具有抽象性</li><li>软件不会磨损和老化</li><li>软件主要是研制，生产是简单的拷贝</li><li>软件成本昂贵，其开发方式至今尚未摆脱手工方式</li><li>软件维护不同于硬件维修，易产生新的问题</li><li>软件具有“复杂性”，其开发和运行常受到计算机系统的限制，即受环境影响大</li></ol><h3 id="软件质量要素"><a href="#软件质量要素" class="headerlink" title="软件质量要素"></a>软件质量要素</h3><p>软件工程8个质量要素：</p><ol><li>正确性(correctness)<ul><li>软件满足需求规约及完成用户目标的程度。</li></ul></li><li>可用性(usability)<ul><li>学习和使用软件的难易程度，包括：操作软件、为软件准备输入数据，解释软件输出结果等。</li></ul></li><li>可靠性(reliability)<ul><li>软件完成预期功能，成功运行的概率。软件可靠性反映了软件无故障工作的状况。</li></ul></li><li>有效性(efficiency)<ul><li> 软件系统利用计算机的时间资源和空间资源完成系统功能的能力</li></ul></li><li>可维护性(maintainability)<ul><li> 软件制品交付用户使用后，能够对它进行修改，以便改正潜伏的缺陷、改进性能和其他属性，使软件制品适应环境的变化等等。</li><li>由于软件是逻辑产品，只要用户需要可以无限期地使用下去，软件维护是不可避免的。</li><li>软件维护成本约占整个生命周期的40%至60%。软件维护费用高的问题今天仍然没有明显改变。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/18252800b19b9d108edc911cfc3d7812.png"></li></ul></li><li>可移植性(portability)<ul><li>将软件安装在不同计算机系统或环境的难易程度。</li></ul></li><li>安全性(security)<ul><li>控制或保护程序和数据不受破坏的机制，以防止程序和数据受到意外的或蓄意的存取、使用、修改、毁坏或泄密。在网络环境下计算机犯罪、恶作剧增多，软件安全受到人们的高度重视。</li></ul></li><li>可复用性(reusebility)<ul><li>概念或功能相对独立的一个或一组相关模块定义为一个软构件。软构件可以在多种场合应用的程度称为构件的可复用性。</li></ul></li></ol><h2 id="软件工程的概念"><a href="#软件工程的概念" class="headerlink" title="软件工程的概念"></a>软件工程的概念</h2><p>将<strong>系统的、规范的、可量化的方法</strong>应用于软件的<strong>开发、运行和维护</strong>的过程；<br>软件工程的<strong>项目、人、过程、方法和工具、软件制品</strong>构成了软件工程的<code>五要素</code>，它们既有区别又有联系<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/11d4905890fd6d398a8d76d5794c4dbe.png"></p><h3 id="软件工程的目标和原则"><a href="#软件工程的目标和原则" class="headerlink" title="软件工程的目标和原则"></a>软件工程的目标和原则</h3><ul><li><p>软件工程的目标<br>在给定成本、进度的前提下，开发出满足用户或市场需要的高质量的软件产品。</p></li><li><p>软件工程原则:</p><ol><li><strong>抽象(abstraction)</strong></li><li><strong>信息隐藏(information hiding)</strong></li><li><strong>模块化(modularity)</strong></li><li><strong>局部化(localization)</strong></li><li><strong>一致性(consistency)</strong><ul><li> 整个软件系统(包括文档和程序)的各个模块均应使用一致的概念、符号和术语;</li><li> 程序内部接口应保持一致;</li><li> 软件与硬件接口应保持一致;</li><li> 系统规约与系统行就保持一致;</li><li> 各类软件制品如需求规约、体系结构、程序编码、测试用例、文档和使用手册等应保持一致;</li><li>用于形式化规约的公理系统应保持一致;</li></ul></li><li><strong>完全性(completeness)</strong><br> 完全实现系统所需功能,不遗漏任何重要成分的程度</li><li><strong>可验证性(verifiability)</strong></li></ol></li></ul><h3 id="软件开发的主要方法"><a href="#软件开发的主要方法" class="headerlink" title="软件开发的主要方法"></a>软件开发的主要方法</h3><ol><li>结构化方法<br>这些方法支持软件的分析、设计、编码、测试，给出了指导软件开发活动的基本原则、技术和步骤。</li><li>面向对象方法<br>面向对象方法是以对象、对象关系构建软件系统的方法。包括，面向对象分析、设计、编码、测试</li><li>形式化开发方法<br>软件开发的形式化方法以软件开发的正确性为目标,软件需求规约用形式化需求规约语言(RSL)描述，如VDM的META—IV，CSP，Z语言等</li></ol><p>近年来随着网络技术、多媒体技术的发展和构建大型复杂软件的需要:</p><ol><li>网络的软件开发方法</li><li>基于构件的软件开发方法</li><li>面向方面AOP的软件开发方法</li><li>人机界面及虚拟现实的软件开发方法</li><li>敏捷软件开发方法</li></ol><blockquote><p>这些方法支持软件的<strong>分析、设计、编码、测试</strong>，给出了指导软件开发活动的基本原则、技术和步骤。</p></blockquote><h2 id="软件工程模型"><a href="#软件工程模型" class="headerlink" title="软件工程模型"></a>软件工程模型</h2><p>**软件过程(process)**：描述、开发、维护软件制品，创建、管理和支持软件项目的一系列活动。</p><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><ul><li>瀑布模型(waterfall model)也称软件生存周期模型，是W.Royce在1970年首先提出的。</li><li>它们既是软件开发过程的分解，也是软件生存周期的阶段划分。</li><li>瀑布模型按照各阶段的目标和任务逐步进行开发，直至通过确认测试，向用户交付最终软件制品为止。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/5346bee18e7e03f80cd0cfa8a7cb2cf1.png"></p><h3 id="增量过程模型"><a href="#增量过程模型" class="headerlink" title="增量过程模型"></a>增量过程模型</h3><ul><li>开发人员与用户协商将需求分解，划分为一系列增量，并为增量排序，急需的增量排在前面先开发，不急需的放在后面。</li><li>每个增量都历经需求、设计、编码、测试、移交几个阶段（如图1.10所示）。</li><li>根据增量间的依赖关系、开发人员和项目的实际情况，有些增量可串行开发，有些可并行开发。</li><li>在此过程中不断开发、不断集成、不断交付，直到完成所有增量的开发，得到最终的软件制品。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/eebd63870f5f6081359a82aa37ac9cd8.png"><br>例如：采用增量模型开发文字处理软件:</p><ul><li>增量1——提供基本的文件编辑、管理和文档生成功能</li><li>增量2——提供更为复杂的编辑和文档生成功能</li><li>增量3——提供拼写和语法检查功能</li><li>增量4——提供高级页面排版功能</li></ul><h3 id="原型建造模型"><a href="#原型建造模型" class="headerlink" title="原型建造模型"></a>原型建造模型</h3><p><strong>原型(prototyping)：模拟某种最终产品的原始模型。</strong><br>快速开发的三种途径：</p><ol><li>利用计算机模拟软件系统的人机界面和人机交互方式；</li><li>利用敏捷软件开发方法开发一个工作原型，实现软件系统重要的，容易产生误解的部分功能；</li><li>. 找来若干个类似软件，利用这些软件向客户展示软件需求中的部分或全部功能。</li></ol><h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><p>螺旋模型(spiral model)是TRW的B.Boehm在1988年提出的一种迭代模型。<br>螺旋模型是从里向外，螺旋线每个回路表示的软件过程都由四个阶段组成</p><ol><li>定义目标：指定过程计划</li><li>风险分析：采取措施规避风险</li><li>开发和验证：为系统选择合适的开发模型</li><li>规划：给出下一阶段的任务和计划</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/d09f87e9aaea7275160151669eb97bf6.png"></p><p><code>螺旋模型 = 瀑布模型 + 增量模型 集成</code></p><h3 id="基于构件的过程模型"><a href="#基于构件的过程模型" class="headerlink" title="基于构件的过程模型"></a>基于构件的过程模型</h3><p>基于构件的软件开发以软件复用为基础，必须有可供选择和使用的构件及集成构件的框架。 构件的基本要素包括:</p><ol><li>接口定义（操作名、参数、异常处理）</li><li>构件使用说明（如定义接口的语言，构件功能、性能）</li><li>构件部署信息（指明部件如何“打包”成为可执行的实体）。</li></ol><h3 id="通用软件过程模型"><a href="#通用软件过程模型" class="headerlink" title="通用软件过程模型"></a>通用软件过程模型</h3><p>将软件开发过程的活动划分为：<strong>沟通、策划、建模、构建、部署</strong>五项，并以此为基础，构建多种通用的软件过程模型</p><h1 id="UML与RUP统一过程"><a href="#UML与RUP统一过程" class="headerlink" title="UML与RUP统一过程"></a>UML与RUP统一过程</h1><h2 id="面向对象的软件开发方法"><a href="#面向对象的软件开发方法" class="headerlink" title="面向对象的软件开发方法"></a>面向对象的软件开发方法</h2><p><code>面向对象 = 对象 + 类 + 继承 + 聚合 + 多态 + 消息</code><br>相对于传统的结构化方法和面向数据的方法, 面向对象方法除具有上述削减语义断层的作用外，在<strong>简化软件开发过程、支持软件复用、改善软件结构</strong>等方面还有明显优势。</p><h2 id="UML概述"><a href="#UML概述" class="headerlink" title="UML概述"></a>UML概述</h2><p>UML（Unified Modeling Language, 统一建模语言） 五种图形机制：</p><ol><li><strong>用例视图(user case view)</strong><ul><li>包括 <strong>用例图</strong>，从外部用户的角度描述系统的功能，并指出参与者</li></ul></li><li><strong>结构视图(structural view)</strong><ul><li><strong>包图</strong>（package diagram,包和包之间的关系<br> 包图描述系统的分解结构,表示包( package )以及包之间的关系<br> 包由子包及类构成<br> 包之间的关系包括继承、构成与依赖关系</li><li> <strong>类图</strong>（class daigram,类图的边表示类之间的关系，包括继承，聚合，关联）</li><li> <strong>对象图</strong>（object diagram,对象图是类图的一个实例）</li></ul></li><li><strong>行为视图(behavioral view)</strong><ul><li><strong>交互图</strong>(interactive diagram)<br>交互图描述对象之间通过消息传递进行的交互写协作<br>交互图分为顺序图( sequence diagram )与通信图( communication diagram )两种形式。</li><li> <strong>顺序图</strong>:描述对象之间消息发送的时间序。</li><li> <strong>通信图</strong>:描述对象间的动态协作关系。</li><li><strong>状态图</strong>(statechart diagram)<br>状态图描述类的对象的动态行为。它包含对象所有可能的状态、在每个状态下能够响应的事件以及事件发生时的状态迁移与响应动作。</li><li><strong>活动图</strong>(  acitve diagram)<br>活动图描述系统为完成某项功能而执行的操作序列,这些操作序列可以并发和同步。<br>活动图中包含控制流和信息流。控制流表示一个操作完成后对其后续操作的触发,信息流则刻画操作之间的信息交换。</li></ul></li><li><strong>构建视图(component view)</strong><ul><li> <strong>构件图</strong>描述软件系统中各组成构件、构件的内部结构以及构件之间的依赖关系。</li><li>一个构件是对一组软件单元的封装,这些软件单元联合对外提供统一的接口。</li><li>构件中的典型软件单元包括类和(子)构件。</li><li>构件图主要用于理解和分析软件系统中各构件之间的相互协作关系, 以及相互影响的程度和范围。</li></ul></li><li><strong>部署视图(deployment view)</strong><ul><li> <strong>部署图</strong>描述软件系统中的各类工件在物理运行环境中的分布情况。</li></ul></li></ol><h2 id="RUP统一过程"><a href="#RUP统一过程" class="headerlink" title="RUP统一过程"></a>RUP统一过程</h2><ol><li>Rational<ul><li>Rational统一过程是由Rational公司开发并维护的,可以将RUP看成- -款软件产品,并和一系列软件开发工具紧密集成;</li></ul></li><li>统一<ul><li>Rational统一 过程拥有自己的一套架构,并且这套架构是以一种大多数项目和开发组织都能够接受的形式存在;</li></ul></li><li>过程<ul><li>Rational统一过程是一种软件开发过程,提够了如何对软件开发组织进行管理的方式,并拥有自己的目标和方法;</li></ul></li></ol><p>RUP过程分为软件支持过程和软件生产过程</p><ol><li>软件支持过程：业务建模、需求设计和实现</li><li>软件生产过程：陪着和变更管理、项目管理<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/76465463c8c4fb32971eae703fb89c4f.png"></li></ol><p><strong>RUP各阶段生成的部分软件制品</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/51e79968c627a6f78e5656b27355ac85.png"></p><p><strong>软件环境工作流为RUP提供的软件工具和环境</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/72152b918078f21e1bd09eab3e0f855e.png"></p><p><a href="https://8cd76980.wiz03.com/wapp/pages/view/share/s/2cRSC023Th7G2ouHSc1X-mcI11LFN60HM4Ot2CUbvE1bu5Yq">UML知识总结</a></p><h1 id="需求工程概论"><a href="#需求工程概论" class="headerlink" title="需求工程概论"></a>需求工程概论</h1><p>通过对应用问题及其环境的理解与分析, 为问题涉及的信息、功能及系统行为建立模型, 将软件需求精确化、一致化、完全化, 最终形成需求规约。</p><h2 id="软件需求的概念"><a href="#软件需求的概念" class="headerlink" title="软件需求的概念"></a>软件需求的概念</h2><ol><li>定义<ul><li>利益相关方（stakehoder）对目标软件系统在功能、质量等方面的期望, 以及对目标软件系统在运行环境、资源消耗等方面的要求和约束</li></ul></li><li>分类<ul><li>功能需求：利益相关方要求目标软件系统应具有的功能<br>如“制订选课计划”、”接收并处理传感器数据”等。<br>功能需求还包括软件系统在业务处理过程中完成这些功能时必须遵守的约定或限制。</li><li>非功能需求<br>质量需求：利益相关方对目标软件系统的质量要求<br>约束性需求：利益相关方对目标软件系统在项目预算、完成时间、技术选型、必须遵守的标准与规范</li></ul></li></ol><h3 id="软件需求的质量要素"><a href="#软件需求的质量要素" class="headerlink" title="软件需求的质量要素"></a>软件需求的质量要素</h3><ol><li><strong>正确性</strong>:</li></ol><ul><li>包含真实性、一致性、精确性、无冗余四个质量指标。</li></ul><ol start="2"><li><strong>完全性</strong>:</li></ol><ul><li>所有需求项构成的全集完整地覆盖所有必须在目标软件产相关方不能遗漏重要或者紧迫的需求。</li></ul><ol start="3"><li><strong>可行性</strong>:</li></ol><ul><li>在实际资源约束条件下, 软件需求能够被完整实现的可能性。</li></ul><h2 id="需求工程的过程模型"><a href="#需求工程的过程模型" class="headerlink" title="需求工程的过程模型"></a>需求工程的过程模型</h2><h3 id="需求工程中的活动"><a href="#需求工程中的活动" class="headerlink" title="需求工程中的活动"></a>需求工程中的活动</h3><p>一个完整的需求工程过程一 般包含以下活动:</p><ol><li><strong>需求工程策划</strong><ul><li>定计划、定人员</li></ul></li><li><strong>需求获取</strong><ul><li>需求获取的结果是软件需求的最初模型。</li></ul></li><li><strong>需求分析</strong><ul><li>需求精细化、一致化、完全化</li></ul></li><li><strong>需求规范化</strong><ul><li>内容全面、结构清晰、措辞准确、格式规范</li></ul></li><li><strong>需求验证</strong><ul><li>review &amp; improvement</li></ul></li><li><strong>总结</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/75a365fa5abedc832de3503f7a372110.png"></p><h1 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h1><p>完整地收集、整理利益相关方（stakehoder）对目标软件系统的需求，用业务语言进行阐述,形成文档。</p><h2 id="软件需求的初始表示"><a href="#软件需求的初始表示" class="headerlink" title="软件需求的初始表示"></a>软件需求的初始表示</h2><p>需求获取过程中主要用到</p><ol><li><strong>用例图</strong></li><li><strong>类图</strong></li><li><strong>活动图</strong></li></ol><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p>一个用例(use case)是执行者(actor)与目标软件系统之间交互作用<br>用例之间的关系</p><ol><li><p><strong>包含</strong><br> 如果B是A的某项子功能，并且建模者确切地知道在A所对应的动作序列中何时将调用B，则称用例A包含用例B。包含关系经常被用来将多个用例中公共的子功能项提取出来,以避免重复和冗余。</p></li><li><p><strong>扩展</strong><br> 如果A与B相似,但A的功能较B多, A的动作序列是通过在B的动作序列中的某些执行点上插入附加的动作序列而构成的,则称用例A扩展用例B。</p></li><li><p><strong>继承</strong><br> 如果A与B相似,但A的动作序列是通过改写B的部分动作或者扩展B的部分动作而获得的,则称用例A继承用例B</p></li></ol><p>执行者之间的关系</p><ol><li><strong>继承关系</strong><br> 其意义与面向对象中基本的继承关系相似,但它主要强调子类执行者对父类执行者与用例之间的交互行为的继承。如果执行者B继承执行者A , A触发执行用例UC ,那么B与UC之间的触发执行关系即不必显式表示。</li></ol><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><strong>类图描述面向对象软件系统的静态结构</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/fb0d2f88ce49fcda0948c85ff7e95879.png"></p><ul><li>在类图中一共包含了以下几种模型元素，分别是：<ol><li>类（Class）</li><li>接口（Interface）</li><li>类之间的关系。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/35ff9400661e5b975c3dfcdabd2539f8.png"></p><p>类图中关系（relation）</p><ol><li><strong>泛化（Generalization）</strong><ul><li>是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/ef71d14a8470d771f51a75ceca69afae.png"></li></ul></li><li><strong>实现（Realization）</strong><ul><li>是一种类与接口的关系，表示类是接口所有特征和行为的实现.<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f0bc50862cf688aeace72d057baf24ea.png"></li></ul></li><li><strong>关联（Association)</strong><br> 是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。<br> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/df5f3133b80236de8332075e9c2a1a39.png"></li><li><strong>聚合（Aggregation）</strong><br> 是整体与部分的关系，且部分可以离开整体而单独存在。</li><li><strong>组合(Composition)</strong><br> 是整体与部分的关系，但部分不能离开整体而单独存在。<br> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/9633f2c1b94eb62da65c9618eac8d2fb.png"></li><li><strong>依赖(Dependency)</strong><br> 是一种使用的关系，即一个类的实现需要另一个类的协助<br> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/53bf30fce467425b9dbef42db76f3203.png"></li></ol><p>在关联关系的表示图元的两端,可以标示参与关联的<strong>多重性(multiplicity)、角色名和约束特性。</strong><br>多重性(multiplicity)</p><ol><li>多重性说明位于关联端的类可以有多少个实例对象与另一端的类的单个实例对象相联系，它表示参与关联的两个类的对象之间的数量对应关系。</li><li>UML的多重性表示符有:<ul><li>0..1 ( 0或者1个)</li><li>0..* ( 0到任意多个)</li><li>1..* ( 1到任意多个)</li><li>  (与0..相同)</li><li>m..n ( m到n个,要求m&lt;n)</li><li>n.* ( n到任意多个)</li></ul></li></ol><p>下面这张UML图，比较形象地展示了各种类图关系<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/73dc818340adaa29ee7034ed8b8f7802.png"></p><h3 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h3><ul><li>活动图描述实体为完成某项功能而执行的操作序列其中的某些操作或者操作的子序列可以并发和同步。</li><li>活动图适合描述在没有外部事件触发的情况下的系统内部的逻辑执行过程。</li><li>活动图主要用于业务建模,用于详述业务用例, 描述一项业务的执行过程设计时, 描述操作的流程。</li></ul><p><strong>活动图事物:</strong></p><ol><li>活动(ActionState)<ul><li>动作的执行</li></ul></li><li>起点(InitialState)<ul><li>活动图的开始</li></ul></li><li>终点(FinalState)<ul><li>活动图的终点</li></ul></li><li>对象流(ObjectFlowState)<ul><li>活动之间的交换的信息</li></ul></li><li>发送信号(signalSending)<ul><li>活动过程中发送事件，触发另一活动流程</li></ul></li><li>接收信号(SignalReceipt)<ul><li>活动过程中接收事件，接收到信号的活动流程开始执行</li></ul></li><li>泳道(SwimLane)<ul><li> 活动的负责者</li></ul></li></ol><p><strong>活动图关系:</strong></p><ol><li>迁移(transition)<ul><li>活动的完成与新活动的开始</li></ul></li><li>分支(junction point)<ul><li>根据条件，控制执行方向</li></ul></li><li>分叉(fork)<ul><li>以下的活动可并发执行</li></ul></li><li>结合(join)<ul><li>以上的并发活动再此结合</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/37ff4b14ca219e7c877f03d497ea09c7.png"></p><h2 id="需求获取的过程模型"><a href="#需求获取的过程模型" class="headerlink" title="需求获取的过程模型"></a>需求获取的过程模型</h2><p>用例驱动( use case driven )的需求获取过程:</p><ol><li>定义软件问题;</li><li>创建框架用例;</li><li>精化用例;</li><li>评审用例模型。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/538e292cbd01fb40b2b6d66bc3f2efb4.png"></li></ol><p><a href="https://8cd76980.wiz03.com/wapp/pages/view/share/s/2cRSC023Th7G2ouHSc1X-mcI1UYDkx2OGkjT2Ux1GC3o5pTs">架构设计学习</a></p><h1 id="需求分析与验证"><a href="#需求分析与验证" class="headerlink" title="需求分析与验证"></a>需求分析与验证</h1><h2 id="分析模型的表示"><a href="#分析模型的表示" class="headerlink" title="分析模型的表示"></a>分析模型的表示</h2><p>交互图包括：</p><ol><li><strong>顺序图</strong></li><li><strong>通信图</strong></li></ol><h3 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h3><p>顺序图定义:</p><ol><li>二维图</li><li>纵向 - 时间轴</li><li>横向 - 交互对象(Class)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/b27abb07a00f2f444076f1a3305ec609.png"></p><p>顺序图元素:</p><ol><li>对象</li><li>生命线与活跃期</li><li>消息传递</li><li>注解。</li></ol><p>消息类型:</p><ol><li>自消息: 发送给自身的消息</li><li>返回消息: 注意处理结果(如果有的话)沿返回消息传回</li><li>创建(create)消息</li><li>销毁(destroy )消息</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/c9f4099bc2d766e3386814fe79e73af1.png"><br>自消息是指一个对象传向其自身的消息。如果一条消息从对象a传向对象b ,那么其返回消息是一条从b指向a的虚线有向边,它表示原消息的处理已经完成,处理结果(如果有的话)沿返回消息传回。</p><h3 id="通信图"><a href="#通信图" class="headerlink" title="通信图"></a>通信图</h3><p>通信图是顺序图的另一种表现形式</p><p>构成元素:</p><ol><li>节点: 对象</li><li>连接器(connector) : 对象之间的连接<ul><li>无向的, 表示此通道支持双向的消息传递</li><li>有向的, 单向</li><li> 一到多条消息</li></ul></li><li>消息<ul><li>同步消息</li><li>异步消息</li><li>返回消息</li><li>创建消息</li><li>销毁消息</li></ul></li></ol><h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3><p>状态图描述一个实体在事件剌激下的反应式动态行为<br>构成:</p><ol><li>实体所有可能的状态</li><li>在每个状态下能够响应的事件</li><li>事件发生时的状态变迁与响应动作</li></ol><p>实体</p><ol><li>类的对象,</li><li>一个软件系统(或其子部分)</li><li>一个软构件</li><li>整个大系统</li></ol><p>作用:描述一个类的典型对象、软件系统、软构件或系统的行为<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/7d9bbff1d48a498043d9be6429611244.png"></p><h2 id="需求分析的过程模型"><a href="#需求分析的过程模型" class="headerlink" title="需求分析的过程模型"></a>需求分析的过程模型</h2><p>用例驱动的需求分析过程:</p><ol><li>需求优先级分析</li><li>用例分析</li><li>分析模型评审</li><li>构建快速原型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/f68964ce56ee3c09dfc5d1b92529a98d.png"></p><h2 id="需求优先级分析"><a href="#需求优先级分析" class="headerlink" title="需求优先级分析"></a>需求优先级分析</h2><p>三种不同需求优先级定义:</p><ol><li>基于实现紧迫度的优先级:<ul><li>高:当前版本必须实现；</li><li> 中:须实现, 可在下一软件版本；</li><li> 低:锦上添花</li></ul></li><li>基于产品可接受度的优先级:<ul><li>基本需求项: 利益相关方必需的</li><li>条件需求项: 增强其满意度的需求项</li><li>可选需求项: 对软件产品的可接受度的影响更弱</li></ul></li><li>基于需求实现度的优先级:<ul><li> 高: 当前版本中必须完美实现</li><li> 中: 在资源紧张时可有小部分不予实现的需求项</li><li> 低: 可以有部分甚至完全不予实现的需求项</li></ul></li></ol><p>优先级计算公式：<br><code>优先级 ＝ 价值 div ( 成本 × 成本权值 ＋ 风险 × 风险权值) </code></p><p>家庭安保系统的需求优先级如表所示:<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/29/26101fb7349e58f33f543487d9b76e84.png"></p><h2 id="用例分析"><a href="#用例分析" class="headerlink" title="用例分析"></a>用例分析</h2><p>将用例模型的自然语言描述转化为更接近于软件设计的分析模型</p><ol><li>精化领域概念模型</li><li>设置分析类<ul><li>边界类</li><li>控制类</li><li>实体类</li></ul></li><li>构思分析类之间协作关系</li><li>导出分析类图</li></ol><h2 id="利用快速原型辅助需求分析"><a href="#利用快速原型辅助需求分析" class="headerlink" title="利用快速原型辅助需求分析"></a>利用快速原型辅助需求分析</h2><ol><li><p>分析与规划</p></li><li><p>设计与实现</p></li><li><p>检查与评审需求规约</p></li><li><p>改进</p></li></ol><h2 id="评审分析模型"><a href="#评审分析模型" class="headerlink" title="评审分析模型"></a>评审分析模型</h2><h2 id="需求规约"><a href="#需求规约" class="headerlink" title="需求规约"></a>需求规约</h2><p>主要内容：</p><ol><li>系统概述<ul><li>文档概览：本文档的结构、每部分的内容简介；文档的读者对象及阅读顺序导引。</li><li>术语定义：本文档中使用的所有术语、缩写、标识符的完整定义。</li><li>系统概述：对目标软件产品所处的系统的概要描述。如果产品的独立性很强，此节可省略。</li><li>目标软件系统概述：待开发软件系统的业务目标、范围、业务价值；软件与其所处的系统之间的关系；软件对运行环境的要求。</li><li>用户特征：预期使用本软件、验收本软件的所有利益相关方的分类及每类利益相关方的特征描述。</li><li>假设与依赖：在需求获取、分析过程中采信的、经过利益相关方确认的所有假设，以及本项目与其他项目或者外购产品之间的依赖关系的描述。</li></ul></li><li>功能需求<ul><li>以用户易理解的方式组织本软件系统的功能描述，包括每项功能的标识、描述、使用场景等。</li></ul></li><li>质量需求</li><li>束性需求</li><li>需求优先级。</li><li>接口定义<ul><li>软件系统与其他软件、运行环境、外部系统之间的接口定义。</li></ul></li><li>需求验收标准<ul><li>定义本文档所列的部分（难以评判是否已圆满实现的）需求项的验收标准或验收方法。</li></ul></li><li>需求来源表<ul><li>针对每项功能性、非功能性需求的来源的描述</li></ul></li></ol><h2 id="需求验证"><a href="#需求验证" class="headerlink" title="需求验证"></a>需求验证</h2><ol><li>需求评审<ul><li>需求工程师在需求规约就绪后提出评审申请，规划评审的参与者、评审的组织方式（会议评审、会签评审等）、时间安排等。为避免评审流于形式，评审组织者应该提前一段时间将评审安排、评审要求、需求规约等通知所有参与者。需求评审的主要关注点包括：</li></ul></li><li>问题整理<ul><li>记录需求评审过程中发现的所有问题（缺陷）并文档化，将此文档置于配置管理的控制之下</li></ul></li><li>问题求解<ul><li>针对每一问题安排责任人和改正时间，责任人实际修改需求规约</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://xxzy2020.com:4000/&quot;&gt;http://xxzy2020.com:4000/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;软件与软件工程&quot;&gt;&lt;a href=&quot;#软件与软件工程&quot; class=&quot;headerlink&quot; title=&quot;软件与软件</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法</title>
    <link href="http://example.com/2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2020-11-21T05:03:03.282Z</published>
    <updated>2020-12-04T04:54:15.461Z</updated>
    
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构和算法" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript程序设计项目</title>
    <link href="http://example.com/2020/11/21/JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2020/11/21/JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-11-21T04:49:14.050Z</published>
    <updated>2020-12-30T08:42:27.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript快速入门"><a href="#JavaScript快速入门" class="headerlink" title="JavaScript快速入门"></a>JavaScript快速入门</h1><ul><li>网站推荐：<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">JavaSript教程</a>  || <a href="https://www.w3school.com.cn/">W3school</a></li><li>JavaScript是一种运行在浏览器中的解释型的编程语言。</li><li>在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互.</li><li>JavaScript内嵌于HTML网页中,通过浏览器内置的JavaScript引擎直接编译，使静态转变成支持用户交互的页面程序。</li></ul><table><thead><tr><th align="center">语言</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">HTML</td><td align="center">结构</td><td align="center">从语义的角度，描述页面结构</td></tr><tr><td align="center">CSS</td><td align="center">样式</td><td align="center">从审美的角度，美化页面</td></tr><tr><td align="center">JavaScript</td><td align="center">行为</td><td align="center">从交互的角度，提升用户体验</td></tr></tbody></table><ul><li>JavaScript是脚本语言<br><strong>脚本(Script)就是一条条的文本命令，按照程序流程执行</strong>。常见脚本语言有     JavaScript,VBScript,Perl,PHP,Python等,而C,C++,Java,C#属于非脚本语言。<br>非脚本语言需要编译、链接，生成独立的可执行文件后才能运行。<br>脚本语言依赖于解释器，只在被调用时自动进行解释或调用。</li><li>JavaScript可以跨平台<br>JavaScript语言不依赖操作系统，只需要浏览器的支持。</li><li>JavaScript支持面向对象</li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li>JavaScript开发工具主要包括浏览器和代码编译器两种软件。</li><li>浏览器用于执行、调试代码，代码编译器用于编写代码。</li><li>种类繁多的浏览器只需要了解其内核就能对其有一个清晰的归类。</li><li>浏览器内核分两部分：排版引擎和Javascript引擎。</li><li>sublime-text编译工具快捷键<ol><li>Ctrl + N，新建一个文档；</li><li>Ctrl + Shift + P，打开命令模式，再输入 sshtml 进行模糊匹配，将语法切换到html模式；</li><li>输入  !，再按下Tab键或者Ctrl + E ，就能快速打开HTML5的整体结构。</li></ol></li></ul><h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><ul><li><p>嵌入式<br>直接编写在HTML文件中</p><pre><code>  &lt;script type=&quot;text/javascript&quot;&gt;      JavaScript语句  &lt;/script&gt;</code></pre></li><li><p>外链式<br>保存在一个单独的文件中，用“js”作为文件扩展名,最好放在body标签的底部，可以减少对整个页面的下载影响</p><pre><code>  &lt;script src=&quot;js/test.js&quot;&gt;&lt;/script&gt;</code></pre></li></ul><ul><li><p>行内式<br>将Javascript代码作为HTML标签的属性值使用</p><pre><code>  &lt;a href=&quot;javascript:alert(&#39;Hello&#39;);&quot;&gt;test&lt;/a&gt;</code></pre></li></ul><blockquote><p>JavaScript异步加载<br>无论使用内嵌式还是外链式，页面的下载和渲染都会暂停，等待脚本执行完成后才会继续。为了降低阻塞问题对页面造成的影响，可以使用可选属性：async和defer,添加后，即使文件下载失败，也不会阻塞javascript代码的执行</p></blockquote><ul><li><p>async<br>async用于异步加载，即先下载文件，不阻塞其他代码执行，下载完成后再执行</p><pre><code>  &lt;script src=&quot;http://js.test/file.js&quot; async&gt;&lt;/script&gt;</code></pre></li><li><p>defer<br>defer用于延后执行，即先下载文件，直到网页加载完成后再执行</p><pre><code>  &lt;script src=&quot;http://js.test/file.js&quot; defer&gt;&lt;/script&gt;</code></pre></li></ul><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><ul><li><p>alert()<br>弹出一个警告框</p><pre><code>  alert(&quot;提示信息&quot;);</code></pre></li><li><p>console.log()<br>在浏览器的控制台中输出内容(按F12)</p><pre><code>  console.log(&#39;你好！&#39;);</code></pre></li><li><p>document.write()<br>在HTML文档页面输出内容，也可以输出标签</p><pre><code>  document.write(&#39;&lt;b&gt;加粗文本&lt;/b&gt;&#39;);</code></pre></li><li><p>prompt()<br>弹出一个输入框</p><pre><code>  var value=prompt(&quot;提示输入&quot;,&quot;默认值&quot;);</code></pre></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>布尔型</p><pre><code>  var flag=true;</code></pre></li><li><p>数值型(Number)<br>javaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p><pre><code>  123; // 整数123  0.456; // 浮点数0.456  1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5  -99; // 负数  NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示  Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</code></pre></li><li><p>字符型(String)<br>字符串是以单引号’或双引号”括起来的任意文本</p><pre><code>  var color=&#39;&quot;red&quot;blue&#39;;</code></pre></li><li><p>空型(Null)<br>空型只有一个特殊的null值，用于表示一个不存在的或无效的对象或地址。</p></li><li><p>未定义型(Undefined)<br>未定义型只有一个特殊的undefined值，用于声明的变量还未被初始化时，变量的默认值为undefined。</p></li></ul><blockquote><p>undefined表示没有为变量设置值，null表示变量（对象或地址）不存在或无效。</p></blockquote><ul><li>转布尔型<br>Boolean()函数将如何非空字符串和非零的数组转为true，将空字符串、0、NaN、undefined和null转换为false<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> con=prompt(); <span class="comment">//保存用户的输出内容</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">Boolean</span>(con)</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;已输入内容&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;未输入内容&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(con));</span><br></pre></td></tr></table></figure></li><li>转数值型<br>Number()、parseInt( )、parseFloat()，isNaN()表示不是一个数值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户的输入，完成自动求和</span></span><br><span class="line"><span class="keyword">var</span> num1=prompt(<span class="string">&#x27;输入求和的第1个数：&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num2=prompt(<span class="string">&#x27;输入求和的第1个数：&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isNaN</span>(num1)||<span class="built_in">isNaN</span>(num2))&#123;  <span class="comment">//判断出不是数值型 返回ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;非法数字&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num1+num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>转字符型<br>String()、toString()</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/cca461f12daf99245406348455b0c6c3.png"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li><p>选择结构</p><pre><code>  //单分支  if(判断条件)&#123;      代码段  &#125;  //双分支  if(判断条件)&#123;      代码段1  &#125;else&#123;      代码段2  &#125;  //多分支  if(条件1)&#123;      代码段1;  &#125;else if(条件2)&#123;      代码段2;  &#125;  switch(表达式)&#123;      case 值1:          代码段1;          break;      case 值1:          代码段1;          break;          ...      default:           代码段n;  &#125;</code></pre></li><li><p>循环结构</p><pre><code>  while(循环条件)&#123;      循环体  &#125;  do&#123;      循环体  &#125;while(循环条件);  for(初始条件;循环条件;迭代条件)&#123;      代码块  &#125;</code></pre></li></ul><blockquote><p>在ES6中，不仅可以使用var定义变量，还可以使用let声明一个块级作用域(可以理解为{}之间的代码)的本地变量，let关键字在快级作用域内不能重复定义同名的变量，该变量仅在块级作用范围内有效。</p></blockquote><ul><li>跳转语句<br>  break语句和continue语句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现九九乘法表</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;九九乘法表&lt;/h1&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;table border=1px&gt;&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"> <span class="keyword">var</span> j=<span class="number">1</span>;j&lt;i;j++</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;td&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li><p>创建数组</p><ul><li>使用Array创建数组<pre><code>  // 元素值类型为字符串  var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;);  // 元素值类型为数值型  var score = new Array(56, 68, 98, 44);  // 元素值类型为混合型  var mix = new Array(123, &#39;abc&#39;, null, true, undefined);  // 空数组  var arr1 = new Array();   或    var arr2 = new Array;</code></pre></li><li>使用“[]”创建数组<pre><code>  var weather = [&#39;wind&#39;, &#39;fine&#39;];   var empty = [];       </code></pre></li></ul></li><li><p>获取数组长度</p><pre><code> // 获取数组长度 var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;); console.log(area.length); // 修改数组长度 var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;); area.length = 5;     console.log(area); area.length = 1;      console.log(area);</code></pre></li><li><p>数组的遍历</p><pre><code> // 元素值类型为字符串 var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;); // 遍历 for(var i=0;i&lt;area.length;i++)&#123;     console.log(area[i]); &#125; for(var  i  in area)&#123;     console.log(area[i]); &#125;</code></pre></li><li><p>数组元素的添加与删除</p><ul><li>添加数组元素<pre><code>  var arr = [&#39;Asa&#39;,&#39;Taylor&#39;];  arr[2] = &#39;Tom&#39;;  arr[3] =  &#39;Jack&#39;;  console.log(arr); </code></pre></li><li>修改数组元素<pre><code>  var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];  arr[2] = 123;  arr[3] = 456;  console.log(arr);</code></pre></li><li>元素的删除<pre><code>  var stu = [&#39;Tom&#39;, &#39;Jimmy&#39;, &#39;Lucy&#39;];  console.log(stu);      // 输出结果：(3) [&quot;Tom&quot;, &quot;Jimmy&quot;, &quot;Lucy&quot;]  delete stu[1];    // 删除数组中第2个元素  console.log(stu);      // 输出结果：(3) [&quot;Tom&quot;, empty, &quot;Lucy&quot;]</code></pre></li></ul></li><li><p>二维数组</p><ul><li>创建二维数组<pre><code>  // 使用Array对象创建数组  var info = new Array(new Array(&#39;Tom&#39;, 13, 155),new Array(&#39;Lucy&#39;, 11, 152)  );  // 使用“[]”创建数组  var num = [[1, 3], [2, 4]];</code></pre></li><li>遍历二维数组<pre><code>  // 使用“[]”创建数组  var num = [[1, 3], [2, 4]];  //遍历数组  for(var i  in num)&#123;       for(var  j  in   num[i])&#123;      console.log(num[i][j]));        &#125;&#125;</code></pre></li></ul></li><li><p>常见数组方法</p><ul><li>栈和队列方法</li></ul></li></ol><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td>push()</td><td>将一个或多个元素添加到数组的末尾，并返回数组的新长度。</td></tr><tr><td>unshift()</td><td>将一个或多个元素添加到数组的开头，并返回数组的新长度。</td></tr><tr><td>pop()</td><td>从数组的末尾移出并返回一个元素，若是空数组则返回undefined。</td></tr><tr><td>shift()</td><td>从数组的开头移出并返回一个元素，若是空数组则返回undefined。</td></tr></tbody></table><blockquote><p>push()和unshift()方法的返回值是新数组的长度。<br>pop()和shift()方法返回的是移出的数组元素。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;原数组：&quot;</span> + arr);</span><br><span class="line"><span class="keyword">var</span> last = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;末尾元素：&quot;</span> + last + <span class="string">&quot;,移除后数组：&quot;</span> + arr);</span><br><span class="line"><span class="keyword">var</span> first = arr.shift();</span><br><span class="line">arr.push(<span class="number">5</span>);</span><br><span class="line">arr.unshift(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>检索方法</li></ul><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td>includes()</td><td>用于确定数组中是否含有某个元素，含有返回true，否则返回false。</td></tr><tr><td>Array.isArray()</td><td>用于确定传递的值是否是一个 Array，是返回true，不是返回false。</td></tr><tr><td>indexOf()</td><td>返回在数组中可以找到给定值的第一个索引，如果不存在，则返回-1</td></tr><tr><td>lastIndexOf()</td><td>返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--首先：编写HTML页面，准备<span class="number">3</span>个下拉菜单--&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;sheng&quot;</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;-1&quot;</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;select id=<span class="string">&quot;shi&quot;</span>&gt;&lt;/select&gt;</span><br><span class="line">        &lt;select id=<span class="string">&quot;qu&quot;</span>&gt;&lt;/select&gt;        </span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">//省份数组</span></span><br><span class="line"><span class="keyword">var</span> shengArr=[<span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;河北&#x27;</span>];</span><br><span class="line"><span class="comment">//市数组</span></span><br><span class="line"><span class="keyword">var</span> shiArr = [</span><br><span class="line"> [<span class="string">&#x27;上海市&#x27;</span>],</span><br><span class="line"> [<span class="string">&#x27;苏州市&#x27;</span>, <span class="string">&#x27;南京市&#x27;</span>, <span class="string">&#x27;扬州市&#x27;</span>],</span><br><span class="line"> [<span class="string">&#x27;石家庄&#x27;</span>, <span class="string">&#x27;秦皇岛&#x27;</span>, <span class="string">&#x27;张家口&#x27;</span>]];</span><br><span class="line"> <span class="comment">//区数组 </span></span><br><span class="line"> <span class="keyword">var</span> quArr=[</span><br><span class="line">        [</span><br><span class="line">          [<span class="string">&#x27;黄浦区&#x27;</span>, <span class="string">&#x27;静安区&#x27;</span>, <span class="string">&#x27;长宁区&#x27;</span>, <span class="string">&#x27;浦东区&#x27;</span>]</span><br><span class="line">        ], [</span><br><span class="line">          [<span class="string">&#x27;虎丘区&#x27;</span>, <span class="string">&#x27;吴中区&#x27;</span>, <span class="string">&#x27;相城区&#x27;</span>, <span class="string">&#x27;姑苏区&#x27;</span>, <span class="string">&#x27;吴江区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;玄武区&#x27;</span>, <span class="string">&#x27;秦淮区&#x27;</span>, <span class="string">&#x27;建邺区&#x27;</span>, <span class="string">&#x27;鼓楼区&#x27;</span>, <span class="string">&#x27;浦口区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;邗江区&#x27;</span>, <span class="string">&#x27;广陵区&#x27;</span>, <span class="string">&#x27;江都区&#x27;</span>]</span><br><span class="line">        ], [</span><br><span class="line">          [<span class="string">&#x27;长安区&#x27;</span>, <span class="string">&#x27;桥西区&#x27;</span>, <span class="string">&#x27;新华区&#x27;</span>, <span class="string">&#x27;井陉矿区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;海港区&#x27;</span>, <span class="string">&#x27;山海关区&#x27;</span>, <span class="string">&#x27;北戴河区&#x27;</span>, <span class="string">&#x27;抚宁区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;桥东区&#x27;</span>, <span class="string">&#x27;桥西区&#x27;</span>, <span class="string">&#x27;宣化区&#x27;</span>, <span class="string">&#x27;下花园区&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line"> ];</span><br><span class="line"> <span class="comment">//1. 定义函数，将data数组中的值，添加到obj这个select中</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createOption</span>(<span class="params">obj,data</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> data</span>)</span>&#123;  <span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">var</span> op = <span class="keyword">new</span> Option(data[i],i); <span class="comment">//创建Option，data[i]为显示的文本，i为value</span></span><br><span class="line">obj.options.add(op); <span class="comment">//将Option（op）添加到Select（obj）</span></span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//2.调用函数，设置省份下拉菜单的值</span></span><br><span class="line"> <span class="keyword">var</span> sheng = <span class="built_in">document</span>.getElementById(<span class="string">&quot;sheng&quot;</span>);</span><br><span class="line"> createOption(sheng,shengArr);</span><br><span class="line"> <span class="comment">//3.调用函数，设置市下拉菜单的值 -- 联动</span></span><br><span class="line"> <span class="keyword">var</span> shi = <span class="built_in">document</span>.getElementById(<span class="string">&quot;shi&quot;</span>);</span><br><span class="line"> sheng.onchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//清空市原有数据</span></span><br><span class="line">shi.options.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//调用函数，设置市下拉菜单，注意下标为当前省的value</span></span><br><span class="line">createOption(shi,shiArr[sheng.value]); </span><br><span class="line"><span class="comment">//5.省修改时，市修改（代码如上），区也应该随着修改，即需要调用第四步的函数</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">sheng.value!=-<span class="number">1</span></span>)</span>&#123;  <span class="comment">//编码严谨，考虑省选择的“请选择”，此时：区清空</span></span><br><span class="line">shi.onchange();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">qu.options.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//4.调用函数，设置区下拉菜单的值 -- 联动</span></span><br><span class="line"> <span class="keyword">var</span> qu = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;qu&#x27;</span>);</span><br><span class="line"> shi.onchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//清空区原有数据</span></span><br><span class="line">qu.options.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//调用函数，设置区下拉菜单，注意下标为：一维sheng.value，二维shi.value</span></span><br><span class="line">createOption(qu,quArr[sheng.value][shi.value]); </span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/f6cf616aa5f5f1adb55466e6efc8449c.png"></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数封装一段完成特定功能的代码。</p><pre><code>    function 函数名([参数1, 参数2, ……])    &#123;        函数体……    &#125;    function maxNum(a, b)     &#123;          a =  parseInt(a);         b =  parseInt(b);          return a &gt;= b ? a : b;    &#125;</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;大小写转换&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;大小写转换&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;原数据:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;old&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p&gt;操&amp;nbsp;&amp;nbsp;作&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;转大写&quot;</span> onClick=<span class="string">&quot;deal(&#x27;upper&#x27;)&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;转小写&quot;</span> onClick=<span class="string">&quot;deal(&#x27;lower&#x27;)&quot;</span>&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;新数据:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;new&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deal</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;old&#x27;</span>).value; <span class="comment">//取元数据的值</span></span><br><span class="line"><span class="function"><span class="title">switch</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;upper&#x27;</span>:</span><br><span class="line">str=str.toUpperCase();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;lower&#x27;</span>:</span><br><span class="line">str=str.toLowerCase();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;new&#x27;</span>).value=str;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/966bae02db2b5af925719320b9082bfd.png"></p><ul><li><p>参数<br>开发时若不能确定函数的形参个数，可以不设置形参；<br>之后通过arguments对象获取调用时传递的实参。</p><pre><code>  function sum()&#123;      console.log(arguments);      var sum=0;      for(var i in arguments)&#123;          sum+=arguments[i];      &#125;      return sum;  &#125;  document.write(sum(1,2,3,4,5));</code></pre></li><li><p>变量的作用域<br>全局变量：函数外声明，或者函数内省略var声明；<br>局部变量：函数体内用var声明。<br>块级变量：ES6提供的let关键字声明，仅在”{}”内有效。</p></li><li><p> 匿名函数<br>匿名函数指没有函数名称的函数，可以避免全局变量的污染以及函数名的冲突问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1：函数表达式中省略函数名</span></span><br><span class="line"><span class="keyword">var</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//方式2：自调用方式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;)(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//方式3：处理事件</span></span><br><span class="line"><span class="built_in">document</span>.body.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>回调函数<br>回调函数指一个函数A作为参数传递给一个函数B，然后在B的函数体内调用函数A，称A为回调函数。其中，匿名函数常作为函数的参数传递，实现回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params">num1,num2,fn</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> fn(num1,num2);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(cal(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> a+b;</span><br><span class="line">              &#125;</span><br><span class="line">           )</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(cal(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> a*b;</span><br><span class="line">              &#125;</span><br><span class="line">           )</span><br><span class="line">      );</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>闭包函数<br>JavaScript中内部函数可引用外部函数的变量，但是在函数外部则不能访问函数的内部变量和嵌套函数，此时就需要使用”闭包“。<br>”闭包“指有权访问另一函数作用域内变量(局部变量)的函数。它主要的用途是以下两点：</p></li></ul><ol><li>可以在函数外部读取函数内部的变量</li><li>可以让变量的值始终保持在内存中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> times=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> c=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ++times;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count=fn();  <span class="comment">//保存fn()返回的函数，此时count就是一个闭包</span></span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="comment">//使用闭包函数实现了在全局作用域中访问局部变量times，并让其始终存储在内存中</span></span><br><span class="line"><span class="comment">//运行结果：1，2，3，4，5</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1>面向对象的特征主要可以概括为封装性、继承性、多态性。</li></ol><ul><li>自定义对象</li></ul><ol><li><p>字面量{}创建对象</p><pre><code> var o1=&#123;&#125;; var o2=&#123;name:&#39;Jim&#39;&#125;; var o3=&#123;name:&#39;Jim&#39;,age:19,gender:&#39;男&#39;&#125;; var o4 = &#123;            name: &#39;Jim&#39;,     age: 19,     gender: &#39;男&#39;,    sayHello: function() &#123;                  console.log(&#39;你好&#39;);                 &#125;&#125;;</code></pre></li><li><p>访问对象成员<br>对象名.属性;<br>对象名.方法名()</p><pre><code>o4.name;o4.sayHello();</code></pre></li><li><p>增加对象成员<br>引用不存在的成员，即增加成员</p><pre><code>o4.tall=181;o4.introduce=function()&#123;    console.log(o4.name+o4.tall);&#125;o4.introduce();</code></pre></li><li><p>可变成员名<br>如果对象的成员名不确定时，还可通过一个变量保存成员的名称，使用[]语法来实现可变成员名。<code>成员名：是字符串</code>。</p><pre><code>var key=&#39;id&#39;;o4[key]=123;</code></pre></li><li><p>对象成员遍历<br>typeof：判断成员类型，function表示方法<br>访问方法：o4<a href>i</a><br>访问属性：o4[i]</p><pre><code>for(var i in o4)&#123;    console.log(typeof(o4[i]));      if(typeof(o4[i])==&quot;function&quot;)&#123;        o4[i]();  //访问方法    &#125;else&#123;        console.log(o4[i]);  //访问属性    &#125;&#125;</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;动态增加对象成员&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;key&quot;</span> type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;val&quot;</span> type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;Jack&quot;</span>&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;btn&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;测试&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> k = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;val&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> o = &#123;&#125;;  <span class="comment">//创建空对象</span></span><br><span class="line">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//当点击btn时，调用匿名函数</span></span><br><span class="line">            o[k.value] = v.value;  <span class="comment">//增加属性，k的value为键、v的value为值</span></span><br><span class="line">            <span class="built_in">console</span>.log(o);  <span class="comment">//打印对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/6d0f7bf592c5985c9fce00bb75d2b2d7.png"></p></li></ol><ul><li>深拷贝与浅拷贝<ol><li>浅拷贝—复制快捷方式<pre><code> var o1 = &#123;name: &#39;Jim&#39;, age: 19, gender: &#39;男&#39;&#125;; var o2=o1;</code></pre></li><li>深拷贝—复制文件本身<pre><code> function deepCopy(obj)&#123;     var o = &#123;&#125;;       for(var k in obj)&#123;     //假设k是简单的成员（不是对象）         o[k] = obj[k];     &#125; &#125;</code></pre></li></ol></li><li>this指向<ol><li>使用new调用构造函数时，this指向新创建的对象<pre><code> function  Person(name,age)&#123;     this.name = name;     this.age = age; &#125; var o1 = new Person(“Jack”,18); var o2 = new Person(“Lily”,20);</code></pre></li><li>将函数作为对象的方法调用，this指向该对象<pre><code> var obj = &#123;     name:”Jack”,     age:19,     sayHello:function()&#123;         console.log( this.name + “,” + this.age);     &#125; &#125;; obj.sayHello();</code></pre></li><li>直接通过函数名调用函数，this指向全局对象window<pre><code> function foo()&#123;     return this; &#125; console.log(foo()===window); //true</code></pre></li></ol></li></ul><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><ul><li>String对象</li></ul><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">length</td><td align="center">获取字符串长度</td></tr><tr><td align="center">charAt(index)</td><td align="center">获取index位置的字符，位置从0开始</td></tr><tr><td align="center">indexOf(searchValue)</td><td align="center">获取seerchValue在字符串中首次出现的位置</td></tr><tr><td align="center">lastIndexOf(searchValue)</td><td align="center">获取seerchValue在字符串中最后出现的位置</td></tr><tr><td align="center">substring(start[,end])</td><td align="center">截取从start位置到end位置之间的一个子字符串</td></tr><tr><td align="center">substr(start[,length])</td><td align="center">截取从start位置开始到length长度的子字符串</td></tr><tr><td align="center">toLowerCase()</td><td align="center">获取字符串的小写形式</td></tr><tr><td align="center">toUpperCase()</td><td align="center">获取字符串的大写形式</td></tr><tr><td align="center">split([separator[,limit])</td><td align="center">使用separator分隔符将字符串分隔成数组，limit用于限制数量</td></tr><tr><td align="center">replace(str1,str2)</td><td align="center">使用str2替换字符串中的str1，返回替换结果</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;Administrator&#x27;</span>;</span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">name.length&lt;<span class="number">3</span>||name.length&gt;<span class="number">10</span></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;用户名必须在3~10之间&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(name.toLowerCase().indexOf(<span class="string">&#x27;admini&#x27;</span>)!== -<span class="number">1</span>)&#123; <span class="comment">//indexOf查找失败返回-1</span></span><br><span class="line">alert(<span class="string">&#x27;用户名中不能包含敏感词：admin&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Number对象</li></ul><p>Number对象用于处理整数、浮点数等数值，常用的属性和方法如下。</p><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">MAX_VALUE</td><td align="center">在JavaScript中所能表示的最大数值（静态成员）</td></tr><tr><td align="center">MIN_VALUE</td><td align="center">在JavaScript中所能表示的最小正值（静态成员）</td></tr><tr><td align="center">toFixed(digits)</td><td align="center">使用定点表示法来格式化一个数值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">12345.6789</span>;</span><br><span class="line">num.toFixed();  <span class="comment">//四舍五入，不包括小数部分，返回结果：12345</span></span><br><span class="line">num.toFixed(<span class="number">1</span>); <span class="comment">//四舍五入，保留1位小数，返回结果：12345.7</span></span><br><span class="line">num.toFixed(<span class="number">6</span>); <span class="comment">//用0填充不足的小数位，返回结果：12345.678900</span></span><br><span class="line">num.MAX_VALUE;</span><br><span class="line">num.MIN_VALUE;</span><br></pre></td></tr></table></figure><ul><li>Math对象</li></ul><p>Math对象用于对数值进行数学运算。</p><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">PI</td><td align="center">获取圆周率，结果为3.141592653589793</td></tr><tr><td align="center">abs(x)</td><td align="center">获取x的绝对值，可传入普通数值或是用字符串表示的数值</td></tr><tr><td align="center">pow(base,xponent)</td><td align="center">获取基数(base)的指数(exponent)次幂，即baseexponnet</td></tr><tr><td align="center">sqrt(x)</td><td align="center">获取x的平方根</td></tr><tr><td align="center">ceil(x)</td><td align="center">获取大于或等于x的最小整数，即向上取整</td></tr><tr><td align="center">floor(x)</td><td align="center">获取小于或等于x的最大整数，即向下取整</td></tr><tr><td align="center">round(x)</td><td align="center">获取x的四舍五入后的整数值</td></tr><tr><td align="center">random()</td><td align="center">获取大于或等于0.0且小于1.0的随机值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10.88</span>;</span><br><span class="line"><span class="built_in">Math</span>.ceil(num);</span><br><span class="line"><span class="built_in">Math</span>.random();</span><br><span class="line"><span class="comment">//Math.floor( Math.random() * (max-min+1) + min)，生成[min,max]的随机整数。</span></span><br><span class="line"><span class="built_in">Math</span>.random()*(<span class="number">3</span>-<span class="number">1</span>+<span class="number">1</span>)+<span class="number">1</span>; <span class="comment">//[1,3]  //Math.random()*(Max-Min+1)+Min</span></span><br><span class="line"><span class="built_in">Math</span>.random()*(<span class="number">99</span>-<span class="number">88</span>)+<span class="number">88</span>; <span class="comment">//[88,99) //Math.random()*(Max-Min)+Min</span></span><br></pre></td></tr></table></figure><ul><li> Date对象</li></ul><p>Date对象用于处理日期和时间。</p><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">getFullYear()</td><td align="center">获取表示年份的4位数字，如2020</td></tr><tr><td align="center">setFullYear(value)</td><td align="center">设置年份</td></tr><tr><td align="center">getMonth()</td><td align="center"><strong>获取月份，范围0~11（0表示一月，1表示二月，依次类推）</strong></td></tr><tr><td align="center">setMonth(value)</td><td align="center">设置月份</td></tr><tr><td align="center">getDate()</td><td align="center"><strong>获取月份中的某一天，范围1~31</strong></td></tr><tr><td align="center">setDate(value)</td><td align="center">设置月份中的某一天</td></tr><tr><td align="center">getDay()</td><td align="center"><strong>获取星期，范围0~6（0表示星期日，1表示星期一，依次类推</strong>）</td></tr><tr><td align="center">getHours()</td><td align="center">获取小时数，返回0~23</td></tr><tr><td align="center">setHours(value)</td><td align="center">设置小时数</td></tr><tr><td align="center">getMinutes()</td><td align="center">获取分钟数，范围0~59</td></tr><tr><td align="center">setMinutes(value)</td><td align="center">设置分钟数</td></tr><tr><td align="center">getSeconds()</td><td align="center">获取秒数，范围0~59</td></tr><tr><td align="center">setSeconds(value)</td><td align="center">设置秒数</td></tr><tr><td align="center">getMilliseconds()</td><td align="center">获取毫秒数，范围0~999</td></tr><tr><td align="center">getMilliseconds(value)</td><td align="center">设置毫秒数</td></tr><tr><td align="center">getTime()</td><td align="center">获取从1970-01-01 00:00:00 距离Date对象所代表时间</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var date=new Date();</span><br><span class="line">document.write(date+&quot;<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;);</span><br><span class="line">console.log(&quot;年：&quot;+date.getYear());  //年：120</span><br><span class="line">console.log(&quot;年：&quot;+date.getFullYear());  //年：2020</span><br><span class="line">console.log(&quot;月：&quot;+date.getMonth());  //月：9</span><br><span class="line">console.log(&quot;日：&quot;+date.getDate());  //日：15</span><br><span class="line">console.log(&quot;时：&quot;+date.getHours());  //时：8</span><br><span class="line">console.log(&quot;分：&quot;+date.getMinutes());  //分：52</span><br><span class="line">console.log(&quot;秒：&quot;+date.getSeconds());  //秒：54</span><br><span class="line">console.log(&quot;周几：&quot;+date.getDay());  //周几：4</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;制作年历&lt;/title&gt;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">body&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">margin:<span class="number">0</span> auto;</span><br><span class="line">width:<span class="number">880</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.title&#123;</span><br><span class="line">background:#ccc;</span><br><span class="line">&#125;</span><br><span class="line">table&#123;</span><br><span class="line">height:<span class="number">200</span>px;</span><br><span class="line">width:<span class="number">200</span>px;</span><br><span class="line">font-size:<span class="number">12</span>px;</span><br><span class="line">text-align:center;</span><br><span class="line">float:left;   <span class="comment">/*浮动属性，脱离文档流，向左移动，直至遇到父元素或另一个浮动元素的边缘*/</span></span><br><span class="line">margin:<span class="number">10</span>px;</span><br><span class="line">font-family:Arial;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">/*定义年历生成函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calendar</span>(<span class="params">y</span>)</span>&#123;  <span class="comment">//y：从网页获取到的年份</span></span><br><span class="line"><span class="comment">//获取指定年份1月1日的星期数值</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> <span class="built_in">Date</span>(y,<span class="number">0</span>).getDay();  </span><br><span class="line"><span class="comment">//Date创建方式1： var date1 = new Date(2017,9,1,11,53,4);年月日时分秒，至少给出年和月；另外月的范围是0~11，即参数为0，实际月份为1月；</span></span><br><span class="line"><span class="comment">//Date创建方式2： var date2 = new Date(&#x27;2017-10-01 11:53:04&#x27;);//getDay() 获取星期，范围0~6</span></span><br><span class="line"><span class="keyword">var</span> html=<span class="string">&#x27;&lt;div class=&quot;box&quot;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接每个月份的表格</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> m=<span class="number">1</span>;m&lt;=<span class="number">12</span>;m++</span>)</span>&#123;</span><br><span class="line">html += <span class="string">&#x27;&lt;table&gt;&#x27;</span>;</span><br><span class="line">                html += <span class="string">&#x27;&lt;tr class=&quot;title&quot;&gt;&lt;th colspan=&quot;7&quot;&gt;&#x27;</span> + y + <span class="string">&#x27; 年 &#x27;</span> + m + <span class="string">&#x27; 月&lt;/th&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">                html += <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;日&lt;/td&gt;&lt;td&gt;一&lt;/td&gt;&lt;td&gt;二&lt;/td&gt;&lt;td&gt;三&lt;/td&gt;&lt;td&gt;四&lt;/td&gt;&lt;td&gt;五&lt;/td&gt;&lt;td&gt;六&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取月份m共有多少天？</span></span><br><span class="line"><span class="keyword">var</span> max = (<span class="keyword">new</span> <span class="built_in">Date</span>(y,m,<span class="number">0</span>)).getDate();   <span class="comment">//getDate获取月份中的某一天，范围1~31；当日为0时，可获得该月的天数。</span></span><br><span class="line"><span class="comment">//开始tr标签</span></span><br><span class="line">html = html+<span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> d=<span class="number">1</span>;d&lt;=max;d++</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((w!=<span class="number">0</span>) &amp;&amp; (d==<span class="number">1</span>))&#123;  <span class="comment">//如果该月的第一天不是星期日，则填充空白</span></span><br><span class="line">html = html+<span class="string">&#x27;&lt;td colspan=&quot;&#x27;</span> + w + <span class="string">&#x27;&quot;&gt;&lt;/td&gt;&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">html = html + <span class="string">&#x27;&lt;td&gt;&#x27;</span> + d + <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">w==<span class="number">6</span> &amp;&amp; d!=max</span>)</span>&#123;  <span class="comment">//如果星期六不是该月的最后一天，则换行 </span></span><br><span class="line">html = html + <span class="string">&#x27;&lt;/tr&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">d==max</span>)</span>&#123;   <span class="comment">//该月的最后一天，闭合&lt;tr&gt;标签</span></span><br><span class="line">html = html + <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">w = (w+<span class="number">1</span>&gt;<span class="number">6</span>)?<span class="number">0</span>:w+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">html = html + <span class="string">&#x27;&lt;/table&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">html = html + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">var</span> year = <span class="built_in">parseInt</span>(prompt(<span class="string">&#x27;输入年份:&#x27;</span>,<span class="string">&#x27;2019&#x27;</span>));</span><br><span class="line"><span class="built_in">document</span>.write(calendar(year));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/5a45bff2253fc06cc1a9d9c7ee84bfff.png"></p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li><p>JSON: <strong>JavaScript Object Notation</strong>(JavaScript 对象表示法)。</p></li><li><p>JSON 是<strong>轻量级的文本数据交换格式</strong>，类似 XML，但 比 XML 更小、更快，更易解析。</p></li><li><p>JSON 独立于语言和平台，目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p></li></ul><ol><li><p>JSON对象</p><pre><code> //JSON对象 var obj = &#123;“name”:“Jerry”，“age”:15&#125;  //JS对象 var obj = &#123;name:“Jerry”，age:15，              sayHello:function&#123;……&#125;          &#125;</code></pre><ul><li><p>JSON对象的属性名（key）必须被包含在双引号之中，而JavaScript对象除了有空格的属性名、中间有连字符-的属性名必须在双引号之中外，其它随意；</p></li><li><p>不能在JSON对象中定义方法，而在JavaScript对象中可以；</p></li><li><p>JSON对象可以被很多语言操作，而JavaScript对象只有JS自己可以识别。</p></li></ul></li><li><p>JSON数组</p><pre><code> var myJson =&#123;               &quot;country&quot;:&quot;China&quot;,         &quot;population&quot;:&quot;1.3billion&quot;,          &quot;bigCity&quot;:[&quot;Peking&quot;,&quot;Shanghai&quot;,&quot;ShenZhen&quot;,&quot;HongKong&quot;] &#125; myJson .bigCity[0] = &quot;GuangZhou&quot;;</code></pre></li></ol><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><ul><li>JS组成<ol><li>ECMAScript：JS基本语法、数组、函数和对象。</li><li>BOM：浏览器对象模型（Brower Object Model）。</li><li>DOM：文档对象模型（Document Object Model )。</li></ol></li><li>BOM作用及结构图<ol><li>浏览器对象：内置对象，实现JS操作浏览器窗口及窗口上的控件，实现用户和页面的动态交互。</li><li>BOM：浏览器对象模型。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/fde59ae943452104dec1eb6697a007dc.png"></li></ol></li></ul><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ul><li>window对象是BOM中所有对象的核心，同时也是BOM中所有对象的父对象。</li><li>全局变量、函数、内置对象均能被window对象调用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var area = &#x27;Beijing&#x27;;</span><br><span class="line">function getArea()&#123;</span><br><span class="line">  return this.area;</span><br><span class="line">&#125;</span><br><span class="line">console.log(window.area);        //访问变量，输出结果：Beijing</span><br><span class="line">console.log(window.area());//访问window对象的属性，输出结果为：Beijing</span><br><span class="line">console.log(getArea());  //调用自定义函数，输出结果：Beijing</span><br><span class="line">console.log(window.getArea());  //调用window对象的方法，输出结果：Beijing</span><br><span class="line">console.log(window.Number(area));  //调用内置函数，将变量area转换为数值型，输出结果：NaN</span><br></pre></td></tr></table></figure><ul><li><p>定义在全局作用域中的getArea()函数，函数体内的this关键字指向window对象。</p></li><li><p>对于window对象的属性和方法在调用时可以省略window，直接访问其属性和方法即可。</p></li><li><p>弹出对话框和窗口</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/f7c0de03573b5943357e4e28d54fe66a.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/a5afa659fcf7196d587d016fcac0b3bc.png"></p><ol><li><p>输入对话框</p><pre><code> var str=prompt(&#39;请输入测试的选项&#39;,&#39;用户名和密码&#39;);</code></pre></li><li><p>确认对话框</p><pre><code> &lt;input type=&quot;button&quot; value=&quot;删除&quot; onclick=&quot;del()&quot;&gt; &lt;script&gt;     function del()&#123;         if(confirm(&#39;确定要删除吗？&#39;))&#123;             //你按下了“确定”按钮         &#125;else&#123;             //你按下了“取消”按钮         &#125;     &#125; &lt;/script&gt;</code></pre></li><li><p>打开与关闭窗口</p><pre><code> open(URL,name,specs,replace); //name指定target属性或窗口的名称 //specs设置浏览器窗口的特征（如大小、位置） //replace设置为true，表示替换浏览器历史中的当前条目,设置为false(默认值)，表示在浏览历史中创建新的条目</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第一个页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test1 windowd对象的属性和方法_submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">accept-charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;openWin()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一组：对话框</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// window.alert(&quot;alert&quot;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&quot;confirm:&quot; + window.confirm(&quot;confirm&quot;));  //观察点击”确认“和”取消“两种情况的输出结果</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&quot;prompt:&quot; +  window.prompt(&quot;prompt&quot;,100));</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//第二组：窗口的打开与关闭</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">openWin</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.open(<span class="string">&quot;test1 第二个页面.html&quot;</span>,<span class="string">&quot;_blank&quot;</span>,<span class="string">&#x27;width=400,height=200,left=200&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>窗口位置和大小</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/b12c6d694892607202cbe6b6c8f4b4d2.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/e1c6f927ee07c68790ff6149ba98f6fd.png"></p><ul><li>定时器</li></ul><p>通过window对象提供的方法实现在指定时间后执行特定操作，也可以让程序代码每隔一段时间执行一次，实现间歇操作。</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setTimeout()</td><td align="center">在指定的毫秒数后调用函数或执行一段代码</td></tr><tr><td align="center">setInterval()</td><td align="center">按照指定的周期(以毫秒计)来调用函数或执行一段代码</td></tr><tr><td align="center">clearTimeout()</td><td align="center">取消由setTimeout()方法设置的定时器</td></tr><tr><td align="center">clearInterval()</td><td align="center">取消由setInterval()方法设置的定时器</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//一次性定时器</span><br><span class="line">var timer = window.setTimeout(echoStr,3000); //echoStr定时调用的函数,3000为时间，单位毫秒</span><br><span class="line">  function echoStr()&#123;</span><br><span class="line">            console.log(&quot;Hello JS!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> window.clearTimeout(timer);</span><br><span class="line"> //周期性定时器</span><br><span class="line"> var timer = window.setInterval(echoStr,3000);       </span><br><span class="line">  function echoStr()&#123;</span><br><span class="line">            console.log(&quot;Hello JS!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">window.clearInterval(timer);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">text-align</span>: center;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timeDiv&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span> = <span class="string">&quot;开始&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span> = <span class="string">&quot;暂停&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> start = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;start&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pause = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pause&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timeDiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;timeDiv&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        start.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            timer = <span class="built_in">window</span>.setInterval(startFun, <span class="number">1000</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        pause.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.clearInterval(timer);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">startFun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            time++;</span><br><span class="line">            timeDiv.innerHTML = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/3c71904f4ddcba4c36d76dcec829915a.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>限时秒杀<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">position</span>:relative;<span class="attribute">background</span>:<span class="built_in">url</span>(images/flash_sale.png);<span class="attribute">width</span>:<span class="number">702px</span>;<span class="attribute">height</span>:<span class="number">378px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">text-align</span>: center;<span class="attribute">color</span>:red;<span class="attribute">position</span>:relative;<span class="attribute">top</span>:<span class="number">260px</span>;<span class="attribute">left</span>:<span class="number">305px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;s&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="comment">&lt;!-- 剩余的秒数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> s = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> timer = <span class="built_in">window</span>.setInterval(myFun,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">document</span>.getElementById(<span class="string">&#x27;s&#x27;</span>).innerHTML = s + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line">           s--;</span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">if</span>(<span class="params">s&lt;<span class="number">0</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.clearInterval(timer);</span></span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/fc3bf46530e987d249f98c6db03ca728.png"></p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><ul><li>localtion对象可以更改当前用户中浏览器中访问的URL，实现新文档的载入、重载以及替换等功能。</li><li>每一个网页文件都有一个访问标记符，用于唯一标识它的访问位置，以便浏览器可以访问的，这个访问标记符称为URL(Uniform Resource Locator,统一资源定位符)。<pre><code>  URL中包含了网络协议、服务器的主机名、端口号、资源名称字符串、参数以及锚点  http://www.example.com:80/web/index.html?a=3&amp;b=4#res</code></pre></li></ul><ol><li>更改URL<table><thead><tr><th align="center">location对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">assign()</td><td align="center">载入一个新的文档</td></tr><tr><td align="center">reload()</td><td align="center">重新载入当前文档</td></tr><tr><td align="center">replace</td><td align="center">用新的文档替换当前文档</td></tr></tbody></table></li></ol><blockquote><p>reload() 参数为true时，它会绕过缓存，从服务器上重新下载该文档，类似于浏览器中的刷新页面按钮。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;载入新页面&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;newPage()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;刷新页面&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;freshPage()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;替换页面&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;replacePage()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取并显示当前页面载入的时间</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ds=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> d=ds.getDate();</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>).innerHTML=t;</span></span><br><span class="line"><span class="javascript"><span class="comment">//载入新的页面</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">newPage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.assign(<span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"> <span class="comment">//刷新页面        </span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">freshPage</span>(<span class="params"></span>)</span>&#123;          </span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.reload(<span class="literal">true</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//替换，不能后退</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.replace(‘http:<span class="comment">//www.baidu.com’);  </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取URL参数</li></ol><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">search</td><td align="center">返回URL地址中的参数</td></tr><tr><td align="center">hash</td><td align="center">返回一个URL的锚部分</td></tr><tr><td align="center">host</td><td align="center">返回一个URL的主机名和端口</td></tr><tr><td align="center">hostname</td><td align="center">返回URL的主机名</td></tr><tr><td align="center">href</td><td align="center">返回完整的主机名</td></tr><tr><td align="center">pathname</td><td align="center">返回URL的路径名</td></tr><tr><td align="center">port</td><td align="center">返回一个URL服务器使用的端口号</td></tr><tr><td align="center">protocol</td><td align="center">返回一个URL协议</td></tr></tbody></table><ul><li><p>获取URL的指定部分：location.属性名。</p></li><li><p>设置URL的指定部分：location.属性名 = 值。</p><pre><code>  //假设用户在地址栏中访问:http://localhost/search.html?goods=books&amp;price=40  location.search;  //获取:&quot;?goods=books&amp;price=40&quot;  //获取URL地址  location.href;  //设置URL地址  location.href=&quot;http://www.baidu.com&quot;;</code></pre></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>定时跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:gray;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">20px</span> auto;<span class="attribute">width</span>:<span class="number">350px</span>;<span class="attribute">height</span>:<span class="number">150px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;<span class="attribute">background</span>:white;<span class="attribute">padding</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">h2</span>&#123;<span class="attribute">text-align</span>:center;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">span</span>&#123;<span class="attribute">font-size</span>:<span class="number">150%</span>;<span class="attribute">color</span>:red;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交成功<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;seconds&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>秒后系统会自动跳转，也可单击此链接跳转</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="function"><span class="keyword">function</span> <span class="title">timing</span>(<span class="params">secs,url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> seconds=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;seconds&#x27;</span>);</span></span><br><span class="line">seconds.innerHTML=--secs;</span><br><span class="line"><span class="javascript"><span class="function"><span class="title">if</span>(<span class="params">secs&gt;<span class="number">0</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(<span class="string">&#x27;timing(&#x27;</span>+secs+<span class="string">&#x27;,\&#x27;&#x27;</span>+url+<span class="string">&#x27;\&#x27;)&#x27;</span>,<span class="number">1000</span>); </span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"> location.href=url;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript">timing(<span class="number">3</span>,<span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/6ce17e2ba00d43144f24cacf7fbb696a.png"></p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>history对象可以对用户在浏览器中访问过的URL历史记录进行操作。但history不能直接获取用户浏览过的URL。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/94c388f221c2b7c8d15a47bcd46fabd6.png"></p><ul><li>go()方法：当参数值是一个负整数时，表示“后退”指定的页数；当参数值是一个正整数时，表示“前进”指定的页数。</li><li>当go()方法的参数为1或-1时，与forward()和back()方法的作用相同。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/0563d51aaf7af1fa4858b0b3fef727fc.png"></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//第一个页面</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>定时跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是第一个页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;前进&quot;</span> <span class="attr">id</span>=<span class="string">&quot;qianjin&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开新页面&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dakai&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> qianjin = <span class="built_in">document</span>.getElementById(<span class="string">&quot;qianjin&quot;</span>);</span></span><br><span class="line"><span class="javascript">           qianjin.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.history.forward();  <span class="comment">//window.history.go(1);</span></span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> dakai = <span class="built_in">document</span>.getElementById(<span class="string">&quot;dakai&quot;</span>);</span></span><br><span class="line"><span class="javascript">           dakai.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location.assign(<span class="string">&quot;u6 前进和后退2.html&quot;</span>);</span></span><br><span class="line">           &#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//第二个页面</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>定时跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第二个页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;houtui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> houtui = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;houtui&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           houtui.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.history.back();</span></span><br><span class="line">           &#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/cc6d3cf4bfe42d635f73f20bd8663e9f.png"></p><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>navigator对象提供了有关浏览器的信息。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/02f974b05a95d0f7da7eb30125bacd35.png"></p><h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>返回当前渲染窗口中与屏幕相关的属性信息，如屏幕的宽度和高度等。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/8aa35d76cbc9fc6e0eac08b9045ac9cd.png"></p><h2 id="红绿灯倒计时"><a href="#红绿灯倒计时" class="headerlink" title="红绿灯倒计时"></a>红绿灯倒计时</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/b6f3e06ee4682dfae9a3b4f8a1d57724.png"><br>分析红绿灯：<br>① 横向三色交通信号灯的亮灯的顺序一般为“绿-&gt;黄-&gt;红-&gt;绿”依次循环。<br>② 亮灯时长需根据路口的实际情况等因素来考虑设置，如红灯亮设置为3秒，绿灯亮设置为5秒，黄灯亮设置为3秒。<br>核心功能：  改变背景颜色 + 倒计时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>红绿灯倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">250px</span>;<span class="attribute">height</span>:<span class="number">52px</span>;<span class="attribute">padding</span>:<span class="number">15px</span> <span class="number">30px</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#ccc</span>;<span class="attribute">border-radius</span>:<span class="number">16px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-class">.count</span>&#123;<span class="attribute">width</span>:<span class="number">60px</span>;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">280%</span>;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">padding-left</span>:<span class="number">6px</span>;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">border-radius</span>:<span class="number">50px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#666</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.gray</span>&#123;<span class="attribute">background-color</span>:<span class="number">#eee</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span>&#123;<span class="attribute">background-color</span>:red;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.yellow</span>&#123;<span class="attribute">background-color</span>:yellow;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.green</span>&#123;<span class="attribute">background-color</span>:<span class="number">#26ff00</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  //编写HTML页面</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取红、黄、绿灯以及倒计时的元素对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//lamp：整个红绿灯对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> lamp = &#123;</span></span><br><span class="line"><span class="javascript">        red: &#123;  <span class="comment">//red:lamp的成员,红灯对象</span></span></span><br><span class="line"><span class="javascript">          obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;red&#x27;</span>), <span class="comment">//obj:存储信号灯的元素对象</span></span></span><br><span class="line"><span class="javascript">          timeout: <span class="number">3</span>,    <span class="comment">//信号灯剩余亮灯时间</span></span></span><br><span class="line"><span class="javascript">          style: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>],  <span class="comment">//当红灯亮起时，红、黄、绿信号灯的背景颜色</span></span></span><br><span class="line"><span class="javascript">          next: <span class="string">&#x27;green&#x27;</span> <span class="comment">//红灯之后亮起的信号灯</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        yellow: &#123;</span><br><span class="line"><span class="javascript">          obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;yellow&#x27;</span>),</span></span><br><span class="line">          timeout: 3,</span><br><span class="line"><span class="javascript">          style: [<span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>],</span></span><br><span class="line"><span class="javascript">          next: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        green: &#123;</span><br><span class="line"><span class="javascript">          obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;green&#x27;</span>),</span></span><br><span class="line">          timeout: 5,</span><br><span class="line"><span class="javascript">          style: [<span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;green&#x27;</span>],</span></span><br><span class="line"><span class="javascript">          next: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//创建红绿灯对象（增加设置信号灯背景颜色的函数）</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeStyle</span>(<span class="params">style</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.red.obj.className = style[<span class="number">0</span>];  <span class="comment">//根据参数，更改obj的样式名称，实现更改背景颜色</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.yellow.obj.className = style[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.green.obj.className = style[<span class="number">2</span>];</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> count = &#123;  <span class="comment">//根据参数，更改num的值，即更改倒计时时间</span></span></span><br><span class="line"><span class="javascript">        obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;count&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        change: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.obj.innerHTML = (num &lt; <span class="number">10</span>) ? (<span class="string">&#x27;0&#x27;</span> + num) : num;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      <span class="comment">//初始状态 -- 绿灯亮</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> now = lamp.green;   <span class="comment">//用变量now记录当前状态</span></span></span><br><span class="line"><span class="javascript">      lamp.changeStyle(now.style);  <span class="comment">//设置信号灯的背景颜色</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> timeout = now.timeout; <span class="comment">//记录信号灯亮起时的时间</span></span></span><br><span class="line"><span class="javascript">      count.change(timeout); <span class="comment">//设置倒计时时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//改变时间 -- 定时器</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.setInterval(myfun,<span class="number">1000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           timeout--;  <span class="comment">//倒计时</span></span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">if</span>(<span class="params">timeout&gt;<span class="number">0</span></span>)</span>&#123;  <span class="comment">//倒计时时间未结束</span></span></span><br><span class="line"><span class="javascript">                 count.change(timeout);   <span class="comment">//，刷新页面</span></span></span><br><span class="line"><span class="javascript">           &#125;<span class="keyword">else</span>&#123;  <span class="comment">//倒计时时间结束</span></span></span><br><span class="line"><span class="javascript">                now = lamp[now.next];   <span class="comment">//切换信号灯颜色  -- 注意：不能写为 now = now.next;  这样是将一个字符串如yellow赋值给now；</span></span></span><br><span class="line">                lamp.changeStyle(now.style);</span><br><span class="line">                timeout = now.timeout;</span><br><span class="line">                count.change(timeout);</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/21f270060615dc63bbc199e10fe57fd1.png"></p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ol><li><p>什么是DOM？</p><ul><li>文 档（Document）表示HTML文件。</li><li>节 点：文档中所有的内容，都称为节点。</li><li>节点类型：标签节点（元素）、文本节点、属性节点、注释节点。</li><li>DOM：Document Object Model，文档对象模型。</li><li>作 用：完成对HTML文档内所有元素的获取、访问、标签属性和样式的设置等操作。</li></ul></li><li><p>DOM HTML 节点树</p><pre><code> &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;     &lt;title&gt;DOM节点&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;img src=&quot;t1.png&quot;&gt;     &lt;h1&gt;喜欢的水果&lt;/h1&gt;     &lt;p&gt;DOM应用&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/97f95e864fdad767351f408505972143.png"></p></li></ol><h2 id="HTML元素操作"><a href="#HTML元素操作" class="headerlink" title="HTML元素操作"></a>HTML元素操作</h2><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><ol><li><strong><em>利用document对象的方法</em></strong></li></ol><table><thead><tr><th align="center">document对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">getElementById()</td><td align="center">返回对拥有指定id的第一个对象的引用</td></tr><tr><td align="center">getElementsByName()</td><td align="center">返回带有指定名称的对象集合</td></tr><tr><td align="center">getElementsByTagName()</td><td align="center">返回带有指定标签名的对象集合</td></tr><tr><td align="center">getElementsByClassName()</td><td align="center">返回带有指定类名的对象集合（不支持IE6~8）</td></tr><tr><td align="center">querySelector()</td><td align="center">返回文档中匹配到指定元素或CSS选择器的第1个对象的引用</td></tr><tr><td align="center">querySelectorAll()</td><td align="center">返回文档中匹配到指定元素或CSS选择器的第1个对象集合</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span>bar1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span>bar2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span>&gt;</span>main1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span>&gt;</span>main2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>));</span></span><br><span class="line"><span class="javascript"><span class="comment">//返回对象集合，可以通过下标获得指定项</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByName(<span class="string">&quot;main&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;bar&quot;</span>));</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//HTML5新增方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>)); <span class="comment">//获取匹配到的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;#box&quot;</span>)); <span class="comment">//获取id为box的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.bar&quot;</span>)); <span class="comment">//获取class为bar的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div[name]&quot;</span>)); <span class="comment">//获取含有name属性的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div.bar&quot;</span>)); <span class="comment">//获取文档中class为bar的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div#box&quot;</span>)); <span class="comment">//获取文档中id为box的第1个div</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.<strong><em>利用documetn对象的属性</em></strong></p><table><thead><tr><th align="center">document对象的属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">document.body</td><td align="center">返回文档的body元素</td></tr><tr><td align="center">document.documentElement</td><td align="center">返回文档的html元素</td></tr><tr><td align="center">document.forms</td><td align="center">返回对文档中所有Form对象引用</td></tr><tr><td align="center">document.images</td><td align="center">返回对文档中所有Image对象引用</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> body=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>];  <span class="comment">//获取body元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span>html=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>];  <span class="comment">//获取html元素</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body === body);             <span class="comment">//返回比较结果 true</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement === html);   <span class="comment">//返回比较结果 true</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong><em>利用Element对象的方法</em></strong></p><table><thead><tr><th align="center">Element对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">getElementsByClassName</td><td align="center">返回某个元素内具有指定class的元素</td></tr><tr><td align="center">getElementsByTagName</td><td align="center">返回某个元素内具有指定tag的元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JQuery<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> var lis = document.getElementById(&#x27;ul&#x27;).getElementsByTagName(&#x27;li&#x27;);</span><br><span class="line"> console.log(lis);</span><br></pre></td></tr></table></figure><blockquote><p>通过document对象或者Element对象调用getElementsByClassName()方法、getElementsByTagName()方法、children属性等返回的对象集合，实际上是一个<strong>HTMLCollection对象</strong>;<br>document对象调用getElementsByName()方法在Chrom浏览器中返回的是<strong>NodeList对象</strong>，IE11返回的是HTMLCOllection对象。<br>HTMLCollection用于元素操作，NodeList用于节点操作</p></blockquote><h3 id="更改元素内容"><a href="#更改元素内容" class="headerlink" title="更改元素内容"></a>更改元素内容</h3><table><thead><tr><th align="center">Element对象的属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>innerHTML</strong></td><td align="center">设置或返回元素开始和结束标签之间的HTML</td></tr><tr><td align="center">innerText(不推荐)</td><td align="center">设置或返回元素中去除所有标签的内容</td></tr><tr><td align="center">textContent</td><td align="center">设置或者返回指定节点的文本内容</td></tr></tbody></table><table><thead><tr><th align="center">document对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">document.write()</td><td align="center">向文档写入指定的内容</td></tr><tr><td align="center">document.writeln()</td><td align="center">向文档写入指定的内容后并换行</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//html代码</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//JS代码实现</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">var str=&#x27;<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;;</span></span></span><br><span class="line">div.innerHTML=str;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更改元素属性"><a href="#更改元素属性" class="headerlink" title="更改元素属性"></a>更改元素属性</h3><pre><code>    ele.setAttribute(&#39;属性名&#39;,&#39;属性值&#39;);</code></pre><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setAttribute(name, value)</td><td align="center">设置或者改变指定属性的值</td></tr><tr><td align="center">getAttribute(name)</td><td align="center">返回指定元素的属性值</td></tr><tr><td align="center">removeAttribute(name)</td><td align="center">从元素中删除指定的属性</td></tr></tbody></table><blockquote><p>利用<strong>attributes属性</strong>可以获取一个HTML元素的所有属性，以及所有属性的个数length</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>php<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//获得节点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>)[<span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">      <span class="comment">//删除属性1</span></span></span><br><span class="line"><span class="javascript">      child.removeAttribute(<span class="string">&#x27;class&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//删除属性2</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> attr = child.getAttributeNode(<span class="string">&#x27;class&#x27;</span>);</span></span><br><span class="line">      child.removeAttributeNode(attr);</span><br><span class="line"><span class="javascript">      <span class="comment">//删除节点</span></span></span><br><span class="line">      child.parentNode.removeChild(child);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;gray&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;thick&#x27;</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span>test word.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;当前属性个数：&quot;</span>  + ele.attributes.length);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加属性 -- 实现和第12行同样的效果（二者留其一即可）</span></span></span><br><span class="line"><span class="javascript">        ele.setAttribute(<span class="string">&#x27;align&#x27;</span>, <span class="string">&#x27;center&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ele.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ele.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;thick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//移除属性</span></span></span><br><span class="line"><span class="javascript">        ele.removeAttribute(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更改元素样式"><a href="#更改元素样式" class="headerlink" title="更改元素样式"></a>更改元素样式</h3><pre><code>    ele.style.样式名:值;</code></pre><table><thead><tr><th align="center">常见style属性操作样式名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">background</td><td align="center">设置或返回元素的背景属性</td></tr><tr><td align="center">backgroundColor</td><td align="center">设置或返回元素的背景色</td></tr><tr><td align="center">display</td><td align="center">设置或返回元素的显示类型</td></tr><tr><td align="center">height</td><td align="center">设置或返回元素的高度</td></tr><tr><td align="center">left</td><td align="center">设置或返回定位元素的左部位置</td></tr><tr><td align="center">textAlign</td><td align="center">设置或返回文本的水平对齐方式</td></tr><tr><td align="center">textDecoration</td><td align="center">设置或返回文本的修饰</td></tr><tr><td align="center">textIndent</td><td align="center">设置或返回文本第一行的缩进</td></tr></tbody></table><blockquote><p>在操作样式名称时，需要去掉CSS样式名里的中横线”-“,并将第二个英文首字母大写<br>例如background-color，需要修改为：backgroundColor</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.gray</span>&#123;<span class="attribute">background</span>:<span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="css">     <span class="selector-id">#thick</span>&#123;<span class="attribute">font-weight</span>:bolder;&#125;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>test word.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">&quot;当前属性个数：&quot;</span>  + ele.attributes.length);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">     ele.style.textAlign = <span class="string">&#x27;center&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     ele.style.background = <span class="string">&#x27;#ccc&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     ele.style.fontWeight = <span class="string">&#x27;bolder&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// //添加属性 -- 实现和第12行同样的效果（二者留其一即可）</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.setAttribute(&#x27;align&#x27;, &#x27;center&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.setAttribute(&#x27;class&#x27;, &#x27;gray&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.setAttribute(&#x27;id&#x27;, &#x27;thick&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// //移除属性</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.removeAttribute(&#x27;id&#x27;);</span></span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><p>由于一个元素的类选择器可以有多个，可以利用“div元素对象.classList”的方式，获取类选择器列表。</p><table><thead><tr><th align="center">classList方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">add()</td><td align="center">可以给元素添加类名，一次只能添加一个</td></tr><tr><td align="center">remove()</td><td align="center">可以将元素的类名删除，一次只能删除一个</td></tr><tr><td align="center">toggle()</td><td align="center">切换元素的样式，若元素之前没有指定名称的样式则添加，如果有则移除</td></tr><tr><td align="center">item()</td><td align="center">根据接收的数字索引参数，获取元素的类名</td></tr><tr><td align="center">contains</td><td align="center">判断元素是否包含指定名称的样式，若包含则返回true，否则返回false</td></tr></tbody></table><blockquote><p>可以通过classList的属性length获取元素类名的个数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar bar1&quot;</span>&gt;</span>bar1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.ys</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mydiv=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(mydiv.classList.length);  <span class="comment">//获得元素的所有类名</span></span></span><br><span class="line"><span class="javascript">mydiv.classList.add(<span class="string">&quot;ys&quot;</span>);    <span class="comment">//添加样式</span></span></span><br><span class="line"><span class="javascript">mydiv.classList.remove(<span class="string">&quot;ys&quot;</span>); <span class="comment">//删除样式s</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签栏切换效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-box</span>&#123;<span class="attribute">width</span>:<span class="number">383px</span>;<span class="attribute">margin</span>:<span class="number">10px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">border-top</span>:<span class="number">2px</span> solid <span class="number">#206F96</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head</span>&#123;<span class="attribute">height</span>:<span class="number">31px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head-div</span>&#123;<span class="attribute">width</span>:<span class="number">95px</span>;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">float</span>:left;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">border-right</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">background</span>:<span class="number">#206F96</span>;<span class="attribute">line-height</span>:<span class="number">30px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">cursor</span>:pointer;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head</span> <span class="selector-class">.current</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head-r</span>&#123;<span class="attribute">border-right</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-body-div</span>&#123;<span class="attribute">display</span>:none;<span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-body</span> <span class="selector-class">.current</span>&#123;<span class="attribute">display</span>:block;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div current&quot;</span>&gt;</span>标签一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div&quot;</span>&gt;</span>标签二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div&quot;</span>&gt;</span>标签三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div tab-head-r&quot;</span>&gt;</span>标签四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--jkdjfk?--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div current&quot;</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div&quot;</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div&quot;</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div&quot;</span>&gt;</span> 4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取标签栏的所有标签元素对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tabs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;tab-head-div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取标签栏的所有内容对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;tab-body-div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 遍历标签的元素对象,为每个标签元素对象添加鼠标滑过事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> tabs</span>)</span>&#123;  <span class="comment">//遍历</span></span></span><br><span class="line"><span class="javascript">            tabs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//加事件</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j <span class="keyword">in</span> tabs</span>)</span>&#123;  <span class="comment">//再次遍历</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">if</span>(<span class="params">tabs[j]==<span class="built_in">this</span></span>)</span>&#123;  <span class="comment">//判断当前，加current</span></span></span><br><span class="line"><span class="javascript">                        tabs[j].classList.add(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        divs[j].classList.add(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//非当前，去current</span></span></span><br><span class="line"><span class="javascript">                        tabs[j].classList.remove(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        divs[j].classList.remove(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/0d8b8e41bf64e9a5cfa7745cceabac11.png"></p><h2 id="DOM节点操作"><a href="#DOM节点操作" class="headerlink" title="DOM节点操作"></a>DOM节点操作</h2><ul><li>文档中的所有内容，称为节点。</li><li>根据作用，划分为：标签节点、文本节点和属性节点。</li></ul><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><pre><code>    document.getElementById（）    element.firstChild()    element.lastChild()    element.parentNode()    element.childNodes()</code></pre><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>firstChild</td><td>访问当前节点的首个子节点</td></tr><tr><td>lastChild</td><td>访问当前节点的最后一个子节点</td></tr><tr><td>nodeName</td><td>访问当前节点名称</td></tr><tr><td>nodeValue</td><td>访问当前节点的值</td></tr><tr><td>nextSibiling</td><td>返回同ff一树层级中指定节点之后紧跟的节点（下一个兄弟）</td></tr><tr><td>previousSibling</td><td>返回同ff一树层级中指定节点的前一个节点（前一个兄弟）</td></tr><tr><td>parentNode</td><td>访问当前元素节点的父节点</td></tr><tr><td>childNodes</td><td>访问当前元素节点的所有子节点集合（含回车符，返回NodeList）</td></tr></tbody></table><blockquote><p>childNodes属性用于节点操作，返回NdeList对象的集合，包括回车符、文本节点等其他类型的节点</p><p>children属性用于元素操作，返回HTMLCollection对象的集合，不包括文本节点等其他类型的节点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>BOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ul1&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;1--nodeName--&quot;</span> + ul1.nodeName);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;2--nodeValue--&quot;</span> + ul1.nodeValue);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> txt1 = ul1.firstChild;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3--nodeName--&quot;</span> + txt1.nodeName);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;4--nodeValue--&quot;</span> + txt1.nodeValue);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li1 = txt1.nextSibling;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;5--nodeName--&quot;</span> + li1.nodeName);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;6--nodeValue--&quot;</span> + li1.nodeValue);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> txtJS = li1.firstChild.nodeValue;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;7--txtJS--&quot;</span> + txtJS);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;8--&quot;</span> + li1.nextSibling.nodeName);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;9--&quot;</span> + ul1.childNodes.length);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;10--&quot;</span> + ul1.children.length);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点追加"><a href="#节点追加" class="headerlink" title="节点追加"></a>节点追加</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">document.createElement()</td><td align="center">创建元素节点</td></tr><tr><td align="center">document.createTextNode()</td><td align="center">创建文本节点</td></tr><tr><td align="center">document.createAttribute()</td><td align="center">创建属性节点</td></tr><tr><td align="center">appendChild()</td><td align="center">在指定元素的子节点列表的末尾添加一个节点</td></tr><tr><td align="center">insertBefore()</td><td align="center">为当前节点增加一个子节点（插入到指定子节点之后）</td></tr><tr><td align="center">getAttributeNode()</td><td align="center">返回指定名称的属性节点</td></tr><tr><td align="center">setAttributeNode()</td><td align="center">设置或者改变名称的属性节点</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span>Hello JS!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//JS实现</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h2 = <span class="built_in">document</span>.createElement(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">&#x27;hello JS&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> attr = <span class="built_in">document</span>.createAttribute(<span class="string">&#x27;algin&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        attr.value = <span class="string">&#x27;center&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line">        h2.setAttributeNode(attr);</span><br><span class="line">        h2.appendChild(text);</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(h2);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul><li>删除节点使用<code>removeChild()</code>和<code>removeAttributeNode()</code>实现，它们的返回值是被移出的元素节点或属性节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.strong</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-weight</span><span class="selector-pseudo">:bolder</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;strong&quot;</span>&gt;</span>UI<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//删除第3个li的文本</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li3 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>)[<span class="number">2</span>];  <span class="comment">//获得元素 li</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> attr = li3.getAttributeNode(<span class="string">&#x27;class&#x27;</span>);  <span class="comment">//通过li获得其名称为class的属性节点</span></span></span><br><span class="line"><span class="javascript">        li3.removeAttributeNode(attr); <span class="comment">//删除li3的属性节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//删除第3个li</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line">        ul.removeChild(li3);</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折叠菜单"><a href="#折叠菜单" class="headerlink" title="折叠菜单"></a>折叠菜单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:14px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#nav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span><span class="selector-pseudo">:25px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#336699</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>:<span class="selector-id">#888</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#336699</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>:<span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;showmenu(&#x27;1&#x27;)&quot;</span>&gt;</span>Ajax下载<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 探究：文档末 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;showmenu(&#x27;2&#x27;)&quot;</span>&gt;</span>JQuery下载<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showmenu</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span> + id);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> menu = <span class="built_in">document</span>.getElementById(<span class="string">&quot;menu&quot;</span> + id);</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">list.style.display==<span class="string">&#x27;none&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                list.style.display=<span class="string">&#x27;block&#x27;</span>;  <span class="comment">//用元素操作：样式</span></span></span><br><span class="line"><span class="javascript">                menu.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;title1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                list.style.display=<span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                menu.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;title&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/91fd175a02f7b27dded211fe6cb07bf1.png"></p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><ul><li>事件：用户行为，如单击、鼠标移动等；</li><li>事件处理程序：对事件进行处理的代码；</li><li>事件驱动式：侦测到用户行为、执行事件处理程序的过程；</li><li>事件流：事件传播的过程（捕获+冒泡）<ol><li>事件捕获方式（网景）<br>事件流传播的顺序应该是从DOM树的根节点到发生事件的元素节点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/b315bc6e374e49e06599e3358da1c234.png"></li><li>事件冒泡方式（微软）<br>事件流传播的顺序应该是从发生事件的元素节点到DOM树的根节点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/f8841c573e31a54e16e3e49579b65763.png"></li></ol></li></ul><h2 id="事件绑定方式"><a href="#事件绑定方式" class="headerlink" title="事件绑定方式"></a>事件绑定方式</h2><ol><li>行内绑定式<br> 事件处理程序中this关键字用于指向window对象<pre><code>     &lt;标签名 事件=&quot;事件的处理程序&quot;&gt;</code></pre></li><li>动态绑定式<br> 事件处理程序中this关键字用于指向当前正在操作的DOM元素对象<pre><code>     DOM元素对象.事件=事件的处理程序</code></pre></li><li>事件监听<br> 事件监听：可以为一个事件添加多个事件处理程序。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">DOM对象.addEventListener(type,callback,[capture]);</span><br><span class="line">type：事件类型 </span><br><span class="line">callback：表示事件的处理程序</span><br><span class="line">capture：</span><br><span class="line">默认false表示在冒泡阶段完成事件处理 </span><br><span class="line">true表示在捕获阶段完成事件的处理</span><br><span class="line">*/</span><br><span class="line">var div=document.getElementById(&#x27;div&#x27;);</span><br><span class="line">div.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">console.log(&quot;one&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">div.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">console.log(&quot;two&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2></li></ol><ul><li>在Javascript中，当发生事件时，都会产生一个<strong>事件对象event</strong>，这个对象中包含着所有与事件有关的信息。</li><li>获取事件对象<pre><code>  btn.onclick=function(e)&#123;      var event = e || window.event; //e为现版本 window.event为早期版本      console.log(event);  &#125;</code></pre></li></ul><p>补充：</p><ul><li>假false：undefined、null、NaN、0、空串</li><li>真true：其它都为真</li><li>真前：true||任何值，都返回前面的值</li><li>假后：false||任何值，都返回后面的值</li></ul><table><thead><tr><th align="center">事件对象常用属性/方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">返回当前事件的类型，如click</td></tr><tr><td align="center">target</td><td align="center">返回触发此事件的元素（事件的目标节点）</td></tr><tr><td align="center">stopPropagation()</td><td align="center">阻止事件冒泡</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">red</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;d1&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击我&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;div div div&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;btn btn btn&quot;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="comment">//type  类型    target目标   event.stopPropagation()阻止冒泡</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">//得到事件对象</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log( event.type );   <span class="comment">//--click</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           console.log( event.target );   //-- <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击我&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">           event.stopPropagation();  <span class="comment">//-- btn</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">load</td><td align="center">当页面载入完毕后触发</td></tr><tr><td align="center">unload</td><td align="center">当页面关闭时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--  &lt;script&gt;</span></span><br><span class="line"><span class="comment">        document.getElementById(&#x27;demo&#x27;).onclick = function()&#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;单击&#x27;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.getElementById(<span class="string">&#x27;demo&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;单击&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h2><p>焦点事件多用于表单验证功能</p><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">focus</td><td align="center">当获得焦点时触发（不会冒泡）</td></tr><tr><td align="center">blur</td><td align="center">当失去焦点时（不会冒泡）</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>验证用户名和密码是否为空<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#ddd</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">30px</span>;<span class="attribute">width</span>:<span class="number">400px</span>;<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="attribute">text-align</span>:center;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.btn</span>&#123;<span class="attribute">width</span>:<span class="number">180px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">background</span>:<span class="number">#3388ff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.ipt</span>&#123;<span class="attribute">width</span>:<span class="number">260px</span>;<span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">2px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tips</span>&#123;<span class="attribute">width</span>:<span class="number">440px</span>;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">margin</span>:<span class="number">5px</span> auto;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">color</span>:red;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">display</span>:none;<span class="attribute">line-height</span>:<span class="number">30px</span>;<span class="attribute">padding-left</span>:<span class="number">20px</span>;<span class="attribute">font-size</span>:<span class="number">13px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tips&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;user&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pass = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pass&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tips = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tips&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        user.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">user.value===<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                tips.innerHTML = <span class="string">&#x27;用户名不能为空&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                tips.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        pass.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">user.value===<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                tips.innerHTML = <span class="string">&#x27;密码不能为空&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                tips.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--  &lt;script&gt;</span></span><br><span class="line"><span class="comment">      window.onload = function() &#123;</span></span><br><span class="line"><span class="comment">        addBlur(getElement(&#x27;user&#x27;));      // 检测id为user的元素失去焦点后，value值是否为空</span></span><br><span class="line"><span class="comment">        addBlur(getElement(&#x27;pass&#x27;));      // 检测id为pass的元素失去焦点后，value值是否为空</span></span><br><span class="line"><span class="comment">      &#125;;</span></span><br><span class="line"><span class="comment">      function getElement(obj) &#123;          // 根据id获取指定元素</span></span><br><span class="line"><span class="comment">        return document.getElementById(obj);</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      function addBlur(obj) &#123;    // 为指定元素添加失去焦点事件</span></span><br><span class="line"><span class="comment">        obj.onblur = function() &#123;</span></span><br><span class="line"><span class="comment">          isEmpty(this);</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      function isEmpty(obj) &#123;    // 检测表单是否为空</span></span><br><span class="line"><span class="comment">        if (obj.value === &#x27;&#x27;) &#123;</span></span><br><span class="line"><span class="comment">          getElement(&#x27;tips&#x27;).style.display = &#x27;block&#x27;;</span></span><br><span class="line"><span class="comment">          getElement(&#x27;tips&#x27;).innerHTML = &#x27;注意：输入内容不能为空! &#x27;;</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">          getElement(&#x27;tips&#x27;).style.display = &#x27;none&#x27;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/b1fc049c00843685e04a843150a47ea2.png"></p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">click</td><td align="center">单击(动态绑定用onclick)</td></tr><tr><td align="center">dblclick</td><td align="center">双击</td></tr><tr><td align="center">mouseover/mouseout</td><td align="center">鼠标进入/离开</td></tr><tr><td align="center">change</td><td align="center">当内容发生改变时触发，一般用于select对象</td></tr><tr><td align="center">mousedown/mouseup</td><td align="center">按下 / 松开 任意鼠标键</td></tr><tr><td align="center">mousemove</td><td align="center">在元素内当鼠标移动时持续触发</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/3893d35aef54b8c820472f5c8619fd76.png"></p><table><thead><tr><th align="center">位置属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">clientX/clinetY</td><td align="center">触发点相对浏览器可视区域左上角距离，不随页面滚动而变化（所有浏览器）</td></tr><tr><td align="center">pageX / pageY</td><td align="center">触发点相对文档区域左上角距离，随页面滚动而滚动（IE6~8不兼容）</td></tr><tr><td align="center">screenX / screenY</td><td align="center">触发点位于屏幕的距离，不随页面滚动而变化</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mouse</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">background</span>:<span class="number">#ffd965</span>;<span class="attribute">width</span>:<span class="number">40px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">border-radius</span>:<span class="number">20px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mouse&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mouse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取事件对象的兼容性</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//鼠标在页面上的位置</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageX = event.pageX ||</span></span><br><span class="line"><span class="javascript">                  event.clientX + <span class="built_in">document</span>.documentElement.scrollLeft;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageY = event.pageY ||</span></span><br><span class="line"><span class="javascript">                  event.clientY + <span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算div应该显示的位置</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> targetX = pageX - mouse.offsetWidth/<span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> targetY = pageY - mouse.offsetHeight / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//在鼠标位置显示div</span></span></span><br><span class="line"><span class="javascript">            mouse.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            mouse.style.left = targetX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            mouse.style.top = targetY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/8a51609ea5ea1dd95937bc2e0e1125b3.png"></p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">keypress</td><td align="center">键盘非功能键按下时触发</td></tr><tr><td align="center">keydown</td><td align="center">键盘所有键键按下时触发</td></tr><tr><td align="center">keyup</td><td align="center">键盘按键弹起时触发</td></tr></tbody></table><blockquote><p>keypress事件保存的按键值是ASCII码，<br>keydown和keyup事件保存的按键值是虚拟键码keycode。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/ecac96b22b955aee35cf5b9814b25cbe.png"><br>常用的keycode</p><ul><li> 回车：13</li><li>左上右下：37、38、39、40</li><li>Tab：9</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">按下键盘的enter键，下一个文本框获得焦点。 </span><br><span class="line">第一步：查找页面元素</span><br><span class="line">第二步：为每一个input添加“键盘按下”事件</span><br><span class="line">第三步：判断按下的是否为Enter键</span><br><span class="line">第四步：如果是enter键，则寻找当前input框</span><br><span class="line">第五步：根据当前，计算下一个input框的index</span><br><span class="line">第六步：下一个input框获得焦点</span><br><span class="line">*/</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>按Enter键切换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>电子邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>个人描述：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为四个input添加键盘事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 查找页面元</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;inputs.length;i++</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            inputs[i].onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//                    处理：如果按下的是回车键，</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                    下一个输入框（当前—遍历，？==this）获得焦点（focus）</span></span></span><br><span class="line"><span class="javascript">                e = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">if</span>(<span class="params">e.keyCode==<span class="number">13</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j=<span class="number">0</span>;j&lt;inputs.length;j++</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="function"><span class="title">if</span>(<span class="params">inputs[j]==<span class="built_in">this</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> index = j+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 边界处理</span></span></span><br><span class="line"><span class="javascript">                            <span class="function"><span class="title">if</span>(<span class="params">index==inputs.length</span>)</span>&#123;</span></span><br><span class="line">                                index = 0;</span><br><span class="line">                            &#125;</span><br><span class="line">                            inputs[index].focus();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// //查找页面元素</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// var inputs = document.getElementsByTagName(&#x27;input&#x27;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// //为每一个input添加“键盘按下”事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// for(var i=0;i&lt;inputs.length;i++)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     inputs[i].onkeydown = function(e)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         //判断按下的是否为Enter键</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         var e = e || window.event;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         if(e.keyCode===13)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             //是enter键，则寻找当前input框</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             for(var j=0;j&lt;inputs.length;j++)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                 if(inputs[j]===this)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     //console.log(j);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     //下一个input框的index</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     var index = ++j;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     if(index==inputs.length)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                         index=0;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     console.log(index);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     //下一个input框获得焦点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     inputs[index].focus();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                 &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/7d6946a12612945ad0b169c50d4f7de8.png"></p><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发条件</th></tr></thead><tbody><tr><td align="center">submit</td><td align="center">当表单提交时触发</td></tr><tr><td align="center">reset</td><td align="center">当表单重置时触发</td></tr></tbody></table><p>这两个事件的返回值若是false则会取消默认操作，否则将执行默认操作</p><h2 id="图片放大特效"><a href="#图片放大特效" class="headerlink" title="图片放大特效"></a>图片放大特效</h2><p>素材：<br>    big.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/27526e27bf54e49ae8ca76b8aca0b014.png"><br>    small.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/7afa6108f3aefd19e34000981327ad18.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">（1）页面构成</span><br><span class="line">大div：包括左div+右div</span><br><span class="line">左div：包含图片+div(遮罩--移动、显示或隐藏)</span><br><span class="line">右div：包含 图片（显示或隐藏）</span><br><span class="line">（2）JS实现步骤</span><br><span class="line">第一步：鼠标经过与移出，遮罩和大图的显示与隐藏</span><br><span class="line">第二步：遮罩的移动，通过为小图添加鼠标移动事件来实现</span><br><span class="line">第三步：大图的显示区域</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">350px</span>;<span class="attribute">height</span>:<span class="number">350px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">position</span>:relative&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.big</span>&#123;<span class="attribute">width</span>:<span class="number">400px</span>;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">360px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">display</span>:none&#125; <span class="comment">/* overflow:hidden是当元素内的内容溢出的时候使它隐藏溢出的部分，即超出部分隐藏 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.mask</span>&#123;<span class="attribute">width</span>:<span class="number">175px</span>;<span class="attribute">height</span>:<span class="number">175px</span>;<span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>,.<span class="number">4</span>);<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">cursor</span>:move;<span class="attribute">display</span>:none&#125;<span class="comment">/*cursor:move 光标形状*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.small</span>&#123;<span class="attribute">position</span>:relative&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:top&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#bigBox</span> <span class="selector-tag">img</span>&#123;<span class="attribute">position</span>:absolute&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;smallBox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/small.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mask&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bigBox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;bigImg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/big.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一步：鼠标经过与移出，遮罩和大图的显示与隐藏 -- 遮罩默认在小图的左上角</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>)</span>&#123;  <span class="comment">//定义函数，根据id值获取元素对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;smallBox&#x27;</span>).onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;jirnu &quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;bigBox&#x27;</span>).style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;smallBox&#x27;</span>).onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;bigBox&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="comment">//第二步：遮罩的移动，通过为小图添加鼠标移动事件来实现</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;smallBox&#x27;</span>).onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算鼠标在页面中的坐标</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageX = event.pageX || event.clientX + dodument.documentElement.scroll;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageY = event.pageY || event.clientY + <span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算遮罩的位置:x = 鼠标位置的x - 遮罩宽度的一半， y类似</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> maskX = pageX - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> maskY = pageY - $(<span class="string">&#x27;mask&#x27;</span>).offsetHeight / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//遮罩边界处理 -- 遮罩不能移动到小图以外的位置</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">maskX&lt;<span class="number">0</span></span>)</span>&#123;  <span class="comment">//左边界</span></span></span><br><span class="line">                maskX = 0;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(maskX&gt;$(<span class="string">&#x27;smallBox&#x27;</span>).offsetWidth - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth)&#123;<span class="comment">//右边界</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//修改遮罩的显示位置 -- 移动</span></span></span><br><span class="line"><span class="javascript">                maskX = $(<span class="string">&#x27;smallBox&#x27;</span>).offsetWidth - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">maskY&lt;<span class="number">0</span></span>)</span>&#123;  <span class="comment">//上边界</span></span></span><br><span class="line">                maskY = 0;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(maskY&gt;$(<span class="string">&#x27;smallBox&#x27;</span>).offsetHeight - $(<span class="string">&#x27;mask&#x27;</span>).offsetHeight)&#123;  <span class="comment">//下边界</span></span></span><br><span class="line"><span class="javascript">                maskY=$(<span class="string">&#x27;smallBox&#x27;</span>).offsetHeight - $(<span class="string">&#x27;mask&#x27;</span>).offsetHeight;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.left = maskX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.top = maskY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//第三步：大图的显示区域 -- 按照遮罩在小图中的区域，显示大图中相应区域 -- 比例计算</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 按照比例移动大图 大图片能够移动的总距离 = 大图的宽度 - 大盒子的宽度</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> bigImgToMove = $(<span class="string">&#x27;bigImg&#x27;</span>).offsetWidth - $(<span class="string">&#x27;bigBox&#x27;</span>).offsetWidth;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 遮罩能够移动的总距离 = 小盒子的宽度 - 遮罩的宽度</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> maskToMove = $(<span class="string">&#x27;smallBox&#x27;</span>).offsetWidth - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 计算移动比例rate = 大图片能够移动的总距离/遮罩能够移动的总距离</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> rate = bigImgToMove / maskToMove;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 设置大图片当前的位置 = rate * 遮罩当前的位置</span></span></span><br><span class="line"><span class="javascript">           $(<span class="string">&#x27;bigImg&#x27;</span>).style.left = - rate * maskX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">           $(<span class="string">&#x27;bigImg&#x27;</span>).style.top = - rate * maskY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/ecb6e3c873d1493ef7af732291722a28.png"></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://ihateregex.io/">正则表达式查询网站I Hate Regex</a></p><ol><li><p>什么是正则表达式<br>正则表达式（Regular Expression，简称regexp）</p><ul><li>概念：是一种描述字符串结构的语法规则（描述字符串特征）</li><li>作用：用于验证各种字符串是否匹配这个特征。</li><li>应用：在项目开发中，手机号码指定位数的隐藏、数据采集、敏感词的过滤以及表单的验证等功能，都可以利用正则表达式来实现。</li></ul></li><li><p>获取正则对象</p><ul><li>字面量方式<pre><code>  /pattern/flags  例如：/abc/gi</code></pre></li><li>RegExp对象构造函数方式<pre><code>  new RegExp(pattern[,flags])  RegExp(pattern[,flags])  //示例  var str=&#39;Abc123abc456abc&#39;;  var reg=new RegExp(&#39;abc&#39;,&#39;gi&#39;);  console.log(str.match(reg));</code></pre>pattern：模式文本，由元字符和文本字符（普通字符）组成。<br>flags：模式修饰符。<table><thead><tr><th align="center">模式符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">g</td><td align="center">用于在目标字符串中实现全局匹配（多次）</td></tr><tr><td align="center">i</td><td align="center">忽略大小写</td></tr><tr><td align="center">m</td><td align="center">实现多行匹配</td></tr><tr><td align="center">u</td><td align="center">以Unicode编码执行正则表达式</td></tr><tr><td align="center">y</td><td align="center">粘性匹配，仅匹配目标字符串中此正则表达式的lastindex属性指示的索引</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开始的位置</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结束的位置</td></tr></tbody></table></li></ul></li><li><p>使用正则对象</p><ul><li>RegExp对象提供的<code>exec()</code>方法，一次仅返回一个匹配结果，匹配成功返回数组，否则返回null<pre><code>  var str=&#39;Abc123abc456abc&#39;;  var reg=/abc/gi;  console.log(reg.exec(str)); //返回Abc</code></pre></li><li>String对象提供的<code>match()</code>方法，匹配出所有符合要求的内容，匹配成功返回数组，否则返回false<pre><code>  var str=&#39;Abc123abc456abc&#39;;  var reg=/abc/gi;  console.log(str.match(reg)); //返回Abc、abc、abc</code></pre></li></ul></li><li><p>转义字符的处理<br>使用反斜线对特殊字符进行转义</p><pre><code> var str=&#39;^abc\\1.23*edf$&#39;; var reg1=/\./; console.log(str.match(reg1)); var reg2=new RegExp(&#39;\\.&#39;); console.log(str.match(reg2));</code></pre></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;tips&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkname()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkname</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/admin/gi</span>;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">!(username.match(reg)==<span class="literal">null</span>)</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tips&#x27;</span>).innerHTML = <span class="string">&#x27;用户名不能包含admin&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tips&#x27;</span>).innerHTML = <span class="string">&#x27;注册成功&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/8dd395d313c59a501ded337ff5d2a43c.png"></p><h2 id="字符类别与集合"><a href="#字符类别与集合" class="headerlink" title="字符类别与集合"></a>字符类别与集合</h2><ul><li><strong>字符类别</strong><br>使正则表达式更加简洁，便于阅读。</li></ul><table><thead><tr><th align="center">字符</th><th align="center">含义</th><th align="center">字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配除“\n”外的任何单个字符</td><td align="center">\f</td><td align="center">匹配一个换页符（form-feed)</td></tr><tr><td align="center">\d</td><td align="center">匹配任意一个阿拉伯数字</td><td align="center">\D</td><td align="center">匹配任意一个非阿拉伯数字字符</td></tr><tr><td align="center">\s</td><td align="center">匹配一个空白符，包括空格、制表符、换页符、换行符等</td><td align="center">\S</td><td align="center">匹配一个非空白符</td></tr><tr><td align="center">\w</td><td align="center">匹配任意一个字母（大小写）、数字和下划线</td><td align="center">\W</td><td align="center">匹配任意一个非“字母（大小写）、数字和下划线”的字符</td></tr></tbody></table><ul><li><strong>字符集合</strong><br>正则表达式中的”[]”可以实现一个字符集合</li></ul><table><thead><tr><th align="center">pattern</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[cat]</td><td align="center">匹配字符集合中的任意一个字符c、a、t</td></tr><tr><td align="center">[^cat]</td><td align="center">匹配除c、a、t以外的字符</td></tr><tr><td align="center">[B-Z]</td><td align="center">匹配字母B~Z范围内的字符</td></tr><tr><td align="center">[^a-z]</td><td align="center">匹配字母a~z范围外的字符</td></tr><tr><td align="center">[a-zA-Z0-9]</td><td align="center">匹配大小写字母和0~9范围内的字符</td></tr><tr><td align="center">[\u4e00-\u9fa5]</td><td align="center">匹配任意一个中文字符</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>限定输入内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123;<span class="attribute">width</span>: <span class="number">40px</span>;<span class="attribute">border-color</span>: <span class="number">#bbb</span>;<span class="attribute">height</span>: <span class="number">25px</span>;<span class="attribute">font-size</span>: <span class="number">14px</span>;<span class="attribute">border-radius</span>: <span class="number">2px</span>;<span class="attribute">outline</span>: <span class="number">0</span>;<span class="attribute">border</span>: <span class="number">#ccc</span> <span class="number">1px</span> solid;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;<span class="attribute">margin-bottom</span>: <span class="number">15px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#56b4ef</span>; <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">05</span>),<span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>,<span class="number">168</span>,<span class="number">236</span>,.<span class="number">6</span>); <span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#999</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>,  <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#c2c2c2</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123;<span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">width</span>: <span class="number">80px</span>; <span class="attribute">background</span>: <span class="number">#4393C9</span>; <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">font</span>:<span class="number">14px</span> bolder; &#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">      年份 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span>&gt;</span></span><br><span class="line">      月份 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查询&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">checkYear</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!obj.value.match(<span class="regexp">/^\d&#123;4&#125;$/</span>)) &#123;</span></span><br><span class="line"><span class="javascript">          obj.style.borderColor = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          result.innerHTML = <span class="string">&#x27;输入错误，年份为4位数字表示&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        result.innerHTML = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">checkMonth</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!obj.value.match(<span class="regexp">/^((0?[1-9])|(1[012]))$/</span>)) &#123;</span></span><br><span class="line"><span class="javascript">          obj.style.borderColor = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          result.innerHTML = <span class="string">&#x27;输入错误，月份为1~12之间&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        result.innerHTML = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>);             <span class="comment">// &lt;form&gt;元素对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);         <span class="comment">// &lt;div&gt;元素对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);    <span class="comment">// &lt;input&gt;元素集合</span></span></span><br><span class="line"><span class="javascript">      form.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> checkYear(inputs.year) &amp;&amp; checkMonth(inputs.month);</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      inputs.year.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.style.borderColor = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      inputs.month.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.style.borderColor = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.trim) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      inputs.year.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.value.trim();</span></span><br><span class="line"><span class="javascript">        checkYear(<span class="built_in">this</span>);</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      inputs.month.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.value.trim();</span></span><br><span class="line"><span class="javascript">        checkMonth(<span class="built_in">this</span>);</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/9ea4277327e36652b380f6f9a39f5398.png"></p><h2 id="字符限定与分组"><a href="#字符限定与分组" class="headerlink" title="字符限定与分组"></a>字符限定与分组</h2><ul><li>限定符<pre><code>  var reg=/\d&#123;6&#125;/gi; //匹配6个连续出现的数字</code></pre></li></ul><table><thead><tr><th align="center">限定符</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">?</td><td align="center">匹配前面的字符零次或一次</td><td align="center">ht?t</td></tr><tr><td align="center">+</td><td align="center">匹配前面的字符一次或多次</td><td align="center">bre+ad</td></tr><tr><td align="center">*</td><td align="center">匹配前面的字符零次或多次</td><td align="center">ro*se</td></tr><tr><td align="center">{n}</td><td align="center">匹配前面的字符n次</td><td align="center">hit{2}er</td></tr><tr><td align="center">{n,}</td><td align="center">匹配前面的字符最少n次</td><td align="center">hit{2,}er</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配前面的字符最少n次，最多m次</td><td align="center">fe{0,2}</td></tr></tbody></table><ul><li><p>贪婪与懒惰匹配</p><ol><li><p>贪婪匹配表示匹配尽可能多的字符</p></li><li><p>懒惰匹配表示匹配尽可能少的字符</p></li><li><p>在默认情况下，是贪婪匹配，若想实现懒惰匹配，需在上一个限定符后面加上”?”符号</p><pre><code>  var str=&#39;webWEBWebwEb&#39;;  var reg1=/w.*b/gi;   //贪婪匹配  var reg2=/w.*?b/gi;     //懒惰匹配  console.log(reg1.exec(str));   //webWEBWebwEb 获得最先出现的w到最后出现的b  console.log(reg2.exec(str));   //web 获得最先出现的w到最先出现的b</code></pre></li></ol></li></ul><h2 id="括号字符"><a href="#括号字符" class="headerlink" title="括号字符"></a>括号字符</h2><p>被括号字符“()”括起来的内容，称之为”子表达式“</p><ol><li>改变限定符的作用范围<pre><code> //改变前 正则表达式：catch|er 可匹配的结果：catch、er //改变后 正则表达式：cat(ch|er) 可匹配的结果：catch、cater</code></pre></li><li>分组<pre><code> //分组前 正则表达式：abc&#123;2&#125; 可匹配的结果：abcc //分组后 正则表达式： a(bc)&#123;2&#125; 可匹配的结果：abcbc</code></pre></li><li>捕获<br>将子表达式匹配到的内容存储到系统的缓存区中。<pre><code> var res1 = &#39;1234&#39;.match(/\d\d\d\d/g); console.log(res1); //[&quot;1234&quot;] var res2 = &#39;1234&#39;.match(/(\d)(\d)(\d)(\d)/); console.log(res2); // [&quot;1234&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;] var res3 = &#39;1234&#39;.match(/(\d)(\d)(\d)(\d)/g); console.log(res3);  //[&quot;1234&quot;]</code></pre></li><li>反向引用<br>在正则表达式中，获取存放在缓存区内的子表达式的捕获内容，则可以使用”\n“(n&gt;0)的方式引用<pre><code> \1：第一个子表达式捕获的内容 \2：第二个子表达式捕获的内容 var reg1=/(\d)\1\1/gi; 连续三个相同的数字 var reg2=/(\s)(\s)\1\2/gi; ABAB格式</code></pre></li></ol><h2 id="正则相关方法"><a href="#正则相关方法" class="headerlink" title="正则相关方法"></a>正则相关方法</h2><ol><li>RegExp对象 的test()方法：<br>检测正则表达式与指定的字符串是否匹配，返回true或false。<pre><code> var reg = /([A-Z])([A-Z])\1\2/g; console.log(reg.test(&#39;1234&#39;));    //false     console.log(reg.test(&#39;abab&#39;));    //false console.log(reg.test(&#39;CDCD&#39;));    //true console.log(reg.test(&#39;EfEf&#39;));    //false</code></pre></li><li>String对象的search()方法：<br>可以返回指定模式的子串在字符串首次出现的位置，查找失败返回-1。<pre><code> var str = &#39;123*abc.456&#39;; console.log(str.search(&#39;.*&#39;));       //0     console.log(str.search(/[\.\*]/));   //3</code></pre><blockquote><p>search()方法如果传入一个非正则表达式对象，则会将其转换为正则表达式对象</p></blockquote></li><li>String对象的split()方法<br>用于根据指定的分隔符将一个字符串分割成字符串数组，其分割后的字符串数组中不包括分隔符。<br>当分隔符不只一个时，需要定义正则对象才能够完成字符串的分割操作。<pre><code> var str = &#39;test@123.com&#39;; var reg = /[@\.]/; var split_res = str.split(reg); console.log(split_res);    // 输出结果：(3) [&quot;test&quot;, &quot;123&quot;, &quot;com&quot;]</code></pre></li><li>String对象的replace()方法<br>用 newChar 字符替换字符串中出现的所有 searchChar 字符，并返回替换后的新字符串。<pre><code> var str = &#39;test@123.com&#39;; var str_new= str.replace(‘123’,’163’); console.log(str_new);    // 输出结果：test@163.com</code></pre></li></ol><blockquote><p>replace：获取捕获内容，并对捕获内容进行替换</p></blockquote><pre><code>    var str=&#39;12ab34&#39;;    var reg=/(\d)(\d)/gi;    console.log(str.match(reg));    console.log(str.replace(reg,&#39;*&#39;));  //[&quot;12&quot;,[&quot;34&quot;]]  *ab*</code></pre><blockquote><p>$n:获取第n个字表达式捕获的内容</p></blockquote><pre><code>    var str = &#39;Regular Capture&#39;;    var reg = /(\w+)\s(\w+)/gi;    var newStr = str.replace(reg,&#39;$2 $1&#39;);    console.log(newStr);</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内容查找与替换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">float</span>:left;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">20px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>过滤前内容:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;pre&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;过滤&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>过滤后内容:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;res&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义查找并需要替换的内容规则，[\u4e00-\u9fa5]表示匹配任意中文字符</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="regexp">/(bad)|[\u4e00-\u9fa5]/gi</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pre&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newstr = str.replace(reg, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;res&#x27;</span>).innerHTML = newstr;</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/fba47172672ed97909dab0842fe31f3a.png"></p><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单验证<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;case03.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-head&quot;</span>&gt;</span>填写注册信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span>  <span class="comment">&lt;!-- ----- --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span>&gt;</span>   <span class="comment">&lt;!-- ------- --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名称：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;长度4~12，英文大小写字母&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>密　　码：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;长度6~20，大小写字母、数字或下划线&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;repwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码进行确认&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号码：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;13、14、15、17、18开头的11位手机号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>电子邮箱：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名@域名（域名后缀至少2个字符）&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;case03.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">margin-top</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">font-size</span>:<span class="number">13px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto; <span class="attribute">width</span>: <span class="number">80%</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-head</span>&#123;<span class="attribute">padding</span>:<span class="number">15px</span> <span class="number">20px</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">text-align</span>: center; <span class="attribute">font-size</span>:<span class="number">24px</span>; <span class="attribute">font</span>:bolder;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">th</span>&#123;<span class="attribute">font-weight</span>:normal;<span class="attribute">vertical-align</span>:top;<span class="attribute">padding-top</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:last-child</span>&#123; <span class="attribute">text-align</span>: center;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span>&#123;<span class="attribute">vertical-align</span>:middle;<span class="attribute">font-family</span>:Tahoma,simsun;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,<span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span>&#123;<span class="attribute">border-color</span>: <span class="number">#bbb</span>;<span class="attribute">height</span>: <span class="number">38px</span>;<span class="attribute">font-size</span>: <span class="number">14px</span>;<span class="attribute">border-radius</span>: <span class="number">2px</span>;<span class="attribute">outline</span>: <span class="number">0</span>;<span class="attribute">border</span>: <span class="number">#ccc</span> <span class="number">1px</span> solid;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">350px</span>;<span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;<span class="attribute">margin-bottom</span>: <span class="number">15px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.box-body</span>  <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>, <span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.box-body</span>  <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#56b4ef</span>; <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">05</span>),<span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>,<span class="number">168</span>,<span class="number">236</span>,.<span class="number">6</span>); <span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#999</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>,  <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#c2c2c2</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123;<span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">15px</span>;<span class="attribute">cursor</span>:pointer; <span class="attribute">width</span>:<span class="number">120px</span>; <span class="attribute">height</span>:<span class="number">40px</span>; <span class="attribute">background</span>: <span class="number">#4393C9</span>; <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>; <span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">font</span>:<span class="number">16px</span> bolder;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-class">.error</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#FF3300</span>; <span class="attribute">background</span>: <span class="number">#FFF2E5</span>; <span class="attribute">font-size</span>:<span class="number">10px</span>; <span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">line-height</span>: <span class="number">30px</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>; <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-class">.success</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#01BE00</span>; <span class="attribute">background</span>: <span class="number">#E6FEE4</span>; <span class="attribute">font-size</span>:<span class="number">10px</span>; <span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">line-height</span>: <span class="number">30px</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>; <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">10px</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有input框</span></span><br><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">inputs[<span class="number">0</span>].focus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为每个input框添加失去焦点事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">  inputs[i].onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    inputBlur(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inputBlur</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = obj.name;           <span class="comment">// 获取输入框的name值</span></span><br><span class="line">  <span class="keyword">var</span> val = obj.value;           <span class="comment">// 获取输入框的value值</span></span><br><span class="line">  <span class="keyword">var</span> tips = obj.placeholder;    <span class="comment">// 获取输入框中的提示信息</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// var fu = obj.parentNode;</span></span><br><span class="line">  <span class="comment">// var xiongdi = fu.nextSibling.nextSibling;   //回车会被当成一个文本节点，所以要next两次</span></span><br><span class="line">  <span class="keyword">var</span> tips_obj = obj.parentNode.nextSibling.nextSibling.firstChild;  <span class="comment">// 获取提示信息显示的div元素对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 去掉两端的空白字符</span></span><br><span class="line">  val = val.trim();</span><br><span class="line">  <span class="comment">// 2. 文本框内容为空，给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">    error(tips_obj, <span class="string">&#x27;输入框不能为空&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 获取正则匹配规则和提示信息</span></span><br><span class="line">  <span class="keyword">var</span> reg_msg = getRegMsg(name, tips);</span><br><span class="line">  <span class="comment">// 4. 检测是否否he正则匹配</span></span><br><span class="line">  <span class="keyword">if</span> (reg_msg[<span class="string">&#x27;reg&#x27;</span>].test(val)) &#123;</span><br><span class="line">    <span class="comment">// 匹配成功，显示成功的提示信息</span></span><br><span class="line">    success(tips_obj, reg_msg[<span class="string">&#x27;msg&#x27;</span>][<span class="string">&#x27;success&#x27;</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 匹配失败，显示失败的提示信息</span></span><br><span class="line">    error(tips_obj, reg_msg[<span class="string">&#x27;msg&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据input的name值，设置正则规则及提示信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRegMsg</span>(<span class="params">name, tips</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;username&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^[a-zA-Z]&#123;4,12&#125;$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;用户名输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^\w&#123;6,20&#125;$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;密码输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;repwd&#x27;</span>:</span><br><span class="line">      <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>].value;</span><br><span class="line">      reg = <span class="built_in">RegExp</span>(<span class="string">&quot;^&quot;</span> + con + <span class="string">&quot;$&quot;</span>);</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;两次密码输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;两次输入的密码不一致&#x27;</span>&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;tel&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;手机号码输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;email&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^(\w+(\_|\-|\.)*)+@(\w+(\-)?)+(\.\w&#123;2,&#125;)+$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;邮箱输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;reg&#x27;</span>: reg, <span class="string">&#x27;msg&#x27;</span>: msg&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">obj, msg</span>) </span>&#123;</span><br><span class="line">  obj.className = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">  obj.innerHTML = msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">obj, msg</span>) </span>&#123;</span><br><span class="line">  obj.className = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">  obj.innerHTML = msg + <span class="string">&#x27;，请重新输入&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/4a94c38f802bec0a3ec225449773b4aa.png"></p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><ul><li>Ajax：Asynchronous JavaScript And XML，即<strong>异步JavaScript和XML技术</strong>。</li><li>描述：不是一门新的语言或技术，是由JavaScript、XML、DOM、CSS等多种已有技术组合而成的一种浏览器端技术。</li><li>功能：<strong>用于实现与服务器进行异步交互的功能</strong>。</li><li>传统Web工作流程<br>每当用户触发一个页面HTTP请求，就需要服务器返回一个新的页面<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/594e68fd5921f40c42a89634c094311c.png"></li><li>Ajax工作流程<br>页面通过Ajax对象与服务器进行通信，然后通过DOM操作将返回的结果更新到页面中，整个过程都是在同一个页面中进行的<br>Ajax技术的创新之处在于，改善了传统的“请求-等待-响应-刷新-返回数据”模式，在信息返回之前，用户可以继续自己的操作，当前页面不会因为请求而刷新。这样大大的提高了交互性。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/13af6098b6a7580165ed0f207fc830be.png"></p><ul><li>相较于传统页面，Ajax技术的优势具体有以下几个方面：<ol><li>减轻服务器的负担</li><li>节省带宽</li><li>用户体验更好</li></ol></li></ul><h2 id="PHP服务器"><a href="#PHP服务器" class="headerlink" title="PHP服务器"></a>PHP服务器</h2><ul><li>服务器：若需要网页能被互联网中的其它用户访问，就要将网页发布到服务器上，用户通过网址来访问。</li><li>常用服务器：PHP、Java、Node.js、ASP.NET等</li><li>PHP是一种运行于服务器端的嵌入式脚本编程语言，内置了一个Web服务器。</li><li>PHP开发环境搭建：<ol><li>下载PHP、vc运行库、补丁（可能）<br>进入官网<a href="http://php.net/">http://php.net</a>下载PHP7.3.11版本(可以下最新版本)，得到一个压缩包，并解压到指定目录<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/e9e630ef5310e3350faf7c040c6c23d1.png"></li><li>创建目录<br>创建”<code>D:\web\php7.3</code>“作为PHP的安装目录，创建”<code>D:\web\htdocs</code>“作为站点目录</li><li>启动内置服务器<br>压缩包解压到“D:\web\php7.1”目录下，启动cmd命令行工具，<strong>切换目录到该目录中</strong>，执行以下命令<pre><code>  php -S localhost:8081 -t &quot;D:\web\htdocs&quot;</code></pre>上述命令中，”-S”用于启动内置Web服务器（S为大写），后面接网络地址和端口号，”-t”用于指定站点目录，此处为”D:\web\htdocs”</li><li>常见错误<br>”php“不是内部或外部命令,也不是可运行的程序或批处理文件，这是因为没有配置php的path环境变量。找到php的安装路径(包括压缩包名称)复制新建到path中<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/5463e84058f29b072b863d4561c12f87.png"><br>在cmd命令中php安装目录下下执行<pre><code> php -version</code></pre>显示版本信息即成功，其他情况可能是8081端口号被占用所造成。</li></ol></li></ul><h2 id="Ajax向服务器发送请求"><a href="#Ajax向服务器发送请求" class="headerlink" title="Ajax向服务器发送请求"></a>Ajax向服务器发送请求</h2><p>使用Ajax需要通过XMLHttpRequest构造函数创建Ajax对象。</p><pre><code>    var xhr=new XMLHttpRequest();</code></pre><p>创建完成后就可以使用该对象提供的方法向服务器发送请求。</p><ol><li><p><strong>open()</strong><br>open()方法用于创建一个新的HTTP请求，并指定请求方式、请求URL等。</p><pre><code> open(&#39;method&#39;,&#39;URL&#39;[,asyncFlag[,&#39;username&#39;[,&#39;password&#39;]]]) method：用于指定请求方式，如GET、POST，不区分大小写。 URL：表示请求的地址。 asyncFlag：可选参数，用于指定请求方式，同步请求为false，默认为异步请求true。 userName和password：可选参数，表示HTTP认证的用户名和密码。</code></pre><blockquote><p>同步请求和异步请求的区别在于是否阻塞代码的执行，默认的异步方式是非阻塞的，浏览器端的JS程序不用等待Web服务器的响应，可以继续处理其他事情，而同步则等待Web服务器的响应。</p></blockquote></li><li><p><strong>send()</strong><br>send()方法用于发送请求到Web服务器并接收响应。</p><pre><code> send(content)</code></pre></li><li><p><strong>setRequestHeader()</strong><br>setRequestHeader()方法用于单独指定某个HTTP请求头。</p><pre><code> setRequestHeader(&#39;header&#39;,&#39;value&#39;);</code></pre></li></ol><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><ul><li><p>Get方式适合从服务器获取数据<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/1b14211b511540f6ef19a042cb403f8c.png"><br>在PHP服务器的Web站点目录<code>D:\web\htdocs</code>中，创建demo.html文件，编码实现Ajax请求，具体如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();        <span class="comment">//①创建Ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//onreadystatechange：监听Ajax状态变化（Ajax状态发生改变时触发此函数）</span></span></span><br><span class="line"><span class="javascript"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//④监听</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//readyState属性：表示Ajax状态，如为XMLHttpRequst.DONE表示此次已完成响应。</span></span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">if</span>(<span class="params">xhr.readyState==XMLHttpRequest.DONE</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">if</span>(<span class="params">xhr.status==<span class="number">200</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;test.php?a=1&amp;b=2&quot;</span>);  <span class="comment">//②打开，建立HTTP连接</span></span></span><br><span class="line"><span class="javascript">xhr.send();<span class="comment">//③发送请求</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和html文件同目录下创建<code>test.php</code>文件，写入以下信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> json_encode($_GET);  <span class="comment">//将URL参数转换为JSON输出</span></span><br></pre></td></tr></table></figure><p>然后启动PHP服务器后，在浏览器输入<a href="http://localhost:8081/demo.html">http://localhost:8081/demo.html</a>,<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/0523753cebb4c82cdb09cfa7eaff7436.png"></p></li><li><p>监听Ajax状态</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/27b7857f2e02fc707559e9fe9d126617.png"></p><p><strong>处理服务器返回的信息</strong></p><ul><li><strong>readyState属性</strong><br>readyState属性用于获取Ajax的当前状态，状态值有5种形式。</li></ul><table><thead><tr><th align="center">状态值</th><th align="center">XMLHttpRequest静态属性名</th><th align="center">说明</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">UNSET</td><td align="center">未发送</td><td align="center">对象已创建</td></tr><tr><td align="center">1</td><td align="center">OPENED</td><td align="center">已打开</td><td align="center">open()方法已调用</td></tr><tr><td align="center">2</td><td align="center">HEADERS_RECEIVED</td><td align="center">收到响应头</td><td align="center">send()方法已调用</td></tr><tr><td align="center">3</td><td align="center">LOADING</td><td align="center">数据传送中</td><td align="center">响应体部分正在被接收</td></tr><tr><td align="center">4</td><td align="center">DONE</td><td align="center">完成</td><td align="center">数据接收完</td></tr></tbody></table><ul><li><p><strong>onreadystatechange属性</strong></p><p>  onreadystatechange事件属性用于感知readyState属性状态的改变，当readyState状态发送改变时，就会调用此事件。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState);</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;test.php&#x27;</span>);</span><br><span class="line">xhr.send(); </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到readyState属性值初始值为0，当调用open()和send()方法后，readyState属性的值会发生变化，每次变化都会触发onreadystatechange事件。</p><ul><li><strong>status属性</strong><br>status属性用于返回当前请求的HTTP状态码，值为数值类型</li></ul><table><thead><tr><th align="center">状态码</th><th align="center">含义</th><th align="center">状态码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">正常</td><td align="center">403</td><td align="center">禁止</td></tr><tr><td align="center">301</td><td align="center">永久移动</td><td align="center">404</td><td align="center">找不到</td></tr><tr><td align="center">302</td><td align="center">临时移动</td><td align="center">500</td><td align="center">内部服务器错误</td></tr><tr><td align="center">304</td><td align="center">未修改</td><td align="center">502</td><td align="center">无效网关</td></tr><tr><td align="center">401</td><td align="center">未经授权</td><td align="center">504</td><td align="center">网关超时</td></tr></tbody></table><ul><li><p><strong>获取响应信息的相关属性</strong></p><table><thead><tr><th align="center">属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">responseText</td><td align="center">将响应信息作为字符串返回</td></tr><tr><td align="center">responseXML</td><td align="center">将响应信息格式为XML Document对象并返回(只读)</td></tr></tbody></table></li><li><p><strong>服务端代码简介</strong></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> json_encode($_GET);  <span class="comment">//将URL参数转换为JSON输出</span></span><br></pre></td></tr></table></figure><ol><li>$_GET：GET方式提交到服务器端的数据(必须大写)</li><li>json_encode：将参数转换为json格式</li><li>echo：输出，返回给客户端</li></ol><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><ul><li>Post方式适合向服务器发送数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/d29da1c5cf33939f7d3d2f50ef6f3e9f.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">       xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">if</span>(<span class="params">xhr.readyState==XMLHttpRequest.DONE</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="function"><span class="title">if</span>(<span class="params">xhr.status==<span class="number">200</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="javascript">       xhr.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;test.php&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//在HTTP请求头中指定实体内容的编码格式</span></span></span><br><span class="line"><span class="javascript">       xhr.setRequestHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript">       <span class="comment">// xhr.send(&#x27;name=Lily&amp;age=18&#x27;);</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> name = <span class="string">&#x27;Lily&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> age = <span class="number">18</span>;</span></span><br><span class="line"><span class="javascript">       xhr.send(<span class="string">&#x27;name=&#x27;</span> + name + <span class="string">&#x27;&amp;age=&#x27;</span> + age);</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> json_encode($_POST);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/4b86a86cd1d2681938bb6c9c9e575f8b.png"></p><ul><li><p>通过POST方式向服务器发送ajax请求须设置请求头字段，且在open方法后调用。</p><pre><code>  Content-Type：application/x-www-form-urlencoded</code></pre></li><li><p>拓展阅读<br><a href="https://www.cnblogs.com/qlhMeiMei/p/6846392.html">https://www.cnblogs.com/qlhMeiMei/p/6846392.html</a></p></li><li><p>如果需要传递特殊字符时，可以使用<code>encodeURIComponent()</code>进行URL编码</p><pre><code>  var url=&#39;http://xxx/test.php?name=&#39;+encodeURIComponent(&#39;A&amp;B C&#39;);;  console.log(url);//结果输出：http://xxx/test.php?name=A%26B%20C</code></pre></li></ul><p>在经过URL编码后，”&amp;”被转化为”%26”，空格被转换为”%20”，当服务器收到已编码的内容之后，会对其进行解码，从而正确识别。</p><pre><code>    var str=&#39;A%26B%20C&#39;;    console.log(encodeURIComponent(str)); //输出结果：A&amp;B C</code></pre><h2 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h2><ul><li>XML</li><li>JSON<br>JSON是一种轻量级的数据交换格式，它采用完全独立于语言的文本格式。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/7193183d914eb22d6ade0fab7baeda89.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//stringify：将对象转换为JSON字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(obj);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">xhr.readyState==XMLHttpRequest.DONE</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">if</span>(<span class="params">xhr.status==<span class="number">200</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var json_res = xhr.responseText;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//JSON.parse：将JSON字符串转换成JS对象。</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var obj_res = JSON.parse(json_res);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//obj.name：JSON对象的成员。</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// document.write(obj_res.name);</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;test.php&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        xhr.send(<span class="string">&#x27;msg=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(json));</span></span><br><span class="line"><span class="javascript">        <span class="comment">//encodeURIComponet：对字符串进行URI编码</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> $_POST[<span class="string">&#x27;msg&#x27;</span>];</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/04d7091a2a8d37f98eb4611d5fcdc164.png"></p><h2 id="无刷新分页"><a href="#无刷新分页" class="headerlink" title="无刷新分页"></a>无刷新分页</h2><ul><li><p>代码思路</p><ol><li>首先读取第一页（客户端提交1，服务端返回第1页内容的json数据）；</li><li>根据点击的按钮，读取相应页。</li></ol></li><li><p>自调用函数<br>用（）包裹匿名函数，其后的（）表示给匿名函数传递参数并立即执行，完成函数的自调用。</p><pre><code>  自调用函数：  ( function  函数名()&#123;      代码;  &#125;) ( )； </code></pre></li><li><p>回调函数<br>若想要函数体中某部分功能由调用者决定，此时可以使用回调函数。<br>简单说，在一个函数执行完毕后，得到想要的特定数据后再去执行的函数，即为回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">f2,f3</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;11111&quot;</span>);</span><br><span class="line">f2();</span><br><span class="line">f3();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;22222&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">f1(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;33333&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;44444&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11111</span></span><br><span class="line"><span class="comment">33333</span></span><br><span class="line"><span class="comment">44444</span></span><br><span class="line"><span class="comment">22222</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p> 继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用原型对象实现继承</span></span><br><span class="line">Person.prototype.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好，我是&quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Person(<span class="string">&#x27;Jim&#x27;</span>);</span><br><span class="line">p1.sayHello();</span><br></pre></td></tr></table></figure></li><li><p>源码解析</p><ol><li>构造函数PageList：封装页面信息，并添加点击事件实现与用户的交互。</li><li>构造函数Comment：向服务器发送ajax请求，获取评论内容，并将服务器返回的JSON数据放入页面中显示出来。</li><li>源码解析–PageList：封装页面信息，并添加点击事件实现与用户的交互。</li><li>页面信息：<br>   页面元素：首页、尾页、上一页、下一页、页码<pre><code>   数据（变量）：页码、总共页数</code></pre></li><li>点击事件：<br>  为四个页面元素添加onclick事件，以更新页面内容。</li><li>函       数:<br> 根据页码更新页面内容。</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#eee</span>;<span class="attribute">margin</span>:<span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">800px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">background</span>:<span class="number">#fefefe</span>;<span class="attribute">border-radius</span>:<span class="number">8px</span>;<span class="attribute">padding</span>:<span class="number">20px</span>;<span class="attribute">box-sizing</span>:border-box;<span class="attribute">margin-top</span>:<span class="number">40px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.title</span>&#123;<span class="attribute">font-family</span>:<span class="string">&#x27;Microsoft YaHei&#x27;</span>;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">24px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.comment</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">list-style</span>:none;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.comment</span> <span class="selector-tag">li</span>&#123;<span class="attribute">line-height</span>:<span class="number">32px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span>&#123;<span class="attribute">margin-top</span>:<span class="number">20px</span>;<span class="attribute">text-align</span>:center&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span> <span class="selector-tag">span</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">2px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span> <span class="selector-tag">button</span>&#123;<span class="attribute">padding</span>:<span class="number">6px</span> <span class="number">10px</span>;<span class="attribute">cursor</span>:pointer&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span> <span class="selector-tag">button</span><span class="selector-pseudo">:disabled</span>&#123;<span class="attribute">cursor</span>:default&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.progress</span> <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">0%</span>;<span class="attribute">height</span>:<span class="number">1px</span>;<span class="attribute">position</span>:fixed;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">background-color</span>:<span class="number">#38f</span>;<span class="attribute">box-shadow</span>:<span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#6bf</span>;<span class="attribute">transition</span>: all <span class="number">0.8s</span>&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>查看商品评论<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagelist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前是第<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_first&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_prev&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_next&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_last&quot;</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">PageList</span>(<span class="params">options</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> options) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>[i] = options[i];</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> obj = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.first.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = 1;</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.prev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = (obj.page &gt; 1) ? (obj.page - 1) : 1;</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.next.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = (obj.page &gt;= obj.maxPage) ? obj.maxPage : (obj.page + 1);</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.last.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = obj.maxPage;</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.obj = obj;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            Comment.prototype.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url, start, complete</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            if (xhr.readyState === 4) &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">              if (xhr.status <span class="tag">&lt; <span class="attr">200</span> || <span class="attr">xhr.status</span> &gt;</span>= 300 &amp;&amp; xhr.status !== 304) &#123;</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;服务器异常&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(xhr.responseText);</span></span><br><span class="line"><span class="javascript">              &#125; <span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;解析服务器返回信息失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">              complete(json);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;GET&#x27;</span>, url);</span></span><br><span class="line">          xhr.send();</span><br><span class="line">          start();</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">         Comment.prototype.create = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span></span><br><span class="line"><span class="javascript">            html += <span class="string">&#x27;&lt;ul&gt;&lt;li&gt;用户名：&#x27;</span> + data[i].user + <span class="string">&#x27;　发表时间：&#x27;</span> + data[i].time + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            html += &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#x27; + data[i].content + &#x27;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;;</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.obj.innerHTML = html;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> comment = <span class="keyword">new</span> Comment(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;comment&#x27;</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageList =<span class="keyword">new</span> PageList(&#123;</span></span><br><span class="line">                page: 1,</span><br><span class="line">                maxPage: 1,</span><br><span class="line"><span class="javascript">                first: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_first&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                prev: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_prev&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                next: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_next&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                last: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_last&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                pageNum: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_num&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                onChange:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    comment.ajax(<span class="string">&#x27;data.php?page=&#x27;</span> + <span class="built_in">this</span>.page,</span></span><br><span class="line"><span class="javascript">                        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//start回调函数</span></span></span><br><span class="line"></span><br><span class="line">                        &#125;,</span><br><span class="line"><span class="javascript">                        <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123; <span class="comment">//complete回调函数</span></span></span><br><span class="line">                            pageList.maxPage = json.maxPage;</span><br><span class="line">                            comment.create(json.data);</span><br><span class="line">                        &#125;</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            pageList.onChange();</span><br><span class="line">        &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义data数组，包含10个元素，每个元素表示1条评论</span></span><br><span class="line">$data = [</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论111&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论222&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论233&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">4</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论444&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论555&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">6</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论666&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">7</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论777&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">8</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论888&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">9</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论999&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论1010&#x27;</span>],</span><br><span class="line">];</span><br><span class="line">$page = <span class="keyword">isset</span>($_GET[<span class="string">&#x27;page&#x27;</span>]) ? max((<span class="keyword">int</span>)$_GET[<span class="string">&#x27;page&#x27;</span>], <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">$size = <span class="number">2</span>;</span><br><span class="line">$maxPage = ceil(count($data) / $size);</span><br><span class="line"><span class="keyword">echo</span> json_encode([</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span> =&gt; array_slice($data, ($page - <span class="number">1</span>) * $size, $size),</span><br><span class="line">    <span class="string">&#x27;maxPage&#x27;</span> =&gt; $maxPage</span><br><span class="line">]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">page：获取用户端请求的页码值。</span></span><br><span class="line"><span class="comment">size：每页返回的记录数。</span></span><br><span class="line"><span class="comment">maxPage：计算总页数。</span></span><br><span class="line"><span class="comment">json_encode:返回“根据当前页码查询的记录”和“总页数”。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><ul><li><p>基本概念</p><ol><li>jQuery：一款优秀的JavaScript框架库，封装了很多的JavaScript函数。</li><li>作用：简化了HTML与JavaScript之间的操作，使得DOM对象、事件处理、动画效果、Ajax等操作的实现语法更加简洁，提高了程序的开发效率，消除很多跨浏览器的兼容问题。</li></ol></li><li><p>下载jQuery</p><ol><li>官方网址：<a href="http://jquery.com/">http://jquery.com</a></li><li>jQuery官网引用地址最近国内访问会经常出现打不开的情况，可以戳<a href="https://www.jq22.com/jquery-info122">jQuery插件库</a></li><li><a href="https://www.runoob.com/jquery/jquery-tutorial.html">jQuery|菜鸟教程</a></li></ol></li><li><p>引入jQuery</p><ol><li><p>下载：minified（压缩版，去掉注释和空白行，引入本地下载的jQuery。</p><pre><code> &lt;script src=&quot;jquery-1.12.4.min.js&quot;&gt;&lt;/scirpt&gt;</code></pre></li><li><p>CDN：内容分发网络，通过CDN的优势可以加快jQuery文件的访问速度</p><pre><code> &lt;script   src=&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot; &gt;&lt;/script&gt;</code></pre></li></ol></li><li><p>使用jQuery</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">在HTML页面中创建<span class="tag">&lt;<span class="name">h2</span>&gt;</span>元素，该元素含有文本“测试”和“居中”属性的。</span><br><span class="line">*/</span><br><span class="line">//html实现</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">‘center’</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//JS实现</span><br><span class="line">var h2 = document.createElement(&#x27;h2&#x27;); </span><br><span class="line">var text = document.createTextNode(‘测试’); </span><br><span class="line">var attr = document.createAttribute(&#x27;align&#x27;);</span><br><span class="line">attr.value = ‘center’; </span><br><span class="line">h2.setAttributeNode(attr);  </span><br><span class="line">h2.appendChild(text); </span><br><span class="line">document.querySelector(&#x27;body&#x27;).appendChild(h2);</span><br><span class="line">//jQuery实现</span><br><span class="line">//美元符号$表示jQuery类，也就是说&quot;$()&quot;等价于&quot;jQuery()&quot;,即jQuery的构造函数。</span><br><span class="line">$(&#x27;<span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#x27;).appendTo(&#x27;body&#x27;);</span><br></pre></td></tr></table></figure><h2 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h2><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><p><strong>语法：$(选择器)</strong></p><ul><li>基本选择器、层级选择器</li><li>基本过滤选择器、内容选择器</li><li>可见性选择器、属性选择器</li><li>子元素选择器、表单选择器</li></ul><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><p>基本选择器常用的有标签选择器、类选择器和ID选择器</p><table><thead><tr><th align="center">CSS选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">li{color:red}</td><td align="center">根据指定元素名匹配所有元素</td><td align="center">${“li”}</td></tr><tr><td align="center">.bar{color:red}</td><td align="center">根据指定类名匹配所有元素</td><td align="center">${“.bar”}</td></tr><tr><td align="center">#btn{color:red}</td><td align="center">根据指定id匹配一个元素</td><td align="center">${“#bar}”</td></tr><tr><td align="center">li,.bar,#btn{color:red}</td><td align="center">同时获取多个元素</td><td align="center">${“li,p,div”}</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/b0ece8129f371bfe621892437397d7a0.png"></p><h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">示例</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">selector selector1</td><td align="center">$(“div .test”)</td><td align="center">选取&lt;div&gt;下所有class名为test的元素（多级）</td></tr><tr><td align="center">parent &gt; child</td><td align="center">$(“.box &gt; .con”)</td><td align="center">选取class名为box下的所有class名为con的子元素（一级）</td></tr><tr><td align="center">prev + next</td><td align="center">$(“div + .title”)</td><td align="center">获取紧邻&lt;div&gt;的下一个class名为title的兄弟节点</td></tr><tr><td align="center">prev ~ siblings</td><td align="center">$(“.bar ~ li”)</td><td align="center">获取class名为bar的元素后的所有同级元素节点&lt;li&gt;</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/991e6bf8bb02ade1e9fb757b2dabbcc3.png"></p><h4 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">示例</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">:first</td><td align="center">$(“li : first”)</td><td align="center">获取第1个&lt;li&gt;元素</td></tr><tr><td align="center">:last</td><td align="center">$(“li : last”)</td><td align="center">获取最后1个&lt;li&gt;元素</td></tr><tr><td align="center">:even</td><td align="center">$(“li :even”)</td><td align="center">获取所有li元素中，索引为偶数的奇数行数据,从0开始</td></tr><tr><td align="center">:odd</td><td align="center">$(“li :odd”)</td><td align="center">获取所有li元素中，索引为奇数数的偶数行数据，从0开始</td></tr><tr><td align="center">:eq(index)</td><td align="center">$(“li:eq(3)”)</td><td align="center">获取索引为3的li元素</td></tr><tr><td align="center">:gt(index)</td><td align="center">$(“li :eq(3)”)</td><td align="center">获取索引大于3的li元素</td></tr><tr><td align="center">:It(index)</td><td align="center">$(“li :It(3)”)</td><td align="center">获取索引小于3的li元素</td></tr><tr><td align="center">:not(seletor)</td><td align="center">$(“li :not(li:qe(3))”)</td><td align="center">获取除指定选择器外的其他元素，获取除索引为3的li元素</td></tr><tr><td align="center">:focus</td><td align="center">$(“inputs:focus”)</td><td align="center">匹配当前获取焦点的input元素</td></tr><tr><td align="center">:animated</td><td align="center">#(“div:not(:animated)”)</td><td align="center">匹配当前没有执行动画的div元素</td></tr></tbody></table><h4 id="内容选择器"><a href="#内容选择器" class="headerlink" title="内容选择器"></a>内容选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">:contains(text)</td><td align="center">获取内容包含1text文本的元素</td><td align="center">&amp;(“li:contains(‘js’)”)获取内容中含’js’的li元素</td></tr><tr><td align="center">:empty</td><td align="center">获取内容为空的元素</td><td align="center">$(“li:empty”)获取内容为空的li元素</td></tr><tr><td align="center">:has(selector)</td><td align="center">获取内容包含指定选择器元素</td><td align="center">$(“li:has(‘a’)”)获取内容中含a元素的所有li元素</td></tr><tr><td align="center">:parent</td><td align="center">获取内容不为空的元素(特殊)</td><td align="center">$(“li:parent”)获取内容不为空的li元素</td></tr></tbody></table><h4 id="可见性选择器"><a href="#可见性选择器" class="headerlink" title="可见性选择器"></a>可见性选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">:hidden</td><td align="center">获取所有隐藏元素</td><td align="center">$(“li:hidden”)获取所有隐藏的li元素</td></tr><tr><td align="center">:visible</td><td align="center">获取所有可见元素</td><td align="center">$(“li:visible”)获取所有可见的li元素</td></tr></tbody></table><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">[attr]</td><td align="center">获取具体指定属性的元素</td><td align="center">$(“div[class]”)获取含有class属性的所有div元素</td></tr><tr><td align="center">[attr=value]</td><td align="center">获取属性值等于value的元素</td><td align="center">$(“div[class=current]”)获取class等于current的所有div元素</td></tr><tr><td align="center">[attr！=value]</td><td align="center">获取属性值不等于value的元素</td><td align="center">$(“div[class！=current]”)获取class不等于current的所有div元素</td></tr><tr><td align="center">[attr^=value]</td><td align="center">获取属性值以value开始的元素</td><td align="center">$(“div[class^box]”)获取class以box开始的所有div元素</td></tr><tr><td align="center">[attr$=value]</td><td align="center">获取属性值以value结尾的元素</td><td align="center">$(“div[class$box]”)获取class以box结尾的所有div元素</td></tr><tr><td align="center">[attr*=value]</td><td align="center">获取属性值包含value的元素</td><td align="center">$(“div[class*=’-‘]”)获取class含有’-‘的所有div元素</td></tr><tr><td align="center">[attr~=value]</td><td align="center">获取元素的属性值包含一个value，以空格隔开</td><td align="center">$(“div[class~=’box’]”)获取class属性值等于’box’或通过空格分隔并含有box的div元素，如”t box”</td></tr><tr><td align="center">[attr1][attr2]…[attrN]</td><td align="center">获取同时拥有多个属性的元素</td><td align="center">$(“input[id][name$=’usr’]”)获取同时含有id属性和属性值以usr结尾的name属性的input元素</td></tr></tbody></table><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">:nth-child(index/even/odd/公式)</td><td align="center">索引index默认从1开始，匹配指定index索引、偶数、奇书、或符合指定公式(如2n,n默认从0开始)的子元素</td></tr><tr><td align="center">:first-child</td><td align="center">获取第一个子元素</td></tr><tr><td align="center">:last-child</td><td align="center">获取最后一个子元素</td></tr><tr><td align="center">:only-child</td><td align="center">如果当前元素时唯一的子元素，则匹配</td></tr><tr><td align="center">:nth-last-child(index/even/odd/公式)</td><td align="center">选择所有它们父元素的第n个子元素，计数从最后一个元素开始到第一个</td></tr><tr><td align="center">:nth-of-type(index/even/odd/公式)</td><td align="center">选择同一个父元素之下，并且标签名相同的子元素中的第n个子元素</td></tr><tr><td align="center">:first-of-type</td><td align="center">选择所有相同的元素名称的第一个子元素</td></tr><tr><td align="center">:last-of-type</td><td align="center">选择所有相同的元素名称的最后一个子元素</td></tr><tr><td align="center">:only-of-type</td><td align="center">选择所有没有兄弟元素，且具有相同的元素名称的元素</td></tr><tr><td align="center">:nth-last-of-type(index/even/odd/公式)</td><td align="center">选择所有它们的父级元素的第n个子元素，计数从最后一个元素开始到第一个</td></tr></tbody></table><h4 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">:input</td><td align="center">获取页面中的所有表单元素，包含select元素和textarea元素</td></tr><tr><td align="center">:text</td><td align="center">选取页面中的所有文本框</td></tr><tr><td align="center">:password</td><td align="center">选取所有的密码框</td></tr><tr><td align="center">:radio</td><td align="center">选取所有的单选按钮</td></tr><tr><td align="center">:checkbox</td><td align="center">选取所有的复选框</td></tr><tr><td align="center">:submit</td><td align="center">获取submit提交按钮</td></tr><tr><td align="center">:reset</td><td align="center">获取reset重置按钮</td></tr><tr><td align="center">:image</td><td align="center">获取type=”image”的图像域</td></tr><tr><td align="center">:button</td><td align="center">获取button按钮，包括button标签和type=”button”</td></tr><tr><td align="center">:file</td><td align="center">获取type=”file”的文件域</td></tr><tr><td align="center">:hidden</td><td align="center">获取隐藏表单项</td></tr><tr><td align="center">:enabled</td><td align="center">获取所有可用表单元素</td></tr><tr><td align="center">:disabled</td><td align="center">获取所有不可用表单元素</td></tr><tr><td align="center">:checked</td><td align="center">获取所有选中的表单元素，主要针对radio和checkbox</td></tr><tr><td align="center">:selected</td><td align="center">获取所有可用表单元素，主要针对select</td></tr></tbody></table><h4 id="元素筛选函数"><a href="#元素筛选函数" class="headerlink" title="元素筛选函数"></a>元素筛选函数</h4><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">$(“ul”).find(“span”)</td><td align="center">返回&lt;ul&gt; 后代中所有的&lt;span&gt; 元素</td></tr><tr><td align="center">$(“ul”).siblings(“span”))</td><td align="center">返回与&lt;ul&gt; 同级的所有的 &lt;span&gt; 元素</td></tr><tr><td align="center">$(“ul”).next(“span”))</td><td align="center">匹配&lt;ul&gt;紧邻的同级的下一个&lt;span&gt;元素</td></tr><tr><td align="center">$(“ul”). prev(“span”))</td><td align="center">匹配&lt;ul&gt;紧邻的同级的上一个&lt;span&gt;元素</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/ce1673e1b45dc9421d7a6c4652b96f37.png"></p><p>获取第三层的第一个li</p><pre><code>    $(&#39;#fold&gt;ul&gt;li:first&#39;)</code></pre><p>通过上面的li，获得其下class为wrap的元素</p><pre><code>    $(&#39;#fold&gt;ul&gt;li:first&#39;).find(&#39;.wrap&#39;);</code></pre><h4 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h4><p>each()方法可以对元素进行遍历</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>IOS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//each参数：回调函数</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.og(<span class="string">&quot;第&quot;</span>+(index+<span class="number">1</span>)+<span class="string">&#x27;个:&#x27;</span>+$(element).text());</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript"><span class="comment">//each：遍历选择器匹配到的所有&lt;li&gt;元素</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//index：当前元素的索引位置</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//element：当前元素</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//text():函数，元素的文本</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">第1个:PHP</span><br><span class="line">第2个:IOS</span><br><span class="line">第3个:JAVA</span><br><span class="line">第4个:JS</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h4><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">html()</td><td align="center">获取第一个匹配元素的HTML内容</td></tr><tr><td align="center">html(content)</td><td align="center">设置第一个匹配元素的HTML内容</td></tr><tr><td align="center">text()</td><td align="center">获取所有匹配元素包含的文本内容组合起来的文本</td></tr><tr><td align="center">text(content)</td><td align="center">设置所有匹配元素的文本内容</td></tr><tr><td align="center">val()</td><td align="center">获取表单元素的value值</td></tr><tr><td align="center">val(value)</td><td align="center">设置表单元素的value值</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ios<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.min.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(element).text(<span class="string">&#x27;修改后的内容&#x27;</span> + index);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;第&quot;</span> + (index+<span class="number">1</span>) + <span class="string">&#x27;个:&#x27;</span></span></span><br><span class="line"><span class="javascript">                + $(element).text());</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/63efebe8bea84d084a689d34e0d14a17.png"></p><h4 id="元素样式"><a href="#元素样式" class="headerlink" title="元素样式"></a>元素样式</h4><pre><code>    var ele=$(&#39;div&#39;);    ele.css(&#123;border:&#39;2px solid black&#39;,backgroundColor:&#39;#ccc&#39;&#125;);    var w=ele.css(&#39;width&#39;);    var h=ele.css(&#39;height&#39;);    ele.css(&#39;width&#39;,&#39;200px&#39;);    ele.css(&#39;height&#39;,&#39;200px&#39;);</code></pre><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">css(name)</td><td align="center">name:样式名称，获得样式的值</td></tr><tr><td align="center">css(properties)</td><td align="center">properties：键值对形式的对象，设置样式值</td></tr><tr><td align="center">css(name,value)</td><td align="center">设置样式的值</td></tr><tr><td align="center">width()/width(value)</td><td align="center">获取/设置第一个匹配元素的当前宽度值</td></tr><tr><td align="center">height()/height(value)</td><td align="center">获取/设置第一个匹配元素的当前高度值</td></tr><tr><td align="center">offset()</td><td align="center">获取元素的位置，返回的是一个对象，包含left和top属性</td></tr><tr><td align="center">offset(properties)</td><td align="center">利用对象设置元素的位置，必须包含left和top属性</td></tr></tbody></table><h4 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h4><pre><code>    $(element).prop(&#39;checked&#39;,false);</code></pre><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">attr(name)</td><td align="center">取得第一个匹配元素的属性值，否则返回undefined</td></tr><tr><td align="center">attr(properties)</td><td align="center">将一个键值对形式的对象设置为所有匹配元素的属性</td></tr><tr><td align="center">attr(name,value)</td><td align="center">为所有匹配的元素设置一个属性值</td></tr><tr><td align="center">removeAtrre(name)</td><td align="center">从每一个匹配的元素中删除一个属性</td></tr><tr><td align="center">prop(name)</td><td align="center">取得第一个匹配元素的属性值，否则返回undefined</td></tr><tr><td align="center">prop(properties)</td><td align="center">将一个键值对形式的对象设置为所有匹配元素的属性</td></tr><tr><td align="center">prop(name,value)</td><td align="center">为所有匹配的元素设置一个属性值</td></tr></tbody></table><blockquote><p>attr（）和prop（）只能获取第一个匹配元素的属性值。<br>操作状态，如checked、selected、disabled时(有true/false)用prop；其它用attr。</p></blockquote><h4 id="元素基本属性"><a href="#元素基本属性" class="headerlink" title="元素基本属性"></a>元素基本属性</h4><table><thead><tr><th align="center">语法</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">addClass(class)</td><td align="center">追加样式</td><td align="center">为每个匹配的元素追加指定的类名</td></tr><tr><td align="center">removeClass(class)</td><td align="center">移除样式</td><td align="center">从所有匹配的元素中删除全部或者指定的类</td></tr><tr><td align="center">toggleClass(class)</td><td align="center">切换样式</td><td align="center">判断指定类是否存在，存在则删除，不存在则添加</td></tr><tr><td align="center">hasClass(class)</td><td align="center">判断样式</td><td align="center">判断元素是否具有class样式</td></tr></tbody></table><h4 id="折叠菜单-1"><a href="#折叠菜单-1" class="headerlink" title="折叠菜单"></a>折叠菜单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">150px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#515E7B</span>;<span class="attribute">margin</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span>&#123;<span class="attribute">background</span>:<span class="number">#515E7B</span>;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">line-height</span>:<span class="number">40px</span>;<span class="attribute">padding-left</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:underline;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.wrap</span> &#123;<span class="attribute">width</span>:<span class="number">150px</span>;<span class="attribute">display</span>:none;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.wrap</span> <span class="selector-tag">li</span>&#123;<span class="attribute">background</span>: <span class="number">#fff</span>;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.wrap</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#3B475F</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fold&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>信息管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>未读信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>已读信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>信息列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>权限设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 默认第一个显示：css--display:block</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.wrap:first&quot;</span>).css(<span class="string">&#x27;display&#x27;</span>,<span class="string">&#x27;block&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加点击事件，当前显示,其它隐藏</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#fold&gt;ul&gt;li&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//无需遍历，直接添加事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).siblings(<span class="string">&#x27;li&#x27;</span>).find(<span class="string">&#x27;.wrap&#x27;</span>).css(&#123;<span class="attr">display</span>:<span class="string">&#x27;none&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).find(<span class="string">&#x27;.wrap&#x27;</span>).css(&#123;<span class="attr">display</span>:<span class="string">&#x27;block&#x27;</span>&#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/91b2836348482ddd0439b8c1de7080b9.png"></p><h2 id="DOM节点操作-1"><a href="#DOM节点操作-1" class="headerlink" title="DOM节点操作"></a>DOM节点操作</h2><h3 id="节点追加-1"><a href="#节点追加-1" class="headerlink" title="节点追加"></a>节点追加</h3><p>content是一段字符串形式的HTML代码<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/608d27904a43f74dec06c6a54354296e.png"></p><blockquote><p>父子节点添加是在匹配到的元素内部进行，兄弟节点是在匹配的元素外部进行。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//父子节点</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$(&#x27;p&#x27;).append(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>append<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line">//添加在结束标签之前</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;<span class="name">b</span>&gt;</span>append<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">$(&#x27;p&#x27;).prepend(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>append<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line">//添加在开始标签之后</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">append</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">//兄弟节点</span><br><span class="line">$(&#x27;p&#x27;).after(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">$(&#x27;p&#x27;).before(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/3f67b7eb565d49fc1270c7406fb57cb1.png"></p><h3 id="节点替换"><a href="#节点替换" class="headerlink" title="节点替换"></a>节点替换</h3><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">replaceWith(content)</td><td align="center">将所有匹配的元素替换成指定的HTML或DOM元素</td></tr><tr><td align="center">replaceAll(selector)</td><td align="center">用匹配的元素替换掉所有selector匹配到的元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        // $(&#x27;p:first&#x27;).replaceWith(&#x27;<span class="tag">&lt;<span class="name">p</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;);</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        // $(&#x27;p:eq(1)&#x27;).replaceWith(&#x27;<span class="tag">&lt;<span class="name">p</span>&gt;</span>世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;&lt;p&gt;你好&lt;/p&gt;&#x27;</span>).replaceAll($(<span class="string">&#x27;p:first&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;&lt;p&gt;世界&lt;/p&gt;&#x27;</span>).replaceAll($(<span class="string">&#x27;p:eq(1)&#x27;</span>));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h3><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">empty()</td><td align="center">清空元素的内容，但不删除元素本身</td></tr><tr><td align="center">remove()</td><td align="center">清空元素的内容，并删除元素本身</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>4444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       <span class="comment">//移除第一个节点的内容</span></span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;li:first&#x27;</span>).empty();</span></span><br><span class="line"><span class="javascript">       <span class="comment">//移除第二个元素的内容及元素本身</span></span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;li:eq(1)&#x27;</span>).remove();</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/be846db6a9a21c2aa000b70fc203b348.png"></p><h3 id="节点复制"><a href="#节点复制" class="headerlink" title="节点复制"></a>节点复制</h3><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">clone([false])</td><td align="center">复制匹配的元素，默认参数为false</td></tr><tr><td align="center">clone(true)</td><td align="center">参数设置为true时，复制元素的所有事件处理</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>4444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;ul&#x27;</span>).clone().appendTo($(<span class="string">&#x27;body&#x27;</span>));</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/089e1fb74bc937a7141481d94270ac65.png"></p><h3 id="左移与右移"><a href="#左移与右移" class="headerlink" title="左移与右移"></a>左移与右移</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>左移与右移<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">select</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">150px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=button]</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#opt</span>&#123;<span class="attribute">margin</span>:<span class="number">90px</span> <span class="number">10px</span> <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">80%</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">background-color</span>:<span class="number">#999999</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;<span class="attribute">float</span>:left&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>可选项<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>移动<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;opt&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toRight&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toLeft&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toAllRight&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&gt;&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toAllLeft&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;&lt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>已选项<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取按钮添加单击事件，获取第一个下拉框中被选中的option添加到第二个下拉框</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toRight&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;       <span class="comment">// 右移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#right&gt;select&#x27;</span>).append($(<span class="string">&#x27;#left&gt;select&gt;option:selected&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toLeft&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        <span class="comment">// 左移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#left&gt;select&#x27;</span>).append($(<span class="string">&#x27;#right&gt;select&gt;option:selected&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toAllRight&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    <span class="comment">// 全部右移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#right&gt;select&#x27;</span>).append($(<span class="string">&#x27;#left&gt;select&gt;option&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toAllLeft&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;     <span class="comment">// 全部左移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#left&gt;select&#x27;</span>).append($(<span class="string">&#x27;#right&gt;select&gt;option&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/c8e2b69a10be668bdb5a127790ea6062.png"></p><h2 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h2><ul><li>标签中通过属性设置事件，每个属性都由一个on和事件名组成。例如，点击事件对应的属性为onclick。</li><li>在jQuery中则可直接使用其提供的与事件类型同名的方法。例如，点击事件对应的方法为click()。</li><li>这些事件方法允许重复绑定处理程序，按照绑定顺序依次执行。</li></ul><h3 id="表单事件-1"><a href="#表单事件-1" class="headerlink" title="表单事件"></a>表单事件</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">blur()</td><td align="center">当元素失去焦点时触发</td></tr><tr><td align="center">focus()</td><td align="center">当元素获得焦点时触发</td></tr><tr><td align="center">change()</td><td align="center">当元素的值发生改变时触发</td></tr><tr><td align="center">select()</td><td align="center">当文本框（包括&lt;input&gt;和&lt;textarea&gt;）中的文本被选中时触发</td></tr><tr><td align="center">submit()</td><td align="center">表单提交时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>电子邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;input[type=text]&#x27;</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tips = $(<span class="string">&#x27;&lt;span&gt;&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            tips.html(<span class="string">&#x27;请按要求输入&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;input:focus&#x27;</span>).after(tips);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;input[type=text]&#x27;</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).next().remove();</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/84ff5255a8425a2dd3860eb8d6f253cf.png"></p><h3 id="键盘事件-1"><a href="#键盘事件-1" class="headerlink" title="键盘事件"></a>键盘事件</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">keydown()</td><td align="center">键盘按键被按下时触发</td></tr><tr><td align="center">keyup()</td><td align="center">键盘按键弹起时触发</td></tr><tr><td align="center">keypress()</td><td align="center">键盘按键（Shift等非字符键除外）被按下时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>左移与右移<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.boxes</span>&#123;<span class="attribute">width</span>:<span class="number">10px</span>;<span class="attribute">height</span>:<span class="number">10px</span>;<span class="attribute">background-color</span>:red;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;boxes&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       $(<span class="built_in">document</span>).</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">       keydown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">//获取按键码(37、38、39、40)</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> opt = event.which;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> item = $(<span class="string">&#x27;.boxes&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="comment">//获取元素距离文档的位置</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> left = item.offset().left;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> top = item.offset().top;;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(opt);</span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">switch</span>(<span class="params">opt</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">37</span>:item.offset(&#123;<span class="attr">left</span>:left-<span class="number">1</span>,<span class="attr">top</span>:top&#125;);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">38</span>:item.offset(&#123;<span class="attr">left</span>:left,<span class="attr">top</span>:top-<span class="number">1</span>&#125;);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">39</span>:item.offset(&#123;<span class="attr">left</span>:left+<span class="number">1</span>,<span class="attr">top</span>:top&#125;);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">40</span>:item.offset(&#123;<span class="attr">left</span>:left,<span class="attr">top</span>:top+<span class="number">1</span>&#125;);<span class="keyword">break</span>;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/3355318cfc0459182e0575a1c5acd4c6.png"></p><h3 id="鼠标事件-1"><a href="#鼠标事件-1" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">mouseover()</td><td align="center">当鼠标移入对象时触发</td></tr><tr><td align="center">mouseout()</td><td align="center">鼠标从元素上离开时触发</td></tr><tr><td align="center">click()</td><td align="center">当单击元素时触发</td></tr><tr><td align="center">dbclick()</td><td align="center">当双击元素时触发</td></tr><tr><td align="center">mousedown()</td><td align="center">当鼠标指针移动到元素上方，并按下鼠标按键时触发</td></tr><tr><td align="center">mouseup()</td><td align="center">当在元素上放松鼠标按钮时，会被触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">鼠标移入时，为本文添加背景颜色；</span><br><span class="line">鼠标移出时，为文本移除背景颜色。</span><br><span class="line">鼠标单击时，打印单击位置。</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>左移与右移<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.boxes</span>&#123;<span class="attribute">width</span>:<span class="number">10px</span>;<span class="attribute">height</span>:<span class="number">10px</span>;<span class="attribute">background-color</span>:red;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hit&quot;</span>&gt;</span>jQuery介绍<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;.hit&#x27;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="built_in">this</span>).css(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;green&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;.hit&#x27;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="built_in">this</span>).css(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">       &#125;);</span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;.hit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(event.pageY);</span></span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><table><thead><tr><th align="center">类比选项</th><th align="center">window.onload</th><th align="center">$(document).ready()</th></tr></thead><tbody><tr><td align="center">执行时机</td><td align="center">必须等待网页中的所有内容加载完成后(包括外部元素，如图片)才能执行</td><td align="center">网页中的所有DOM结构绘制完成后就执行（可能关联内容并未加载完成）</td></tr><tr><td align="center">编写个数</td><td align="center">不能同时编写多个</td><td align="center">能够同时编写多个</td></tr><tr><td align="center">简化写法</td><td align="center">无</td><td align="center">$()</td></tr></tbody></table><p>jQuery中的页面加载事件方法有3种语法形式，具体如下。</p><pre><code>    $(document).ready(function() &#123;  &#125;);         // 语法方式1    $().ready(function() &#123;  &#125;);             // 语法方式2    $(function() &#123;  &#125;);                 // 语法方式3</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              alert(<span class="string">&quot;欢迎光临&quot;</span>);</span></span><br><span class="line">          &#125;)</span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/2776a6a8b120b78267a95c9aa433c8f5.png"></p><h3 id="事件绑定与切换"><a href="#事件绑定与切换" class="headerlink" title="事件绑定与切换"></a>事件绑定与切换</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">on(events,function)</td><td align="center">在匹配元素上绑定一个或多个事件处理函数</td></tr><tr><td align="center">off(events)</td><td align="center">在匹配元素上移除一个或多个事件处理函数</td></tr><tr><td align="center">one(events,function)</td><td align="center">为每个匹配元素的事件绑定一次性的处理函数</td></tr><tr><td align="center">hover([over,]out)</td><td align="center">元素鼠标移入与移出事件切换</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;div&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">&#x27;触发点击事件&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&#x27;div&#x27;</span>).off(<span class="string">&#x27;click&#x27;</span>);</span></span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;div&#x27;</span>).on(&#123;</span></span><br><span class="line"><span class="javascript">              mouseover:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;鼠标移入&#x27;</span>);</span></span><br><span class="line">              &#125;,</span><br><span class="line"><span class="javascript">              mouseout:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;鼠标移出&#x27;</span>);</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/67f8db8f8d37d276874a7977b13105aa.png"></p><h2 id="手风琴效果"><a href="#手风琴效果" class="headerlink" title="手风琴效果"></a>手风琴效果</h2><ul><li><p>页面组成<br>  5张图片<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/b121fdc5918a1143cbcf60403f0c6bed.png"></p></li><li><p>动态效果：<br>  鼠标移入图片时，该图片完整显示；鼠标移出时，该图片回复默认大小。overflow:hidden多余隐藏。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/1cc77ff4965b51597b5e50718b693c10.png"></p></li><li><p>图片素材</p></li></ul><p>1.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/92f6b154568bc50a88a2bb755847c57f.png"><br>2.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/470f55c119b2c75fc21c898ee7fd470f.png"><br>3.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/744f096e12d235ff3feaaae3758cd653.png"><br>4.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/5547663bea41be8ae50f6bcd4e152e26.png"><br>5.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/046dc5f515f8200717a5f6062f617146.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>手风琴效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">1200px</span>;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">margin</span>:<span class="number">50px</span> auto;<span class="attribute">overflow</span>:hidden&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span>&#123;<span class="attribute">width</span>:<span class="number">240px</span>;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">float</span>:left&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/4.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/5.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;div&gt;ul&gt;li&#x27;</span>).on(&#123;</span></span><br><span class="line"><span class="javascript">            mouseover:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="built_in">this</span>).siblings(<span class="string">&#x27;li&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;60.5px&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              $(<span class="built_in">this</span>).css(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;958px&#x27;</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            mouseout:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&#x27;#box&gt;ul&gt;li&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;240px&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/cf52d7fed1bb639bfa23b09f5dc42f26.png"></p><h2 id="动画特效"><a href="#动画特效" class="headerlink" title="动画特效"></a>动画特效</h2><p>jQuery提供了两种增加动画特效的方法</p><ol><li>内置的动画方法</li><li>提供<code>animate()</code>方法自定义动画</li></ol><h3 id="常用内置动画"><a href="#常用内置动画" class="headerlink" title="常用内置动画"></a>常用内置动画</h3><ul><li><strong>基本特效</strong></li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">show([speed,[easing],[fn]])</td><td align="center">显示匹配元素</td></tr><tr><td align="center">hide([speed,[easing],[fn]])</td><td align="center">隐藏匹配元素</td></tr><tr><td align="center">toggle([speed],[easing],[ fn])</td><td align="center">元素显示与隐藏切换</td></tr></tbody></table><ol><li><code>speed</code> ：动画的速度（持续时长），如1000（毫秒），或者预定的3种速度(slow、fast、normal)</li><li><code>easing</code>：切换效果，默认为swing，另有linear</li><li><code>fn</code>    ：动画完成时执行的函数</li></ol><blockquote><p>linear方法提供了一个稳定的动画，以使得动画的每个步骤都是相同的(例如，如果要让一个元素以逐渐变化的方式穿过屏幕，每一步的距离和前一步都是相同的)。</p></blockquote><blockquote><p>swing要更加动态一些，随着动画的开始变得更加快一些，然后再慢下来。swing是一个常用设置，因此，如果没有指定任何缓动，jQuery会使用swing方法。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">      div&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      fefwefew</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.基本特效</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;img&#x27;</span>).hide(<span class="number">5000</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;img&#x27;</span>).show(<span class="number">5000</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;img&#x27;</span>).toggle(<span class="number">5000</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/b23cb4c356a35318d3c36cd00de42b63.png"></p><ul><li><strong>滑动特效</strong></li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">slideDown([speed],[easing],[ fn])</td><td align="center">使用滑动效果，显示隐藏的被选元素（向下）</td></tr><tr><td align="center">slideUp([speed,[easing],[ fn]])</td><td align="center">使用滑动效果，显示隐藏的被选元素（向上）</td></tr><tr><td align="center">slideToggle([speed],[easing],[ fn])</td><td align="center">使用滑动效果，显示隐藏的被选元素（向下)</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.panel</span>,<span class="selector-tag">p</span><span class="selector-class">.flip</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>:<span class="selector-id">#e5eecc</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#c3c3c3</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.panel</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:120px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;  <span class="comment">/*如果此元素不隐藏，则不能滑动--视觉效果滑动的是flip，其实滑动的是。panel*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>W3School - 领先的 Web 技术教程站点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>在 W3School，你可以找到你所需要的所有网站建设教程。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;flip&quot;</span>&gt;</span>请点击这里<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// $(document).ready(function()&#123;</span></span></span><br><span class="line"><span class="javascript">          $(<span class="string">&quot;.flip&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;.panel&quot;</span>).slideDown(<span class="string">&quot;slow&quot;</span>);</span></span><br><span class="line">          &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;);</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/400422ae2228282d3fd51a3eb6bd290a.png"></p><ul><li><strong>淡入淡出特效</strong></li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">fadeIn()</td><td align="center">淡入显示匹配元素</td></tr><tr><td align="center">fadeOut()</td><td align="center">淡出隐藏匹配元素</td></tr><tr><td align="center">fadeToggle()</td><td align="center">在fadeIn()和fadeOut()两种效果间的切换</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#div1&quot;</span>).fadeIn();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#div2&quot;</span>).fadeIn(<span class="string">&quot;slow&quot;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#div3&quot;</span>).fadeIn(<span class="number">3000</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>演示带有不同参数的 fadeIn() 方法。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击这里，使三个矩形淡入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px;height:80px;display:none;background-color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px;height:80px;display:none;background-color:green;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px;height:80px;display:none;background-color:blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/609da2f27cd557c4025af99ecc3ac40f.png"></p><h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><p>除了内置动画，用户还可以根据开发需求自定义动画效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).animate(</span><br><span class="line">&#123;width:&#x27;100px&#x27;,height:&#x27;100px&#x27;&#125;,</span><br><span class="line">3000,</span><br><span class="line">&#x27;swing&#x27;,</span><br><span class="line">function()&#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>样式名称采用驼峰形式，如maginLeft</li><li>无法识别颜色属性，如color、bordercolor、backgroundcolor</li><li>鼓励通过$.speed()设置动画效果（时长和缓动）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var params=&#123;width:&#x27;100px&#x27;,height:&#x27;100px&#x27;&#125;;</span><br><span class="line">var settings=$.speed(3000,&#x27;swing&#x27;);</span><br><span class="line">$(&#x27;div&#x27;).animate(params,setting);```</span><br></pre></td></tr></table></figure><ul><li>动画队列</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> function runQue() &#123;</span><br><span class="line">div.show(&#x27;slow&#x27;)</span><br><span class="line">.animate(&#123;left: &#x27;+=200&#x27;&#125;, 2000)   </span><br><span class="line">        .queue(function() &#123;</span><br><span class="line">        //弥补jquery不能识别颜色属性的缺陷</span><br><span class="line">        $(this).css(&#x27;background&#x27;, &#x27;green&#x27;).dequeue();</span><br><span class="line">        &#125;)</span><br><span class="line">        .animate(&#123;left: &#x27;-=200&#x27;&#125;, 1500)</span><br><span class="line">        //构成一个永不停止的动画的</span><br><span class="line">        .slideUp(&#x27;normal&#x27;, runQue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">方自定义动画相关方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">animate(params[,speed][,easing][,fn])</td><td align="center">用于创建自定义动画的函数</td></tr><tr><td align="center">$.speed([speed][,settings])</td><td align="center">创建一个包含一组属性的对象用来定义自定义动画</td></tr><tr><td align="center">queue([queueName])</td><td align="center">显示被选元素上要执行的函数队列（入队）</td></tr><tr><td align="center">delay(speed[,queueName])</td><td align="center">设置一个延时来推迟执行队列中之后的项目</td></tr><tr><td align="center">clearQueue([queueName])</td><td align="center">从尚未运行的队列中移除所有项目</td></tr><tr><td align="center">dequeue([queueName])</td><td align="center">从队列移除下一个函数，然后执行函数（出队）</td></tr><tr><td align="center">finish([queueName])</td><td align="center">停止当前正在运行的动画，删除所有排队的动画，并完成匹配元素所有的动画</td></tr><tr><td align="center">stop([clearQueue][,jumpToEnd])</td><td align="center">停止所有在指定元素上正在运行的动画</td></tr></tbody></table><ol><li><code>params</code>：表示一组包含动画最终属性值的集合</li><li><code>settings</code>：是easing与fn组成的一个对象集合</li><li><code>queueName</code>：表示队列名称，默认值为fx(标准效果队列)</li><li><code>clearQueue</code>：布尔类型，默认为false，用于规定是否停止被选元素所有加入队列的动画</li><li><code>jumpToEnd</code>：布尔类型，默认为false，用于规定是否立即完成当前的动画</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            background: red;</span><br><span class="line">            width: 0px;</span><br><span class="line">            height: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开始动画&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1. 直接调用animate，所有效果均作为参数</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;div&#x27;</span>).animate(</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">width</span>:<span class="string">&#x27;100px&#x27;</span>,<span class="attr">height</span>:<span class="string">&#x27;100px&#x27;</span>&#125;,</span></span><br><span class="line">                3000,</span><br><span class="line"><span class="javascript">                <span class="string">&#x27;swing&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 单独设置参数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// var params = &#123;width:&#x27;100px&#x27;,height:&#x27;100px&#x27;&#125;;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// var settings = $.speed(3000,&#x27;swing&#x27;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $(&#x27;div&#x27;).animate(params,settings);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//3. 动画队列</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// var div = $(&#x27;div&#x27;);    // 获取指定动画的元素</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// div.css(&#123;width:&#x27;100px&#x27;,height:&#x27;100px&#x27;,display:&#x27;none&#x27;,position:&#x27;absolute&#x27;&#125;);       //初始状态设置</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// runQue();              // 执行队列动画</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// function runQue() &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     div.show(&#x27;slow&#x27;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        .animate(&#123;left: &#x27;+=200&#x27;&#125;, 2000)   //修改left，应设position为absolute</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        .queue(function() &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//             $(this).css(&#x27;background&#x27;, &#x27;green&#x27;).dequeue();</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         &#125;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        .animate(&#123;left: &#x27;-=200&#x27;&#125;, 1500)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        .slideUp(&#x27;normal&#x27;, runQue);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="无缝轮播"><a href="#无缝轮播" class="headerlink" title="无缝轮播"></a>无缝轮播</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无缝轮播图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.banner</span>&#123;<span class="attribute">position</span>:relative;<span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;<span class="selector-tag">width</span><span class="selector-pseudo">:958px</span>;<span class="selector-tag">height</span><span class="selector-pseudo">:400px</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.banner</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">list-style</span>:none;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span> <span class="selector-tag">li</span>&#123;<span class="attribute">float</span>:left;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.dot</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">bottom</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">text-align</span>:center;<span class="attribute">font-size</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.dot</span> <span class="selector-tag">li</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">5px</span>;<span class="attribute">width</span>:<span class="number">15px</span>;<span class="attribute">height</span>:<span class="number">15px</span>;<span class="attribute">border-radius</span>:<span class="number">100%</span>;<span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">145</span>,<span class="number">144</span>,<span class="number">144</span>,.<span class="number">5</span>);<span class="attribute">cursor</span>:pointer;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.dot</span> <span class="selector-class">.on</span>&#123;<span class="attribute">background-color</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 左右翻页箭头样式 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span>&#123;<span class="attribute">display</span>:none;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span> <span class="selector-tag">span</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">6</span>);<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">text-align</span>:center;<span class="attribute">font-size</span>:<span class="number">40px</span>;<span class="attribute">line-height</span>:<span class="number">100px</span>;<span class="attribute">cursor</span>:pointer;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span> <span class="selector-class">.prev</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">margin-top</span>:-<span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span> <span class="selector-class">.next</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">margin-top</span>:-<span class="number">50px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--轮播图片--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.jpg&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.jpg&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/4.jpg&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/5.jpg&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--小圆点--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dot&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;on&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 左右翻页箭头--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//1.初始工作</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> i = <span class="number">0</span>;           <span class="comment">// 当前显示的图片索引</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> timer = <span class="literal">null</span>;    <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> delay = <span class="number">1000</span>;    <span class="comment">// 图片自动切换的间隔时间</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> width = <span class="number">958</span>;     <span class="comment">// 每张图片的宽度</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> speed = <span class="number">400</span>;     <span class="comment">// 动画时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 复制列表中的第一个图片，追加到列表最后，设置ul的宽度为图片张数 * 图片宽度</span></span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> firstimg = $(<span class="string">&#x27;.hot li&#x27;</span>).first().clone();</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;.hot&#x27;</span>).append(firstimg).width($(<span class="string">&#x27;.hot li&#x27;</span>).length * width);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置周期计时器，实现图片自动切换</span></span></span><br><span class="line"><span class="javascript">      timer = <span class="built_in">setInterval</span>(imgChange, delay);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">       <span class="comment">//2. 自动切换图片</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">imgChange</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        ++i;</span><br><span class="line"><span class="javascript">        isCrack();  <span class="comment">//实现无缝轮播</span></span></span><br><span class="line"><span class="javascript">        dotChange();  <span class="comment">//自动切换对应的圆点样式</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">isCrack</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i == $(<span class="string">&#x27;.hot li&#x27;</span>).length) &#123;</span></span><br><span class="line">          i = 1;</span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;.hot&#x27;</span>).css(&#123;<span class="attr">left</span>: <span class="number">0</span>&#125;);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;.hot&#x27;</span>).stop().animate(&#123;<span class="attr">left</span>: -i * width&#125;, speed);</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 3.自动切换对应的圆点</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">dotChange</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i == $(<span class="string">&#x27;.hot li&#x27;</span>).length - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;.dot li&#x27;</span>).eq(<span class="number">0</span>).addClass(<span class="string">&#x27;on&#x27;</span>).</span></span><br><span class="line"><span class="javascript">               siblings().removeClass(<span class="string">&#x27;on&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;.dot li&#x27;</span>).eq(i).addClass(<span class="string">&#x27;on&#x27;</span>).</span></span><br><span class="line"><span class="javascript">               siblings().removeClass(<span class="string">&#x27;on&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 4. 设置左右切换的箭头显示和隐藏</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;.banner&#x27;</span>).hover(</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="string">&#x27;.arrow&#x27;</span>).show();</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="string">&#x27;.arrow&#x27;</span>).hide();</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">//  鼠标移入，暂停自动播放，移出，开始自动播放</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;.banner&#x27;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          timer = <span class="built_in">setInterval</span>(imgChange, delay);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//5.设置右箭头的事件</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;.next&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          imgChange()</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="comment">//6.设置左箭头的事件</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;.prev&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        --i;</span><br><span class="line">        if (i == -1) &#123;</span><br><span class="line"><span class="javascript">          i = $(<span class="string">&#x27;.hot li&#x27;</span>).length - <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;.hot&#x27;</span>).css(&#123;<span class="attr">left</span>: -($(<span class="string">&#x27;.hot li&#x27;</span>).length - <span class="number">1</span>) * width&#125;);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;.hot&#x27;</span>).stop().animate(&#123;<span class="attr">left</span>: -i * width&#125;, speed);</span></span><br><span class="line">        dotChange();</span><br><span class="line">      &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/30/96517f17aa403959789e9ce6cd54a26c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript快速入门&quot;&gt;&lt;a href=&quot;#JavaScript快速入门&quot; class=&quot;headerlink&quot; title=&quot;JavaScript快速入门&quot;&gt;&lt;/a&gt;JavaScript快速入门&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;网站推荐：&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaSctipt" scheme="http://example.com/tags/JavaSctipt/"/>
    
  </entry>
  
</feed>
