<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lzy_Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-12T12:17:48.701Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lzy_Blog</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Vercel加速GitHub Pages</title>
    <link href="http://example.com/2021/01/12/Hexo/Hexo%E4%B8%8EVercel%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2021/01/12/Hexo/Hexo%E4%B8%8EVercel%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2021-01-12T10:55:41.270Z</published>
    <updated>2021-01-12T12:17:48.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h1><p>本人网站一直部署在<code>Github Page</code>上，但由于访问速度非常影响体验，但由于是学生没有额外的开销去使用收费的托管商，于是查了一下发现<code>vercel</code>和<code>Netlify</code>不仅免费而且访问速度也快！</p><div class="checkbox cyan checked"><input type="checkbox" checked="checked"><p>Vercel支持多个开发框架(Next.js,create-react-app,Nuxt.js)</p></div><div class="checkbox red checked"><input type="checkbox" checked="checked"><p>Vercel内置的CI / CD系统会在每次代码更改时触发，推送代码后自动部署</p></div><div class="checkbox yellow checked"><input type="checkbox" checked="checked"><p> 支撑一键导入GitHub/Gitlagb仓库和站点</p></div><div class="checkbox green checked"><input type="checkbox" checked="checked"><p>全球CDN加速</p></div><h1 id="GitHub登录Vercel"><a href="#GitHub登录Vercel" class="headerlink" title="GitHub登录Vercel"></a>GitHub登录Vercel</h1><p>进入Vercel官网：<a href="https://vercel.com/">https://vercel.com/</a> ，依次点击<code> sign up - Continue with GitHub</code><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/12/1256a9be123fde483bace4fd05e17536.png"></p><div class="note warning flat"><p>注意GitHub账户绑定的主邮箱📪，有可能QQ邮箱会出现无法使用GitHub账号登陆Vercel的情况，推荐将GitHub主邮箱改为谷歌邮箱，不会改可以问下度娘<a href="https://blog.csdn.net/weixin_44170221/article/details/104495373">GitHub更换邮箱（简单粗暴）</a></p></div><h1 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h1><p>择<code> Import Git Repository</code> 然后<code>Continue</code>输入你仓库的url就行了（https）<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/12/d128335e72b7e75d773beac2a40389d7.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/12/bbe2228105097d3454bfd26e310167e8.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/12/966e48109815be945982e2900c267980.png"></p><h1 id="绑定并解析域名"><a href="#绑定并解析域名" class="headerlink" title="绑定并解析域名"></a>绑定并解析域名</h1><p>点击<code>Settings👉Domains👉</code>输入自己的域名，并在域名提供商控制台进行域名解析（CNAME）。解析完成后即可通过自己的域名访问自己的博客<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/12/c7174627f5a2b60e758dcc2b89aa5c63.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><div class="note success flat"><p>👉👉<a href="https://www.iaia.cc/posts/2418998582.html">优雅的使用Vercel加速GitHub Pages</a></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vercel&quot;&gt;&lt;a href=&quot;#Vercel&quot; class=&quot;headerlink&quot; title=&quot;Vercel&quot;&gt;&lt;/a&gt;Vercel&lt;/h1&gt;&lt;p&gt;本人网站一直部署在&lt;code&gt;Github Page&lt;/code&gt;上，但由于访问速度非常影响体验，但由于是学</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    <category term="Vercel" scheme="http://example.com/categories/Hexo/Vercel/"/>
    
    
    <category term="Vercel" scheme="http://example.com/tags/Vercel/"/>
    
  </entry>
  
  <entry>
    <title>Java👉JDBC</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_JDBC/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_JDBC/</id>
    <published>2021-01-05T10:00:16.163Z</published>
    <updated>2021-01-05T10:29:41.906Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉事件处理</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2021-01-05T09:58:33.410Z</published>
    <updated>2021-01-05T10:29:14.896Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉网络通信</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</id>
    <published>2021-01-05T09:58:33.410Z</published>
    <updated>2021-01-05T10:29:07.956Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉IO流</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_IO%E6%B5%81/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_IO%E6%B5%81/</id>
    <published>2021-01-05T09:57:46.884Z</published>
    <updated>2021-01-05T10:29:46.570Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉Swing组件</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_Swing%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_Swing%E7%BB%84%E4%BB%B6/</id>
    <published>2021-01-05T09:57:46.884Z</published>
    <updated>2021-01-05T10:29:37.726Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉反射机制</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2021-01-05T09:56:02.570Z</published>
    <updated>2021-01-05T10:29:33.473Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉线程、线程通信</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E7%BA%BF%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E7%BA%BF%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</id>
    <published>2021-01-05T09:56:02.570Z</published>
    <updated>2021-01-05T10:26:05.195Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉泛型、枚举、注解</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E6%B3%9B%E5%9E%8B%E3%80%81%E6%9E%9A%E4%B8%BE%E3%80%81%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E6%B3%9B%E5%9E%8B%E3%80%81%E6%9E%9A%E4%B8%BE%E3%80%81%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-01-05T09:55:04.778Z</published>
    <updated>2021-01-05T10:29:28.433Z</updated>
    
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉异常机制</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</id>
    <published>2021-01-05T09:54:31.424Z</published>
    <updated>2021-01-05T11:57:14.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><div class="note success flat"><p>异常是一个在程序执行期间发生的事件，它中断了正在执行的程序的正常指令流</p></div><h1 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h1><ul><li>所有的异常类是从<code> java.lang.Exception</code> 类继承的子类</li><li>Exception 类是 <code>Throwable</code> 类的子类。除了Exception类外，Throwable还有一个子类Error 。</li><li>Error 用来指示运行时环境发生的错误。例如，JVM 内存溢出。一般地，程序不会从错误中恢复。</li><li>异常类有两个主要的子类：<code>IOException</code> 类和<code> RuntimeException</code> 类。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/a589201b1677dd985fce0ddbfb3fc15d.png"></p><h1 id="Java-内置异常类"><a href="#Java-内置异常类" class="headerlink" title="Java 内置异常类"></a>Java 内置异常类</h1><p>Java 语言定义了一些异常类在 java.lang 标准包中</p><div class="note warning flat"><p>Java 根据各个类库也定义了一些其他的异常，下面的表中列出了 Java 的非检查性异常</p></div><table><thead><tr><th align="center">异常</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ArithmeticException</td><td align="center">当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例</td></tr><tr><td align="center">ArrayIndexOutOfBoundsException</td><td align="center">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</td></tr><tr><td align="center">ArrayStoreException</td><td align="center">试图将错误类型的对象存储到一个对象数组时抛出的异常</td></tr><tr><td align="center">ClassCastException</td><td align="center">当试图将对象强制转换为不是实例的子类时，抛出该异常</td></tr><tr><td align="center">IllegalArgumentException</td><td align="center">抛出的异常表明向方法传递了一个不合法或不正确的参数</td></tr><tr><td align="center">IllegalMonitorStateException</td><td align="center">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程</td></tr><tr><td align="center">IllegalStateException</td><td align="center">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下</td></tr><tr><td align="center">IllegalThreadStateException</td><td align="center">线程没有处于请求操作所要求的适当状态时抛出的异常</td></tr><tr><td align="center">IndexOutOfBoundsException</td><td align="center">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出</td></tr><tr><td align="center">NegativeArraySizeException</td><td align="center">如果应用程序试图创建大小为负的数组，则抛出该异常</td></tr><tr><td align="center">NullPointerException</td><td align="center">当应用程序试图在需要对象的地方使用 null 时，抛出该异常</td></tr><tr><td align="center">NumberFormatException</td><td align="center">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常</td></tr><tr><td align="center">SecurityException</td><td align="center">由安全管理器抛出的异常，指示存在安全侵犯</td></tr><tr><td align="center">StringIndexOutOfBoundsException</td><td align="center">此异常由 String 方法抛出，指示索引或者为负，或者超出字符串的大小</td></tr><tr><td align="center">UnsupportedOperationException</td><td align="center">当不支持请求的操作时，抛出该异常</td></tr></tbody></table><div class="note warning flat"><p>下面的表中列出了 Java 定义在 java.lang 包中的检查性异常类。 </p></div><table><thead><tr><th align="center">异常</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ClassNotFoundException</td><td align="center">应用程序试图加载类时，找不到相应的类，抛出该异常</td></tr><tr><td align="center">CloneNotSupportedException</td><td align="center">当调用 Object 类中的 clone 方法克隆对象，但该对象的类无法实现 Cloneable 接口时，抛出该异常</td></tr><tr><td align="center">IllegalAccessException</td><td align="center">拒绝访问一个类的时候，抛出该异常</td></tr><tr><td align="center">InstantiationException</td><td align="center">当试图使用 Class 类中的 newInstance 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常</td></tr><tr><td align="center">InterruptedException</td><td align="center">一个线程被另一个线程中断，抛出该异常</td></tr><tr><td align="center">NoSuchFieldException</td><td align="center">请求的变量不存在</td></tr><tr><td align="center">NoSuchMethodException</td><td align="center">请求的方法不存在</td></tr></tbody></table><h1 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h1><p>下面的列表是 Throwable 类的主要方法:</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getMessage()</td><td align="center">返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了</td></tr><tr><td align="center">public Throwable getCause()</td><td align="center">返回一个Throwable 对象代表异常原因</td></tr><tr><td align="center">public String toString()</td><td align="center">使用getMessage()的结果返回类的串级名字</td></tr><tr><td align="center">public void printStackTrace()</td><td align="center">打印toString()结果和栈层次到System.err，即错误输出流</td></tr><tr><td align="center">public StackTraceElement [] getStackTrace()</td><td align="center">返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底</td></tr><tr><td align="center">public Throwable fillInStackTrace()</td><td align="center">用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中</td></tr></tbody></table><h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><div class="note warning flat"><p>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多重捕获块"><a href="#多重捕获块" class="headerlink" title="多重捕获块"></a>多重捕获块</h1><div class="note warning flat"><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h1><ul><li>finally 关键字用来创建在 try 代码块后面执行的代码块。</li><li>无论是否发生异常，finally 代码块中的代码总会被执行。</li><li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</li></ul><p>finally 代码块出现在 catch 代码块最后，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ry&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="throws-throw-关键字"><a href="#throws-throw-关键字" class="headerlink" title="throws/throw 关键字"></a>throws/throw 关键字</h1><div class="note warning flat"><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。<br>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的</p></div><p>下面方法的声明抛出一个 RemoteException 异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// Method implementation</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Remainder of class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。<br>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException,</span></span><br><span class="line"><span class="function">                              InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// Method implementation</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//Remainder of class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="声明自定义异常"><a href="#声明自定义异常" class="headerlink" title="声明自定义异常"></a>声明自定义异常</h1><ul><li>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。<ul><li>所有异常都必须是 Throwable 的子类。</li><li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li><li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li></ul></li></ul><p>可以像下面这样定义自己的异常类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 文件名InsufficientFundsException.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//自定义异常类，继承Exception类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsufficientFundsException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">InsufficientFundsException</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> amount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了展示如何使用我们自定义的异常类，</p><div class="note info flat"><p>在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/ 文件名称 CheckingAccount.java</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//此类模拟银行账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckingAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//balance为余额，number为卡号</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CheckingAccount</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：存钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      balance += amount;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：取钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">                              InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(amount &lt;= balance)</span><br><span class="line">      &#123;</span><br><span class="line">         balance -= amount;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">double</span> needs = amount - balance;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> InsufficientFundsException(needs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回余额</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> balance;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回卡号</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//文件名称 BankDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      CheckingAccount c = <span class="keyword">new</span> CheckingAccount(<span class="number">101</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Depositing $500...&quot;</span>);</span><br><span class="line">      c.deposit(<span class="number">500.00</span>);</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $100...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">100.00</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $600...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">600.00</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(InsufficientFundsException e)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Sorry, but you are short $&quot;</span></span><br><span class="line">                                  + e.getAmount());</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译上面三个文件，并运行程序 BankDemo，得到结果如下所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Depositing $<span class="number">500.</span>..</span><br><span class="line"></span><br><span class="line">Withdrawing $<span class="number">100.</span>..</span><br><span class="line"></span><br><span class="line">Withdrawing $<span class="number">600.</span>..</span><br><span class="line">Sorry, but you are <span class="keyword">short</span> $<span class="number">200.0</span></span><br><span class="line">InsufficientFundsException</span><br><span class="line">        at CheckingAccount.withdraw(CheckingAccount.java:<span class="number">25</span>)</span><br><span class="line">        at BankDemo.main(BankDemo.java:<span class="number">13</span>)</span><br></pre></td></tr></table></figure><h1 id="通用异常"><a href="#通用异常" class="headerlink" title="通用异常"></a>通用异常</h1><ul><li>在Java中定义了两种类型的异常和错误。<ul><li><strong>JVM(Java虚拟机) 异常</strong>：由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li><li><strong>程序级异常</strong>：由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;异常是一个在程序执行期间发生的事件，它中断了正在执行的程序的正</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉集合框架</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</id>
    <published>2021-01-05T09:53:42.483Z</published>
    <updated>2021-01-05T11:32:34.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><div class="note danger flat"><p>集合框架图||<a href="https://www.cnblogs.com/TestMa/p/10641367.html">深入了解Java集合框架</a></p></div><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/685c04437c657dd576d1f344e6150f1d.png"></p><div class="note danger flat"><p>简化图</p></div><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/ccf8d005b77641306e954349b9a0de3e.png"></p><ul><li>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是<strong>集合</strong>（Collection），<strong>存储一个元素集合</strong>，另一种是<strong>图</strong>（Map），<strong>存储键/值对映射</strong></li><li>所有集合类都位于<code>java.util</code>包下。Java的集合类主要由两个接口派生而出：<code>Collection</code>和<code>Map</code>，Collection和Map是Java集合框架的根接口，这两个接口又包含了一些子接口或实现类</li><li>集合接口：6个接口（短虚线表示），表示不同集合类型，是集合框架的基础。</li><li>抽象类：5个抽象类（长虚线表示），对集合接口的部分实现。可扩展为自定义集合类。</li><li>实现类：8个实现类（实线表示），对接口的具体实现。</li><li>Collection 接口是一组允许重复的对象。</li><li>Set 接口继承 Collection，集合元素不重复。</li><li>List 接口继承 Collection，允许重复，维护元素插入顺序。</li><li> Map接口是键－值对象，与Collection接口没有什么关系</li><li>Set、List和Map可以看做集合的三大类：<ul><li><strong>List集合是有序集合，集合中的元素可以重复，访问集合中的元素可以根据元素的索引来访问。</strong></li><li><strong>Set集合是无序集合，集合中的元素不可以重复，访问集合中的元素只能根据元素本身来访问（也是集合里元素不允许重复的原因）</strong>。</li><li><strong>Map集合中保存Key-value对形式的元素，访问时只能根据每项元素的key来访问其value。</strong></li></ul></li></ul><div class="note danger flat"><p>总体分析</p></div><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/d7f5c005f0eb6a26f00383daff53a164.png"></p><ul><li><p>看上面的框架图，先抓住它的主干，即<code>Collection</code>和<code>Map</code>。</p></li><li><p>Collection是一个接口，是高度抽象出来的集合，<strong>它包含了集合的基本操作和属性</strong>。Collection包含了<code>List</code>和<code>Set</code>两大分支。</p><ul><li>List是一个有序的队列，每一个元素都有它的索引。第一个元素的索引值是0。List的实现类有LinkedList, ArrayList, Vector, Stack。</li><li>Set是一个不允许有重复元素的集合。Set的实现类有HastSet和TreeSet。HashSet依赖于HashMap，它实际上是通过HashMap实现的；TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。</li></ul></li><li><p>Map是一个映射接口，即key-value键值对。Map中的每一个元素包含“一个key”和“key对应的value”。AbstractMap是个抽象类，它实现了Map接口中的大部分API。而HashMap，TreeMap，WeakHashMap都是继承于AbstractMap。Hashtable虽然继承于Dictionary，但它实现了Map接口。</p></li><li><p>接下来，再看Iterator。它是遍历集合的工具，即我们通常通过Iterator迭代器来遍历集合。我们说Collection依赖于Iterator，是因为Collection的实现类都要实现iterator()函数，返回一个Iterator对象。ListIterator是专门为遍历List而存在的。</p></li><li><p>再看Enumeration，它是JDK 1.0引入的抽象类。作用和Iterator一样，也是遍历集合；但是Enumeration的功能要比Iterator少。在上面的框图中，Enumeration只能在Hashtable, Vector, Stack中使用。</p></li><li><p>最后，看Arrays和Collections。它们是操作数组、集合的两个工具类。</p></li></ul><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><div class="note success flat"><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p></div><p><strong>ArrayList 继承了 AbstractList ，并实现了 List 接口。</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/d914809ba7014d922c1d1b3e28eef8e1.png"><br>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// 引入 ArrayList 类</span></span><br><span class="line">ArrayList&lt;E&gt; objectName =<span class="keyword">new</span> ArrayList&lt;&gt;();　 <span class="comment">// 初始化</span></span><br></pre></td></tr></table></figure><ul><li><strong>E</strong>: 泛型数据类型，用于设置 <strong>objectName</strong> 的数据类型，只能为引用数据类型。</li><li><strong>objectName</strong>: 对象名。</li></ul><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><div class="note success flat"><p>添加元素到 ArrayList 可以使用 <code>add()</code> 方法:</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Google, Runoob, Taobao, Weibo]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><div class="note success flat"><p>访问 ArrayList中的元素 可以使用 <code>get()</code> 方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites.get(<span class="number">1</span>));  <span class="comment">// 访问第二个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Runoob</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><div class="note success flat"><p>修改 ArrayList元素 可以使用 <code>set()</code> 方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        sites.set(<span class="number">2</span>, <span class="string">&quot;Wiki&quot;</span>); <span class="comment">// 第一个参数为索引位置，第二个为要修改的值</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Google, Runoob, Wiki, Weibo]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><div class="note success flat"><p>删除ArrayList 中的元素可以使用 <code>remove()</code> 方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        sites.remove(<span class="number">3</span>); <span class="comment">// 删除第四个元素</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Google, Runoob, Taobao]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="计算大小"><a href="#计算大小" class="headerlink" title="计算大小"></a>计算大小</h2><div class="note success flat"><p>计算ArrayList 中的元素数量可以使用 <code>size()</code> 方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="迭代数组"><a href="#迭代数组" class="headerlink" title="迭代数组"></a>迭代数组</h2><div class="note success flat"><p>我们可以使用 for 来迭代数组列表中的元素：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mport java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sites.size(); i++) &#123;</span><br><span class="line">            System.out.println(sites.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Google</span></span><br><span class="line"><span class="comment">Runoob</span></span><br><span class="line"><span class="comment">Taobao</span></span><br><span class="line"><span class="comment">Weibo</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>也可以使用<code>for-each</code>来迭代元素：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList排序"><a href="#ArrayList排序" class="headerlink" title="ArrayList排序"></a>ArrayList排序</h2><div class="note success flat"><p>Collections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  <span class="comment">// 引入 Collections 类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; myNumbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        myNumbers.add(<span class="number">33</span>);</span><br><span class="line">        myNumbers.add(<span class="number">15</span>);</span><br><span class="line">        myNumbers.add(<span class="number">20</span>);</span><br><span class="line">        myNumbers.add(<span class="number">34</span>);</span><br><span class="line">        myNumbers.add(<span class="number">8</span>);</span><br><span class="line">        myNumbers.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        Collections.sort(myNumbers);  <span class="comment">// 数字排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : myNumbers) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8  12  15  20   33  34</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="ArrayList方法"><a href="#ArrayList方法" class="headerlink" title="ArrayList方法"></a>ArrayList方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">add()</td><td align="center">将元素插入到指定位置的 arraylist 中</td></tr><tr><td align="center">addAll()</td><td align="center">添加集合中的所有元素到 arraylist 中</td></tr><tr><td align="center">clear()</td><td align="center">删除 arraylist 中的所有元素</td></tr><tr><td align="center">clone()</td><td align="center">复制一份 arraylist</td></tr><tr><td align="center">contains()</td><td align="center">判断元素是否在 arraylist</td></tr><tr><td align="center">get()</td><td align="center">通过索引值获取 arraylist 中的元素</td></tr><tr><td align="center">indexOf()</td><td align="center">返回 arraylist 中元素的索引值</td></tr><tr><td align="center">removeAll()</td><td align="center">删除存在于指定集合中的 arraylist 里的所有元素</td></tr><tr><td align="center">remove()</td><td align="center">删除 arraylist 里的单个元素</td></tr><tr><td align="center">size()</td><td align="center">返回 arraylist 里元素数量</td></tr><tr><td align="center">isEmpty()</td><td align="center">判断 arraylist 是否为空</td></tr><tr><td align="center">subList()</td><td align="center">截取部分 arraylist 的元素</td></tr><tr><td align="center">set()</td><td align="center">替换 arraylist 中指定索引的元素</td></tr><tr><td align="center">sort()</td><td align="center">对 arraylist 元素进行排序</td></tr><tr><td align="center">toArray()</td><td align="center">将 arraylist 转换为数组</td></tr><tr><td align="center">toString()</td><td align="center">将 arraylist 转换为字符串</td></tr><tr><td align="center">ensureCapacity()</td><td align="center">设置指定容量大小的 arraylist</td></tr><tr><td align="center">lastIndexOf()</td><td align="center">返回指定元素在 arraylist 中最后一次出现的位置</td></tr><tr><td align="center">retainAll()</td><td align="center">保留 arraylist 中在指定集合中也存在的那些元素</td></tr><tr><td align="center">containsAll()</td><td align="center">查看 arraylist 是否包含指定集合中的所有元素</td></tr><tr><td align="center">trimToSize()</td><td align="center">将 arraylist 中的容量调整为数组中的元素个数</td></tr><tr><td align="center">removeRange()</td><td align="center">删除 arraylist 中指定索引之间存在的元素</td></tr><tr><td align="center">replaceAll()</td><td align="center">将给定的操作内容替换掉数组中每一个元素</td></tr><tr><td align="center">removeIf()</td><td align="center">删除所有满足特定条件的 arraylist 元素</td></tr><tr><td align="center">forEach()</td><td align="center">遍历 arraylist 中每一个元素并执行特定操作</td></tr></tbody></table><div class="note default flat"><p>更多 API 方法可以查看：<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/ArrayList.html">https://www.runoob.com/manual/jdk11api/java.base/java/util/ArrayList.html</a></p></div><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><div class="note success flat"><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p></div><ul><li><p>链表可分为单向链表和双向链表。</p><ul><li>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/ee35ed2e420ca851beebe681feaf885b.png"></li><li>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/5d890c3ad9361bcf233c0a89371fa7eb.png"></li></ul></li><li><p>以下情况使用 ArrayList :</p><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul></li><li><p>以下情况使用 LinkedList :</p><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/dc8743019304d703d6e0cdea8c059585.png"></p><p> LinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList; </span><br><span class="line"></span><br><span class="line">LinkedList&lt;E&gt; list = <span class="keyword">new</span> LinkedList&lt;E&gt;();   <span class="comment">// 普通创建方法</span></span><br><span class="line">或者</span><br><span class="line">LinkedList&lt;E&gt; list = <span class="keyword">new</span> LinkedList(Collection&lt;? extends E&gt; c); <span class="comment">// 使用集合创建链表</span></span><br></pre></td></tr></table></figure><h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h2><div class="note success flat"><p>LinkedList使用<code>add()</code>、<code>addFirst()</code>、<code>addLast()</code>添加元素</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 addFirst() 在头部添加元素</span></span><br><span class="line">        sites.addFirst(<span class="string">&quot;Wiki&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 addLast() 在尾部添加元素</span></span><br><span class="line">        sites.addLast(<span class="string">&quot;Wiki&quot;</span>);</span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[wiki,Google,Runoob,Taobao,wiki]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><div class="note success flat"><p>LinkedList使用<code>removeFirst</code>、<code>removeLast</code>移除元素</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 removeFirst() 移除头部元素</span></span><br><span class="line">        sites.removeFirst();</span><br><span class="line">        <span class="comment">// 使用 removeLast() 移除尾部元素</span></span><br><span class="line">        sites.removeLast();</span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Runoob,Taobao]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><div class="note success flat"><p>LinkedList使用<code>getFirst()</code>、<code>getLast()</code>获取元素</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 getFirst() 获取头部元素</span></span><br><span class="line">        System.out.println(sites.getFirst()); <span class="comment">//Google</span></span><br><span class="line">         <span class="comment">// 使用 getLast() 获取尾部元素</span></span><br><span class="line">        System.out.println(sites.getLast()); <span class="comment">//weibo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代元素"><a href="#迭代元素" class="headerlink" title="迭代元素"></a>迭代元素</h2><div class="note success flat"><p>我们可以使用 for 配合 size() 方法来迭代列表中的元素：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> size = sites.size(), i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            System.out.println(sites.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Google</span></span><br><span class="line"><span class="comment">Runoob</span></span><br><span class="line"><span class="comment">Taobao</span></span><br><span class="line"><span class="comment">Weibo</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>也可以使用 for-each 来迭代元素：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 LinkedList 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList方法"><a href="#LinkedList方法" class="headerlink" title="LinkedList方法"></a>LinkedList方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean add(E e)</td><td align="center">链表末尾添加元素，返回是否成功，成功为 true，失败为 false</td></tr><tr><td align="center">public void add(int index, E element)</td><td align="center">向指定位置插入元素</td></tr><tr><td align="center">public boolean addAll(Collection c)</td><td align="center">将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false</td></tr><tr><td align="center">public boolean addAll(int index, Collection c)</td><td align="center">将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false</td></tr><tr><td align="center">public void addFirst(E e)</td><td align="center">元素添加到头部</td></tr><tr><td align="center">public void addLast(E e)</td><td align="center">元素添加到尾部</td></tr><tr><td align="center">public boolean offer(E e)</td><td align="center">向链表末尾添加元素，返回是否成功，成功为 true，失败为 false</td></tr><tr><td align="center">public boolean offerFirst(E e)</td><td align="center">头部插入元素，返回是否成功，成功为 true，失败为 false</td></tr><tr><td align="center">public boolean offerLast(E e)</td><td align="center">尾部插入元素，返回是否成功，成功为 true，失败为 false</td></tr><tr><td align="center">public void clear()</td><td align="center">清空链表</td></tr><tr><td align="center">public E removeFirst()</td><td align="center">删除并返回第一个元素</td></tr><tr><td align="center">public E removeLast()</td><td align="center">删除并返回最后一个元素</td></tr><tr><td align="center">public boolean remove(Object o)</td><td align="center">删除某一元素，返回是否成功，成功为 true，失败为 false</td></tr><tr><td align="center">public E remove(int index)</td><td align="center">删除指定位置的元素</td></tr><tr><td align="center">public E poll()</td><td align="center">删除并返回第一个元素</td></tr><tr><td align="center">public E remove()</td><td align="center">删除并返回第一个元素</td></tr><tr><td align="center">public boolean contains(Object o)</td><td align="center">判断是否含有某一元素</td></tr><tr><td align="center">public E get(int index)</td><td align="center">返回指定位置的元素</td></tr><tr><td align="center">public E getFirst()</td><td align="center">返回第一个元素</td></tr><tr><td align="center">public E getLast()</td><td align="center">返回最后一个元素</td></tr><tr><td align="center">public int indexOf(Object o)</td><td align="center">查找指定元素从前往后第一次出现的索引</td></tr><tr><td align="center">public int lastIndexOf(Object o)</td><td align="center">查找指定元素最后一次出现的索引</td></tr><tr><td align="center">public E peek()</td><td align="center">返回第一个元素</td></tr><tr><td align="center">public E element()</td><td align="center">返回第一个元素</td></tr><tr><td align="center">public E peekFirst()</td><td align="center">返回头部元素</td></tr><tr><td align="center">public E peekLast()</td><td align="center">返回尾部元素</td></tr><tr><td align="center">public E set(int index, E element)</td><td align="center">设置指定位置的元素</td></tr><tr><td align="center">public Object clone()</td><td align="center">克隆该列表</td></tr><tr><td align="center">public Iterator descendingIterator()</td><td align="center">返回倒序迭代器</td></tr><tr><td align="center">public int size()</td><td align="center">返回链表元素个数</td></tr><tr><td align="center">public ListIterator listIterator(int index)</td><td align="center">返回从指定位置开始到末尾的迭代器</td></tr><tr><td align="center">public Object[] toArray()</td><td align="center">返回一个由链表元素组成的数组</td></tr><tr><td align="center">public T[] toArray(T[] a)</td><td align="center">返回一个由链表元素转换类型而成的数组</td></tr></tbody></table><div class="note default flat"><p>更多 API 方法可以查看：<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/LinkedList.html">https://www.runoob.com/manual/jdk11api/java.base/java/util/LinkedList.html</a></p></div><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><ul><li>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。</li><li>HashSet 允许有 null 值。</li><li>HashSet 是无序的，即不会记录插入的顺序。</li><li>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</li><li>HashSet 实现了 Set 接口。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/1a20722c01c85d8d915d58058be7407d.png"></li></ul><p>HashSet 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet; <span class="comment">// 引入 HashSet 类</span></span><br><span class="line">HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素-2"><a href="#添加元素-2" class="headerlink" title="添加元素"></a>添加元素</h2><div class="note success flat"><p>HashSet 类提供类很多有用的方法，添加元素可以使用 <code>add()</code> 方法:</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);  <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Google, Runoob, Zhihu, Taobao]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h2><div class="note success flat"><p>我们可以使用<code> contains()</code> 方法来判断元素是否存在于集合当中:</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);  <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites.contains(<span class="string">&quot;Taobao&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><div class="note success flat"><p>我们可以使用 <code>remove()</code> 方法来删除集合中的元素:</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        sites.remove(<span class="string">&quot;Taobao&quot;</span>);  <span class="comment">// 删除元素，删除成功返回 true，否则为 false</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*[Google, Runoob, Zhihu]*/</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>删除集合中所有元素可以使用<code> clear</code> 方法：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        sites.clear();  </span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*[]*/</span></span><br></pre></td></tr></table></figure><h2 id="计算大小-1"><a href="#计算大小-1" class="headerlink" title="计算大小"></a>计算大小</h2><div class="note success flat"><p>如果要计算 HashSet 中的元素数量可以使用<code> size()</code> 方法：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites.size());  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="迭代HashSet"><a href="#迭代HashSet" class="headerlink" title="迭代HashSet"></a>迭代HashSet</h2><div class="note success flat"><p>可以使用<code> for-each</code> 来迭代 HashSet 中的元素。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);     <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        <span class="keyword">for</span> (String i : sites) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Google</span></span><br><span class="line"><span class="comment">Runoob</span></span><br><span class="line"><span class="comment">Zhihu</span></span><br><span class="line"><span class="comment">Taobao</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="note default flat"><p>更多 API 方法可以查看：<a href="https://www.runoob.com/manual/jdk11api/java.base/java/util/HashSet.html">https://www.runoob.com/manual/jdk11api/java.base/java/util/HashSet.html</a></p></div><h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p>Java Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法，可用于迭代 ArrayList 和 HashSet 等集合。<br>Iterator 是 Java 迭代器最简单的实现，ListIterator 是 Collection API 中的接口， 它扩展了 Iterator 接口。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/9925157dd24badabae26cd47b73e0cb2.png"></p><ul><li>迭代器 it 的两个基本操作是 next 、hasNext 和 remove。<ul><li>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。</li><li>调用 it.hasNext() 用于检测集合中是否还有元素。</li><li>调用 it.remove() 将迭代器返回的元素删除。</li></ul></li></ul><p>Iterator 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator; <span class="comment">// 引入 Iterator 类</span></span><br></pre></td></tr></table></figure><h2 id="获取一个迭代器"><a href="#获取一个迭代器" class="headerlink" title="获取一个迭代器"></a>获取一个迭代器</h2><div class="note success flat"><p>集合想获取一个迭代器可以使用 iterator() 方法:</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 ArrayList 和 Iterator 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = sites.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出集合中的第一个元素</span></span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Google*/</span></span><br></pre></td></tr></table></figure><h2 id="循环集合元素"><a href="#循环集合元素" class="headerlink" title="循环集合元素"></a>循环集合元素</h2><div class="note success flat"><p>让迭代器 it 逐个返回集合中所有元素最简单的方法是使用 while 循环：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 ArrayList 和 Iterator 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = sites.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出集合中的所有元素</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Google</span></span><br><span class="line"><span class="comment">Runoob</span></span><br><span class="line"><span class="comment">Taobao</span></span><br><span class="line"><span class="comment">Zhihu</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集合框架&quot;&gt;&lt;a href=&quot;#集合框架&quot; class=&quot;headerlink&quot; title=&quot;集合框架&quot;&gt;&lt;/a&gt;集合框架&lt;/h1&gt;&lt;div class=&quot;note danger flat&quot;&gt;&lt;p&gt;集合框架图||&lt;a href=&quot;https://www.cnbl</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉面向对象</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-01-05T08:00:09.541Z</published>
    <updated>2021-01-05T12:21:46.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><strong>类</strong>实质上是封装对象<strong>属性</strong>和<strong>行为</strong>的载体，<strong>对象</strong>则是类抽象出来的一个<strong>实例</strong>,类是静态的概念，而对象则是一个动态的概念，因为只有运行时才给对象分配空间，对象才真正存在。</p><ul><li>面向对象：是一种通过对象的方式，把现实世界<strong>映射到计算机模型</strong>的一种编程方法。</li><li>面向过程：是把模型<strong>分解成一步一步</strong>的过程。</li></ul><div class="note info flat"><p>面向对象程序设计具有以下特点：</p></div><ol><li><code>封装性</code>：解决了数据的安全性问题。</li><li><code>继承性</code>：解决了代码的重用问题。</li><li><code>多态性</code>：解决了程序的扩展问题。</li></ol><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><div class="note success flat"><p><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如人的状态有名字、年龄，行为有吃饭、睡觉<br><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p></div><p>下图图中汽车为类（class），而具体的每个人车该类的对象（object），对象包含含来汽车的颜色、品牌、名称等：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/13a287ae652fc586d28cbcc3f60fb5d5.png"></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li><strong>类是一系列对象的抽象</strong>。</li><li>类是<strong>变量和方法的集合体</strong>。</li><li>类是Java中基本的<strong>结构单元</strong>。所有的Java语句均出现在类中，所有的方法均在类中定义。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    String breed;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    String colour;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>一个类可以包含以下类型变量：<ul><li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li></ul></li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>构造方法<strong>没有</strong>返回值,不需要写void,只用public声明。</li><li>构造方法名称要与<strong>本类的名称相同</strong>。</li><li>一旦为类编写构造方法,默认的构造方法将会被<strong>覆盖</strong>。</li><li>编写构造方法的目的是向对象<strong>传递参数</strong>(一般有参),以及对成员变量进行<strong>初始化</strong>(一般无参)。</li><li>构造方法同样支持方法<strong>重载</strong>。</li><li>构造方法不能被static,final,abstract,synchronized,native等修饰符修饰。</li><li>构造方法中只能使用成员变量，而且当参数与成员变量同名时，只能用关键字<strong>this</strong>指明当前对象。</li><li>构造方法不能<strong>被程序直接调用</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">String color;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> sum)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> sum,String color)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">createApple</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Apple apple1 = <span class="keyword">new</span> Apple();</span><br><span class="line">Apple apple2 = <span class="keyword">new</span> Apple(<span class="number">1</span>);</span><br><span class="line">Apple apple3 = <span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">Apple apple4 = <span class="keyword">new</span> Apple(<span class="number">2</span>,<span class="string">&quot;color&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><div class="note success flat"><p>象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：</p></div><ul><li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li><li><strong>实例化</strong>：使用关键字 <code>new</code> 来创建一个对象。</li><li><strong>初始化</strong>：使用 new 创建对象时，会调用构造方法初始化对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">&quot;tommy&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h3><p> 通过已创建的对象来访问成员变量和成员方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line">Object referenceVariable = <span class="keyword">new</span> Constructor();</span><br><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">referenceVariable.variableName;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">referenceVariable.methodName();</span><br></pre></td></tr></table></figure><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><div class="note success flat"><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</p></div><ul><li> <strong>修改属性的可见性来限制对属性的访问（一般限制为private），例如：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>这段代码中，将 name 和 age 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。 </p></div><ul><li><strong>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>采用 <code>this</code>关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</p></div><h2 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/be34001ec3ea1c793131239a2be7b132.png"></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><div class="note success flat"><p>继承就是子类继承父类的<strong>特征</strong>和<strong>行为</strong>，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p></div><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/80929c510c42f3c6649fd6ebcbf6d2b5.png"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>在 Java 中通过 <code>extends</code> 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/782bedb70936cb9c995859ae1fdfd17d.png"></p><h2 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h2><ul><li>子类拥有父类非 private 的属性、方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li><li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li></ul><h2 id="继承关键字"><a href="#继承关键字" class="headerlink" title="继承关键字"></a>继承关键字</h2><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 java.lang 包中，所以不需要 import）祖先类。</p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, String myid)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>  <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super与this"><a href="#super与this" class="headerlink" title="super与this"></a>super与this</h3><div class="note primary flat"><p><strong>super关键字</strong>：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。<br><strong>this关键字</strong>：指向自己的引用。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;animal : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;dog : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">    <span class="keyword">super</span>.eat();  <span class="comment">// super 调用父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">    a.eat();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.eatTest();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">animal : eat</span></span><br><span class="line"><span class="comment">dog : eat</span></span><br><span class="line"><span class="comment">animal : eat</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：</p><ul><li><p>声明类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;<span class="comment">//类体&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>声明方法<br><code>修饰符(public/private/default/protected) final 返回值类型 方法名()&#123;//方法体&#125;</code></p></li></ul><div class="note danger flat"><p>实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final</p></div><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static可以用来修饰成员变量和方法。</p><ul><li><strong>静态变量</strong>，也成为类变量。静态变量<strong>不需要类的实例化</strong>就可以被类直接调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String name=<span class="string">&quot;zhangsan&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>静态方法</strong>，就是没有this的方法，可以直接使用<code>类名.方法名</code>进行调用。静态方法不依赖任何对象直接访问，在静态方法中不能访问类的非静态成员变量和非静态方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cxuan is writing the article&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> <strong>静态代码块</strong>,可用于类的初始化操作。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaicBlock</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I&#x27;m A static code block&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Override-Overload"><a href="#Override-Overload" class="headerlink" title="Override/Overload"></a>Override/Overload</h1><h2 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h2><div class="note success flat"><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！</p></div><ul><li>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。</li><li>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.printl(<span class="string">&#x27;eat fruit&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.printl(<span class="string">&#x27;eat apple&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h3><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li> 返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为 final 的方法不能被重写。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><h3 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h3><div class="note success flat"><p>当需要在子类中调用父类的被重写方法时，要使用 <code>super</code> 关键字。 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;动物可以移动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.move(); <span class="comment">// 应用super类的方法</span></span><br><span class="line">      System.out.println(<span class="string">&quot;狗可以跑和走&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line">      b.move(); <span class="comment">//执行 Dog类的方法</span></span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动物可以移动</span></span><br><span class="line"><span class="comment">狗可以跑和走</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h2><div class="note success not flat"><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p></div><h3 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a>重载规则</h3><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(int,int)方法:&quot;</span>+add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(double,double)方法:&quot;</span>+add(<span class="number">1.3</span>,<span class="number">2.2</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(int)方法:&quot;</span>+add(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/ff952568c5c00af47a156165c8807d66.png"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><div class="note success flat"><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p></div><p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/e61501b07825db70c5d049bbc9c9b9d6.png"></p><h2 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h2><div class="note danger flat"><p>多态存在的三个必要条件</p></div><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象：<code>Parent p = new Child()</code>;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/867ff4a2183036701745785187134539.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Triangle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。 </p><ul><li><strong>只要类中有一个抽象方法</strong>，此类就被标记为抽象类</li><li>抽象类除了<strong>不能实例化对象</strong>，只能用来继承</li><li>抽象类的子类必须重写抽象类中的<strong>所有抽象方法</strong>。</li><li>在Java中抽象类表示的是一种继承关系，<strong>一个类只能继承一个抽象类，而一个类却可以实现多个接口</strong>。</li><li>在Java语言中使用<code>abstract class</code>来定义抽象类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">testAbstract</span><span class="params">()</span></span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>某个类中所有方法<strong>都为抽象方法</strong>，此类可定义为接口。关键字<code>interface</code>。</li><li>接口不可以实例化，只能用关键字<code>implements</code>实现。某个类可以实现<strong>多个接口</strong>。</li><li>如果父类使用了某个接口，则子类也就自然使用了该接口，子类不必再使用implements声明自己使用这个接口。</li><li>接口可以被<strong>继承</strong>，可以通过关键字extends声明一个接口是另一个接口的子接口。子接口将继承父接口中的全部方法和常量。</li><li>如果一个类声明实现一个接口，但没有实现接口中的所有方法，那么这个类必须是抽象类。</li><li>类在实现接口方法时必须给出方法体，一定要用<code>public</code>修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//实现接口中的方法。</span></span><br><span class="line"> <span class="keyword">return</span> x+y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h2><ul><li><p><strong>接口与类相似点</strong></p><ul><li>一个接口可以有多个方法。</li><li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在 .class 结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul></li><li><p><strong>接口与类的区别</strong></p><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承。</li></ul></li><li><p><strong>接口特性</strong></p><ul><li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract（只能是 public abstract，其他修饰符都会报错）。</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量（并且只能是 public，用 private 修饰会报编译错误）。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li></ul></li><li><p><strong>抽象类和接口的区别</strong></p><ol><li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。</li><li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;类&lt;/strong&gt;实质上是封装对象&lt;strong&gt;属性&lt;/strong&gt;和&lt;strong&gt;行为&lt;/stro</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java👉核心基础</title>
    <link href="http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/01/05/%E5%90%8E%E7%AB%AF/Java/Java_%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2021-01-05T06:42:01.563Z</published>
    <updated>2021-01-05T10:28:43.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教程推荐"><a href="#教程推荐" class="headerlink" title="教程推荐"></a>教程推荐</h1><div class="note success flat"><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744">Java教程</a>||<a href="https://www.runoob.com/java/java-tutorial.html">Java教程|菜鸟教程</a>||<a href="https://blog.csdn.net/Tianc666/article/details/109239195?utm_source=app">小名的《Java编程思想》学习笔记</a>||<a href="https://www.vxzsk.com/tags/80.html">Java开发手册</a>||<a href="https://www.java.com/zh-CN/download/help/index_installing.html">Java技术帮助</a></p></div><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java最早是由SUN公司（已被Oracle收购）的<strong>詹姆斯·高斯林</strong>（高司令，人称Java之父）在上个世纪90年代初开发的一种编程语言。</p><p>Java 主要分为三个版本：</p><ul><li><code>JavaSE</code>(J2SE)(Java2 Platform Standard Edition，java平台标准版)</li><li><code>JavaEE</code>(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li><code>JavaME</code>(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li></ul><h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><ul><li><p><strong>跨平台性</strong>:跨平台性是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。 Java自带的虚拟机很好地实现了跨平台性。</p></li><li><p>.<strong>面向对象</strong>:面向对象(Objiect Oriented)是一种软件开发思想。它是对现实世界的一种抽象，面向对象会把相关的数据和方法组织为一个整体看待。不用像面向过程那样严格按照顺序来执行每个动作。</p></li><li><p><strong>健壮性</strong>:Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。</p></li><li><p><strong>多线程</strong>:是一种轻量级进程，是现代程序设计中必不可少的一种特性。多线程处理能力使得程序能够具有更好的交互性、实时性。</p></li></ul><h2 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h2><ul><li>Java语言编写的程序既是<strong>编译型的，又是解释型</strong>。</li><li>运行期环境代表着Java平台，开发人员编写Java代码(<code>.java文件</code>)，然后用Java编译器将之编译成字节码(<code>.class文件</code>)，JVM才能识别并运行它（<strong>编译只进行一次，而解释在每次运行程序时都会进行</strong>）</li><li>JVM针对每个操作系统开发其对应的解释器，所以只要其操作系统有对应版本的JVM，那么这份Java编译后的代码就能够运行起来，这就是Java能<strong>一次编译，到处运行</strong>的原因</li></ul><div class="note default flat"><p>*.java-&gt;*.class-&gt;字节码-&gt;机器码</p></div><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@d3a99ed6e3318056b293e2a87abbb4ed698fd9b0/2020/11/16/ea50b091a4253c41449ca87dd53389ed.png"><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/1db25e96ee4e5eebd0302ce9d07eee1a.png"><br>  1.<code>JVM</code>(Java Virtual Machine)：虚拟机,使软件在不同操作系统中，模拟相同的环境。<br>  2.<code>JRE</code>(Java Runtime Environment)：Java运行环境,包含<code>JVM和解释器</code>，完整的运行环境.<br>  3.<code>JDK</code>(Java Development Kit)：Java开发工具包，包含<code>JRE+类+开发工具包</code><br>  4.<code>API</code>(Application Programming Interface)：<code>程序编程接口</code>，JavaAPI文档是Java程序员开发不可缺少的编程辞典。<br><a href="https://www.oracle.com/index.html">JDK下载:Oracle公司官方网站</a><br><a href="https://www.eclipse.org/">Eclipse开发工具下载</a></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><div class="note danger flat"><p>配置环境变量的原因：系统不知道去哪找JDK</p></div><p>我的电脑-&gt;属性-&gt;高级系统设置-&gt;<code>环境变量</code></p><p>第一步：新建<code>JAVA_HOME</code>变量名，并找到<code>JDK路径</code>作为变量值<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/2124f1b8f6982d2e60f0ced503822a88.png"></p><p>第二步：新建<code>CLASSPATH</code>变量名，并把(<code>.</code>)作为变量值，指代当前路径。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/dd87ad9aec208a6c9dad713b102c903e.png"></p><div class="note info flat"><p>根据CLASSPATH环境变量定位类，在JDK1.4版本以前需要设置CLASSPATH变量值为(.)，用以告诉JRE需要在当前路径下搜索Java类。</p></div><p>第三步：找到Path目录，把JDK下bin目录作为新建值，bin目录下有Java命令工具，此Path路径告诉计算机所用Java指令去哪找。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/42c44687d3f4a60648175e2b6ca55a82.png"></p><div class="note info flat"><p>Windows操作系统是根据Path环境变量来查找命令，Path环境变量的值是一系列路径，根据路径查找。</p></div><h1 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h1><div class="note success flat"><p>变量是在程序的运行过程中其值可以被改变的量。</p></div><p>Java中的变量遵循<strong>先声明、后赋值、再使用的原则</strong>。声明的作用有两点：</p><ol><li>确定该变量的标识符(即名称)，以便系统为它指定存储地址和识别它，这便是“按名访问”原则；</li><li>为该变量指定数据类型，以便系统为它分配足够的存储单元。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">45</span>;   <span class="comment">//实例变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y=<span class="number">90</span>;  <span class="comment">//静态变量</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>常量是指在程序的整个运行过程中其值始终保持不变的量。</p></div><p>Java语言用<code>final</code> 关键字来定义常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> PI=<span class="number">3.1415</span>;</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><div class="note primary flat"><p>在Java中，数据类型只有<strong>四类八种</strong></p></div><ul><li>整数型：byte、short、int、long</li><li>浮点型：float和double</li><li>字符型：char</li><li>布尔型：boolean</li></ul><table><thead><tr><th align="center">数据类型</th><th align="center">内存</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">8位</td><td align="center">0</td></tr><tr><td align="center">short</td><td align="center">16位</td><td align="center">0</td></tr><tr><td align="center">int</td><td align="center">32位</td><td align="center">0</td></tr><tr><td align="center">long</td><td align="center">64位</td><td align="center">0L</td></tr><tr><td align="center">float</td><td align="center">32位</td><td align="center">0.0f</td></tr><tr><td align="center">double</td><td align="center">64位</td><td align="center">0.0d</td></tr><tr><td align="center">char</td><td align="center">16位</td><td align="center">\u0000</td></tr><tr><td align="center">boolean</td><td align="center">8位</td><td align="center">false</td></tr></tbody></table><div class="note warning flat"><p>基础语法</p></div><ul><li>大小写敏感</li><li>类名：首字母大写，例如<code>MyFirstClass</code></li><li>包名：包名尽量小写,例如<code>my.first.package</code></li><li>方法命：首字母小写，后面每个单词字母都需要大写，例如<code>myFirstMethod()</code></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li><p><strong>赋值运算</strong><br>使用操作符<code>=</code>表示，意思是把右边的值复制给左边，右边的值可以是任何常数、变量或者表达式，但左边的值必须是明确的，以及定义的变量。<br>但对于对象来说，复制的表示对象的值，而是对象的引用，实际上是将<strong>一个对象的引用赋值给另一个对象</strong></p></li><li><p><strong>算术运算符</strong></p></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td></tr><tr><td align="center">-</td><td align="center">减</td></tr><tr><td align="center">*</td><td align="center">乘</td></tr><tr><td align="center">/</td><td align="center">除</td></tr><tr><td align="center">%</td><td align="center">取余</td></tr></tbody></table><ul><li><strong>自增、自减运算符</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设a=4</span></span><br><span class="line">b=a++; <span class="comment">//先将a的值加1，然后赋值给b，此时a=5,b=5</span></span><br><span class="line">b=++a; <span class="comment">//先将a的值赋给b，再将a的值变为5，此时a=5,b=4</span></span><br></pre></td></tr></table></figure><ul><li><strong>关系运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr></tbody></table><ul><li><strong>逻辑运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">！</td><td align="center">逻辑非</td></tr><tr><td align="center">&amp;</td><td align="center">逻辑与</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">^</td><td align="center">逻辑异或</td></tr></tbody></table><ul><li><strong>位运算符</strong><br>按位运算符用来操作整数基本类型中的每个**比特 **位，也就是二进制位。</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与 eg:4&amp;5=4</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">~</td><td align="center">非 eg:4^5=1</td></tr><tr><td align="center">^</td><td align="center">异或 eg:<del>4=</del>5</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移运算符 eg:8&gt;&gt;1=4</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移运算符 eg:9&lt;&lt;2=36</td></tr></tbody></table><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><div class="note primary flat"><p>Java流程控制包括 <strong>if-else、while、do-while、for、return、break 以及选择语句 switch</strong> 等。</p></div><ul><li> <strong>if条件语句</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>if…else条件语句</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year=(<span class="keyword">int</span>)(Math.random()*<span class="number">2000</span>)+<span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;The year is:&quot;</span>+year);</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> ||year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">System.out.println(year+<span class="string">&quot;年是闰年!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(year+<span class="string">&quot;年不是闰年!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>if…else if 多分支语句</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多条件判断</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于60&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于30但小于60&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于0但小于30&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值小于等于0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>switch分支语句</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断整数类型</span></span><br><span class="line"><span class="keyword">switch</span> (option) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>表达式option只能返回几个数据类型的值：int、short、byte、char<br>case子句中的值必须是常量，而且所有case子句中的值是不同的</p></div><ul><li><strong>While 循环</strong><br>while循环通常用于<strong>循环次数不确定</strong>的情况，也可以用于循环次数确定的情况。<br>利用一个条件来判断<strong>是否反复</strong>执行这个语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;   <span class="comment">//条件为true，执行循环语句，条件为false退出循环。</span></span><br><span class="line"> 循环语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续执行后续代码</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(a &gt; <span class="number">5</span>)&#123;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>do while循环</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;                    <span class="comment">//先执行循环，再判断条件</span></span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nt b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// do···while循环语句</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;b == &quot;</span> + b);</span><br><span class="line">b--;</span><br><span class="line">&#125; <span class="keyword">while</span>(b == <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>for循环</strong><br>for循环执行时，首先执行<strong>初始化操作</strong>，然后<strong>判断终止条件</strong>是否被满足，如果满足<strong>执行循环体</strong>，最后<strong>执行迭代运算</strong>。完成一次循环后，重新判断终止条件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 循环检测条件; 迭代运算) &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>for each循环（增强for）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array[] = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr : array) &#123;</span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>break</strong></li></ul><p>用于<strong>强行退出</strong>当前循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span>)&#123;  <span class="comment">//i=5跳出循环</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>continue</strong></li></ul><p>用于执行<strong>下一次循环</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">  System.out.printl(<span class="string">&quot; i = &quot;</span> + i );</span><br><span class="line"> <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;  <span class="comment">//执行下一次循环</span></span><br><span class="line">System.out.printl(<span class="string">&quot;continue ... &quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><div class="note success flat"><p>Java为了能将基本数据类型视为对象处理，并能连接相关的方法，为每个数据类型都提供了包装类。</p></div><ul><li><p>所有的包装类（<code>Integer、Long、Byte、Double、Float、Short</code>）都是抽象类 Number 的子类。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/27e46087e5812a35776ca4de2c37722e.png"></p></li><li><p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Integer x = <span class="number">5</span>;</span><br><span class="line">      x =  x + <span class="number">10</span>;</span><br><span class="line">      System.out.println(x); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><div class="note success flat"><p>在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;Runoob&quot;</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s2 = <span class="string">&quot;Runoob&quot;</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s3 = s1;                    <span class="comment">// 相同引用</span></span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">&quot;Runoob&quot;</span>);   <span class="comment">// String 对象创建</span></span><br><span class="line">String s5 = <span class="keyword">new</span> String(<span class="string">&quot;Runoob&quot;</span>);   <span class="comment">// String 对象创建</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/32b23001ed48ed923a79c97241bb4ce5.png"></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">str.length()</td><td align="center">返回字符串长度</td></tr><tr><td align="center">str.indexOf(substr)</td><td align="center">返回指定字符串首次出现的索引位置。没有找到返回-1,字符串下标0~length()-1</td></tr><tr><td align="center">str.lastIndexOf(String str)</td><td align="center">返回指定字符串最后一次出现的索引位置，没有找到返回-1</td></tr><tr><td align="center">str.charAt(int index)</td><td align="center">返回指定索引处的字符</td></tr><tr><td align="center">str.substring(int beginIndex)</td><td align="center">获取从指定位置开始截取到该字符串结尾的子串</td></tr><tr><td align="center">str.substring(int beginIndex,int endIndex)</td><td align="center">获取从指定位置开始截取到某一位置的子串</td></tr><tr><td align="center">str.trim()</td><td align="center">返回字符串的副本，忽略前后空格</td></tr><tr><td align="center">str.replace(char old,char new)</td><td align="center">将指定字符串或字符替换为新字符串或字符</td></tr><tr><td align="center">str.startsWith(String s)</td><td align="center">判断是否以s开头</td></tr><tr><td align="center">str.endsWith(String s)</td><td align="center">判断是否以s结尾</td></tr><tr><td align="center">str1.equals(str2)</td><td align="center">比较是否有相同的字符和长度</td></tr><tr><td align="center">str1.equalsIgnoreCase(str2)</td><td align="center">不区分大小写比较</td></tr><tr><td align="center">str.toLowerCase()</td><td align="center">转为小写</td></tr><tr><td align="center">str.toUpperCase()</td><td align="center">转为大写</td></tr></tbody></table><div class="note danger flat"><p>String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了<br>如果需要对字符串做很多修改，那么应该选择使用 StringBuffer &amp; StringBuilder 类。 </p></div><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><div class="note success flat"><p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。 </p></div><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/8a0042804c8ce0c32560757922eed840.png"></p><ul><li>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，<strong>而不是生成新的对象</strong>，所以如果需要对字符串进行修改推荐使用 StringBuffer。</li><li>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法<strong>不是线程安全的</strong>（不能同步访问）。</li><li>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">10</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Runoob..&quot;</span>);</span><br><span class="line">        System.out.println(sb);  </span><br><span class="line">        sb.append(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.insert(<span class="number">8</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.delete(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">        System.out.println(sb);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Runoob..</span></span><br><span class="line"><span class="comment">Runoob..!</span></span><br><span class="line"><span class="comment">Runoob..Java!</span></span><br><span class="line"><span class="comment">RunooJava!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/c79b89f6eed726dc913a2f9b9c8a2711.png"></p><div class="note danger flat"><p>然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    StringBuffer sBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;菜鸟教程官网：&quot;</span>);</span><br><span class="line">    sBuffer.append(<span class="string">&quot;www&quot;</span>);</span><br><span class="line">    sBuffer.append(<span class="string">&quot;.runoob&quot;</span>);</span><br><span class="line">    sBuffer.append(<span class="string">&quot;.com&quot;</span>);</span><br><span class="line">    System.out.println(sBuffer);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">菜鸟教程官网：www.runoob.com</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">StringBuffer方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringBuffer append(String s)</td><td align="center">将指定的字符串追加到此字符序列</td></tr><tr><td align="center">public StringBuffer reverse()</td><td align="center">将此字符序列用其反转形式取代</td></tr><tr><td align="center">public delete(int start, int end)</td><td align="center">移除此序列的子字符串中的字符</td></tr><tr><td align="center">public insert(int offset, int i)</td><td align="center">将 int 参数的字符串表示形式插入此序列中</td></tr><tr><td align="center">replace(int start, int end, String str)</td><td align="center">使用给定 String 中的字符替换此序列的子字符串中的字符</td></tr></tbody></table><div class="note danger flat"><p>除以上几种方法外，其他方法与String类似</p></div><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><div class="note success flat"><p>Java 语言中提供的数组是用来存储固定大小的同类型元素。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 数组大小</span></span><br><span class="line">      <span class="keyword">int</span> size = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 定义数组</span></span><br><span class="line">      <span class="keyword">double</span>[] myList = <span class="keyword">new</span> <span class="keyword">double</span>[size];</span><br><span class="line">      myList[<span class="number">0</span>] = <span class="number">5.6</span>;</span><br><span class="line">      myList[<span class="number">1</span>] = <span class="number">4.5</span>;</span><br><span class="line">      myList[<span class="number">2</span>] = <span class="number">3.3</span>;</span><br><span class="line">      myList[<span class="number">3</span>] = <span class="number">13.2</span>;</span><br><span class="line">      myList[<span class="number">4</span>] = <span class="number">4.0</span>;</span><br><span class="line">      myList[<span class="number">5</span>] = <span class="number">34.33</span>;</span><br><span class="line">      myList[<span class="number">6</span>] = <span class="number">34.0</span>;</span><br><span class="line">      myList[<span class="number">7</span>] = <span class="number">45.45</span>;</span><br><span class="line">      myList[<span class="number">8</span>] = <span class="number">99.993</span>;</span><br><span class="line">      myList[<span class="number">9</span>] = <span class="number">11123</span>;</span><br><span class="line">      <span class="comment">// 计算所有元素的总和</span></span><br><span class="line">      <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         total += myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;总和为： &quot;</span> + total);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/05/c5d440032302006719c625d027d7e1c3.png"></p><h2 id="处理数组"><a href="#处理数组" class="headerlink" title="处理数组"></a>处理数组</h2><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 打印所有数组元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">double</span> element: myList) &#123;</span><br><span class="line">         System.out.println(element);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><div class="note success flat"><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p></div><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public static int binarySearch(Object[] a, Object key)</td><td align="center">用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)</td></tr><tr><td align="center">public static boolean equals(long[] a, long[] a2)</td><td align="center">如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）</td></tr><tr><td align="center">public static void fill(int[] a, int val)</td><td align="center">将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）</td></tr><tr><td align="center">public static void sort(Object[] a)</td><td align="center">对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）</td></tr></tbody></table><h1 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h1><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><div class="note success flat"><p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date dt=<span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean after(Date date)</td><td align="center">若当调用此方法的Date对象在指定日期之后返回true,否则返回false</td></tr><tr><td align="center">boolean before(Date date)</td><td align="center">若当调用此方法的Date对象在指定日期之前返回true,否则返回false</td></tr><tr><td align="center">Object clone( )</td><td align="center">返回此对象的副本</td></tr><tr><td align="center">int compareTo(Date date)</td><td align="center">比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数</td></tr><tr><td align="center">int compareTo(Object obj)</td><td align="center">若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException</td></tr><tr><td align="center">boolean equals(Object date)</td><td align="center">当调用此方法的Date对象和指定日期相等时候返回true,否则返回false</td></tr><tr><td align="center">long getTime( )</td><td align="center">返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数</td></tr><tr><td align="center">int hashCode( )</td><td align="center">返回此对象的哈希码值</td></tr><tr><td align="center">void setTime(long time)</td><td align="center">用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期</td></tr><tr><td align="center">String toString( )</td><td align="center">把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">       Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 使用 toString() 函数显示日期时间</span></span><br><span class="line">       System.out.println(date.toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Mon May 04 09:51:52 CDT 2013</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="SimpleDateFormat-格式化日期"><a href="#SimpleDateFormat-格式化日期" class="headerlink" title="SimpleDateFormat 格式化日期"></a>SimpleDateFormat 格式化日期</h2><div class="note success flat"><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span>  java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      Date dNow = <span class="keyword">new</span> Date( );</span><br><span class="line">      SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当前时间为: 2018-09-06 10:16:34</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure><p>这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</p><div class="note warning flat"><p>注意:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制</p></div><h2 id="日期和时间格式化编码"><a href="#日期和时间格式化编码" class="headerlink" title="日期和时间格式化编码"></a>日期和时间格式化编码</h2><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p><table><thead><tr><th align="center">字母</th><th align="center">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">G</td><td align="center">纪元标记</td><td align="center">AD</td></tr><tr><td align="center">y</td><td align="center">四位年份</td><td align="center">2001</td></tr><tr><td align="center">M</td><td align="center">月份</td><td align="center">July or 07</td></tr><tr><td align="center">d</td><td align="center">一个月的日期</td><td align="center">10</td></tr><tr><td align="center">h</td><td align="center">A.M./P.M. (1~12)格式小时</td><td align="center">12</td></tr><tr><td align="center">H</td><td align="center">一天中的小时 (0~23)</td><td align="center">22</td></tr><tr><td align="center">m</td><td align="center">分钟数</td><td align="center">30</td></tr><tr><td align="center">s</td><td align="center">秒数</td><td align="center">55</td></tr><tr><td align="center">S</td><td align="center">毫秒数</td><td align="center">234</td></tr><tr><td align="center">E</td><td align="center">星期几</td><td align="center">Tuesday</td></tr><tr><td align="center">D</td><td align="center">一年中的日子</td><td align="center">360</td></tr><tr><td align="center">F</td><td align="center">一个月中第几周的周几</td><td align="center">2 (second Wed. in July)</td></tr><tr><td align="center">w</td><td align="center">一年中第几周</td><td align="center">40</td></tr><tr><td align="center">W</td><td align="center">一个月中第几周</td><td align="center">1</td></tr><tr><td align="center">a</td><td align="center">A.M./P.M. 标记</td><td align="center">PM</td></tr><tr><td align="center">k</td><td align="center">一天中的小时(1~24)</td><td align="center">24</td></tr><tr><td align="center">K</td><td align="center">A.M./P.M. (0~11)格式小时</td><td align="center">10</td></tr><tr><td align="center">z</td><td align="center">时区</td><td align="center">Eastern Standard Time</td></tr><tr><td align="center">‘</td><td align="center">文字定界符</td><td align="center">Delimiter</td></tr><tr><td align="center">“</td><td align="center">单引号</td><td align="center"></td></tr></tbody></table><h2 id="使用printf格式化日期"><a href="#使用printf格式化日期" class="headerlink" title="使用printf格式化日期"></a>使用printf格式化日期</h2><div class="note success flat"><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 %t 开头并且以下面表格中的一个字母结尾。</p></div><table><thead><tr><th align="center">转换符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">c</td><td align="center">包括全部日期和时间信息</td><td align="center">星期六 十月 27 14:21:20 CST 2007</td></tr><tr><td align="center">F</td><td align="center">“年-月-日”格式</td><td align="center">2007-10-27</td></tr><tr><td align="center">D</td><td align="center">“月/日/年”格式</td><td align="center">10/27/07</td></tr><tr><td align="center">r</td><td align="center">“HH:MM:SS PM”格式（12时制）</td><td align="center">02:25:51 下午</td></tr><tr><td align="center">T</td><td align="center">“HH:MM:SS”格式（24时制）</td><td align="center">14:28:16</td></tr><tr><td align="center">R</td><td align="center">“HH:MM”格式（24时制）</td><td align="center">14:28</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">     Date date = <span class="keyword">new</span> Date();</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//c的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class="line">    <span class="comment">//f的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//d的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//r的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//t的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//R的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  </span></span><br><span class="line"><span class="comment">年-月-日格式：2012-09-10  </span></span><br><span class="line"><span class="comment">月/日/年格式：09/10/12  </span></span><br><span class="line"><span class="comment">HH:MM:SS PM格式（12时制）：10:43:36 上午  </span></span><br><span class="line"><span class="comment">HH:MM:SS格式（24时制）：10:43:36  </span></span><br><span class="line"><span class="comment">HH:MM格式（24时制）：10:43  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;教程推荐&quot;&gt;&lt;a href=&quot;#教程推荐&quot; class=&quot;headerlink&quot; title=&quot;教程推荐&quot;&gt;&lt;/a&gt;教程推荐&lt;/h1&gt;&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefen</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Font Awesome图标</title>
    <link href="http://example.com/2021/01/04/%E5%85%B6%E4%BB%96/Font%20Awesome%E5%9B%BE%E6%A0%87/"/>
    <id>http://example.com/2021/01/04/%E5%85%B6%E4%BB%96/Font%20Awesome%E5%9B%BE%E6%A0%87/</id>
    <published>2021-01-04T05:07:13.348Z</published>
    <updated>2021-01-04T08:17:38.180Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css"><h1 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h1><p><a href="https://fontawesome.dashgame.com/">一套绝佳的图标字体库和CSS框架</a><br><a href="https://www.runoob.com/font-awesome/fontawesome-reference.html">Font Awesome参考手册</a></p><ul><li><p>Font Awesome 是一套绝佳的图标字体库和CSS框架。</p></li><li><p>Font Awesome 字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。</p></li></ul><h1 id="引入CDN"><a href="#引入CDN" class="headerlink" title="引入CDN"></a>引入CDN</h1><ul><li><p>要使用Font Awesome图标，请在<strong>HTML页面</strong>的 部分中添加以下行：</p></li><li><p><strong>国内推荐CDN</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>海外推荐CDN</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li>使用前缀 <code>fa 和图标的名称</code>来放置 Font Awesome 图标。 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size:48px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size:60px;color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行结果<br><i class="fa fa-car"></i><i class="fa fa-car" style="font-size:48px;"></i><i class="fa fa-car" style="font-size:60px;color:red;"></i></li></ul><blockquote><p>Font Awesome 设计为与<strong>内联元素</strong>一起使用。 <code>\&lt;i&gt;和 \&lt;span&gt;</code>元素广泛用于图标。<br>另外注意，如果更改图标容器的字体大小或颜色，图标会更改。</p></blockquote><h1 id="大图标"><a href="#大图标" class="headerlink" title="大图标"></a>大图标</h1><ul><li>fa-lg (增加33％)，fa-2x，fa-3x， fa-4x，或 fa-5x 类用于增加相对于其容器的图标大小。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">!DOCTYPE html&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car fa-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car fa-4x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-car fa-5x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><i class="fa fa-car fa-lg"></i><i class="fa fa-car fa-2x"></i><i class="fa fa-car fa-3x"></i><i class="fa fa-car fa-4x"></i><i class="fa fa-car fa-5x"></i></p><blockquote><p>提示： 如果你的图标在顶部和底部被切断，请增加行高。</p></blockquote><h1 id="列表图标"><a href="#列表图标" class="headerlink" title="列表图标"></a>列表图标</h1><ul><li><code>fa-ul</code> 和<code> fa-li</code> 类用于替换无序列表中的默认前缀。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;fa-ul&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa-li fa fa-check-square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>List icons<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa-li fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>List icons<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa-li fa fa-square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>List icons<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><ul class="fa-ul">  <li><i class="fa-li fa fa-check-square"></i>List icons</li>  <li><i class="fa-li fa fa-spinner fa-spin"></i>List icons</li>  <li><i class="fa-li fa fa-square"></i>List icons</li></ul><h1 id="边界和被拉的图标"><a href="#边界和被拉的图标" class="headerlink" title="边界和被拉的图标"></a>边界和被拉的图标</h1><ul><li><code>fa-border，fa-pull-right</code>或 <code>fa-pull-left</code> 类用于拉式引用或文章图标。 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-quote-left fa-3x fa-pull-left fa-border&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">Lzy_Blog -- 越努力越幸运！！！<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Lzy_Blog -- 越努力越幸运！！！<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Lzy_Blog -- 越努力越幸运！！！<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Lzy_Blog -- 越努力越幸运！！！</span><br></pre></td></tr></table></figure><ul><li>运行结果<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/04/a4cd5c6c24c1c50a22c8d1525695c869.png"></li></ul><h1 id="动态图标"><a href="#动态图标" class="headerlink" title="动态图标"></a>动态图标</h1><ul><li><code>fa-spin</code> 类可以让图标旋转, <code>fa-pulse </code>类可以使图标以 8 步为周期进行旋转。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-circle-o-notch fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-refresh fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cog fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-spinner fa-pulse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><i class="fa fa-spinner fa-spin"></i>&nbsp;<i class="fa fa-circle-o-notch fa-spin"></i>&nbsp;<i class="fa fa-refresh fa-spin"></i>&nbsp;<i class="fa fa-cog fa-spin"></i>&nbsp;<i class="fa fa-spinner fa-pulse"></i></p><h1 id="旋转和翻转的图标"><a href="#旋转和翻转的图标" class="headerlink" title="旋转和翻转的图标"></a>旋转和翻转的图标</h1><ul><li><code>fa-rotate-\*</code> 和 <code>fa-flip-\* </code>类用于旋转和翻转图标。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-shield&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-shield fa-rotate-90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-shield fa-rotate-180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-shield fa-rotate-270&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-shield fa-flip-horizontal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-shield fa-flip-vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><i class="fa fa-shield"></i>&nbsp;<i class="fa fa-shield fa-rotate-90"></i>&nbsp;<i class="fa fa-shield fa-rotate-180"></i>&nbsp;<i class="fa fa-shield fa-rotate-270"></i>&nbsp;<i class="fa fa-shield fa-flip-horizontal"></i>&nbsp;<i class="fa fa-shield fa-flip-vertical"></i></p><h1 id="堆叠的图标"><a href="#堆叠的图标" class="headerlink" title="堆叠的图标"></a>堆叠的图标</h1><ul><li>要堆叠多个图标，请使用父级上的 <code>fa-stack</code> 类，<code>fa-stack-1x</code> 类用于常规大小的图标，<code>fa-stack-2x</code> 用于较大的图标。</li><li><code>fa-inverse</code> 类可以用作替代图标颜色。您还可以向父级添加更大的图标类，以进一步控制尺寸。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-stack fa-lg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-circle-thin fa-stack-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-twitter fa-stack-1x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">fa-twitter on fa-circle-thin<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-stack fa-lg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-circle fa-stack-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-twitter fa-stack-1x fa-inverse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">fa-twitter (inverse) on fa-circle<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-stack fa-lg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-camera fa-stack-1x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-ban fa-stack-2x text-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">fa-ban on fa-camera</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><span class="fa-stack fa-lg">  <i class="fa fa-circle-thin fa-stack-2x"></i>  <i class="fa fa-twitter fa-stack-1x"></i></span>fa-twitter on fa-circle-thin<br><span class="fa-stack fa-lg">  <i class="fa fa-circle fa-stack-2x"></i>  <i class="fa fa-twitter fa-stack-1x fa-inverse"></i></span>fa-twitter (inverse) on fa-circle<br><span class="fa-stack fa-lg">  <i class="fa fa-camera fa-stack-1x"></i>  <i class="fa fa-ban fa-stack-2x text-danger" style="color:red;"></i></span>fa-ban on fa-camera<h1 id="固定宽度图标"><a href="#固定宽度图标" class="headerlink" title="固定宽度图标"></a>固定宽度图标</h1><ul><li><code>fa-fw</code> 类用于设置固定宽度的图标。 当不同的图标宽度偏离对齐时，此类非常有用。 特别适用于Bootstrap的导航列表和列表组。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-home fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-book fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Library<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-pencil fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Applications<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cog fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Settings<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><div class="list-group">  <a href="#" class="list-group-item"><i class="fa fa-home fa-fw"></i> Home</a>  <a href="#" class="list-group-item"><i class="fa fa-book fa-fw"></i> Library</a>  <a href="#" class="list-group-item"><i class="fa fa-pencil fa-fw"></i> Applications</a>  <a href="#" class="list-group-item"><i class="fa fa-cog fa-fw"></i> Settings</a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;&gt;

&lt;h1 id=&quot;Font-Awesome&quot;&gt;&lt;a href=&quot;#Font-Awes</summary>
      
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code常用插件</title>
    <link href="http://example.com/2021/01/03/%E5%85%B6%E4%BB%96/Visual%20Studio%20Code%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2021/01/03/%E5%85%B6%E4%BB%96/Visual%20Studio%20Code%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</id>
    <published>2021-01-03T12:56:04.182Z</published>
    <updated>2021-01-03T14:28:00.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS-Code简介"><a href="#VS-Code简介" class="headerlink" title="VS Code简介"></a>VS Code简介</h1><p><a href="https://blog.csdn.net/jiandan1127/article/details/85957003">插件参考</a><br><a href="https://marketplace.visualstudio.com/vscode">官方插件库</a><br><a href="https://www.jspang.com/detailed?id=60">VSCode常用插件和技巧教程</a></p><ul><li>vscode是微软开发的的一款代码编辑器，就如官网上说的一样，vscode重新定义（redefined）了代码编辑器。</li><li>当前市面上常用的轻型代码编辑器主要是：sublime，notepad++，editplus，atom这几种。</li><li>比起notepad++、editplus，vscode集成了许多IDE才具有的功能，比起它们更像一个代码编辑器；</li><li>比起sublime，vscode颜值更高，安装配置插件更为方便；</li><li>比起atom，vscode启动速度更快，打开各种大文件不卡。</li><li>可以说，vscode既拥有高自由度、又拥有高性能和高颜值，最关键的是，vscode还是一款免费并且有团队持续快速更新的代码编辑器。</li><li>可以说，vscode是代码编辑器的首选。个人推荐编写前端代码时，代码编辑器选择vscode，IDE选择WebStorm。</li><li>vscode安装插件只需要点击图片所示按钮，即可进入拓展，在搜索框中输入插件名点击安装后，等待安装好即可点击重新加载重启vscode使得插件生效。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/04ceb29a4b5e3ac627e7a3fd46ed1ea2.png"></li><li>当你不需要某个插件时只需要进入扩展，点击对应插件右下角的齿轮按钮即可选择禁用或卸载该插件。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/f954917f8d5d2ea692e44a4ffcb5f11f.png"></li></ul><h1 id="下载VS-Code"><a href="#下载VS-Code" class="headerlink" title="下载VS Code"></a>下载VS Code</h1><blockquote><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">Visual Studio Code 免费下载地址</a></p></blockquote><h1 id="安装中文包"><a href="#安装中文包" class="headerlink" title="安装中文包"></a>安装中文包</h1><ul><li><p>Windows系统下按快捷键：<code>ctrl+shift+p</code>打开命令面板，界面如下<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/b17a6e6d94e172b057265fd158ad7a42.png"></p></li><li><p>在输入框中输入：Configure Display Language   （若是中文模式下，要切换其他语言，则输入：配置语言）。回车。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/4028ebbd9e95c520d7f91792ae0a7052.png"></p></li><li><p>vscode会为你打开一个json文件，长下面这样——<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/d4980d3a687f4ca5bfe8c940d89bbae7.png"><br>把其中的 “locale”:”” 改成图上的 “locale”:”zh-CN” ,再重启vscode，界面语言就会是中文了。</p><blockquote><p>注意：若重启后语言没有改变，可能是你没有下载适用于 VSCode 的中文（简体）语言包，链接如下：<br><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese (Simplified) Language Pack for Visual Studio Code - Visual Studio Marketplace</a></p></blockquote></li></ul><h1 id="配置语言环境"><a href="#配置语言环境" class="headerlink" title="配置语言环境"></a>配置语言环境</h1><ul><li><p>Windows系统下按快捷键：<code>ctrl+shift+p</code>打开命令面板，输入<code>Change Language Mode</code>，界面如下<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/d5dc6d73a28ba38774345379d58e21ed.png"></p></li><li><p>找到HTML语言，回车后，在第一行打下感叹号，确定光标在感叹号的后面，之后按下tab键或者enter键都可以，就会生成html的基本语法<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/99d2700b2890383675dbe002eec330f2.png"></p></li></ul><h1 id="Open-in-browser插件"><a href="#Open-in-browser插件" class="headerlink" title="Open in browser插件"></a>Open in browser插件</h1><ul><li><p>Visual Studio Code默认是在VScode的控制台下查看html页面，这对于我们调试和查看效果十分不方便。所以这里我们需要安装一下扩展插件，在浏览器中查看html页面。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/669dca3f37dec0ab934fe6c00f904178.png"></p></li><li><p>安装完成后，选择你要在浏览器打开的HTML页面，按快捷键Alt + B 就可以在默认浏览器下打开你写的页面了</p></li><li><p>使用快捷键 Shift + Alt + B 可以选择其他浏览器打开。</p></li><li><p>或者对想要运行的HTML页面处右击选择open in default browse，也可以选择open in other browse，自己选择浏览器即可<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/45f88afaebb22b168cbc1986e801a3c6.png"></p></li></ul><h1 id="Live-Server插件"><a href="#Live-Server插件" class="headerlink" title="Live Server插件"></a>Live Server插件</h1><ul><li><p>首先，vscode本身没有新建项目的选项，所以要先创建一个空的文件夹喔。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/1a9892a5d3cc3bc8f7d18564ccea234e.png"></p></li><li><p>然后打开vscode，再在vscode里面打开文件夹，这样才可以创建项目。</p></li><li><p>导入VScode后，需要配置一下，Ctrl+shift+p，然后输入task，点击第一个选项即可配置。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/937b36b7904607aa525b02f92e34e7c4.png"></p></li><li><p>跳转后，再次选择other……即可自动生成配置文件喔。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/ec579099ee5b7d3aa2b5292440656939.png"></p></li><li><p>安装Live Server插件</p></li><li><p>新建一个工作区（也可以直接拖一个文件夹到vscode中），注意单独新建一个HTML文件拖动到IDE中是使用不了Live Server的，需要把这个HTML文件放到创建的工作区(文件夹)中，新建完成后我们可以在状态栏上看到一个Go Live，单击会自动打开浏览器并显示<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/96274be288f42fad34b04e5c65d152ef.png"></p></li><li><p>如果没有状态栏上，也可以在文件上单击右键，选择Open With Live Server这一项<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/01e4e609a8ea5ef0f522775253f9ecbd.png"></p></li><li><p>这样就可以在一个工程项目文件夹开发，并能实时预览</p><h1 id="Markdown插件"><a href="#Markdown插件" class="headerlink" title="Markdown插件"></a>Markdown插件</h1></li><li><p>vscode默认是支持Markdown的，但是我们还是需要一些额外的插件来辅助。如前文安装中文包一般，到vscode的插件市场中，搜索Markdown关键字，安装这几个插件——<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/c862a93eb09493e70f78e980b4371aef.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/55ecaf1984552cc8deecbd8c226ff354.png"></p></li><li><p>第一个插件，是一个组合包，一股脑把最常用的Markdown优化都给你装好；</p></li><li><p>第二个插件，则是Github使用的Markdown渲染样式，不是特别华丽，很朴素，很简洁的样式，因为很多人用Markdown都是为了使用Github Pages，所以这个样式特别受欢迎。使用这个样式，在本地就能预览Markdown文件最终在Github Pages中显示的效果。</p></li><li><p>为了集中管理用Markdown的文档，你可以在你容易找到的地方，专门建立一个文件夹，这取决于大家使用电脑的习惯，每个人都不一样。使用vscode打开这个文件夹，你会在左侧的导航窗口里，看到这样的显示——<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/8310a67ce6633860faf6d25716f99446.png"></p></li><li><p>点击右上角的这个图标——<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/547ea8cfbfb0e4ab8941f53461887c8d.png"><br>然后你的页面就会变成两栏分列的样子；右侧这一栏就是markdown文件被渲染为HTML的预览；由于我们安装了Github的渲染风格，所以这里会按照Github的样式来渲染你的markdown文件。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2021/01/03/8c7fddac5fb0740a23e66419f59b057f.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VS-Code简介&quot;&gt;&lt;a href=&quot;#VS-Code简介&quot; class=&quot;headerlink&quot; title=&quot;VS Code简介&quot;&gt;&lt;/a&gt;VS Code简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/jiandan1127</summary>
      
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>CSS3布局设计</title>
    <link href="http://example.com/2021/01/03/%E5%89%8D%E7%AB%AF/CSS3%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2021/01/03/%E5%89%8D%E7%AB%AF/CSS3%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-01-03T10:01:02.461Z</published>
    <updated>2021-01-05T12:28:31.042Z</updated>
    
    
    
    
    <category term="HTML+CSS+JS" scheme="http://example.com/categories/HTML-CSS-JS/"/>
    
    
    <category term="HTML+CSS+JS" scheme="http://example.com/tags/HTML-CSS-JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画设计</title>
    <link href="http://example.com/2021/01/03/%E5%89%8D%E7%AB%AF/CSS3%E5%8A%A8%E7%94%BB%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2021/01/03/%E5%89%8D%E7%AB%AF/CSS3%E5%8A%A8%E7%94%BB%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-01-03T09:56:08.378Z</published>
    <updated>2021-01-05T12:28:35.431Z</updated>
    
    
    
    
    <category term="HTML+CSS+JS" scheme="http://example.com/categories/HTML-CSS-JS/"/>
    
    
    <category term="HTML+CSS+JS" scheme="http://example.com/tags/HTML-CSS-JS/"/>
    
  </entry>
  
  <entry>
    <title>PHP程序设计</title>
    <link href="http://example.com/2021/01/01/%E5%90%8E%E7%AB%AF/PHP%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2021/01/01/%E5%90%8E%E7%AB%AF/PHP%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-01-01T10:39:54.294Z</published>
    <updated>2021-01-05T12:31:21.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教程推荐"><a href="#教程推荐" class="headerlink" title="教程推荐"></a>教程推荐</h1><p><a href="https://www.bilibili.com/video/BV18x411H7qD">黑马程序员 PHP入门教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;教程推荐&quot;&gt;&lt;a href=&quot;#教程推荐&quot; class=&quot;headerlink&quot; title=&quot;教程推荐&quot;&gt;&lt;/a&gt;教程推荐&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV18x411H7qD&quot;&gt;黑马程序员 PH</summary>
      
    
    
    
    <category term="PHP" scheme="http://example.com/categories/PHP/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Python程序设计</title>
    <link href="http://example.com/2021/01/01/%E5%90%8E%E7%AB%AF/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2021/01/01/%E5%90%8E%E7%AB%AF/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-01-01T10:11:11.026Z</published>
    <updated>2021-01-05T12:31:30.604Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/1016959663602400&quot;&gt;Python教程&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库操作</title>
    <link href="http://example.com/2021/01/01/%E5%90%8E%E7%AB%AF/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/01/01/%E5%90%8E%E7%AB%AF/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</id>
    <published>2021-01-01T09:54:13.811Z</published>
    <updated>2021-01-05T12:30:48.504Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384">SQL教程</a><br><a href="https://www.vxzsk.com/1393.html">MySql教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/1177760294764384&quot;&gt;SQL教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.vxzsk.com/1393.html&quot;&gt;MySql教程&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="DataBase" scheme="http://example.com/categories/DataBase/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
</feed>
