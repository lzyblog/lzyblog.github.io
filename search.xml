<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java知识点归纳</title>
      <link href="2020/11/16/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%BD%92%E7%BA%B3/"/>
      <url>2020/11/16/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><p>  1.<code>跨平台性</code>:跨平台性是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。 Java自带的虚拟机很好地实现了跨平台性。 Java源程序代码经过编译后生成二进制的字节码是与平台无关的，是可被Java虚拟机识别的一种机器码指令，Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。</p><p>2.<code>简单</code>:Java语言是一种相当简洁的“面向对象”程序设计语言。Java语言省略了C++语言中所有的难以理解、容易混淆的特性，例如头文件、指针、结构、单元、运算符重载、虚拟基础类等。它更加严谨、简洁。</p><p>3.<code>面向对象</code>:面向对象技术使得应用程序的开发变得简单易用，节省代码。Java是一种面向对象的语言，也继承了面向对象的诸多好处，如代码扩展、代码复用等。</p><p>4.<code>安全性</code>:Java编译时要进行Java语言和语义的检查，保证每个变量对应一个相应的值，编译后生成Java类。运行时Java类需要类加载器载入，并经由字节码校验器校验之后才可以运行。 Java类在网络上使用时，对它的权限进行了设置，保证了被访问用户的安全性。</p><p>5.<code>多线程</code>:是一种轻量级进程，是现代程序设计中必不可少的一种特性。多线程处理能力使得程序能够具有更好的交互性、实时性。</p><h2 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h2><p>运行期环境代表着Java平台，开发人员编写Java代码(<code>.java文件</code>)，然后将之编译成字节码(<code>.class文件</code>)，JVM才能识别并运行它，JVM针对每个操作系统开发其对应的解释器，所以只要其操作系统有对应版本的JVM，那么这份Java编译后的代码就能够运行起来，这就是Java能<code>一次编译，到处运行</code>的原因。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@d3a99ed6e3318056b293e2a87abbb4ed698fd9b0/2020/11/16/ea50b091a4253c41449ca87dd53389ed.png"></p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>  1.<code>JVM</code>(Java Virtual Machine)：虚拟机,使用软件在不同操作系统中，模拟相同的环境。<br>  2.<code>JRE</code>(Java Runtime Environment)：Java运行环境,包含<code>JVM和解释器</code>，完整的运行环境.<br>  3.<code>JDK</code>(Java Development Kit)：Java开发工具包，包含<code>JRE+类+开发工具包</code></p><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME(新建)</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_192(JDK路径)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLASSPATH(新建)</span><br><span class="line">.(表示当前路径)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH</span><br><span class="line">编辑—&gt;新建  %JAVA_HOME%\bin  (JDK目录下的bin，里面有Java命令工具)</span><br></pre></td></tr></table></figure><h1 id="☕1-Java的基本程序设计结构"><a href="#☕1-Java的基本程序设计结构" class="headerlink" title="☕1.Java的基本程序设计结构"></a>☕1.Java的基本程序设计结构</h1><h2 id="1-HelloWorld"><a href="#1-HelloWorld" class="headerlink" title="1.HelloWorld"></a>1.HelloWorld</h2><p>下面一个简单的Java小程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class FirstSample&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;Hello World!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h2><p>在 Java 中，有 3 种标记注释的方式。</p><ul><li>最常用的方式是使用 //，其注释内容从 // 开始到本行结尾</li><li>当需要长篇的注释时， 既可以在每行的注释前面标记 /，/ 也可以使用 /* 和 */将一段比较长的注释括起来</li><li>最后，第 3 种注释可以用来自动地生成文档。这种注释以 / ** 开始， 以 */ 结束。</li></ul><h2 id="3-命名规则"><a href="#3-命名规则" class="headerlink" title="3.命名规则"></a>3.命名规则</h2><ul><li><code>类名</code>:首字词首字母大写(帕斯卡命名法),eg:HelloWord</li><li><code>函数名</code>、变量名:首单词首字母小写，拼接词首字母大写(驼峰命名法)。eg:hellowWord</li><li><code>包名</code>: 全小写,用”.”分层。eg:com.lzy.pack</li><li><code>常量</code>:全大写,多个单词用”_”拼接。eg:HELLOW_WORD</li></ul><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h2><p><code>Java 是一种强类型语言</code>。这就意味着必须为每一个变量声明一种类型（Python 就是弱类型语言）。在 Java 中， 共有 8 种基本类型（ primitive type ), 其中有 4 种整型、2 种浮点类型、 1 种用于表示 Unicode 编码的字符单元的字符类型 char 和 1 种用于表示真值的 boolean 类型。</p><h3 id="整型int-short-long-byte"><a href="#整型int-short-long-byte" class="headerlink" title="整型int/short/long/byte"></a>整型int/short/long/byte</h3><p>在 Java 中， 整型的范围与运行 Java 代码的机器无关（平台无关性）。<br>由于 Java 程序必须保证在所有机器上都能够得到相同的运行结果， 💡所以各种数据类型的<code>取值范围必须固定。</code><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@eaf701de14ca111617df1a4686c626a75c31ccc6/2020/11/16/81919f075d95f72fdaf3c9718c6d7874.png"></p><h3 id="浮点类型float-double"><a href="#浮点类型float-double" class="headerlink" title="浮点类型float/double"></a>浮点类型float/double</h3><p>float类型的数值有一个后缀<code> F 或 f</code> (例如，3.14F) 。👍没有后缀 F 的浮点数值（如 3.14 ) 默认为 double类型。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@eaf701de14ca111617df1a4686c626a75c31ccc6/2020/11/16/81919f075d95f72fdaf3c9718c6d7874.png"></p><h3 id="字符型char"><a href="#字符型char" class="headerlink" title="字符型char"></a>字符型char</h3><p>char类型的字面量值要用<code>单引号</code>括起来。例如：’A’ 是编码值为 65 所对应的字符常量。它与 “A” 不同，”A” 是包含一个字符 A 的字符串, char 类型的值可以表示为十六进制值，其范围从 \u0000 到 \Uffff。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@99393d85a1031937d756dda2242ea14518ab8d22/2020/11/16/ce42ea48d0e1c35ee2ecccfa5d1d5c60.png"></p><h3 id="Unicode和char类型"><a href="#Unicode和char类型" class="headerlink" title="Unicode和char类型"></a>Unicode和char类型</h3><p>要想弄清 char类型， 就必须了解 Unicode 编码机制。Unicode 打破了传统字符编码机制 的限制。 在 Unicode 出现之前， 已经有许多种不同的标准：美国的 ASCII、 西欧语言中的 ISO 8859-1 俄罗斯的 KOI-8、 中国的 GB 18030 和 BIG-5 等。这样就产生了下面两个问题： 一个是对于任意给定的代码值，在不同的编码方案下有可能对应不同的字母；二是采用大字 符集的语言其编码长度有可能不同。例如，有些常用的字符采用单字节编码， 而另一些字符则需要两个或更多个字节。</p><p>设计 Unicode 编码的目的就是要解决这些问题。在 20 世纪 80 年代开始启动设计工作时， 人们认为两个字节的代码宽度足以对世界上各种语言的所有字符进行编码， 并有足够的空间 留给未来的扩展。在 1991 年发布了 Unicode 1.0, 当时仅占用 65 536 个代码值中不到一半的 部分。在设计 Java 时决定采用 16 位的 Unicode 字符集，这样会比使用 8 位字符集的程序设 计语言有很大的改进。</p><p>十分遗憾， 经过一段时间， 不可避免的事情发生了。Unicode 字符超过了 65 536 个，其 主要原因是增加了大量的汉语、 日语和韩语中的表意文字。现在，16 位的 char类型已经不能满足描述所有 Unicode 字符的需要了。</p><h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><p>boolean (布尔）类型有两个值：false 和 true, 用来判定逻辑条件。🚨<code> 整型值和布尔值之间不能进行相互转换。</code></p><h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5.变量"></a>5.变量</h2><p>  计算机内存中的一块存储空间，是存储数据的基本单位。<br>  🚨<code>变量名对大小写敏感</code>， 例如，hireday 和 hireDay是两个不同的变量名 , ,在对两个不同的变量进行命名时， 最好不要只存在大小写上的差异。</p><h3 id="1-常量final"><a href="#1-常量final" class="headerlink" title="1.常量final"></a>1.常量final</h3><p>  🚨关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上, 常量名使用全大写。<br>  在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为 类常量。可以使用关键字 static final 设置一个类常量。 下面是使用类常量的示例：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  public class Demo&#123;</span><br><span class="line"></span><br><span class="line">    public static final double ABC &#x3D; 2.54;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        double b &#x3D; 8.5;</span><br><span class="line">        double c &#x3D; 11;</span><br><span class="line">        System.out.println(&quot;ABC + b + c &#x3D; &quot; + (ABC+b+c));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  需要注意， 类常量的定义位于 main方法的外部。因此，在同一个类的其他方法中也可以使用这个常量。而且，如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="2020/11/14/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/11/14/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-rVxFXKqS" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1429857505" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#49A6F9" data-volume="0.5"></div><h1 id="一、背景知识"><a href="#一、背景知识" class="headerlink" title="一、背景知识"></a>一、背景知识</h1><h2 id="什么是GitHub？"><a href="#什么是GitHub？" class="headerlink" title="什么是GitHub？"></a>什么是GitHub？</h2><blockquote><p><code>GitHub Page</code>s 是由 GitHub 官方提供的一种免费的<code>静态站点托管服务</code>，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。<br><a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages">About GitHub Pages</a></p></blockquote><h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><blockquote><p><code>Hexo</code> 是一个快速、简洁且高效的<code>静态博客框架</code>，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。<br><a href="https://hexo.io/zh-cn/">Hexo官网</a><br><a href="http://coderunthings.com/2017/08/20/howhexoworks/?utm_source=qq&utm_medium=social&utm_oi=619975022605897728">Hexo工作原理</a></p></blockquote><h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git?"></a>什么是Git?</h2><blockquote><p>GIT(<code>分布式版本控制系统</code>),git支持分布式部署，可以有效、高速的处理从很小到非常大的项目版本管理。分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000">Git教程</a></p></blockquote><h2 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h2><blockquote><p>Node.js就是一个用于创建服务器端应用程序的<code>运行系统</code>，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p></blockquote><h2 id="Hexo-GitHub文章发布原理"><a href="#Hexo-GitHub文章发布原理" class="headerlink" title="Hexo+GitHub文章发布原理"></a>Hexo+GitHub文章发布原理</h2><blockquote><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p></blockquote><h2 id="SSH运行原理及应用"><a href="#SSH运行原理及应用" class="headerlink" title="SSH运行原理及应用"></a>SSH运行原理及应用</h2><blockquote><p>需要使用SSH提供的公钥，可以省去hexo d命令时的密码登录.<br><a href="https://blog.csdn.net/qq_35246620/article/details/54317740?utm_source=qq&utm_medium=social&utm_oi=619975022605897728">SSH运行原理及应用</a></p></blockquote><h2 id="Markdown标记语言"><a href="#Markdown标记语言" class="headerlink" title="Markdown标记语言"></a>Markdown标记语言</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。文档后缀为 .md, .markdown。<br><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown API</a><br><a href="https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app">Markdown语法手册</a></p></blockquote><hr><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><blockquote><p>Hexo 基于 Node.js，搭建过程中还需要使用 <code>npm（Node.js 已带） 和 git</code>，因此先搭建本地操作环境，安装 Node.js 和 Git。<br><a href="https://nodejs.org/zh-cn">Node.js下载网址</a><br><a href="https://blog.csdn.net/antma/article/details/86104068">Node.js安装教程</a></p></blockquote><hr><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><blockquote><p><a href="https://git-scm.com/download/win">Git下载地址</a><br><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Git安装及配置</a><br>安装完成后，在<code>博客文件</code>里右击-&gt;<code>Git Bash</code>(全程用Git Bash,git为linux命令)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回车，出现程序版本号即可。<br>注意:如果出现<code>&quot;npm&quot;</code>不是内部指定，说明环境变量没配好,Node.js文件目录复制路径到Path中即可.</p><hr><h1 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h1><p>1.通过淘宝镜像安装博客框架<br>2.如果出现”cnpm”不是内部指定，说明环境变量没配好,根据提示目录复制路径到<code>Path</code>中即可.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h1 id="四、Hexo搭建"><a href="#四、Hexo搭建" class="headerlink" title="四、Hexo搭建"></a>四、Hexo搭建</h1><h2 id="常用cmd操作"><a href="#常用cmd操作" class="headerlink" title="常用cmd操作:"></a>常用cmd操作:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回根目录:cd&#x2F;</span><br><span class="line">进入某目录:cd 目录名</span><br><span class="line">返回上一目录:cd ..</span><br><span class="line">查看文件目录:dir</span><br></pre></td></tr></table></figure><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir 文件名</span><br></pre></td></tr></table></figure><h2 id="根据命令操作文件夹"><a href="#根据命令操作文件夹" class="headerlink" title="根据命令操作文件夹"></a>根据命令操作文件夹</h2><p>命令进入文件夹下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init -----创建一个新的hexo项目放在所创建文件夹下</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new xxx  &#x2F;&#x2F; 新建一篇标题为xxx的文章</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s(server) -----为hexo在本地起一个http server, 然后通过浏览器访问博客</span><br></pre></td></tr></table></figure><p>文件名/source/_posts/xxxx.md 中修改博客，修改后操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean -----清除缓存</span><br><span class="line">hexo g(generate) ----生成将要发布的博客网站包含html在内的静态资源</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="五、部署到GitHub"><a href="#五、部署到GitHub" class="headerlink" title="五、部署到GitHub"></a>五、部署到GitHub</h1><h2 id="1-注册登录GuiHub"><a href="#1-注册登录GuiHub" class="headerlink" title="1.注册登录GuiHub"></a>1.注册登录GuiHub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意用户名与网址访问域名要&#96;一致&#96;</span><br></pre></td></tr></table></figure><h2 id="2-创建GuiHub库-new-repository"><a href="#2-创建GuiHub库-new-repository" class="headerlink" title="2.创建GuiHub库(new repository)"></a>2.创建GuiHub库(new repository)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意Repository name：&#96;用户名&#96;.guihub.io (格式不能变)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-SSH登录GitHub远程主机"><a href="#3-SSH登录GitHub远程主机" class="headerlink" title="3.SSH登录GitHub远程主机"></a>3.SSH登录GitHub远程主机</h2><h3 id="生成，密匙"><a href="#生成，密匙" class="headerlink" title="生成，密匙"></a>生成，密匙</h3><blockquote><p>git上传文件到GitHub利用SSH登录远程主机：<br> 登录方式有两种：1.口令登录 2.公钥登录。<br> 区别:口令登录每次都要输入密码，公钥登录不需要输入密码.<br> 安装了 Git Bash，自带了 SSH。检验一下是否安装 SSH，我们在新建的文件夹中右键打开 Git Bash输入命令:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Gitub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub邮箱&quot; </span><br></pre></td></tr></table></figure><p>然后检查SSH安装和生成密匙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh</span><br><span class="line">ssh-keygen -t rsa -C &quot;GitHub邮箱&quot;</span><br></pre></td></tr></table></figure><blockquote><p>敲四次回车就会生成两个文件，分别为秘钥 id_rsa 和公钥<code> id_rsa.pub.</code> （注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p></blockquote><ul><li>Linux 系统：~/.ssh</li><li>Mac 系统：~/.ssh</li><li>Windows 10 ：C:/Users/ASUS/.ssh</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa):</span><br><span class="line">&#x2F;&#x2F;到这里可以直接回车将密钥按默认文件进行存储</span><br></pre></td></tr></table></figure><p>然后复制公钥 id_rsa.pub 文件里的内容,或者通过命令查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh </span><br><span class="line">ls</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="添加到Github"><a href="#添加到Github" class="headerlink" title="添加到Github"></a>添加到Github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入GitHub主页，点击右上角。再点击setting-&gt;SSH and GPG keys-&gt;New SSH key-&gt;将复制的id_rsa.pub内容粘贴到key内点击Add SSH key</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">验证:ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="4-安装GuiHub部署插件"><a href="#4-安装GuiHub部署插件" class="headerlink" title="4.安装GuiHub部署插件"></a>4.安装GuiHub部署插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-设置-config-yml文件"><a href="#5-设置-config-yml文件" class="headerlink" title="5.设置_config.yml文件"></a>5.设置_config.yml文件</h2><p>   可以使用笔记本编辑，推荐使用sublime  text</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml文件修改(最下面):</span><br><span class="line"> type: git</span><br><span class="line"> repo:  https:&#x2F;&#x2F;github.com&#x2F;lzyblog&#x2F;lzyblog.github.io （仓库url）</span><br><span class="line"> branch: master </span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d （部署到Github）</span><br></pre></td></tr></table></figure><h3 id="6-修改博客"><a href="#6-修改博客" class="headerlink" title="6.修改博客"></a>6.修改博客</h3><h4 id="博客目录构成介绍"><a href="#博客目录构成介绍" class="headerlink" title="博客目录构成介绍"></a>博客目录构成介绍</h4><p>打开文件夹,可以看到博客的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- node_modules</span><br><span class="line">- public</span><br><span class="line">- scaffolds</span><br><span class="line">- source</span><br><span class="line">    - _posts</span><br><span class="line">    - about</span><br><span class="line">    - archive</span><br><span class="line">    - img</span><br><span class="line">    - tags</span><br><span class="line">- themes</span><br><span class="line">node_modules是node.js各种库的目录，public是生成的网页文件目录，scaffolds里面就三个文件，存储着新文章和新页面的初始设置，source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，themes存放着主题文件，一般也用不到。</span><br><span class="line"></span><br><span class="line">我们平时写文章只需要关注source&#x2F;_posts这个文件夹就行了。</span><br><span class="line"></span><br><span class="line">网站图片都保存在D:\study\program\blog\source\img目录下，可以修改成自己的图片。</span><br></pre></td></tr></table></figure><p>通过文件名\source_posts目录下xxx.md文件修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s （可在本地预览） </span><br><span class="line">hexo g  (部署)</span><br><span class="line">hexo d   (提交Github)</span><br></pre></td></tr></table></figure><p>输入网址:仓库名.guihub.io<br>(如果发现<code>peployer不存在</code>,需要重新引入部署插件)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><hr><h1 id="六-修改主题"><a href="#六-修改主题" class="headerlink" title="六.修改主题"></a>六.修改主题</h1><p> <a href="https://hexo.io/themes/">登录Hexo网址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone &#96;主题url&#96;.git themes&#x2F;主题名</span><br><span class="line">然后_config.yml配置:theme: 主题名</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s (预览)</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>Hexo更改主题后启动服务器，界面显如下字符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include includes&#x2F;partial</span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>生成静态文件即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h1 id="七-主题优化"><a href="#七-主题优化" class="headerlink" title="七.主题优化"></a>七.主题优化</h1><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly官方文档</a></p><h3 id="Hexo插件"><a href="#Hexo插件" class="headerlink" title="Hexo插件"></a>Hexo插件</h3><p>感谢：<a href="https://www.antmoe.com/posts/a811d614/index.html?utm_source=qq&utm_medium=social&utm_oi=619975022605897728#%E5%89%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">小康博客</a><br><a href="https://easyhexo.com/0-Intro/">Hexo文档</a><br>感谢：<a href="https://plushine.cn/54808.html#%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD">XJHui’s Blog</a></p><h3 id="github-jsDelivr搭建图床"><a href="#github-jsDelivr搭建图床" class="headerlink" title="github+jsDelivr搭建图床"></a>github+jsDelivr搭建图床</h3><p><a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a><br>PicGo,Typora下载<br><a href="https://www.lanzous.com/b00zdvy5e">点击下载—密码:6kjr</a></p><h3 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h3><p>非常感谢博主<a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a>提供的方法<br><a href="https://github.com/coneycode/hexo-git-backup">GitHub项目地址</a><br><a href="https://github.com/coneycode/hexo-git-backup/blob/master/README.md">官方文档</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在博客文件里右击-&gt;Git Bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-git-backup --save </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在GuiHub中新建仓库,例如Hexo_Backup，权限为private，分支为master<br>获取所建库 SSH<br>在Hexo配置文件中添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    repository:</span><br><span class="line">       backup: git@github.com:xingjiahui&#x2F;Hexo-Backup.git,master(分支名,新库为main)</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b(back)</span><br></pre></td></tr></table></figure><blockquote><p>每次更新博客后，都需要<code>hexo b</code><br>备份的用处:</p></blockquote><ul><li>当hexo g 报错没有头绪时，可以使用备份文件</li><li>当本地文件丢失时，可以使用备份文件</li><li>使用前提，配好环境(已下载<code>Node.js和Git</code>)<h3 id="相关素材"><a href="#相关素材" class="headerlink" title="相关素材"></a>相关素材</h3>感谢：<a href="http://www.mackxin.com/">馨客栈</a></li></ul><h3 id="valine评论系统"><a href="#valine评论系统" class="headerlink" title="valine评论系统"></a>valine评论系统</h3><p><a href="https://www.leancloud.cn/">leancloud管理评论</a><br><a href="https://valine.js.org/">Valine文档</a><br>进入leancloud网站注册，并创建应用，找到应用key<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@1086c981d4982e49807f906e95be603883cef644/2020/11/17/d6a49b1aa90d7450e26c5f426ec117c4.png" width="500px" height="300px"><br>复制<code>AppID</code>和<code>AppKey</code>,找到Hexo配置文件中valine配置即可</p><h4 id="自定义表情"><a href="#自定义表情" class="headerlink" title="自定义表情"></a>自定义表情</h4><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">Butterfly官方文档</a></p><h4 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h4><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">GitHub项目地址</a><br><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo+GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用CMD命令行</title>
      <link href="2020/11/14/%E5%B8%B8%E7%94%A8CMD%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>2020/11/14/%E5%B8%B8%E7%94%A8CMD%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Win+R输入cmd回车<br>命令通常在命令窗口运行，如果需要保存在文本里运行，需要保存为<code>.bat</code>或者<code>.cmd</code>的后缀.</p><h2 id="第一类：原生Dos命令"><a href="#第一类：原生Dos命令" class="headerlink" title="第一类：原生Dos命令"></a>第一类：原生Dos命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原生dos命令: help</span><br></pre></td></tr></table></figure><h2 id="第二类：网络配置"><a href="#第二类：网络配置" class="headerlink" title="第二类：网络配置"></a>第二类：网络配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ipconfig            查看自身网络配置</span><br><span class="line">route               管理自身的路由转发表</span><br><span class="line">arp                 查看主机存储的IP和MAC的映射</span><br><span class="line">systeminfo          查看系统信息(带图像界面的输入msinfo32)</span><br><span class="line">tasklist            查看当前进程列表</span><br><span class="line">query               查询进程</span><br><span class="line">netstat             查看网络状态(不间断的输出，ctrl+c中断)</span><br><span class="line">net                 网络的功能，&#x2F;？查看命令</span><br><span class="line">netsh               网络配置</span><br></pre></td></tr></table></figure><h2 id="第三类：打开系统程序"><a href="#第三类：打开系统程序" class="headerlink" title="第三类：打开系统程序"></a>第三类：打开系统程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mstsc               远程他人的电脑(局域网内常用)</span><br><span class="line">MSConfig            可以禁止启动项和启动的服务</span><br><span class="line">services.msc        打开服务</span><br><span class="line">devmgmt.msc         打开设备管理</span><br><span class="line">control             打开控制面板</span><br><span class="line">regedit             打开注册表</span><br><span class="line">appwiz.cpl          打开删除程序的面板</span><br></pre></td></tr></table></figure><h2 id="第四类：快捷键"><a href="#第四类：快捷键" class="headerlink" title="第四类：快捷键"></a>第四类：快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">win+E              打开文件资源管理器</span><br><span class="line">win+D              显示桌面</span><br><span class="line">Win+L              锁计算机</span><br><span class="line">alt+F4             关闭当前程序</span><br><span class="line">Ctrl+Shift+Esc     打开任务管理器</span><br><span class="line">Ctrl+F             在文本中查找特定字词</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dos命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dos命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
