<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode每日一道</title>
      <link href="2020/11/24/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93/"/>
      <url>2020/11/24/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="2020/11/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理笔记</title>
      <link href="2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记</title>
      <link href="2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记</title>
      <link href="2020/11/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><code>感谢!!</code><br><a href="https://blog.csdn.net/gl620321/article/details/107128661?utm_source=app">思维导图来源</a><br><a href="https://mubu.com/doc/Cd-Y4YOfkh#">操作系统王道</a></p><h1 id="操作系统引论及概述"><a href="#操作系统引论及概述" class="headerlink" title="操作系统引论及概述"></a>操作系统引论及概述</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/24b735899f12b5416d21e4c0ebb4c288.png"></p><h2 id="OS功能和目标"><a href="#OS功能和目标" class="headerlink" title="OS功能和目标"></a>OS功能和目标</h2><p><code>操作系统</code>(Operating System，OS)是计算机系统中最重要的系统软件，它管理整个计算机系统的软件资源和硬件资源，是用户与计算机硬件的桥梁，是其它软件和程序的运行基础。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/c2d24416e4d4d5732a88766f3d7817f2.png"><br>（1）<code>作为系统资源的管理者</code></p><ul><li><code>处理机</code>管理<br>计算机系统中最重要的资源是中央处理机（简称CPU），任何计算都必须在CPU上进行。<br>在处理机管理中，最核心的问题是CPU时间的分配问题，这涉及分配的策略和方法。</li><li><code>存储器</code>管理<br>存储管理的主要工作是对内存储器进行合理分配、有效保护和扩充。<br>内存是现代计算机系统的中心，是可以被CPU和I/O设备共同访问的数据仓库。<br>内存通常是CPU直接寻址和访问的、唯一的大容量存储器。</li><li><code>设备</code>管理<br>设备管理是操作系统中最庞杂、琐碎的部分，其原因是：<br>①设备管理涉及很多实际的物理设备，这些设备品种繁多、用法各异。<br>②各种外部设备都能和主机并行工作，而且，有些设备可被多个进程所共享。<br>③主机和外部设备，以及各类外部设备之间的速度极不匹配，极差很大。</li><li><code>文件</code>管理<br>以上三种管理都是针对计算机的硬件资源的管理。<br>文件系统管理则是对软件资源的管理。为了管理庞大的系统软件资源及用户提供的程序和数据，操作系统将它们组织成文件的形式，操作系统对软件的管理实际上是对文件系统的管理。</li><li><code>作业</code>管理<br>作业指用户在一次计算过程中或者事务处理过程中，要求计算机所作工作的集合。<br>作业由程序、数据和作业说明书组成。在批处理系统中，作业是占据内存的基本单位。<br>作业管理是通过管理让这些作业按照自己所想要的方式来进行工作。</li></ul><p>（2）<code>作为用户和计算机硬件之间的接口</code></p><ul><li>命令接口<br>命令接口<code>允许用户直接使用</code>，命令接口又分<code>联机命令接口</code>和<code>脱机命令接口</code>。<br>联机命令接口：用户说一句，系统做一句（<code>交互式命令接口</code>）。<br>脱机命令接口：用户说一堆，系统做一堆（批<code>处理命令接口</code>）。</li><li>程序接口<br>用户程序<code>间接使用</code></li><li>GUI（图像用户界面）</li></ul><h2 id="OS特征"><a href="#OS特征" class="headerlink" title="OS特征"></a>OS特征</h2><p>OS四大特征：<code>并发</code>、<code>共享</code>、<code>虚拟</code>、<code>异步</code>。</p><ul><li><p>并发<br><code>并发</code>: 指两个或多个事件在同一<code>时间间隔内</code>发生。宏观上是同时发生的,但微观上是交替发生的。<br><code>并行</code>: 指两个或多个事件在同一<code>时刻同时</code>发生。<br>并发和共享是操作系统的两个最基本特征。<br>操作系统并发性指计算机系统中同时存在着多个运行着的程序。</p><blockquote><p>例如：8-9点一号执行，9-10点二号执行，10-11点三号执行，为并发情况。而在8点一二号一起执行为并行情况。</p></blockquote></li><li><p>共享<br>资源共享指系统中的资源可供内存中多个并发执行的进程共同调用。<br><code>互斥共享</code><br>｜ 同一个时间段只允许一个进程访问资源(摄像头/麦克风)<br><code>同时共享</code><br>｜ 允许一个时间段多个进程“同时”(宏观上)访问某些资源（微观上是分时共享），比如硬盘读写<br>并发和共享互为存在条件。</p></li><li><p>虚拟<br>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体(前者)是实际存在的,而逻辑上对应物(后者)是用户感受到的。</p></li><li><p>异步<br>异步是指,在多道程序环境下,允许多个程序并发执行,但由于资源有限,进程的执行不是一贯到底的,是<code>走走停停</code>（等待资源进程阻塞）,以不可预知的速度向前推。</p></li></ul><h2 id="OS发展与分类"><a href="#OS发展与分类" class="headerlink" title="OS发展与分类"></a>OS发展与分类</h2><ul><li><p>手工操作阶段<br>纸带机（用户独占全机，人机速度矛盾，资源利用率极低）。</p></li><li><p>单道批处理系统<br>引入了脱机输入/输出技术（磁带），通过<code>监督程序</code>（操作系统雏形）控制作业输入输出。<br>外围机负责把输入纸带录入磁带。<br>缓解了人机速度矛盾，提高了资源利用率，但是CPU是串行的，大量CPU时间浪费在I/O等待上。</p></li><li><p>多道批处理系统<br>磁带往内存输入多道程序，并发执行，输入、计算、输出互不干扰<br>操作系统诞生，引入了中断技术，资源利用率大幅上升，但是缺少人机交互功能，用户响应时间长（用户提交作业之后只能等待作业完成）。</p></li><li><p>分时操作系统<br>分时操作系统：计算机以<code>时间片</code>为单位<code>轮流</code>为各个用户/作业服务,各个用户可通过终端与计算机进行交互。<br>主要优点:用户请求可以被即时响应,解决了人机交互问题。允许多个用户同时使用一台计算机,并且用户对计算机的操作相互独立,感受不到别人的存在。<br>主要缺点:不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的,循环地为每个用户/作业服务一个时间片,不区分任务的紧急性。</p></li><li><p>实时操作系统<br><code>硬实时系统</code>：必须在绝对严格的规定时间内完成处理。<br><code>软实时系统</code>：能接受偶尔违法时间规定。<br>主要优点:能够优先响应一些紧急任务,某些紧急任务不需时间片排队。在实时操作系统的控制下,计算机系统接收到外部信号后及时进行处理,并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</p></li><li><p>网络操作系统<br>网络操作系统:是伴随着计算机网络的发展而诞生的,能把网络中各个计算机有机地结合起来,实现数据传送等功能,实现网络中各种资源的共享(如文件共享)和各台计算机之间的通信。(如: Windows NT就是一种典型的网络操作系统,网站服务器就可以使用)</p></li><li><p>分布式操作系统<br>分布式操作系统:主要特点是分布性和并行性。系统中的各台计算机地位相同,任何工作都可以分布在这些计算机上,由它们并行、协同完成这个任务。</p></li></ul><h2 id="OS运行机制-体系结构"><a href="#OS运行机制-体系结构" class="headerlink" title="OS运行机制/体系结构"></a>OS运行机制/体系结构</h2><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><ul><li><p>指令<br>指令就是处理器(CPU)能识别、处理的最基本命令。<br><code>特权指令</code>：如内存清零指令。（不允许用户程序使用）<br><code>非特权指令</code>：如普通的运算指令。</p></li><li><p>处理机状态<br><code>用户态</code>：此时CPU只能执行非特权指令。<br><code>核心态</code>：特权命令、非特权命令都可执行。</p><blockquote><p>处理机状态用程序状态寄存器(PSW)中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态。</p></blockquote></li><li><p>程序<br><code>内核程序</code>：系统的管理者，可以执行特权和非特权指令，运行在核心态。<br><code>应用程序</code>：只能执行非特权指令，运行在用户态。</p></li></ul><h3 id="OS内核"><a href="#OS内核" class="headerlink" title="OS内核"></a>OS内核</h3><p>计算机最底层的软件，是操作系统最核心的部分。实现操作系统<code>内核功能</code>的程序才是<code>内核程序</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/222957e356925c52dca1823b5730791a.png"></p><ul><li><code>时钟管理</code><br>实现计时功能。</li><li><code>中断处理</code><br>负责实现中断机制。</li><li><code>原语</code><br>是一种特殊的程序，处于操作系统最底层，是最接近硬件的部分。<br>运行时间短，调用频繁，具有<code>原子性</code>——运行只能一气呵成，不可中断。</li><li><code>系统资源管理</code><br>进程管理、存储管理、设备管理。<blockquote><p>有的操作系统不把这个作为“内核功能”（微内核)，不同操作系统，对内核功能的划分可能不一样。</p></blockquote></li></ul><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p>操作系统的体系结构：<code>大内核</code>和<code>微内核</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/926936683836e9fe7e5cbf31a498d3c5.png"></p><ul><li><p>大内核<br>将操作系统的<code>主要功能模块</code>都作为系统内核，运行在核心态。<br>高性能，但是内核代码庞大难以维护。</p></li><li><p>微内核<br>只把<code>基本概念</code>保留在内核。<br>功能少，功能清晰方便维护，但是需要频繁的在核心态和用户态之间切换，性能低。</p></li></ul><blockquote><p>OS体系结构可以类比于企业的管理问题：<code>内核</code>就是企业的<code>管理层</code>，负责一些重要的工作。只有管理层才能执行<code>特权指令</code>，普通员工只能执行<code>非特权指令</code>。<code>用户态</code>、<code>核心态</code>之间的<code>切换</code>相当于普通员工和管理层之间的工作交流。<br><code>大内核</code>：企业初创时体量不大，管理层的人会负责大部分的事情。<br><code>微内核</code>：随着企业体力越来越大，管理层只负责最核心的一些工作。</p></blockquote><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p>中断机制的诞生：<br>早期计算机，各程序只能串行执行，系统资源利用率低。<br>为了解决上述问题，人们发明操作系统，引入中断机制，实现了多道程序并发执行。<br><code>本质：发生中断</code>就意味着<code>需要操作系统介入,开展管理工作</code>。</p><h3 id="中断的概念和作用"><a href="#中断的概念和作用" class="headerlink" title="中断的概念和作用"></a>中断的概念和作用</h3><p>​中断信号可以使CPU从<code>用户态</code>切换为<code>核心态</code>,<code>使操作系统获得计算机的控制权</code>。有了中断才能实现多道程序并发执行。</p><blockquote><p>由于操作系统的管理工作(比如进程切换、分配I/O设备等)需要使用<code>特权指令</code>,因此CPU要从用户态转为核心态。</p></blockquote><p><code>中断</code>是CPU从用户态-&gt;核心态切换的<code>唯一途径</code>。<br>核心态-&gt;用户态切换只需要执行一个<code>特权指令</code>，将<code>PSW</code>设置为<code>0</code>。</p><h3 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h3><ul><li><p><code>内中断</code>(异常/例外/陷入)<br>信号来源CPU<code>内部</code>，<code>与当前执行的指令有关</code><br><code>自愿中断(指令中断) </code>：</p><pre><code>      系统调用时使用的访管指令(陷入指令/trap指令)</code></pre><p><code>强迫中断</code>：</p><pre><code>      1.硬件故障（缺页错误）2.软件中断（除0错误）</code></pre><p>陷阱、陷入(trap)</p><pre><code>      有意而为之的异常，系统调用</code></pre><p>故障(fault)</p><pre><code>      错误条件引起的，可能被故障处理程序修复的，如缺页</code></pre><p>终止(abort)</p><pre><code>      致命错误，无法修复，终止处理程序不再将控制返回给应用程序，如除0</code></pre></li><li><p><code>外中断</code>(狭义中断)<br>信号来源CPU<code>外部</code>，<code>与当前执行的指令无关</code><br><code>外设请求</code>：</p><pre><code>       外设(比如打印机)I/O操作完成发出中断信号       键盘输入一个字符​</code></pre><p><code>人工干预</code>：</p><pre><code>        用户强制终止一个进程</code></pre></li></ul><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组<code>系统调用</code>组成。<br>系统调用是操作系统提供给应用程序(程序员/编程人员)使用的接口,可以理解为一种可供应用程序调用的特殊函数,应用程序可以发出<code>系统调用请求</code>来获得操作系统的服务,操作系统会对各个请求进行<code>协调管理</code>。</p><blockquote><p>例如A和B共用打印机，A按下打印后，打印机工作，B接着又按下打印，打印机不会把A和B的打印内容混合在一起。</p></blockquote><p>应用程序通过<code>系统调用请求</code>操作系统的服务。<br>​系统中的各种共享资源都由操作系统统一掌管,因此在用户程序中,凡是与资源有关的操作(如存储分配、I/O操作、文件管理等) ,都必须通过系统调用的方式向操作系统提出服务请求,由操作系统代为完成。这样可以保证系统的稳定性和安全性,防止用户进行非法操作。<br>系统调用相关的处理需要在<code>核心态</code>下完成。</p><h3 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/e7ab8bab64bae5282f57c5f7297e7ec8.png"></p><ul><li>系统调用是操作系统向上提供的接口</li><li>有的库函数是对于系统调用的进一步封装</li><li>大多数高级语言提供的库函数间接进行系统调用</li></ul><h3 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/7f5ff4cb6568a412aaa0f91b3528db13.png"></p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/02066158f4beb9f2c557383fcf86ec8a.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS+JavaScript</title>
      <link href="2020/11/24/HTML+CSS+JavaScript/"/>
      <url>2020/11/24/HTML+CSS+JavaScript/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法随笔</title>
      <link href="2020/11/24/%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/"/>
      <url>2020/11/24/%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>1.有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？<br>//这是一个菲波拉契数列问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？   </span></span><br><span class="line"><span class="comment">//这是一个菲波拉契数列问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1=f2=1;</span></span><br><span class="line"><span class="comment">f3=f1+f2=2;</span></span><br><span class="line"><span class="comment">fn=f(n-1)+f(n-2);</span></span><br><span class="line"><span class="comment">1,1,2,3,5,8,13,21...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第1个月的兔子对数：1\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第2个月的兔子对数：1\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,f,m=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">24</span>;i++)&#123;</span><br><span class="line">f=f2;   <span class="comment">//引进f保存叠加变量 </span></span><br><span class="line">f2=f1+f2;</span><br><span class="line">f1=f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个月的兔子对数：%d\n&quot;</span>,i,f2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.判断101-200之间有多少个素数，并输出所有素数。<br>程序分析：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除， 则表明此数不是素数，反之是素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;math.h&gt; </span><br><span class="line"><span class="comment">//判断素数的方法：用一个数分别去除2~sqrt(这个数)，如果能被整除，则表明不是素数，反之为素数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)sqrt(n);i++) <span class="comment">//从 2到算术平方根遍历 </span></span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)    <span class="comment">//存在约数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//非素数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(isPrime(i))&#123;  </span><br><span class="line">printf(<span class="string">&quot;%d\t&quot;</span>,i);</span><br><span class="line">count++; </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">&quot;\n素数：只有1和它本身这两个因子的数！\n&quot;</span>);</span><br><span class="line">printf(<span class="string">&quot;\n素数个数:%d\n&quot;</span>,count); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.输出斐波纳契数列前40个数据。<br>（要求：利用函数调用实现，输出来时为一排10个，则输出有4行；若一排8个，则输出有5行。）</p><p>2.输出魔方阵。如3行3列、4行4列、5行5列（如输入3，则输出的魔方阵为3行3列，如输入4，输出的魔方阵为4行4列。）<br><a href="https://blog.csdn.net/leipinyuan/article/details/79090126">魔方阵</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言程序设计</title>
      <link href="2020/11/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>2020/11/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程</title>
      <link href="2020/11/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
      <url>2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript程序设计项目</title>
      <link href="2020/11/21/JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/11/21/JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">JavaSript教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSctipt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb程序设计项目</title>
      <link href="2020/11/19/JavaWeb%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/11/19/JavaWeb%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb概述"><a href="#JavaWeb概述" class="headerlink" title="JavaWeb概述"></a>JavaWeb概述</h1><p>Java Web 其实就是一个技术的总和,把<code>Web</code>看成一个容器而已主要使用<code>JavaEE</code>技术来实现.再加上各种中间件。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/20/4c1f2fae25ee652b3d52c3bba84fa862.png"></p><h2 id="Web应用程序"><a href="#Web应用程序" class="headerlink" title="Web应用程序"></a>Web应用程序</h2><p>一个web应用由多个<code>静态web资源</code>和<code>动态web资源</code>组成，如:html、css、js文件，Jsp文件、java程序、支持jar包、配置文件等等。</p><blockquote><p>Web应用开发好后，若想供外界访问，需要把web应用所在目录交给web服务器管理，这个过程称之为<code>虚似目录的映射</code>。</p></blockquote><h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><p>1、<code>Web服务器</code>是指驻留于因特网上某种类型计算机的<code>程序</code>，是可以向发出请求的浏览器提供文档的程序。当Web浏览器（客户端）连到服务器上并请求文件时，服务器将处理该请求并将文件反馈到该浏览器上，附带的信息会告诉浏览器如何查看该文件（即文件类型）。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/5514c816b54a022ae6dc13f8e179d40e.png"><br>2、服务器是一种<code>被动程序</code>：只有当Internet上运行在其他计算机中的浏览器发出请求时，服务器才会响应。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/56e0a7ee29c9e3b138360427eed39a82.png"></p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>在本地计算机上随便创建一个web页面，用户是无法访问到的，但是如果启动tomcat服务器，把web页面放在tomcat服务器中，用户就可以访问了。这说明什么问题？<br>　　1、不管什么web资源，想被远程计算机访问，都必须有一个<code>与之对应的网络通信程序</code>，当用户来访问时，这个网络通信程序读取web资源数据，并把数据发送给来访者。<br>　　2、WEB服务器就是这样一个程序，它用于完成<code>底层网络通迅</code>。使用这些服务器，We应用的开发者只需要关注web资源怎么编写，而不需要关心资源如何发送到客户端手中，从而极大的减轻了开发者的开发工作量。<br><code>启动Tomcat</code>:<br>1.找到Tomcat目录<code>\bin\startup.bat</code>文件双击<br>2.DOS命令:<code>catalina  run</code><br>关闭Tomcat：<code>bin\shutdown.bat</code><br><code>常见问题</code>:<br>1.Tomcat依赖Java环境，需要在<code>JAVA_HOME</code>配好<code>JDK</code>的路径。<br>2.Tomcat默认端口8080，当出现端口被占用时(<code>netstat -ano</code>命令查看)，去Tomcat目录找到<code>conf\server.xml</code>文件里找到<code>port</code>修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">&quot;tomcatThreadPool&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/362a7ed85ead6d40a2e35ee22ab9be4a.png"><br><a href="http://tomcat.apache.org/">Tomcat下载地址</a><br><a href="https://blog.csdn.net/qq_30336433/article/details/81287828?utm_source=app">安装配置教程</a><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/0b5277e159859911bb33e3558b2b252b.png"><br><a href="https://www.cnblogs.com/mharvay/p/13700291.html">Tomcat目录详解</a></p><h2 id="动态Web资源"><a href="#动态Web资源" class="headerlink" title="动态Web资源"></a>动态Web资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">website</span><br><span class="line">         |------静态页面（HTML、CSS、JS、图片）</span><br><span class="line"></span><br><span class="line">         |------JSP页面</span><br><span class="line"></span><br><span class="line">         |------WEB-INF</span><br><span class="line"></span><br><span class="line">                            |-----web.xml   （必须的,需要用的一些相关配置文件）</span><br><span class="line"></span><br><span class="line">                            |-----classes       (可选的,java类编写成class文件）</span><br><span class="line"></span><br><span class="line">                            |-----lib            （可选的,第三方的需要用的jar包，数据库的连接）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置Web默认页面"><a href="#配置Web默认页面" class="headerlink" title="配置Web默认页面"></a>配置Web默认页面</h2><p>当访问一个Web应用程序时，通常需要指定访问的资源名称，如果没有指定资源名称，则会访问默认页面。例如，访问<a href="http://www.w3school.com.cn/index.htm">http://www.w3school.com.cn/index.htm</a> ,如果想输入<a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a> 就能访问，需要配置WEB-INF目录下的<code>web.xml</code>文件，即虚拟目录的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>资源名.后缀<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-flie-list</span>&gt;</span></span><br><span class="line"> 上述代码中，<span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span>用于配置默认页面列表，它包含多个<span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>子元素，</span><br><span class="line"> 每个<span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>都指定一个页面文件。当用户没有指定具体要访问的页面资源时，Tomcat会</span><br><span class="line"> 依次查找这些默认列表，如果找到，则返回给用户，停止查找。如果找不到，则返回错误信息。</span><br></pre></td></tr></table></figure><h1 id="Servlet基础"><a href="#Servlet基础" class="headerlink" title="Servlet基础"></a>Servlet基础</h1><h3 id="第一个Servlet程序"><a href="#第一个Servlet程序" class="headerlink" title="第一个Servlet程序"></a>第一个Servlet程序</h3><blockquote><p>继承GenericServlet后，除了service()方法，其他方法都已经实现。可见，继承GenericServlet类比实现Servlet接口更加简便。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request,ServletResponse response)</span><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">       <span class="comment">//得到输出流PrinterWriter对象,Servlet使用输出流来产生响应</span></span><br><span class="line">       PrintWriter out=response.getWriter();</span><br><span class="line">       <span class="comment">//使用输出流对象向客户端发送字符数据</span></span><br><span class="line">       out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>配置web.xml文件,虚拟路径的映射</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet标签给Tomcat配置Servlet程序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet-name标签给Servlet程序起一个别名(一般是类名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet-class是Servlet程序的全类名(一般为包名.类名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- servlet-mapping标签给Tomcat配置访问地址，用于映射一个对外访问的路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet-name标签告诉服务器，我当前配置的地址给哪个Servlet程序使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- url-pattern标签配置访问地址</span></span><br><span class="line"><span class="comment">    / 斜杠在服务器解析时，表示地址为:http://ip:port/工程路径</span></span><br><span class="line"><span class="comment">    /HelloServlet表示http://ip:port/工程路径/HelloServlet)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 运行结果<img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/418f2a4cabf96e3d271477b5ecf41bb9.png"></p><hr><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/67467565def82d9d1c4c90f792d34809.png"></p><ul><li>init()初始化阶段</li><li>service()处理客户端请求阶段</li><li>destroy()终止阶段<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span><span class="keyword">throws</span> ServletException</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;----init()----&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;----service()----&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;----destroy()----&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/992f2d62dc60a007cb5afd5cf04d7d69.png"></li></ul><h3 id="自动加载Servlet程序"><a href="#自动加载Servlet程序" class="headerlink" title="自动加载Servlet程序"></a>自动加载Servlet程序</h3><p>当希望某些Servlet程序可以在Tomcat启动时<code>随即启动</code>，可以使用<load-on-startup>元素,最常使用在<code>配置数据库</code>时。</load-on-startup></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>chapter04.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>load-on-startup用于指定Servlet被加载的时机和顺序，所设置的值必须为一个<code>整数</code>,如果为<code>负数或者没有设</code>，Servlet容器将在客户端首次请求这个Servlet时加载它。如果为<code>整数或0</code>，Servlet容器将在Web应用<code>启动时加载并初始化Servlet其值越小，对应Servlet就越先被加载</code>。</p></blockquote><hr><h3 id="ServletConfig接口"><a href="#ServletConfig接口" class="headerlink" title="ServletConfig接口"></a>ServletConfig接口</h3><p>Servlet程序的<code>配置信息类</code>,有三大作用:</p><ul><li>可以区号Servlet程序的别名<code>servlet-name</code>的值</li><li>获取初始化参数<code>ini-param</code></li><li>获取<code>ServletContext对象</code></li></ul><hr><p>常用方法:</p><ul><li>获取servlet的初始化<code>参数的值</code>：String  <code>getInitParameter</code>（String name）</li><li> 获取servlet的初始化<code>参数的名称</code>：Enumeratrion <code> getInitParameterNames</code>（）</li><li>得到当前Web应用的<code>ServletContext对象</code>：ServletContext <code>getServletContext</code>（）</li><li>获取servlet的名称,即web.xml中<code>servlet-name</code>元素的值：String <code>getServletName</code>（）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletConfig</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.首先得到servletconfig对象</span></span><br><span class="line">ServletConfig config=<span class="keyword">this</span>.getServletConfig();</span><br><span class="line"><span class="comment">//2.获取servlet的名称，对应web.xml里面</span></span><br><span class="line">String servletName=config.getServletName();</span><br><span class="line">System.out.println(<span class="string">&quot;servlet的名称&quot;</span>+servletName);</span><br><span class="line"><span class="comment">//3.获取servlet的初始化参数</span></span><br><span class="line">String value=config.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数值：&quot;</span>+value);</span><br><span class="line"><span class="comment">//4.获取servlet的初始化参数的名称</span></span><br><span class="line">Enumeration&lt;String&gt; er=config.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(er.hasMoreElements()) &#123;</span><br><span class="line"><span class="comment">//获取初始化参数的名称</span></span><br><span class="line">String name=er.nextElement();</span><br><span class="line"><span class="comment">//根据初始化参数的名称，获取对应的值</span></span><br><span class="line">String value2=config.getInitParameter(name);</span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数的名称：&quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;该名称的值:&quot;</span>+value2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletConfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletConfig<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet的初始化参数的配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>lizhenye<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletConfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletConfig<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/2ee772c543a40806ff1d5c0d080acd91.png"></p><h3 id="ServletContext接口"><a href="#ServletContext接口" class="headerlink" title="ServletContext接口"></a>ServletContext接口</h3><p>ServletContext对象代表<code>当前Web应用</code>，该对象不仅封装了当前Web应用的所有信息，而且实现了多个Servle之间数据共享。一个Web工程，只有<code>一个ServletContext对象实例</code>。ServletContext对象是一个<code>域对象</code>。<br><code>域</code>是指存取数据的<code>操作范围</code>。域对象是可以向Map一样存取数据的对象。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/ea35bfe40ab46cad2fa83661edb496e1.png"></p><hr><p>ServletContext接口的作用:<br>1.获取Web应用程序的<code>初始化参数:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletContext</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//1.首先得到ServletContext对象</span></span><br><span class="line">ServletContext context=<span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//2.得到包含所有初始化参数名的Enumberation对象</span></span><br><span class="line">Enumeration&lt;String&gt; er=context.getInitParameterNames();</span><br><span class="line">out.println(<span class="string">&quot;所有的参数名和参数值:&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(er.hasMoreElements()) &#123;</span><br><span class="line"><span class="comment">//获取初始化参数的名称</span></span><br><span class="line">String name=er.nextElement();</span><br><span class="line"><span class="comment">//根据初始化参数的名称，获取对应的值</span></span><br><span class="line">String value=context.getInitParameter(name);</span><br><span class="line">out.println(name+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">out.println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>CompanyName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>address<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>beijing<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletContext<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletContext<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/5fd0719196f0f9afb1dfd9dc4d3c7fb2.png"></p><p>2.实现多个Servlet对象<code>共享数据</code><br>ServletContext接口的方法:</p><ul><li>Enumberation getAttributeNames() ： 返回一个Enumberation对象，该对象包含了所有存放在ServletContext中的·所有域属性名·。</li><li>Object <code>getAttribute(String name)</code>：根据指定的参数名返回一个与之匹配的域属性值。</li><li>void removeAttribute(String name)：根据参数指定的域属性名，从ServletContext中·删除·匹配的域属性。</li><li>void <code>setAttribute(String name,Object obj)</code>：设置ServletContext的域属性，其中name是域属性名，obj是域属性值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletContext1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">ServletContext context=<span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//通过setAttribute()方法设置属性值</span></span><br><span class="line">context.setAttribute(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;this servlet save data&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;运行一下，将数据存入ServletContext对象&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletContext2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">ServletContext context=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//通过getAttribute()方法获得属性值</span></span><br><span class="line">String data=(String) context.getAttribute(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletContext1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletContext1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletContext2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletContext2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/64f4dd4820124509c04f9d8ae19d54a2.png"></p><p> 3.读取Web应用下<code>资源文件</code>。</p><hr><h1 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/5852c2650f9eee2ec369f324552f046f.png"></p><h2 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h2><p>HttpServletResponse接口中定义了向客户端发送<code>响应状态码、响应消息头、响应消息体</code> 的方法。</p><h3 id="发送状态码"><a href="#发送状态码" class="headerlink" title="发送状态码"></a>发送状态码</h3><p>1.<code>setStatus(int status)</code>方法<br>该方法用于<code>设置HTTP响应消息的状态码</code>，并生成响应状态行。正常情况下，Web服务器默认产生一个状态码为200的状态行。</p><p>2.<code>sendError(int sc)</code>方法<br>该方法用于<code>发送错误信息的状态码</code>,例如，404状态码表示找不到客户端请求的资源。在response对象中，提供了两个重载sendError(int sc)的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> code)</span> <span class="keyword">throws</span> java.io.IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> code,String message)</span> <span class="keyword">throws</span> java.io.IOException</span></span><br></pre></td></tr></table></figure><h3 id="发送响应消息头"><a href="#发送响应消息头" class="headerlink" title="发送响应消息头"></a>发送响应消息头</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/d9a91c651a1e2435f9e97e601df95bce.png"></p><blockquote><p>addHeader()、setHeader()、addIntHeader()、setIntHeader()方法用于<code>设置各种头字段</code><br>setContType()、setLocale()、setCharacterEncoding()用于<code>设置字符编码</code></p></blockquote><h3 id="发送响应消息体"><a href="#发送响应消息体" class="headerlink" title="发送响应消息体"></a>发送响应消息体</h3><p>1.<code>getOutputStream()</code>方法<br>该方法所获取的<code>字节输出流</code>对象为ServletOutputStream类型。用于ServletOutputStream是OutputStream的子类,它可以直接输出字节数组中的二进制数据。<br>2.<code>getWriter()</code>方法<br>该方法所获取的<code>字符输出流</code>对象为PrintWriter类型。</p><blockquote><p>注意：两种方法不能同时写，不然会报错出500，并且谁在前报谁错。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String data=<span class="string">&quot;itcast&quot;</span>;</span><br><span class="line"><span class="comment">//获取字节输出流对象</span></span><br><span class="line">OutputStream out=response.getOutputStream();</span><br><span class="line">out.write(data.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String data=<span class="string">&quot;itcast&quot;</span>;</span><br><span class="line"><span class="comment">//获取字符输出流对象</span></span><br><span class="line">PrintWriter print=response.getWriter();</span><br><span class="line">print.write(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttServletResponse应用"><a href="#HttServletResponse应用" class="headerlink" title="HttServletResponse应用"></a>HttServletResponse应用</h3><h4 id="中文输出乱码问题"><a href="#中文输出乱码问题" class="headerlink" title="中文输出乱码问题"></a>中文输出乱码问题</h4><p>由于计算机中的数据都是以二进制形式存储的，因此，当传输文本时，就会发生字符和字节之间的转换。字符与字节之间是通过查<code>码表</code>完成的，字符转换成字节的过程为<code>编码</code>，字节转换成字符的过程为<code>解码</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//response.setCharacterEncoding(&quot;utf-8&quot;);</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">String data=<span class="string">&quot;中国&quot;</span>;</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当去掉前两行字符编码代码时，浏览器显示内容为”?”,发生了乱码问题，这是因为response对象的字符输出流在编码时，采用的是<code>ISO-8859-1</code>的字符码表，不兼容中文，会将”中国”编码为“63 63”，当浏览器接收解码时，会采用默认的码表<code>GB2312</code>，将”63”解码为”?”。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/28f9e1b691b45eeb40ad668e6faad61f.png"></p></blockquote><hr><blockquote><p>当加上<code>response.setCharacterEncoding(&quot;utf-8&quot;);</code>语句时，输出并不是“中国”,这是由于浏览器解码方式为<code>GB2312</code>导致。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/6239828b556e8a7005dcc6062a7ce326.png"></p></blockquote><hr><blockquote><p>综上分析，需要设置HttpServletResponse和浏览器都设置为”UTF-8”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置HttpServletResponse使用utf-8</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//设置浏览器使用utf-8</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//包含以上两种方式的写法:</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="网页定时刷新跳转"><a href="#网页定时刷新跳转" class="headerlink" title="网页定时刷新跳转"></a>网页定时刷新跳转</h4><p>在HTTP协议中，定义了一个Refresh头字段，可以通知浏览器在指定的时间内自动刷新并跳转到其他页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2秒后跳转到我的博客</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Refresh&quot;</span>, <span class="string">&quot;2;URL=http://www.lzyblog.github.io&quot;</span>);</span><br><span class="line"><span class="comment">//每隔3秒定时刷新当前页面</span></span><br><span class="line"><span class="comment">//reponse.setHeader(&quot;Refresh&quot;,&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//response.getWriter().println(new java.util.Date());//输出当前时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实现请求重定向"><a href="#实现请求重定向" class="headerlink" title="实现请求重定向"></a>实现请求重定向</h4><p>在某些情况下，针对客户端的请求，一个Servlet类可能无法完成全部工作。这时可以使用请求重定向来完成。<br>请求重定向是指web服务器接收到客户端的请求后，可能由于某些条件限制，不能访问当前请求URL所指向的Web资源，而是<code>指定了一个新的资源路径</code>，让客户端重新发送请求。<br>为了实现请求重定向，在HttpServletResponse接口中，定义了一个<code>sendRedirect()</code>方法，该方法用于生成<code>302响应码和Location响应头</code>，从而通知客户端重新访问Location响应头中指定的URL，sendRedirect()方法的完整语法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(java.lang.String  Location)</span> <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">            <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/4917500110d54873a9da063322cea539.png"><br>以下模拟用户登录来帮助理解，创建login.html登录表单和welcome.html欢迎界面(在WebContent下建立)，再创一个LoginServlet的类用于处理用户登录请求。<code>Servlet_Project</code>为包名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/Servlet_Poject/LoginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎您,登陆成功！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//用HttpServletRequest对象的getParameter()方法获取用户名和密码;</span></span><br><span class="line">String username=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password=request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="comment">//假设用户名和密码分别为：itcase和123</span></span><br><span class="line"><span class="keyword">if</span>((<span class="string">&quot;itcast&quot;</span>).equals(username)&amp;&amp;(<span class="string">&quot;123&quot;</span>).equals(password)) &#123;</span><br><span class="line"><span class="comment">//如果用户名和密码正确，重定位到welcome.html</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/Servlet_Poject/welcome.html&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//如果用户名和密码错误，重定位到login.html</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/Servlet_Poject/login.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a>HttpServletRequest对象</h2><p>HttpServletRequest接口中定义了获取<code>请求行、请求头、请求消息体</code>的相关方法。</p><h3 id="获取请求行信息"><a href="#获取请求行信息" class="headerlink" title="获取请求行信息"></a>获取请求行信息</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/19681439b47ff60b1a35f37da958ce18.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/1f3c1ccf22ca507bb690a4fb647924a3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLineServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取请求行的相关信息</span></span><br><span class="line">out.println(<span class="string">&quot;getMethod:&quot;</span>+request.getMethod()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRequestURI:&quot;</span>+request.getRequestURI()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getQueryString:&quot;</span>+request.getQueryString()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getProtocol:&quot;</span>+request.getProtocol()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getContextPath:&quot;</span>+request.getContextPath()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getPathInfo:&quot;</span>+request.getPathInfo()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getPathTranslated:&quot;</span>+request.getPathTranslated()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getServletPath:&quot;</span>+request.getServletPath()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRemoteAddr:&quot;</span>+request.getRemoteAddr()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRemoteHost:&quot;</span>+request.getRemoteHost()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getLocalAddr:&quot;</span>+request.getLocalAddr()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getLocalName:&quot;</span>+request.getLocalName()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getServerName:&quot;</span>+request.getServerName()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getServerPort:&quot;</span>+request.getServerPort()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getScheme:&quot;</span>+request.getScheme()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRequestURL:&quot;</span>+request.getRequestURL()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/6293072a469cd6c13bafc1d6c9000866.png"></p><h3 id="获取请求消息头"><a href="#获取请求消息头" class="headerlink" title="获取请求消息头"></a>获取请求消息头</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/cd8f0108f9f980b07bb2e6199bc98de9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHeadersServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取请求消息中所有头字段</span></span><br><span class="line">Enumeration headerNames =request.getHeaderNames();</span><br><span class="line"><span class="comment">//循环遍历所有请求头，并通过getHeader()方法获取一个指定名称的头字段</span></span><br><span class="line"><span class="keyword">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class="line">String headerName=(String)headerNames.nextElement();</span><br><span class="line">out.print(headerName+<span class="string">&quot;:&quot;</span>+request.getHeader(headerName)+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/fc58899708146068305991f61da59086.png"></p><h4 id="Referer防”盗链”"><a href="#Referer防”盗链”" class="headerlink" title="Referer防”盗链”"></a>Referer防”盗链”</h4><blockquote><p>Referer头字段可以用于网站的<code>防盗链</code>。什么是盗链呢？假如A网站并没有某些资源，而是通过HTMl文件中使用<a></a>标签链接到B网站的资源，将其展示给浏览者。A网站提高了自己网站的访问量，却加重了B网站服务器的负担，损害了合法利益。而当你单击一个网页上的超链接时，浏览器会使用<code>Referer头字段标识发出请求的超链接所在网页的URL</code>，从而阻止访问或者跳转到指定的页面。<br><code> 实例描述</code>：在Servlet_Project项目下Myproject包中，编写一个<code>DownManagertServlet</code>的类负责提供下载内容，要求下载请求的链接必须是通过本网站进入的，否则会将请求转发给下载说明的HTML页面（<code>download.html</code>）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownManagertServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取Referer头的值</span></span><br><span class="line">String referer=request.getHeader(<span class="string">&quot;referer&quot;</span>);</span><br><span class="line"><span class="comment">//获取访问地址</span></span><br><span class="line">String sitePart=<span class="string">&quot;http://&quot;</span>+request.getServerName();</span><br><span class="line"><span class="comment">//判断referer头是否为空,这个头的地址是否以sitePart开始</span></span><br><span class="line"><span class="keyword">if</span>(referer !=<span class="keyword">null</span> &amp;&amp; referer.startsWith(sitePart)) &#123;</span><br><span class="line"><span class="comment">//处理正在下载的请求</span></span><br><span class="line">out.println(<span class="string">&quot;dealing download....&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//非法下载请求跳转到download.html页面</span></span><br><span class="line">RequestDispatcher rd=request.getRequestDispatcher(<span class="string">&quot;/download.html&quot;</span>);</span><br><span class="line">rd.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/Servlet_Project/DownManagertServlet&quot;</span>&gt;</span>download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当<code>第一次</code>请求DownManagerServlet时，请求消息中<code>不含Referer请求头</code>，所以DownMagaerServlet将下载请求转发给了download.html页面。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/4e288eccd3fc3a86463ea81a1fbf7685.png"><br>单击”download”链接后，请求信息中<code>包含了Referer头字段</code>，并且其值与DownManagerServlet位于<code>同一个Web站点</code>，因此接受下载请求。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/1680ba3174d45170c1b4a72387f7aa88.png"></p></blockquote><h2 id="HttpServletRequest应用"><a href="#HttpServletRequest应用" class="headerlink" title="HttpServletRequest应用"></a>HttpServletRequest应用</h2><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/0d51a43644d612855e127b36d489def4.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResquestParamsServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">  String name=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">  String password=request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;用户名:&quot;</span>+name);</span><br><span class="line">  System.out.println(<span class="string">&quot;密码:&quot;</span>+password);</span><br><span class="line">  <span class="comment">//获取参数名为&quot;hobby&quot;的值</span></span><br><span class="line">  String hobby[]=request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;爱好:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hobby.length;i++) &#123;</span><br><span class="line">  System.out.println(hobby[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/Servlet_Project/ResquestParamsServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">爱好:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sing&quot;</span>&gt;</span>唱歌</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dance&quot;</span>&gt;</span>跳舞</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>&gt;</span>足球<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/3fc118d7cf3c48afc36577cfdda7adac.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/9e3fbc05610ff87a24b3c1b19c077b15.png"><br> 由于HTML设置了浏览器在传递参数是采用utf-8编码，但在解码是采用默认的ISO-8859-1，会发生乱码问题。<br>解决方案：</p><blockquote><p>POST: request.setCharacterEncoding(“utf-8”); （<code>只对POST有效</code>）<br>GET: name=new String(<code>name.getBytes(&quot;iso8859-1&quot;)</code>,”<code>utf-8</code>“); （先使用错误码表ISO-8859-1将用户名重新编码，再使用UTF-8进行解码）</p></blockquote><h3 id="Request对象传递数据"><a href="#Request对象传递数据" class="headerlink" title="Request对象传递数据"></a>Request对象传递数据</h3><p>1.<code>setAttriute()</code>方法<br>用于将一个对象与一个名称关联后存储进ServletRequest对象中<br>如果ServletRequest对象中已经存在指定名称的属性，会先删除原来的属性，再添加新的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(java.lang.String name,java.lang.Object o)</span></span>;</span><br></pre></td></tr></table></figure><p>2.<code>getAttribute()</code>方法<br>从ServletRequest对象中返回指定名称的属性对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.lang.<span class="function">Object <span class="title">getAttribute</span><span class="params">(java.lang.String name)</span></span>;</span><br></pre></td></tr></table></figure><p>3.<code>removeAttribute()</code>方法<br>从ServletRequest对象中删除指定名称的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(java.lang.String name)</span></span>;</span><br></pre></td></tr></table></figure><p>4.<code>getAttributeNames()</code>方法<br>返回一个包含ServletRequest对象中所有属性名的Enumeration对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.util.<span class="function">Enumeration <span class="title">getAttributeNames</span><span class="params">(java.lang.String name)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="RequestDispatcher对象"><a href="#RequestDispatcher对象" class="headerlink" title="RequestDispatcher对象"></a>RequestDispatcher对象</h2><p>当一个Web资源收到客户端的请求后，如果希望服务器通知另外一个资源去处理请求，除了使用sendRedirect()请求重定向外，还可以通过<code>RequestDispatcher接口的实例对象</code>来实现。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/06c09c4140efe255ca1c1d1c6ea79aed.png"></p><h3 id="请求转发forward"><a href="#请求转发forward" class="headerlink" title="请求转发forward()"></a>请求转发forward()</h3><p>在Servlet中，如果当前Web资源不想处理请求时，可以通过<code>forward()</code>方法将当前请求<code>传递给其他Web资源</code>进行处理。如图所示，当客户端访问Servlet1时，可以通过foward()方法将请求转发给其他Web资源(如Servlet2)，处理完后，返回客户端。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/ebdabe030d389967d8bfddf5f453292b.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//将数据存储到request对象中</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;company&quot;</span>, <span class="string">&quot;北京传智播客有限公司&quot;</span>);</span><br><span class="line">RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">&quot;/ResultServlet&quot;</span>);</span><br><span class="line"><span class="comment">//用forward()方法将当前Servlet的请求转发到ResultServlet页面。</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//获取PrintWriter对象用于输出信息</span></span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取request请求对象中保存的数据</span></span><br><span class="line">String company=(String) request.getAttribute(<span class="string">&quot;company&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(company!=<span class="keyword">null</span>) &#123;</span><br><span class="line">out.println(<span class="string">&quot;公司名称:&quot;</span>+company+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/23/889ff7ef685e07393bb0ce23c2ae8171.png"></p><blockquote><p>可以看出地址栏是RequestForwardServlet的请求路径，却显示了另一个页面的内容，这是因为请求转发是发生在服务内部的行为，在一次请求中可以使用request进行数据共享。e</p></blockquote><h3 id="请求包含incude"><a href="#请求包含incude" class="headerlink" title="请求包含incude()"></a>请求包含incude()</h3><p>指使用include()方法将Servlet请求转发给其他Web资源进行处理，在请求包含返回的响应消息中，即包含了<code>当前Servlet的响应消息</code>，也包含了<code>其他Web资源所作出的响应消息</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/23/ba75d0e658fbb143a49a0f6456ff556a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncludingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">RequestDispatcher rd=request.getRequestDispatcher(<span class="string">&quot;/IncludedServlet?p1=abc&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;before including&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">rd.include(request, response);</span><br><span class="line">out.println(<span class="string">&quot;after including&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncludedServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//设置响应时使用的字符编码</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">out.println(<span class="string">&quot;中国&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;URI:&quot;</span>+request.getRequestURI()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;QueryString:&quot;</span>+request.getQueryString()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;parameter p1:&quot;</span>+request.getParameter(<span class="string">&quot;p1&quot;</span>)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/23/91910f1c29dc8020b1ee5b92e1b55d70.png"></p><h1 id="会话及其会话技术"><a href="#会话及其会话技术" class="headerlink" title="会话及其会话技术"></a>会话及其会话技术</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE程序设计项目</title>
      <link href="2020/11/16/JavaSE%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/11/16/JavaSE%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744">Java基础回顾</a><br><a href="https://www.runoob.com/java/java-tutorial.html">Java教程|菜鸟教程</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java最早是由SUN公司（已被Oracle收购）的<code>詹姆斯·高斯林</code>（高司令，人称Java之父）在上个世纪90年代初开发的一种编程语言。<br>Java 主要分为三个版本：</p><ul><li>Java<code>SE</code>(J2SE)(Java2 Platform Standard Edition，java平台标准版)</li><li>Java<code>EE</code>(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>Java<code>ME</code>(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li></ul><p><a href="https://www.java.com/zh-CN/download/help/index_installing.html">Java技术帮助</a></p><h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><p>  1.<code>跨平台性</code>:跨平台性是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。 Java自带的虚拟机很好地实现了跨平台性。 Java源程序代码经过编译后生成二进制的字节码是与平台无关的，是可被Java虚拟机识别的一种机器码指令，Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。</p><p>2.<code>简单</code>:Java语言是一种相当简洁的“面向对象”程序设计语言。Java语言省略了C++语言中所有的难以理解、容易混淆的特性，例如头文件、指针、结构、单元、运算符重载、虚拟基础类等。它更加严谨、简洁。</p><p>3.<code>面向对象</code>:面向对象(Objiect Oriented)是一种软件开发思想。它是对现实世界的一种抽象，面向对象会把相关的数据和方法组织为一个整体看看待。不用像面向过程那样严格按照顺序来执行每个动作。</p><p>4.<code>健壮性</code>:Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。</p><p>5.<code>多线程</code>:是一种轻量级进程，是现代程序设计中必不可少的一种特性。多线程处理能力使得程序能够具有更好的交互性、实时性。</p><h2 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h2><p>Java语言编写的程序既是编译型的，又是解释型。运行期环境代表着Java平台，开发人员编写Java代码(<code>.java文件</code>)，然后用Java编译器将之编译成字节码(<code>.class文件</code>)，JVM才能识别并运行它（<code>编译只进行一次，而解释在每次运行程序时都会进行</code>），JVM针对每个操作系统开发其对应的解释器，所以只要其操作系统有对应版本的JVM，那么这份Java编译后的代码就能够运行起来，这就是Java能<code>一次编译，到处运行</code>的原因,编译后的字节码采用一种针对JVM优化过的机器码形式保存，虚拟机将<code>字节码</code>解释为<code>机器码</code>，然后在计算机上运行。<br><code>*.java</code>-&gt;<code>*.class</code>-&gt;<code>字节码</code>-&gt;<code>机器码</code><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@d3a99ed6e3318056b293e2a87abbb4ed698fd9b0/2020/11/16/ea50b091a4253c41449ca87dd53389ed.png"></p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>  1.<code>JVM</code>(Java Virtual Machine)：虚拟机,使软件在不同操作系统中，模拟相同的环境。<br>  2.<code>JRE</code>(Java Runtime Environment)：Java运行环境,包含<code>JVM和解释器</code>，完整的运行环境.<br>  3.<code>JDK</code>(Java Development Kit)：Java开发工具包，包含<code>JRE+类+开发工具包</code><br>  4.<code>API</code>(Application Programming Interface)：<code>程序编程接口</code>，JavaAPI文档是Java程序员开发不可缺少的编程辞典。<br>  5.<code>编译型</code>语言：使用编译器将高级语言源代码<code>一次性</code>“翻译成”可被平台硬件执行的<code>机器码</code>，程序运行效率高。编译生成的可执行文件可以<code>脱离开发环境</code>，在特定的平台上独立运行。但编译型语言被编译成特定平台上的机器码，生成的可执行性程序<code>无法移植</code>到其他平台上运行。例如C，C++等。<br>  6.<code>解释型</code>语言：指使用专门的解释器对源程序<code>逐行解释成</code>特定平台的机器码并立即执行的语言。每次执行解释型语言的程序都需要进行一次编译，运行效率较低，而且不能脱离解释器独立运行。解释型语言<code>跨平台</code>比较容易，只需要特定平台的解释器即可。例如Ruby，Python<br><a href="https://www.oracle.com/index.html">JDK下载:Oracle公司官方网站</a><br><a href="https://www.eclipse.org/">Eclipse开发工具下载</a></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><blockquote><p>配置环境变量的原因：系统不知道去哪找JDK</p></blockquote><p>我的电脑-&gt;属性-&gt;高级系统设置-&gt;<code>环境变量</code></p><p>第一步：新建<code>JAVA_HOME</code>变量名，并找到<code>JDK路径</code>作为变量值<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/2124f1b8f6982d2e60f0ced503822a88.png"></p><p>第二步：新建<code>CLASSPATH</code>变量名，并把(<code>.</code>)作为变量值，指代当前路径。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/dd87ad9aec208a6c9dad713b102c903e.png"></p><blockquote><p>根据CLASSPATH环境变量定位类，在JDK1.4版本以前需要设置CLASSPATH变量值为(.)，用以告诉JRE需要在当前路径下搜索Java类。</p></blockquote><p>第三步：找到Path目录，把JDK下bin目录作为新建值，bin目录下有Java命令工具，此Path路径告诉计算机所用Java指令去哪找。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/42c44687d3f4a60648175e2b6ca55a82.png"></p><blockquote><p>Windows操作系统是根据Path环境变量来查找命令，Path环境变量的值是一系列路径，根据路径查找。</p></blockquote><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java的API结构"><a href="#Java的API结构" class="headerlink" title="Java的API结构"></a>Java的API结构</h2><p>Java的类库包括<code>核心Java包</code>、<code>Javax扩展包</code>和<code>Org包</code>。<br><code>Java.lang</code>包：封装所有编程应用的<code>基本类</code>，如Object、Class、System、String、Integer、Thread等。<br><code>Object</code>是所有类的根，它所包含的属性和方法被所有类继承。<br><code>Class类</code>是由编译器自动生成对象的一个特殊类，它伴随每个类。Class对象包含所属类的所有信息，可以通过Class类的方法来访问这些信息。<br><code>System类</code>是一个特殊类，它是一个final类，所有的方法都用类变量来调用，即对System类<code>不能实例化</code>，主要提供标准输入/输出和系统环境信息的访问、设置。例：System.out。</p><hr><p>（1）Java<code>核心包</code>。<br>java.awt包。<code>封装抽象窗口工具包</code>，提供构建和管理用户<code>图形界面</code>的功能<br>java.applet包。为Applet提供执行需要的所有类。<br>java.io包。提供程序<code>输入/输出文件操作的类</code>。<br>java.net包。提供程序执行<code>网络通信应用及URL处理的类</code>。<br>java.rmi包。提供程序<code>远程方法调用所需的类</code>。<br>java.math包。提供程序常用的整数算术以及十进制算术的基本方法类。<br>java.util包。提供实用程序类和集合类，如日期方法类、集合、数组类。<br>java.sql包。提供访问和处理标准数据源数据的类。<br>java.security包。提供<code>网络安全操作类</code>。<br>java.text包。提供所有处理文本、日期、数字以及非自然语言的消息操作类。<br>java.bean包。提供开发编写java bean所需的类。</p><p>(2）扩展包<code>Javax</code> 。<br>javax.naming包。<code>提供命名服务所需的类和接口</code>。<br>javax.swing包。提供构建和管理应用程序的<code>图形界面的轻量级的构件</code>。<br> javax.rmi包。提供远程方法调用的应用程序接口。<br>javax.transaction包。提供事务处理所需的类。<br>javax.sound包。提供多媒体声音要求的MIDI输入/输出以及合成操作的基本类。<br>avax.accessibility包。提供用户界面构件之间相互访问机制的基本类。</p><p>(3）<code>Org</code>包<br>  Org包是一些有关<code>国际组织的标准</code>。</p><h2 id="Java编写及运行"><a href="#Java编写及运行" class="headerlink" title="Java编写及运行"></a>Java编写及运行</h2><p>Java程序包括<code>源代码，由编译器生成的类文件</code>，有归档工具jar生成的<code>.jar</code>文件、对象状态序列化<code>.ser</code>文件。其中源代码的结构如下：<br>（1）package语句。0或多个，用于使文件存入指定包中，这条语句必须置于文件之首。<br>（2）import语句。0或多个。必须在所有类定义之前引入标准类。<br>（3）public class Definition（公共类定义），0或1个，指定应用程序类名，需与源文件名一致。<br>（4）class Definition，0或多个，类定义。<br>（5）interface Definition，0或多个，接口定义。<br>Java是区分字母大小写的。<code>源文件与程序类（即公共类）名字相同</code>。其扩展名为.java。源文件中最多只能有一个public类，其他类的个数不限。</p><p>用编译器<code>javac</code>.exe对Java程序(源代码)进行<code>编译</code>。<br>用解释器<code>java</code>.exe<code>解释</code>执行所生成的.class文件（就是类文件）。</p><hr><p>   JDK工具：</p><ul><li>javac.exe。Java编译器。</li><li>java.exe。Java解释器，执行字节码程序。</li><li>javadoc.exe。Java文档生成器，对Java源文件和包以MML格式产生AP文档。制作源文件类结构的HTML格式文档。 </li><li>Javap.exe。Java类分解器，对.class文件提供字节代码的反汇编并打印。查看源码类中的public方法名字和public成员变量了名字。</li><li>jdb.exe。Java调试器。  </li><li>javaprof.exe。Java剖析工具，提供解释器剖析信息。  </li><li>appletviewer.exe。Java Applet浏览器。  </li></ul><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p>定义：<code>变量是在程序的运行过程中其值可以被改变的量</code>。<br>Java中的变量遵循<code>先声明、后赋值、再使用</code>的原则。声明的作用有两点：<br>一是确定该变量的标识符(即名称)，以便系统为它指定<code>存储地址</code>和识别它，这便是“<code>按名访问</code>”原则；<br>二是为该变量指定数据类型，以便系统为它分配足够的存储单元。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">var</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">45</span>;   <span class="comment">//实例变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y=<span class="number">90</span>;  <span class="comment">//静态变量，有效范围可以跨类。</span></span><br><span class="line"><span class="comment">//静态成员属于类所有，可以使用&quot;类名.静态变量&quot;在其他类中使用。</span></span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>常量</code>：<br>定义：<code>是指在程序的整个运行过程中其值始终保持不变的量</code>。<br>Java语言用<code>final </code>关键字来定义常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_09</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> PI=<span class="number">3.1415</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(blog_09.PI);</span><br><span class="line">System.out.println(blog_09.id);</span><br><span class="line">blog_09.method1();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p><code>局部变量</code>是在类的<code>方法体中</code>定义的变量和方法的参数，作用域是<code>方法代码段</code>。<br><code>成员变量</code>在<code>类中</code>声明而不是在类的方法中声明，作用域是<code>整个类</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test23</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> member; <span class="comment">//成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">                  <span class="keyword">int</span> a=<span class="number">50</span>;  <span class="comment">//局部变量a</span></span><br><span class="line">                  member=a; <span class="comment">//member在整个类内有效</span></span><br><span class="line">              <span class="keyword">return</span> member;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">                   <span class="keyword">int</span> x;</span><br><span class="line">               x=a; <span class="comment">//a在方法h中失效</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员变量分为<code>实例变量</code>和<code>静态变量</code>（类变量）。在成员变量的前面加上<code>static</code>，这样的变量称为静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;    <span class="comment">//x为实例变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y;  <span class="comment">//y为静态变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当局部变量的名字与成员变量的名字相同时，则成员变量被<code>隐藏</code>，即这个成员变量在这个方法内暂时无效,这时如果想在该方法内使用成员变量，必须使用关键字<code>this</code>。 </p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/3fdf0dfbc51168b434d0268457b319b8.png"></p><p>1.整型常量<br>    整数型常量有3种表示形式：<br>      (1) <code>十进制</code>整数。如：56，-24，0。<br>      (2) <code>八进制</code>整数。以<code>零</code>开头的数是八进制整数。如：017，0，0123。<br>      (3) <code>十六进制</code>整数。以<code>0x</code>开头的数是十六进制整数。如：0x17，ox0，0xf，0xD。十六进制整数可以包含数字0～9、字母a～f或A～F。<br>整型常量在计算机中默认值占32位，分byte,short,int和long 4类，分别占8，16，32，64位，对于long类型整型常量书写表示时，要在数字后面加<code>l或L</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/97c00b1161661c3011756b181c990675.png"></p><p>2.浮点型<br>浮点型数据属于<code>实型数据</code>，分<code>float</code>和<code>double</code>两种。浮点型数据有数字和小数组成，必须有小数点，<code>小数位数越多，表示越精确</code>。<br>1.<code>实型常量</code><br>十进制书写格式：<br>             如0.256、1.83、256.0等；<br>科学计算格式：<br>           256e3或256E3.<br>           要求e/E之前必须有数字， e/E必须是整数。<br>实型常量在计算机中存储分<code>float和double</code>型，</p><p>如1.33568E2<code>f</code>或1.33568E2<code>F</code>表示float浮点数，在计算机内存储占<code>32位</code>；</p><p>如1.33568E2D或1.33568E2d或1.33568E2表示double双精度浮点数，在计算机内存储占<code>64位</code>。</p><blockquote><p>提示：如数字后没有任何字母，计算机默认为<code>double</code>型。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/f1ab0525c4c3ce0ea25f6c00b8746c73.png"></p><p>3.布尔类型<br>布尔型数据只有两个值：<code>true</code>(真)和<code>false</code>(假)。<br>一般用于逻辑判断，在计算机内存占<code>一个字节</code>。<br>默认值为<code>false</code>。</p><p>4.字符型<br>用<code>单引号</code>括起的单个字符。这个字符可以是Unicode字符集中的任何字符。  例如：‘s’，‘F’，‘@’，‘*’。<br>用单引号括起的转义字符。用反斜线“＼”开头，后面跟一个字母来表示<code>某个特定的控制符</code>，这便是转义字符。<br>字符串常量是用双引号括起的0个或多个字符串序列。字符串中可以包括转义字符。如：“he”，”two＼n”，”124\n”，” “。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/787794caa50fff7a4035275ecadd0333.png"></p><p>5.类型转换<br>Java语言的各种数据之间转换有两种：<code>自动转换</code>和<code>强制转换</code>。<br>（1）自动转换只能将<code>位数少</code>的数据类型向<code>位数多</code>的数据类型转换。自动转换的优先级次序如下：<br>       byte,short,char—&gt;int—&gt;long—&gt;float—&gt;double<br>（2）将较长的数据类型转换成较短的数据类型时，只能使用强制转换，通常用赋值语句来实现，在要施加强制转换的变量名前用“<code>（）</code>”括上所要强制转换的类型符。<br>    例如：   short s;<br>                   byte b=(byte)s;</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>1.按运算符所涉及的操作数的数目划分：<br>（1）一元运算符：++，–，+，- 。如++a<br>（2）二元运算符：+，-，&gt;。如a+b; a&gt;b;<br>（3）三元运算符：？：。如 a&gt;b?1:0;<br>2.按运算符的功能划分：<br>（1）<code>赋值运算符</code>:<br>使用操作符<code>=</code>表示，意思是把右边的值复制给左边，右边的值可以是任何常数、变量或者表达式，但左边的值必须是明确的，以及定义的变量。<br>但对于对象来说，复制的表示对象的值，而是对象的引用，实际上是将<code>一个对象的引用赋值给另一个对象</code>。<br>（2）<code>算术运算符</code>：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/90aab6dfec498f979f276843151337c7.png"><br>（3）<code>自增、自减运算符</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设a=4</span></span><br><span class="line">             b=a++; <span class="comment">//先将a的值加1，然后赋值给b，此时a=5,b=5</span></span><br><span class="line">             b=++a; <span class="comment">//先将a的值赋给b，再将a的值变为5，此时a=5,b=4</span></span><br></pre></td></tr></table></figure><p>（4）<code>关系运算符</code>：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/ef04e4febc938b0081001828c4090a1f.png"><br>（5）<code>逻辑运算符</code>：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/5950f21c75380ffb7eed7bdf9731fba6.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/71f694e4f81cef411e9ce16abf1918de.png"><br>  (6）<code>位运算符</code>：<br>按位运算符用来操作整数基本类型中的每个<code>比特</code>位，也就是二进制位。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/189f09f590958449ab3443c78deb162d.png"><br>如果进行比较的双方是数字的话，那么进行比较就会变为<code>按位运算</code>。</p><p>按位<code>与</code>：按位进行与运算（AND），如果操作数中位都为1，结果才为1，否则结果为0.需要首先把比较双方转换成二进制再按每个位进行比较。</p><p>按位<code>或</code>：按位进行或运行（OR），两个位只要有一个为1，那么结果就是1，否则为0。</p><p>按位<code>非</code>：按位进行异或运算（XOR），如果位为0，结果是1，如果位为1，结果是0。</p><p>按位<code>异或</code>：按位进行取反运算（NOT），两个操作数的位中，相同则结果为0，不同则结果为1。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/ca9273553b2068270c274c024ba004cd.png"></p><blockquote></blockquote><p>   例题：<br>   a=<code>1</code>0011101；<br>   b=00111001;    有如下结果：(&gt;&gt;&gt;)为无符号右移，忽略符号位，空位都以0补齐。<br>   a&lt;&lt;3=11101<code>000</code>;       a&gt;&gt;3=<code>111</code>10011;<br>   a&gt;&gt;&gt;3=<code>000</code>10011;     a&amp;b=0001101;<br>   a|b=10111101;          ~a=01100010;<br>   a^b=10100100;</p><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><p>1.<code>equals()</code> :判断两个字符串是否相等，<code>内容是否一致</code>。要判断引用类型的变量内容是否相等，必须使用equals()方法<br>2. <code>==</code> ：判断两个字符串在内存中的<code>首地址</code>，即是否为同一字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//输入要导包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">String name=s.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> password=s.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入工资&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> money=s.nextDouble();</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">&quot;Tom&quot;</span>)&amp;&amp;password==<span class="number">123</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>Java流程控制包括<code>分支语句</code>、<code>循环语句</code>、<code>跳转语句</code>、<code>异常处理语句</code>等。</p><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h3 id="if…else条件语句"><a href="#if…else条件语句" class="headerlink" title="if…else条件语句"></a>if…else条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test16</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year=(<span class="keyword">int</span>)(Math.random()*<span class="number">2000</span>)+<span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;The year is:&quot;</span>+year);</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> ||year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">       System.out.println(year+<span class="string">&quot;年是闰年!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">       System.out.println(year+<span class="string">&quot;年不是闰年!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if…else-if-多分支语句"><a href="#if…else-if-多分支语句" class="headerlink" title="if…else if 多分支语句"></a>if…else if 多分支语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多条件判断</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于60&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于30但小于60&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于0但小于30&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值小于等于0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="switch分支语句"><a href="#switch分支语句" class="headerlink" title="switch分支语句"></a>switch分支语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断整数类型</span></span><br><span class="line"><span class="comment">//表达式option只能返回几个数据类型的值：int、short、byte、char。</span></span><br><span class="line"><span class="comment">//case子句中的值必须是常量，而且所有case子句中的值是不同的。</span></span><br><span class="line"><span class="comment">//break语句用来在执行完某一case分支后，使程序跳出switch语句。</span></span><br><span class="line"><span class="keyword">switch</span> (option) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断字符串类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String fruit = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Selected apple&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;pear&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Selected pear&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;mango&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Selected mango&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;No fruit selected&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h3><p>while循环通常用于<code>循环次数不确定</code>的情况，也可以用于循环次数确定的情况。<br>利用一个条件来判断<code>是否反复</code>执行这个语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;   <span class="comment">//条件为true，执行循环语句，条件为false退出循环。</span></span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续执行后续代码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(a &gt; <span class="number">5</span>)&#123;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;                    <span class="comment">//先执行循环，再判断条件</span></span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nt b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// do···while循环语句</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;b == &quot;</span> + b);</span><br><span class="line">b--;</span><br><span class="line">&#125; <span class="keyword">while</span>(b == <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环执行时，首先执行<code>初始化操作</code>，然后<code>判断终止条件</code>是否被满足，如果满足<code>执行循环体</code>，最后<code>执行迭代运算</code>。完成一次循环后，重新判断终止条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 循环检测条件; 迭代运算) &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//九九乘法表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test16</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">         System.out.print(i+<span class="string">&quot;×&quot;</span>+j+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">     System.out.println();</span><br><span class="line">&#125;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>逗号操作符</code><br>通过逗号操作符，可以在for语句内<code>定义多个变量</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;j = i + <span class="number">10</span>;i &lt; <span class="number">5</span>;i++, j = j * <span class="number">2</span>)&#123;&#125; </span><br></pre></td></tr></table></figure><h3 id="for-each循环（增强for）"><a href="#for-each循环（增强for）" class="headerlink" title="for each循环（增强for）"></a>for each循环（增强for）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array[] = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr : array) &#123;</span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>用于<code>强行退出</code>当前循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span>)&#123;  <span class="comment">//i=5跳出循环</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>用于执行<code>下一次循环</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">  System.out.printl(<span class="string">&quot; i = &quot;</span> + i );</span><br><span class="line"> <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;  <span class="comment">//执行下一次循环</span></span><br><span class="line">System.out.printl(<span class="string">&quot;continue ... &quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;I Love China&quot;</span>;</span><br><span class="line">str.length():返回字符串`长度`。</span><br><span class="line">str.indexOf(substr):返回指定字符串`首次出现`的索引位置。没有找到返回-<span class="number">1</span>,字符串下标<span class="number">0</span>~length()-<span class="number">1</span>。</span><br><span class="line">str.lastIndexOf(String str):返回指定字符串`最后一次出现`的索引位置，没有找到返回-<span class="number">1</span>。</span><br><span class="line">str.charAt(<span class="keyword">int</span> index):返回`指定索引处`的字符。</span><br><span class="line">str.substring(<span class="keyword">int</span> beginIndex):获取从`指定位置开始`截取到该字符串`结尾`的子串。</span><br><span class="line">str.substring(<span class="keyword">int</span> beginIndex,<span class="keyword">int</span> endIndex):获取从`指定位置开始截取到某一位置`的子串。</span><br><span class="line">str.trim()：返回字符串的副本，`忽略`前后空格。</span><br><span class="line">str.replace(<span class="keyword">char</span> old,<span class="keyword">char</span> <span class="keyword">new</span>)：将指定字符串或字符`替换`为新字符串或字符。</span><br><span class="line">str.startsWith(String s)：判断是否以s`开头`。</span><br><span class="line">str.endsWith(String s)：判断是否以s`结尾`。</span><br><span class="line">str1.equals(str2)：比较是否有`相同`的字符和长度。</span><br><span class="line">str1.equalsIgnoreCase(str2)：`不区分`大小写比较。</span><br><span class="line">str.toLowerCase()：转为小写。</span><br><span class="line">str.toUpperCase()：转为大写。</span><br></pre></td></tr></table></figure><p>其他操作:<br>1.键盘读取字符串的对话框<br>     javax.swing.JOptionPane用于从控制台键盘读入字符串<br>      String input=<code>JOptionPane.showInputDialog</code>(“How are you?”);<br>2. 将字符串对象转换为基本数据类型<br>       int age=Integer.parseInt(input);  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String name=JOptionPane.showInputDialog(<span class="string">&quot;What is your name?&quot;</span>);</span><br><span class="line">     String input=JOptionPane.showInputDialog(<span class="string">&quot;How old are you?&quot;</span>);</span><br><span class="line">     String input2=JOptionPane.showInputDialog(<span class="string">&quot;请输入一个float数&quot;</span>);</span><br><span class="line">     <span class="keyword">int</span> age=Integer.parseInt(input);</span><br><span class="line">     <span class="keyword">float</span> aa=Float.parseFloat(input2);</span><br><span class="line">     System.out.println(<span class="string">&quot;Hello  &quot;</span>+name+<span class="string">&quot;. Next year,you will be &quot;</span>+(age+<span class="number">1</span>));</span><br><span class="line">     System.out.println(<span class="string">&quot;输入的float数是：&quot;</span>+aa);</span><br><span class="line">     System.exit(<span class="number">0</span>);     <span class="comment">//一定要加上这一句，要不然程序不会自动退出 </span></span><br></pre></td></tr></table></figure><h3 id="日期和时间格式化"><a href="#日期和时间格式化" class="headerlink" title="日期和时间格式化"></a>日期和时间格式化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//日期格式化</span></span><br><span class="line">String year=String.format(<span class="string">&quot;%tY&quot;</span>, date); </span><br><span class="line">String month =String.format(<span class="string">&quot;%tB&quot;</span>, date); </span><br><span class="line">String day=String.format(<span class="string">&quot;%td&quot;</span>, date); </span><br><span class="line">System.out.println(<span class="string">&quot;今年是:&quot;</span>+year+<span class="string">&quot;年&quot;</span>); <span class="comment">//今年是:2020年</span></span><br><span class="line">System.out.println(<span class="string">&quot;现在是:&quot;</span>+month);  <span class="comment">//现在是:十一月</span></span><br><span class="line">System.out.println(<span class="string">&quot;今天是:&quot;</span>+day+<span class="string">&quot;号&quot;</span>);  <span class="comment">//今天是:24号</span></span><br><span class="line"><span class="comment">//时间格式化</span></span><br><span class="line">String hour=String.format(<span class="string">&quot;%tH&quot;</span>, date);</span><br><span class="line">String minute=String.format(<span class="string">&quot;%tM&quot;</span>, date);</span><br><span class="line">String second=String.format(<span class="string">&quot;%tS&quot;</span>, date);</span><br><span class="line">System.out.println(<span class="string">&quot;现在是:&quot;</span>+hour+<span class="string">&quot;时&quot;</span>+minute+<span class="string">&quot;分&quot;</span>+second+<span class="string">&quot;秒&quot;</span>);<span class="comment">//现在是:14时03分07秒</span></span><br><span class="line"><span class="comment">//日期时间组合</span></span><br><span class="line">String time=String.format(<span class="string">&quot;%tc&quot;</span>, date);</span><br><span class="line">String form=String.format(<span class="string">&quot;%tF&quot;</span>, date);</span><br><span class="line">System.out.println(<span class="string">&quot;全部的时间信息是:&quot;</span>+time);<span class="comment">//全部的时间信息是:星期二 十一月 24 14:03:07 CST 2020</span></span><br><span class="line">System.out.println(<span class="string">&quot;年-月-日格式:&quot;</span>+form); <span class="comment">//年-月-日格式:2020-11-24</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span>;arr[<span class="number">1</span>]=<span class="number">2</span>;arr[<span class="number">2</span>]=<span class="number">3</span>;arr[<span class="number">3</span>]=<span class="number">4</span>;arr[<span class="number">4</span>]=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> arr1[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组排序算法"><a href="#数组排序算法" class="headerlink" title="数组排序算法"></a>数组排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><code>冒泡排序</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外层循环控制排序轮数，一般要为排序的数组长度减1次，因为最后一次循环只剩一个数组元素，不需要对比，</span></span><br><span class="line"><span class="comment"> * 内层循环主要对比数组中每个相邻元素的大小，是否交换位置。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_06</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]= &#123;<span class="number">63</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;  <span class="comment">//循环5轮比较</span></span><br><span class="line"><span class="comment">//比较相邻两个元素，较大的数往后冒泡</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> t=arr[j];   <span class="comment">//把第一个元素值保存在临时变量中</span></span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];  <span class="comment">//把第二个元素值保存在第一个元素中</span></span><br><span class="line">arr[j+<span class="number">1</span>]=t;   <span class="comment">//把临时变量（第一个元素的值）保存到第二个元素中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k : arr) &#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a><code>直接选择排序</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接选择排序</span></span><br><span class="line"><span class="comment"> * 指定排序位置与其他数组元素分别对比，如果满足条件就交换元素，区别于冒泡排序的相邻交换</span></span><br><span class="line"><span class="comment"> * 从每一趟中取出最小(或最大)的一个元素，顺序地放在已排序好的数列后面。</span></span><br><span class="line"><span class="comment"> * 初始数组:[63，4，24，1，3，15]</span></span><br><span class="line"><span class="comment"> * 第一趟排序:[15,4,24,1,3] 63</span></span><br><span class="line"><span class="comment"> * 第二趟排序:[15,4,3,1]24 ,63</span></span><br><span class="line"><span class="comment"> * 第三趟排序:]1,4,3]15,24,63</span></span><br><span class="line"><span class="comment"> *第四趟排序:[1,3]4,15,24,63</span></span><br><span class="line"><span class="comment"> *第五趟排序:[1],3,4,15,24,63</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_07</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">63</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=arr.length-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[index]) &#123;</span><br><span class="line">index=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换在位置array.length-1和index(最大值)上的两个数</span></span><br><span class="line"><span class="keyword">int</span> t=arr[arr.length-i];</span><br><span class="line">arr[arr.length-i]=arr[index];</span><br><span class="line">arr[index]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k : arr) &#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a><code>反转排序</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转排序</span></span><br><span class="line"><span class="comment"> * 把数组最后一个元素与第一个元素替换，倒数第二个元素与第一个元素替换，以此类推</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_08</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> len=arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++) &#123;</span><br><span class="line">t=arr[i];</span><br><span class="line">arr[i]=arr[len-<span class="number">1</span>-i];</span><br><span class="line">arr[len-<span class="number">1</span>-i]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k : arr) &#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><code>类</code>实质上是封装对象<code>属性</code>和<code>行为</code>的载体，<code>对象</code>则是类抽象出来的一个<code>实例</code>,类是静态的概念，而对象则是一个动态的概念，因为只有运行时才给对象分配空间，对象才真正存在。<br>面向对象：是一种通过对象的方式，把现实世界<code>映射到计算机模型</code>的一种编程方法。<br>面向过程：是把模型<code>分解成一步一步</code>的过程。<br>面向对象程序设计具有以下特点：<br>1.<code>封装性</code>：解决了数据的安全性问题。<br>2.<code>继承性</code>：解决了代码的重用问题。<br>3.<code>多态性</code>：解决了程序的扩展问题。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li><code>类是一系列对象的抽象</code>。</li><li>类是<code>变量和方法的集合体</code>。类是Java中基本的<code>结构单元</code>。所有的Java语句均出现在类中，所有的方法均在类中定义。</li><li>类的成员变量可以是基本数据类型的数据、数组或类的实例。</li><li>成员方法只在类中定义，用来处理此类的数据。</li><li>通常，类成员数据都是私有的，而方法都是公有的，外界只可能访问成员方法。</li></ul><hr><p>（1）<code>类声明的格式</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[修饰符] class 类名 [extends 父类名][implements 接口名]&#123;…&#125;</span></span><br><span class="line"><span class="comment">//修饰符指明类的访问控制符和类型说明符；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">成员变量;</span><br><span class="line">成员方法;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line"><span class="comment">//body</span></span><br><span class="line">&#125;</span><br><span class="line">ClassName classname=<span class="keyword">new</span> ClassName();</span><br></pre></td></tr></table></figure><p>（2）<code>类修饰符</code></p><ul><li>public访问控制符指明此类为公共类，可以由其他类访问或引用其成员变量和成员方法。并且Java规定包含main()方法的主类必须是公共类。</li><li>默认friendly表示此类只能被同一个包的类所访问和引用，也不用import语句引入。在一个.java文件中只能有一个public公共类，其他类就只能是friendly了。</li><li>abstract抽象类指明此类不能被实例化。常常为改变其子类而定义。</li><li>final最终类指明此类不能有子类。不能被实例化。<br>如System类<pre><code> System.out.println(“hello”);</code></pre></li></ul><p>（3）<code>成员变量声明的格式</code></p><p><code>[修饰符]    类型    变量名</code>；<br>修饰符有：<br>public。指明变量为公有，即程序中的其他类均可访问此类中的变量。<br>protected.指明变量为受保护访问。可被同一个包中的其他类、不同包中此类的子类以及此类自身所访问和引用。<br>private。指明变量为私有访问。只能被此类自己访问或调用，是对成员变量的最高级保护。<br>static。指明变量为静态变量，否则为实例变量。静态变量不需要类的实例化就可以被类直接调用。<br>final。指明变量为常量。常量名要全部大写。<br>transient。指明变量为暂时性变量，用于实现不同对象的存档功能。<br>volatile。指明多个线程所共享的变量。保证各线程对此变量访问的一致性。</p><p>（4）<code>成员方法</code></p><p><code>[修饰符]  返回类型  方法名( [参数列表] ) [throws exception] &#123;…&#125;</code><br>修饰符public, protected, private, static, final与成员变量声明意义相同，都是定义方法访问权限。<br>abstract指明方法是否可以重写；native指明代码是由各种语言集成；synchronized指明多线程可并发共享访问。<br>Java方法中的参数传递是传值调用而非地址调用，因此方法不可以改变参数的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;  <span class="comment">//String类型的成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;  <span class="comment">//定义了一个方法</span></span><br><span class="line"><span class="keyword">int</span> id=<span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">setName(<span class="string">&quot;Java&quot;</span>); <span class="comment">//调用类中的其他方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;  <span class="comment">//将参数赋给成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法:"></a><code>构造方法</code>:</h3><ul><li>构造方法<code>没有</code>返回值,不需要写void,只用public声明。</li><li>构造方法名称要与<code>本类的名称相同</code>。</li><li>一旦为类编写构造方法,默认的构造方法将会被<code>覆盖</code>。</li><li>编写构造方法的目的是向对象<code>传递参数</code>(一般有参),以及对成员变量进行<code>初始化</code>(一般无参)。</li><li>构造方法同样支持方法<code>重载</code>。</li><li>构造方法不能被static,final,abstract,synchronized,native等修饰符修饰。</li><li>构造方法中只能使用成员变量，而且当参数与成员变量同名时，只能用关键字this指明当前对象。</li><li>构造方法不能<code>被程序直接调用</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">String color;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> sum)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> sum,String color)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">createApple</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Apple apple1 = <span class="keyword">new</span> Apple();</span><br><span class="line">Apple apple2 = <span class="keyword">new</span> Apple(<span class="number">1</span>);</span><br><span class="line">Apple apple3 = <span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">Apple apple4 = <span class="keyword">new</span> Apple(<span class="number">2</span>,<span class="string">&quot;color&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h3><p>类中的方法可以分为<code>实例方法</code>和<code>静态方法（类方法）</code>。<br>方法声明时，方法类型前面不加关键字static的是实例方法，加关键字static的是静态方法。<br>实例方法既能对实例变量操作也能对静态变量操作，而静态方法<code>只能对静态变量</code>进行操作。<br>一个类中的方法可以相互调用，实例方法可以调用该类中的其他方法；类中的静态方法<code>只能调用该类的静态方法</code>，不能调用实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a=<span class="number">12</span>; <span class="comment">//成员变量</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span>  <span class="comment">//实例方法</span></span></span><br><span class="line"><span class="function">   </span>&#123;……&#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span>  <span class="comment">//静态方法</span></span></span><br><span class="line"><span class="function">   </span>&#123;……&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>Java为了能将基本数据类型视为对象处理，并能连接相关的方法，为每个数据类型都提供了包装类。</p><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><p>java.lang包中的Integer类、Long类和Short类，分别将int、long和short封装成一个类。<br>1.构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer(<span class="keyword">int</span> number)</span><br><span class="line">Integer number=<span class="keyword">new</span> Integer(<span class="number">7</span>); <span class="comment">//以一个int型变量作为参数来获取Integer对象</span></span><br><span class="line">Integer(String str)</span><br><span class="line">integer number=<span class="keyword">new</span> Integer(<span class="string">&quot;45&quot;</span>);<span class="comment">//以一个String型变量作为参数来获取Integer对象</span></span><br></pre></td></tr></table></figure><p>2.<code>Integer</code>类常用方法<br>① <code>parseInt(String s)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String year = <span class="string">&quot;2018&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(year); <span class="comment">//字符串转为int类型</span></span><br><span class="line">System.out.println(i/<span class="number">2</span>);<span class="comment">//1009</span></span><br></pre></td></tr></table></figure><p>② <code>parseInt(String s,int radix)</code>方法<br>解释：将字符串s按照radix进行转换相应的进制数，然后运行的结果都是以十进制的形式打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String year = <span class="string">&quot;1110&quot;</span>;</span><br><span class="line">String age = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="comment">//指定year的进制为2进制</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(year,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//指定age的进制为16进制</span></span><br><span class="line"><span class="keyword">int</span> i2 = Integer.parseInt(age,<span class="number">16</span>);    </span><br><span class="line">System.out.println(i);<span class="comment">//14</span></span><br><span class="line">System.out.println(i2);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>③<code> toString()</code>方法<br>解释：Integer类中的静态方法toString()转换成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> src = <span class="number">50</span>;</span><br><span class="line">String dest = Integer.toString(src);</span><br><span class="line">System.out.println(dest+<span class="number">1</span>);<span class="comment">//501</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_10</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String str=Integer.toString(<span class="number">456</span>);  <span class="comment">//获取十进制</span></span><br><span class="line">String str1=Integer.toBinaryString(<span class="number">456</span>); <span class="comment">//获取二进制</span></span><br><span class="line">String str2=Integer.toHexString(<span class="number">456</span>);  <span class="comment">//获取十六进制</span></span><br><span class="line">String str3=Integer.toOctalString(<span class="number">456</span>); <span class="comment">//获取八进制</span></span><br><span class="line">System.out.println(<span class="string">&quot;456的十进制表示:&quot;</span>+str);</span><br><span class="line">System.out.println(<span class="string">&quot;456的二进制表示:&quot;</span>+str1);</span><br><span class="line">System.out.println(<span class="string">&quot;456的十六进制表示:&quot;</span>+str2);</span><br><span class="line">System.out.println(<span class="string">&quot;456的八进制表示:&quot;</span>+str3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;<span class="comment">//引入随机数包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//求随机数方法1</span></span><br><span class="line">Random C=<span class="keyword">new</span> Random();<span class="comment">//声明随机数random</span></span><br><span class="line"><span class="keyword">int</span> number=C.nextInt(<span class="number">100</span>);<span class="comment">//()内为随机数范围</span></span><br><span class="line">System.out.println(<span class="string">&quot;随机数为&quot;</span>+number);</span><br><span class="line"><span class="comment">//求随机数2</span></span><br><span class="line"><span class="keyword">int</span> num=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;随机数&quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="接口、继承与多态"><a href="#接口、继承与多态" class="headerlink" title="接口、继承与多态"></a>接口、继承与多态</h1><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><ul><li>子类可以继承父类的属性和方法，也可以增加原来父类所不具备的属性和方法。</li><li>子类可以从父类继承所有非private的属性和方法作为自己的成员。</li><li>在java中用<code>extends</code>关键字来标识两个类的继承关系。</li><li>若子类成员变量和父类成员变量名字相同，则子类成员隐藏父类成员。</li><li>若子类成员方法与父类成员方法名字、参数列表和返回值类型都相同，则子类方法是父类方法的重写。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>继承双方拥有某种共性的特征</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feature</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父亲的特性&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果Son没有实现自己的方法的化，那么默认就是用父类的feature方法。</span></span><br><span class="line"><span class="comment">//如果子类实现了自己的feature方法，则为重写父类方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Object类</code>是所有类的父类，java每个类都源于java.lang.Object类。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this表示当前对象，this可以调用方法、调用属性和指向对象本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function">Apple <span class="title">eatApple</span><span class="params">()</span></span>&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;  <span class="comment">//返回对象自身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">apple.eatApple().eatApple();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Apple(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(num,<span class="string">&quot;??&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="number">1</span>,color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num, String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码使用的不是this，而是<code>this(参数)</code>。它相当于调用了其他构造方法，然后传递参数进去，this()必须放在构造方法的第一行，否则编译不通过。</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>super用来引用当前对象的父类，有3种情况。<br>（1）用于访问被隐藏的父类成员变量<br>       <code>super.变量名</code>；<br>（2）用于调用被重写的父类方法<br>       <code>super.方法名</code>；<br>（3）用于调用父类的构造方法<br>      <code>super([参数列表])</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">String color;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;eat Fruit&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.num = <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;eat &quot;</span> + num + <span class="string">&quot; Apple&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h2><p>访问控制符又称为<code>封装</code>，是面对对象三大特性之一。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/be34001ec3ea1c793131239a2be7b132.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private封装</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test20</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">         K k=<span class="keyword">new</span> K();   <span class="comment">//创建一个类K的实例，赋给变量k，其类型为K</span></span><br><span class="line">         k.setK(<span class="number">8</span>);        <span class="comment">//通过k调用该对象方法setK</span></span><br><span class="line">         <span class="keyword">int</span> y=k.getK();   <span class="comment">//通过k调用该对象方法getK</span></span><br><span class="line">         System.out.println(<span class="string">&quot;y=&quot;</span>+y);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span></span>&#123;                       <span class="comment">//创建一个新类</span></span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">int</span> k;     <span class="comment">//k是私有变量</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setK</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123;      <span class="comment">//公有方法setK</span></span><br><span class="line">k=x;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span>  </span>&#123;       <span class="comment">//公有方法getK</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>方法的重载是指多个方法可以共享相同的名字，但参数的<code>个数</code>或<code>数据类型</code>、参数<code>顺序</code>等不完全相同，它实现了Java编译时的<code>多态</code>。在<code>构造方法</code>调用时最多。<br>`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(int,int)方法:&quot;</span>+add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(double,double)方法:&quot;</span>+add(<span class="number">1.3</span>,<span class="number">2.2</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(int)方法:&quot;</span>+add(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>方法 的重写是<code>子类对父类</code>方法的重写。<br>重写的方法必须要和父类保持一致，包括<code>返回值类型，方法名，参数列表</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.printl(<span class="string">&#x27;eat fruit&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.printl(<span class="string">&#x27;eat apple&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是<code>同一个行为具有多个不同表现形式或形态</code>的能力。比如同一个接口，使用不同的实例而执行不同操作。<br>多态存在的三个必要条件<br> 1.<code>继承</code><br> 2.<code>重写父类方法</code><br> 3.<code>父类引用指向子类对象：Parent p = new Child();</code><br>多态分方法<code>重载</code>和方法<code>重写</code>。<br>方法重写：需要有<code>继承关系</code>，父类和子类中的方法必须<code>同原型</code>（名称，参数，返回值相同）。<br>方法重载：方法名称相同，<code>参数不同</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;eat Fruit&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.num = <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;eat &quot;</span> + num + <span class="string">&quot; Apple&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fruit fruit = <span class="keyword">new</span> Apple(); <span class="comment">//多态中父类引用指向子类对象.</span></span><br><span class="line">fruit.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>组合就是将对象引用置于新类中。组合也是提高类的复用性的一种方式。<br>如果你像让类具有更多的扩展功能，<code>多用组合，少用继承</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoccerPlayer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Soccer soccer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soccer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String soccerName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中SoccerPlayer引用了Soccer类，通过引用来达到调用soccer中的属性和方法。</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>A需要调用B类的方法，A不直接调用，A会在自己的类中创建一个B对象的代理，再由代理调用B的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">todo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;control...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Destination destination;</span><br><span class="line"><span class="keyword">private</span> DeviceController deviceController;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">control</span><span class="params">(Destination destination)</span></span>&#123;</span><br><span class="line">destination.todo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Device name;</span><br><span class="line"><span class="keyword">private</span> Destination destination;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">control</span><span class="params">(Destination destination)</span></span>&#123;</span><br><span class="line">destination.todo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向上-下转型"><a href="#向上-下转型" class="headerlink" title="向上/下转型"></a>向上/下转型</h2><p>向上/下转型代表了<code>父类与子类</code>之间的关系。</p><ul><li>向上转型：通过子类对象（小范围）转化为父类对象（大范围），这种转换是自动完成的，不用强制。</li><li>向下转型：通过父类对象（大范围）转化为子类对象（小范围），这种转换不是自动完成的，需要强制指定。</li></ul><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p><code>static</code>可以用来修饰成员变量和方法。<br>静态变量<code>不需要类的实例化</code>就可以被类直接调用。</p><ul><li>静态成员变量，也成为类变量，类变量的生命周期和类相同，在整个应用程序执行期间都有效。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String name=<span class="string">&quot;zhangsan&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>静态方法，可以直接使用类名.方法名进行调用。静态方法不依赖任何对象直接访问，在静态方法中不能访问类的非静态成员变量和非静态方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cxuan is writing the article&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>静态<code>代码块</code>,可用于类的初始化操作。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaicBlock</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I&#x27;m A static code block&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p><code>final</code>可以修饰类、属性和方法。</p><ul><li>final修饰类，表明此类不能被继承。</li><li>final修饰方法，表明此方法不能被任何子类重写。</li><li>final修饰变量分两种，一种是修饰基本数据类型，表明数据类型的值不能被修改；一种是修饰引用类型，表示对其初始化之和便不能再让其指向另一个对象。</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/24/5ae1207065af3cdf0ff1fcdb2cf521f4.png"></p><p>java中用<code>abstract</code>关键字定义抽象类和抽象方法。<br>抽象方法<code>没有方法体</code>，方法本身没有任何意义，除非被<code>重写</code>，实际上抽象类除了<code>被继承</code>之外没有任何意义。<br>抽象类的特点：<br>1.<code>只要类中有一个抽象方法，此类就被标记为抽象类</code>。<br>2.抽象类<code>不可以创建对象(实例化)</code>，只能用来继承。<br>3.抽象类的子类必须重写抽象类中的<code>所有抽象方法</code>。<br>4.相对于在父类中定义了方法名和参数，在子类中对方法进行实例化。<br>5.抽象类中包含<code>抽象</code>的方法，也可以<code>不包含</code>抽象方法。<br>6.不允许使用<code>final</code>修饰abstract方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">testAbstract</span><span class="params">()</span></span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>某个类中所有方法<code>都为抽象方法</code>，此类可定义为接口。关键字<code>interface</code>。</li><li>注意，定义为接口类后，无需在每个方法前加abstract关键字，接口中所有变量不需要用<code>final</code>和<code>static</code>。</li><li>实现接口:接口不可以实例化，只能用关键字<code>interface</code>实现。某个类可以实现<code>多个接口</code>。</li><li>如果父类使用了某个接口，则子类也就自然使用了该接口，子类不必再使用implements声明自己使用这个接口。</li><li>接口可以被<code>继承</code>，可以通过关键字extends声明一个接口是另一个接口的子接口。子接口将继承父接口中的全部方法和常量。</li><li>如果一个类声明实现一个接口，但没有实现接口中的所有方法，那么这个类必须是抽象类。</li></ul><blockquote><p>(1) 类在实现接口方法时必须给出方法体，一定要用<code>public</code>修饰。<br>(2)常量可以被类的对象调用，也可以用类名或接口名直接调用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//实现接口中的方法。</span></span><br><span class="line"> <span class="keyword">return</span> x+y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>可以将一个类的定义放在<code>另一个类的内部</code>。<br>定义在类内部的类，持有外部类的引用，但却对其他外部类不可见，看起来就像是一种<code>隐藏代码</code>的机制。<br><code>内部类拥有外部类的访问权</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">                <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;  <span class="comment">//内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">name = <span class="string">&quot;cxuan&quot;</span>;</span><br><span class="line">age = <span class="number">25</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合是<code>对象</code>的容器，定义了对多个对象进行操作的常用方法，实现了数组的功能。<br>和数组的区别：（1）集合长度<code>不固定</code>（2）集合只能存储<code>引用类型</code>（3）<code>没有下标</code><br><code>List</code>：有序，有下标，元素可重复。<br><code>Set</code>：无序，无下标，元素不能重复。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/28/dc3a35d6b3a486692d9d4c496a001540.png"></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p><code>Collection</code>父接口方法：<br><code>iterator()</code>：对集合的遍历实现。<br><code>removeAll()</code>：移除此集合中那些也包含在另一集合中的元素。(去掉交集)<br><code>retainAll()</code>：保留此集合中那些也包含在另一集合中的元素。（保留交集）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Collection c=<span class="keyword">new</span> ArrayList();<span class="comment">//创建集合</span></span><br><span class="line">c.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">c.size();<span class="comment">//元素个数</span></span><br><span class="line">c.remove(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">c.clear();<span class="comment">//清空</span></span><br><span class="line"><span class="comment">// 集合的遍历</span></span><br><span class="line"><span class="comment">//1.使用增强for</span></span><br><span class="line"><span class="comment">//for(数据类型  变量名:遍历的目标)</span></span><br><span class="line"><span class="keyword">for</span>(Object obj: c)&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用iterator()迭代器</span></span><br><span class="line">Iterator it=c.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;  <span class="comment">//判断是否有元素</span></span><br><span class="line">String str=(String)it.next(); <span class="comment">//返回迭代的下一个元素</span></span><br><span class="line">System.out.println(str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List子接口"><a href="#List子接口" class="headerlink" title="List子接口"></a>List子接口</h2><p>包含Collection父接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">&quot;香蕉&quot;</span>);<span class="comment">//在0位置添加</span></span><br><span class="line">list.size();<span class="comment">//元素个数</span></span><br><span class="line">list.remove(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">list.remove(<span class="number">0</span>);<span class="comment">//删除0下标元素</span></span><br><span class="line">list.clear();<span class="comment">//清空</span></span><br><span class="line"><span class="comment">// 集合的遍历</span></span><br><span class="line"><span class="comment">//1.使用增强for</span></span><br><span class="line"><span class="comment">//for(数据类型  变量名:遍历的目标)</span></span><br><span class="line"><span class="keyword">for</span>(Object obj: list)&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用iterator()迭代器</span></span><br><span class="line">Iterator it=list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;  <span class="comment">//判断是否有元素</span></span><br><span class="line">System.out.println(it.next()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>本质是<code>参数化类型</code>，<code>把类型作为参数传递</code>。可以提高代码的重用性，防止类型转化异常，提高代码的安全性。<br>常见形式有泛型类、泛型接口、泛型方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">&lt;T,...&gt;T称为类型占位符，表示一种引用类型，用逗号隔开。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处T 可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//value 这个成员变量的类型为T，T的类型有外部指定</span></span><br><span class="line"><span class="keyword">private</span> T value;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericDemo</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span></span>&#123; <span class="comment">//泛型方法getKey的返回值类型为T、T的类型由外部指定</span></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用泛型类</span></span><br><span class="line">GenericDemo&lt;String&gt; gd=<span class="keyword">new</span> GenericDemo&lt;String&gt;(<span class="string">&quot;大家好&quot;</span>);</span><br><span class="line">GenericDemo&lt;Integer&gt; gd=<span class="keyword">new</span> GenericDemo&lt;Integer&gt;(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p><code>泛型接口</code><br>语法：接口名<code>&lt;T&gt;</code>,不能创建泛型静态常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">server</span><span class="params">(T t)</span></span>;<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="comment">//1.第一种方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myIt</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">server</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myIt it=<span class="keyword">new</span> myIt();</span><br><span class="line">it.server(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"><span class="comment">//2.第二种方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myIt</span>&lt;<span class="title">T</span>&gt;  <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">server</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myIt&lt;Integer&gt; it=<span class="keyword">new</span> myIt&lt;Integer&gt;();</span><br><span class="line">it.server(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p><code>List</code>是泛型类，为了表示各种泛型List的父类，可以使用类型通配符，类型通配符使用<code>问号(?)</code>表示，它的元素类型可以匹配任何类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">name.add(<span class="string">&quot;cxuan&quot;</span>);</span><br><span class="line">age.add(<span class="number">18</span>);</span><br><span class="line">number.add(<span class="number">314</span>);</span><br><span class="line">generic(name);</span><br><span class="line">generic(age);</span><br><span class="line">generic(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generic</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Test cxuan :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>上界通配符</code>：&lt;? extends ClassType&gt;该通配符为ClassType的所有子类型。它表示的是任何类都是ClassType类型的子类。<br><code>下届通配符</code>：&lt;? super ClassType&gt;该通配符为ClassType的所有超类型。它表示的是任何类型的父类都是ClassType。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是Java中非常重要的一个高级特性，基本上Spring等一系列框架都是基于反射的思想写成的。<br>Java反射机制是在程序的运行过程中，对于<code>任何一个类</code>，都能够知道它的<code>所有属性和方法</code>；对于<code>任意一个对象</code>，都能够知道调用它的<code>任意属性和方法</code>，这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。<br>Java反射机制主要提供了以下几个功能：</p><ul><li>在运行时判断任意一个对象所属的<code>类</code></li><li>在运行时构造任意一个类的<code>对象</code></li><li>在运行时判断任意一个类所有的<code>成员变量和方法</code></li><li>在运行时调用任意一个对象的<code>方法</code></li></ul><p>反射就像一个掌控全局的角色，不管你程序怎么运行，我都能够知道你这个类有哪些属性和方法。<br>在Java中，使用<code>Java.lang.reflect</code>包实现反射机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;<span class="comment">// 年龄</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Study</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String className;<span class="comment">// 班级</span></span><br><span class="line"><span class="keyword">private</span> String address;<span class="comment">// 住址</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, String className, String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line"><span class="keyword">this</span>.className = className;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.className = className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名&quot;</span> + name + <span class="string">&quot;,年龄&quot;</span> + age + <span class="string">&quot;,班级&quot;</span> + className + <span class="string">&quot;,住址&quot;</span></span><br><span class="line">+ address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRelect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Class student = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">student = Class.forName(<span class="string">&quot;com.cxuan.reflection.Student&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对象的所有公共属性</span></span><br><span class="line">Field[] fields = student.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 获取对象的所有属性，但不包含继承的。</span></span><br><span class="line">Field[] declaredFields = student.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field df : declaredFields) &#123;</span><br><span class="line">System.out.println(df);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对象的所有公共方法</span></span><br><span class="line">Method[] methods = student.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 获取对象所有方法，但不包含继承的</span></span><br><span class="line">Method[] declaredMethods = student.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method dm : declaredMethods) &#123;</span><br><span class="line">System.out.println(dm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对象所有的公共构造方法</span></span><br><span class="line">Constructor[] constructors = student.getConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor c : constructors) &#123;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 获取对象所有的构造方法</span></span><br><span class="line">Constructor[] declaredConstructors = student.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor dc : declaredConstructors) &#123;</span><br><span class="line">System.out.println(dc);</span><br><span class="line">&#125;</span><br><span class="line">Class c = Class.forName(<span class="string">&quot;com.cxuan.reflection.Student&quot;</span>);</span><br><span class="line">Student stu1 = (Student) c.newInstance();</span><br><span class="line"><span class="comment">// 第一种方法，实例化默认构造方法，调用set赋值</span></span><br><span class="line">stu1.setAddress(<span class="string">&quot;湖南益阳&quot;</span>);</span><br><span class="line">System.out.println(stu1);</span><br><span class="line"><span class="comment">// 第二种方法，取得全部的构造函数，使用构造函数赋值</span></span><br><span class="line">Constructor&lt;Student&gt; constructor = c.getConstructor(String.class,<span class="keyword">int</span>.class,String.class,String.class);</span><br><span class="line">Student student2 = (Student) constructor.newInstance(<span class="string">&quot;lzy&quot;</span>, <span class="number">21</span>, <span class="string">&quot;三班&quot;</span>, <span class="string">&quot;益阳&quot;</span>);</span><br><span class="line">System.out.println(student2);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取方法并执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Method show = c.getMethod(<span class="string">&quot;showInfo&quot;</span>);<span class="comment">//获取showInfo()方法</span></span><br><span class="line">Object object = show.invoke(stu2);<span class="comment">//调用showInfo()方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举类型可以取代以往常量的定义方式，即将<code>常量</code>封装在<code>类或接口</code>中，此外，它还提供了<code>安全检查</code>功能。<br>枚举使用<code>enum</code>关键字来表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Family</span> </span>&#123;  <span class="comment">//创建枚举类，有4个常量</span></span><br><span class="line">FATHER,</span><br><span class="line">MOTHER,</span><br><span class="line">SON,</span><br><span class="line">Daughter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumUse</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Family s = Family.FATHER;   <span class="comment">//引用枚举</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常是一个在程序执行期间发生的事件，它中断了正在执行的程序的正常指令流。<br>Exceptiontype是try代码块传递给catch代码块的变量类型，e是变量名。<br><code>e.getMessage()</code>：用于输出错误性质。<br><code>e.toString()</code>：给出异常的类型和性质。<br><code>e.printStackTrace()</code>; //输出异常的类型、性质、栈层次及出现在程序中的位置。<br><code>finally语句块</code>无论有无异常<code>都会执行</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//程序代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exceptiontype1 e)&#123;</span><br><span class="line"><span class="comment">//对Exceptiontype1的处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exceptiontype2 e)&#123;</span><br><span class="line"><span class="comment">//对Exceptiontype2的处理</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//程序块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;    <span class="comment">//try语句中包含可能出现异常的代码</span></span><br><span class="line">String str=<span class="string">&quot;lili&quot;</span>;  <span class="comment">//定义字符变量</span></span><br><span class="line">System.out.println(str+<span class="string">&quot;年龄是:&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> age=Integer.parseInt(<span class="string">&quot;20L&quot;</span>); <span class="comment">//数据类型转换</span></span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;   <span class="comment">//catch语句用来获取异常信息</span></span><br><span class="line">e.printStackTrace(); <span class="comment">//输出异常性质</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;program over&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*lili年龄是：</span></span><br><span class="line"><span class="comment">java.lang.NumberFormatException: For input string: &quot;20L&quot;</span></span><br><span class="line"><span class="comment">program over</span></span><br><span class="line"><span class="comment">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span></span><br><span class="line"><span class="comment">at java.lang.Integer.parseInt(Integer.java:580)</span></span><br><span class="line"><span class="comment">at java.lang.Integer.parseInt(Integer.java:615)</span></span><br><span class="line"><span class="comment">at Blog_02.blog_02_01.main(blog_02_01.java:10)*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>继承<code>Exception</code>类即可自定义异常:<br>1.创建自定义异常类<br>2.在方法中通过<code>throw</code>关键字抛出异常对象<br>3.如果在当前抛出异常的方法中处理异常，可以使用<code>try-catch</code>语句块捕获并处理，否则在方法的声明处通过<code>throws</code>关键字指明要抛出给方法调用者的异常，继续进行下一步操作。<br>4.在出现异常方法的调用者中捕获并处理异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_02</span> </span>&#123;   <span class="comment">//创建类</span></span><br><span class="line"> <span class="comment">//定义方法，抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">avg</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span><span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num1&lt;<span class="number">0</span> || num2&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;不可以使用负数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num1&gt;<span class="number">100</span> || num2&gt;<span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;数值太大了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (num1+num2)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> result=avg(<span class="number">102</span>,<span class="number">150</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyException e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;  <span class="comment">//创建自定义异常，继承Exception类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String ErrorMessage)</span> </span>&#123; <span class="comment">//构造方法</span></span><br><span class="line"><span class="keyword">super</span>(ErrorMessage);  <span class="comment">//父类构造方法 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Blog_02.MyException: 数值太大了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在方法中抛出异常"><a href="#在方法中抛出异常" class="headerlink" title="在方法中抛出异常"></a>在方法中抛出异常</h2><p><code>throws</code>关键字被应用在声明方法时，用来指定方法可能抛出的异常。<br>使用throws关键字将异常抛给上一级后，如果不想处理该异常，可以继续向上抛出，但最终要有能够处理该异常的代码。<br>语法：<code>[(修饰符)](返回值类型)(方法名)([参数列表])[throws(异常类)]&#123;......&#125; </code>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如： <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;......&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_03</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> NegativeArraySizeException</span>&#123;</span><br><span class="line"><span class="comment">//定义方法并抛出NegativeArraySizeException异常</span></span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[-<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pop();</span><br><span class="line">&#125;<span class="keyword">catch</span>(NegativeArraySizeException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;pop()方法抛出的异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用throw关键字抛出异常"><a href="#使用throw关键字抛出异常" class="headerlink" title="使用throw关键字抛出异常"></a>使用throw关键字抛出异常</h2><p><code>throw</code>关键字通常用于<code>方法体</code>中，并且抛出一个<code>异常对象</code>。<br>程序在执行到throw语句时<code>立即终止</code>，它后面的语句不在执行。<br>通过throw抛出异常后，如果想在上一级代码中捕获并处理异常，则需要在抛出异常的方法中使用<code>throws</code>关键字在方法的声明中指明要抛出的异常；如果要捕捉throw抛出的异常，则必须使用<code>try-catch</code>语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//throw是语句抛出一个异常</span></span><br><span class="line"><span class="comment">//   语法：throw（异常对象）；</span></span><br><span class="line"><span class="comment">//throw e；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_04</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String s = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">&quot;abc&quot;</span>)) &#123; </span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      System.out.println(s); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Exception in thread &quot;main&quot; java.lang.NumberFormatException</span></span><br><span class="line"><span class="comment">at Blog_02.blog_02_04.main(blog_02_04.java:8)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>throw与throws的区别<br>1、throw用在<code>方法体内</code>，throws用在<code>方法声明后面</code>，表示再抛出异常，由该方法的调用者来处理。<br>2、throw是具体向外抛异常的，抛出的是一个<code>异常实例</code>，throws声明了是<code>哪种类型的异常</code>，使它的调用者可以捕获这个异常。<br>3、throw如果执行了，那么一定是抛出了某种异常了，throws表示可能出现，但不一定。<br>4、同时出现的时候，throws出现在函数头、throw出现在函数体，两种不会由函数去处理，真正的处理由函数的上层调用处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;   <span class="comment">//创建自定义异常类</span></span><br><span class="line">String message;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String ErrorMessage)</span> </span>&#123; <span class="comment">//父类方法</span></span><br><span class="line">message=ErrorMessage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;  <span class="comment">//覆盖getMessage()方法</span></span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_05</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quotient</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="keyword">throws</span> MyException</span>&#123; <span class="comment">//定义方法抛出异常</span></span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>) &#123;             <span class="comment">//判断参数是否小于0</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;除数不能为负数&quot;</span>); <span class="comment">//异常信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x/y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//try语句包含肯发生异常的语句</span></span><br><span class="line"><span class="keyword">int</span> result=quotient(<span class="number">3</span>,-<span class="number">1</span>);  <span class="comment">//调用方法</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(MyException e) &#123;   <span class="comment">//处理自定义异常</span></span><br><span class="line">System.out.println(e.getMessage()); <span class="comment">//输出异常信息</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ArithmeticException e) &#123;  <span class="comment">//处理ArithmeticException异常</span></span><br><span class="line">System.out.println(<span class="string">&quot;除数不能为0&quot;</span>); <span class="comment">//输出提示信息</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;        <span class="comment">//处理其他异常</span></span><br><span class="line">System.out.println(<span class="string">&quot;程序发生了其他的异常&quot;</span>); <span class="comment">//输出提示信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/f932c67833ff3ed587a88897855fc49f.png"></p><h1 id="Swing程序设计"><a href="#Swing程序设计" class="headerlink" title="Swing程序设计"></a>Swing程序设计</h1><p>实际开发中使用WindowBuilder插件进行图形界面设计，更加方便快捷。<br><a href="https://www.eclipse.org/windowbuilder/download.php">WindowBuilder插件下载</a><br><a href="https://blog.csdn.net/chilongxiaba/article/details/106314810">WindowBuilder插件安装</a><br><a href="https://blog.csdn.net/qq_34491508/article/details/80113911">WindowBuilder插件使用</a><br><code>GUI(图形用户界面)</code>为程序提供图形界面，<code>Swing</code>是AWT组件的增强组件，被称为“<code>轻量级组件</code>”，完全由java语言编写，可以在任何平台上运行，相反，依赖于本地平台的组件被称为“<code>重量级组件</code>”，如<code>AWT</code>。<br>Swng包的层次结构和继承关系：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/51007f38a006bb3bde43c7d9cf60cd39.png"></p><h2 id="常用Swing组件"><a href="#常用Swing组件" class="headerlink" title="常用Swing组件"></a>常用Swing组件</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/d2ab88097bc3f749bf007b3a2b19d39c.png"></p><h2 id="常用窗体"><a href="#常用窗体" class="headerlink" title="常用窗体"></a>常用窗体</h2><p><code>JFrame窗体</code>是一个<code>容器</code>，是各个组件的载体，可以通过继承<code>java.swing.JFrame</code>类创建一个窗口，在窗口中添加组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JFrame</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JFrame</span><span class="params">(String title)</span></span>;</span><br><span class="line"><span class="comment">//语法格式</span></span><br><span class="line">JFrame f=<span class="keyword">new</span> JFrame(title);  <span class="comment">//f为JFrame类的对象</span></span><br><span class="line">Container c=f.getContentPane(); <span class="comment">//c为Container类的对象，可以使用JFrame对象调用getContentPane()方法获取。</span></span><br><span class="line"><span class="comment">//调用getContentPane()方法将窗体转为容器，然后在容器里添加组件。</span></span><br><span class="line">c.add(<span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>));</span><br><span class="line"><span class="comment">//remove()方法将组件从容器里删除</span></span><br><span class="line">c.remove(<span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>));</span><br></pre></td></tr></table></figure><p><code>继承JFrame实现:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;  </span><br><span class="line"><span class="keyword">import</span> java.awt.*;    <span class="comment">//导入awt包</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*; <span class="comment">//导入swing包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_05</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;  <span class="comment">//定义一个类继承JFrame</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateJFrame</span><span class="params">(String title)</span> </span>&#123; <span class="comment">//定义一个方法创建JFrame</span></span><br><span class="line">JFrame f=<span class="keyword">new</span> JFrame(title);    <span class="comment">//实例化一个JFrame对象，并设置窗口名</span></span><br><span class="line">Container c=f.getContentPane();  <span class="comment">//获取容器</span></span><br><span class="line">JLabel l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;这是一个JFrame窗体&quot;</span>); <span class="comment">//标签</span></span><br><span class="line"><span class="comment">//使标签上的文字居中</span></span><br><span class="line">l1.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">c.add(l1);</span><br><span class="line">c.setBackground(Color.white);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">250</span>); <span class="comment">//setSize(int x,int y)</span></span><br><span class="line"><span class="comment">//设置窗体关闭方式</span></span><br><span class="line">f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">//设置窗口相对于指定组件的位置。 如果组件当前未显示或者 c 为 null，则此窗口将置于屏幕的中央。</span></span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> blog_02_05().CreateJFrame(<span class="string">&quot;创建一个JFrame窗体&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/7a0309cfe31e440dcf68c2a567123149.png"><br>关于窗口关闭方式:<br>1.<code>DO_NOTHING</code>_ON_CLOSE：什么都不做就将窗口关闭。<br>2.<code>DISPOSE</code>_ON_CLOSE：代表任何注册监听程序对象后会自动隐藏并释放窗体。<br>3.<code>HIDE</code>_ON_CLOSE：表示隐藏窗口的默认窗口关闭。<br>4.<code>EXIT</code>_ON_CLOSE：退出应用程序默认窗口关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.导入包:</span></span><br><span class="line"><span class="comment">import java.awt.*;</span></span><br><span class="line"><span class="comment">import javax.swing;</span></span><br><span class="line"><span class="comment">2.定义类，声明组件。</span></span><br><span class="line"><span class="comment">3.构造方法中new所有组件。</span></span><br><span class="line"><span class="comment">4.主方法main()中，new 构造方法。</span></span><br><span class="line"><span class="comment">5,JFrame为容器，JPanel为面板，组件加到面板，面板再加到容器上。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 三个JPanel分别对应三行，即用户名、密码、按钮三行，任何网格布局3行1列布局</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_06</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l1,l2;</span><br><span class="line">JPanel p1,p2,p3;</span><br><span class="line">JButton b1,b2;</span><br><span class="line">JTextField t;</span><br><span class="line">JPasswordField pw;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">blog_02_06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;用户登录界面&quot;</span>);</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;用户名&quot;</span>);</span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;密  码&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">pw=<span class="keyword">new</span> JPasswordField(<span class="number">10</span>);</span><br><span class="line">p1=<span class="keyword">new</span> JPanel();</span><br><span class="line">p2=<span class="keyword">new</span> JPanel();</span><br><span class="line">p3=<span class="keyword">new</span> JPanel();</span><br><span class="line"><span class="comment">//设置按键文本颜色</span></span><br><span class="line">b1.setForeground(Color.BLUE);</span><br><span class="line">b2.setForeground(Color.red);</span><br><span class="line">b1.setBackground(Color.gray);</span><br><span class="line">b2.setBackground(Color.black);</span><br><span class="line"><span class="comment">//第一行</span></span><br><span class="line">p1.add(l1);</span><br><span class="line">p1.add(t);</span><br><span class="line">p1.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//第二行</span></span><br><span class="line">p2.add(l2);</span><br><span class="line">p2.add(pw);</span><br><span class="line">p2.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//第三行</span></span><br><span class="line">p3.add(b1);</span><br><span class="line">p3.add(b2);</span><br><span class="line">p3.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//加到容器</span></span><br><span class="line">f.add(p1);</span><br><span class="line">f.add(p2);</span><br><span class="line">f.add(p3);</span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">1</span>));<span class="comment">//设置网格布局</span></span><br><span class="line">f.setSize(<span class="number">230</span>,<span class="number">150</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);<span class="comment">//窗口大小是否可变</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">new</span> blog_02_06();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/9ee3ba3cd8b946c7cc1e2bba3680195e.png"></p><hr><p>JDialog窗体是Swing组件中的对话框，它继承了AWT组件中的<code>java.awt.Dialog</code>类。<br>JDialog窗体的功能是<code>从一个窗体中弹出另一个窗体</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;构造方法</span><br><span class="line">public JDialog();  &#x2F;&#x2F;没有标题和父窗口的对话框</span><br><span class="line">public JDialog(Frame f); &#x2F;&#x2F;创建一个指定父窗口的对话框</span><br><span class="line">public JDialog(Frame f,boolean model); &#x2F;&#x2F;创建一个指定类型的对话框，并指定父窗口</span><br><span class="line">public JDialog(Frame f,String title);  &#x2F;&#x2F;指定标题和父窗口</span><br><span class="line">public JDialog(Frame f,String title,boolean model); &#x2F;&#x2F;指定标题、窗体、模式的对话框。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJDialog</span> <span class="keyword">extends</span> <span class="title">JDialog</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyJDialog</span><span class="params">(MyFrame frame)</span> </span>&#123;</span><br><span class="line"><span class="comment">//实例化一个JDialog类对象，指定对话框的父窗体、标题和类型</span></span><br><span class="line"><span class="keyword">super</span>(frame,<span class="string">&quot;第一个JDialog窗体&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">Container c=getContentPane(); <span class="comment">//创建一个容器</span></span><br><span class="line">c.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;这是一个对话框&quot;</span>));</span><br><span class="line">setBounds(<span class="number">120</span>,<span class="number">120</span>,<span class="number">100</span>,<span class="number">100</span>); <span class="comment">//设置对话框大小</span></span><br><span class="line">setLocationRelativeTo(<span class="keyword">null</span>); <span class="comment">//居中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Container c=getContentPane(); <span class="comment">//创建容器</span></span><br><span class="line">c.setLayout(<span class="keyword">null</span>);</span><br><span class="line">JLabel l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;这是一个JFrame窗体&quot;</span>);</span><br><span class="line"><span class="comment">//标签居中</span></span><br><span class="line">l1.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">c.add(l1);</span><br><span class="line">JButton b=<span class="keyword">new</span> JButton(<span class="string">&quot;弹出对话框&quot;</span>);</span><br><span class="line">b.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">21</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> MyJDialog(MyFrame.<span class="keyword">this</span>).setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">c.add(b);</span><br><span class="line">setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line">setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">new</span> MyFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/4a41eaf54986fd823f9fa08a63af06a0.png"></p><h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><h3 id="JLabel标签"><a href="#JLabel标签" class="headerlink" title="JLabel标签"></a>JLabel标签</h3><p>标签由JLabel类定义，它的父类为JComponent类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(Icon icon)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(Icon icon,<span class="keyword">int</span> aligment)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(String text,<span class="keyword">int</span> aligment)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(String text,Icon icon,<span class="keyword">int</span> aligment)</span></span>; <span class="comment">//带文本，带图标的JLabel对象，并设置标签内容的水平对齐方式。</span></span><br></pre></td></tr></table></figure><h3 id="图标的使用"><a href="#图标的使用" class="headerlink" title="图标的使用"></a>图标的使用</h3><p>Swing中图标可以放置在按钮、标签等组件上。<br>``java<br>ImageIcon img=new ImageIcon(“图片URL”);<br>JButton b=new JButton(img);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### 文本组件</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">JTextField t&#x3D;new JTextField(10); &#x2F;&#x2F;长度</span><br><span class="line">JTextArea a&#x3D;new JTextArea(5,5);&#x2F;&#x2F;5行5列</span><br><span class="line">JPasswordField &#x3D;p&#x3D;new JPasswordField();</span><br><span class="line">p.setEchoChar(&quot;%&quot;);&#x2F;&#x2F;设置输入密码显示的字符</span><br></pre></td></tr></table></figure><h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">JFrame f=<span class="keyword">new</span> JFrame();</span><br><span class="line">JPanel p=<span class="keyword">new</span> JPanel();</span><br><span class="line"><span class="comment">//1.创建按钮组对象；</span></span><br><span class="line">ButtonGroup bg=<span class="keyword">new</span> ButtonGroup();</span><br><span class="line"><span class="comment">//2.创建若干单选按钮对象</span></span><br><span class="line">JRadioButton b1=<span class="keyword">new</span> JRadoButton(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">JRadioButton b1=<span class="keyword">new</span> JRadoButton(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">//3.将单选按钮加到按钮组中</span></span><br><span class="line">bg.add(b1);</span><br><span class="line">bg.add(b2);</span><br><span class="line"><span class="comment">//4.将单选按钮加到容器中。</span></span><br><span class="line">p.add(b1);</span><br><span class="line">p.add(b2);</span><br><span class="line">f.add(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 单选和复选按钮 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l,l1;</span><br><span class="line">JButton b1,b2;</span><br><span class="line">JPanel p1,p2,p3;</span><br><span class="line">JCheckBox fx1,fx2,fx3; <span class="comment">//复选按钮</span></span><br><span class="line"></span><br><span class="line">JRadioButton dx1,dx2;  <span class="comment">//单选按钮</span></span><br><span class="line"></span><br><span class="line">ButtonGroup bg;<span class="comment">//把单选按钮放进一个组里,默认功能是组里的按钮只能选一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> 单选和复选按钮() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">p1=<span class="keyword">new</span> JPanel();</span><br><span class="line">p2=<span class="keyword">new</span> JPanel();</span><br><span class="line">p3=<span class="keyword">new</span> JPanel();</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;特长&quot;</span>);</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;性别&quot;</span>);</span><br><span class="line"></span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line"></span><br><span class="line">fx1=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;音乐&quot;</span>);</span><br><span class="line">fx2=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;体育&quot;</span>);</span><br><span class="line">fx3=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;文艺&quot;</span>);</span><br><span class="line"></span><br><span class="line">dx1=<span class="keyword">new</span> JRadioButton(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">dx2=<span class="keyword">new</span> JRadioButton(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">//按钮组 只能选一个勾选 必须填</span></span><br><span class="line">bg=<span class="keyword">new</span> ButtonGroup();</span><br><span class="line">bg.add(dx1);</span><br><span class="line">bg.add(dx2);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">p1.add(l);</span><br><span class="line">p1.add(fx1);</span><br><span class="line">p1.add(fx2);</span><br><span class="line">p1.add(fx3);</span><br><span class="line"></span><br><span class="line">p2.add(l1);</span><br><span class="line"><span class="comment">//还是一个一个加不能添加组</span></span><br><span class="line">p2.add(dx1);</span><br><span class="line">p2.add(dx2);</span><br><span class="line"></span><br><span class="line">p3.add(b1);</span><br><span class="line">p3.add(b2);</span><br><span class="line"></span><br><span class="line">f.add(p1);</span><br><span class="line">f.add(p2);</span><br><span class="line">f.add(p3);</span><br><span class="line"><span class="comment">//其余三个面板为流式布局</span></span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">1</span>)); <span class="comment">//网格布局</span></span><br><span class="line">f.setSize(<span class="number">240</span>,<span class="number">150</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>,<span class="number">280</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 单选和复选按钮();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/d5a8174eeeac14edb4e1a092aec300b3.png"></p><h3 id="下拉框、下拉列表列表和滚动条"><a href="#下拉框、下拉列表列表和滚动条" class="headerlink" title="下拉框、下拉列表列表和滚动条"></a>下拉框、下拉列表列表和滚动条</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下拉框</span></span><br><span class="line"><span class="comment">/*getSelectedItem()的方法得到选择的值和一个getSelectedIndex()得到选择值的索引*/</span></span><br><span class="line">String str[]=&#123;<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;长沙&quot;</span>&#125;;</span><br><span class="line">JComboBox xlk=<span class="keyword">new</span> JComboBox(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//列表</span></span><br><span class="line">JPanel p=<span class="keyword">new</span> JPanel();</span><br><span class="line">String xl[]= &#123;<span class="string">&quot;高中&quot;</span>,<span class="string">&quot;大专&quot;</span>,<span class="string">&quot;本科&quot;</span>,<span class="string">&quot;硕士&quot;</span>,<span class="string">&quot;博士&quot;</span>&#125;;</span><br><span class="line">JList lb=<span class="keyword">new</span> JList(xl);</span><br><span class="line">lb.setVisibleRowCount(<span class="number">3</span>);<span class="comment">//使其滚动  3表示默认显示几个</span></span><br><span class="line">JScrollPane gd=<span class="keyword">new</span> JScrollPane(lb);   <span class="comment">//列表加入滚动</span></span><br><span class="line">p.add(xlk);</span><br><span class="line">p.add(gd); <span class="comment">//面板是添加滚动条。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">/*下拉</span></span><br><span class="line"><span class="comment"> * JComboBox   创建字符组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 滚动条</span></span><br><span class="line"><span class="comment"> * JList  创建字符串组放进去 调用 setVisibleRowCount(3)</span></span><br><span class="line"><span class="comment"> * JScrollPane 放JList</span></span><br><span class="line"><span class="comment"> * 添加滚动</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 下拉列表和滚动条 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p1,p2;</span><br><span class="line">JLabel l1,l2;</span><br><span class="line"></span><br><span class="line">JComboBox xlk;  <span class="comment">//下拉框</span></span><br><span class="line"><span class="comment">/*getSelectedItem()的方法得到选择的值和一个getSelectedIndex()得到选择值的索引*/</span></span><br><span class="line"></span><br><span class="line">JList lb;   <span class="comment">//列表</span></span><br><span class="line"></span><br><span class="line">JScrollPane gd;  <span class="comment">//滚动条</span></span><br><span class="line"><span class="keyword">public</span> 下拉列表和滚动条() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">p1=<span class="keyword">new</span> JPanel();</span><br><span class="line">p2=<span class="keyword">new</span> JPanel();</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;籍贯&quot;</span>);</span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;学历&quot;</span>);</span><br><span class="line"></span><br><span class="line">String jg[]= &#123;<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;长沙&quot;</span>,<span class="string">&quot;湖南&quot;</span>,<span class="string">&quot;安化&quot;</span>,<span class="string">&quot;梅城&quot;</span>&#125;;</span><br><span class="line">xlk=<span class="keyword">new</span> JComboBox(jg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String xl[]= &#123;<span class="string">&quot;高中&quot;</span>,<span class="string">&quot;大专&quot;</span>,<span class="string">&quot;本科&quot;</span>,<span class="string">&quot;硕士&quot;</span>,<span class="string">&quot;博士&quot;</span>&#125;;</span><br><span class="line">lb=<span class="keyword">new</span> JList(xl);</span><br><span class="line"></span><br><span class="line">lb.setVisibleRowCount(<span class="number">3</span>);<span class="comment">//使其滚动  3表示默认显示几个</span></span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(lb);   <span class="comment">//列表加入滚动</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">p1.add(l1);</span><br><span class="line">p1.add(xlk);</span><br><span class="line">p2.add(l2);</span><br><span class="line">p2.add(gd);<span class="comment">//添加滚动条</span></span><br><span class="line">f.add(p1);</span><br><span class="line">f.add(p2);</span><br><span class="line"></span><br><span class="line">f.setTitle(<span class="string">&quot;用户调查&quot;</span>);</span><br><span class="line">f.setSize(<span class="number">200</span>,<span class="number">190</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 下拉列表和滚动条();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/3922831dbe80fb1208cc7db445adb582.png"></p><h3 id="拆分窗口"><a href="#拆分窗口" class="headerlink" title="拆分窗口"></a>拆分窗口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">//图片 Ctrl+C 复制 工程文件右击粘贴 可新建一个文件夹放图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 拆分窗口 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JSplitPane cf; <span class="comment">//拆分成左右两个界面</span></span><br><span class="line">JList lb;</span><br><span class="line">JLabel l;</span><br><span class="line">String str[]= &#123;<span class="string">&quot;软件开发&quot;</span>,<span class="string">&quot;游戏开发&quot;</span>,<span class="string">&quot;平面设计&quot;</span>,<span class="string">&quot;动画制作&quot;</span>,<span class="string">&quot;室内设计&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>  拆分窗口() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line"></span><br><span class="line">lb=<span class="keyword">new</span> JList(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;Image/雪花.jpg&quot;</span>)); <span class="comment">//放java工程路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf=<span class="keyword">new</span> JSplitPane(JSplitPane.HORIZONTAL_SPLIT,lb,l);<span class="comment">//左右拆分</span></span><br><span class="line"><span class="comment">//cf=new JSplitPane(JSplitPane.VERTICAL_SPLIT,lb,l);//上下拆分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.setOneTouchExpandable(<span class="keyword">true</span>); <span class="comment">//出现两个拉动箭头 可以覆盖或收缩掉一界面</span></span><br><span class="line"></span><br><span class="line">f.add(cf);</span><br><span class="line"></span><br><span class="line">f.setSize(<span class="number">640</span>,<span class="number">480</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>,<span class="number">280</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">  <span class="keyword">new</span> 拆分窗口();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/f8ed91217debb2e4a113daefc8d04903.png"></p><h2 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h2><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h3><p>绝对布局指硬性指定组件在容器中的位置和大小，可以使用绝对坐标的方式来指定组件的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用步骤:</span></span><br><span class="line"><span class="comment">1.使用Container.setLayout(null)方法取消布局管理器。</span></span><br><span class="line"><span class="comment">2.使用Container.setBounds()方法设置每个组件的大小与位置。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_07</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">blog_02_07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setTitle(<span class="string">&quot;绝对布局&quot;</span>);</span><br><span class="line">setLayout(<span class="keyword">null</span>);</span><br><span class="line">setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">150</span>);</span><br><span class="line">Container c=getContentPane();</span><br><span class="line">JButton b1=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">JButton b2=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">b1.setBounds(<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">30</span>);</span><br><span class="line">b2.setBounds(<span class="number">60</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">c.add(b1);</span><br><span class="line">c.add(b2);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">new</span> blog_02_07();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/143377b7b2dc142b6cddbebffb2630c8.png"></p><h3 id="流动布局"><a href="#流动布局" class="headerlink" title="流动布局"></a>流动布局</h3><p>流动布局指组件像“流”一样从左到右摆放组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line"></span><br><span class="line">JButton b[]; <span class="comment">//按钮数组</span></span><br><span class="line">String str[]= &#123;<span class="string">&quot;话梅&quot;</span>,<span class="string">&quot;果脯&quot;</span>,<span class="string">&quot;薯片&quot;</span>,<span class="string">&quot;饼干&quot;</span>,<span class="string">&quot;巧克力&quot;</span>,<span class="string">&quot;腰果&quot;</span>,<span class="string">&quot;锅巴&quot;</span>,<span class="string">&quot;开心果&quot;</span>&#125;; <span class="comment">//字符串数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlowLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;流动窗口&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton[str.length]; <span class="comment">//等价于 JButton b[]=new JButton[str.length]  相当于创建按键数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">b[i]=<span class="keyword">new</span> JButton(str[i]); <span class="comment">//一个一个new</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网格布局方式  java默认边界布局管理</span></span><br><span class="line">f.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//f.setLayout(new FlowLayout(FlowLayout.LEFT));//向左对齐</span></span><br><span class="line"><span class="comment">//f.setLayout(new FlowLayout(FlowLayout.RIGHT));//向右看齐</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">f.add(b[i]);</span><br><span class="line">&#125;</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">150</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);<span class="comment">//不能最大化 拖动</span></span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> FlowLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/91cc9c0cb639ebd1108108d89a2743e5.png"></p><h3 id="边界布局"><a href="#边界布局" class="headerlink" title="边界布局"></a>边界布局</h3><p>边界布局将容器划分东、南、西、北、中五个区域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BorderLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b,b1,b2,b3,b4;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BorderLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;边界布局&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;东方&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;西方&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;南方&quot;</span>);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;北方&quot;</span>);</span><br><span class="line">b4=<span class="keyword">new</span> JButton(<span class="string">&quot;中方&quot;</span>);</span><br><span class="line"><span class="comment">//边界布局方式</span></span><br><span class="line">f.add(b,BorderLayout.EAST);</span><br><span class="line">f.add(b1,BorderLayout.WEST);</span><br><span class="line">f.add(b2,BorderLayout.SOUTH);</span><br><span class="line">f.add(b3,BorderLayout.NORTH);</span><br><span class="line">f.add(b4,BorderLayout.CENTER);</span><br><span class="line"><span class="comment">//如果不是5个按钮，则会以扩充中部去填补</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使任务管理器中窗口也关闭 ，不占内存 很重要！！！！！</span></span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//使运行后的窗口不占内存  起关闭作用</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"></span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> BorderLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/b1c0d8b1f554da1fc04211f71347eea4.png"></p><h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>网格布局将容器划分为网格，所有组件按行和列排列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GridLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b[];</span><br><span class="line">String str[]= &#123;<span class="string">&quot;话梅&quot;</span>,<span class="string">&quot;果脯&quot;</span>,<span class="string">&quot;薯片&quot;</span>,<span class="string">&quot;饼干&quot;</span>,<span class="string">&quot;巧克力&quot;</span>,<span class="string">&quot;腰果&quot;</span>,<span class="string">&quot;锅巴&quot;</span>,<span class="string">&quot;开心果&quot;</span>,<span class="string">&quot;蛋糕&quot;</span>&#125;; <span class="comment">//字符串数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GridLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;网格布局&quot;</span>);</span><br><span class="line"></span><br><span class="line">b=<span class="keyword">new</span> JButton[str.length]; <span class="comment">//等价于JButton b[]=new JButton[大小]  创建数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">b[i]=<span class="keyword">new</span> JButton(str[i]);  <span class="comment">//一个一个添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网格布局格式</span></span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">13</span>)); <span class="comment">//(行，列，长高的像素空间)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">f.add(b[i]);</span><br><span class="line">&#125;</span><br><span class="line">f.setSize(<span class="number">380</span>,<span class="number">320</span>);</span><br><span class="line">    f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    f.setResizable(<span class="keyword">false</span>);<span class="comment">//不能最大化 不能拉伸窗口 使其固定</span></span><br><span class="line">    </span><br><span class="line">    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> GridLayout_1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/8fd9c2b221ae6f0801a34bb6d43e119d.png"></p><h3 id="盒式布局"><a href="#盒式布局" class="headerlink" title="盒式布局"></a>盒式布局</h3><p><code>BoxLayout </code>可以把控件依次进行水平或者垂直排列布局。<br>create<code>HorizontalBox</code>()：返回一个 Box 对象，它采用水平 BoxLayout，即 BoxLayout 沿着水平方向放置组件，让组件在容器内从<code>左到右</code>排列。<br>create<code>VerticalBox</code>()：返回一个 Box 对象，它采用垂直 BoxLayout，即 BoxLayout 沿着垂直方向放置组件，让组件在容器内从<code>上到下</code>进行排列。<br>Box 布局时，可以使用空隙类来调整和控制组件之间的间隔，使组件布局达到要求。<br>空隙类的对象是一种占用空间但不可见的组件。空隙类的对象有两种：<br>支撑组件（<code>Struct</code>）：用于调整组件间的有指定长度的间距<br>1.createVerticalStrut(int height) 2.createHorizontalStrut(int width)<br>胶水组件（<code>Glue</code>）：用于调整组件间的无指定长度的间距<br>1.createHorizontalGlue() 2.createVerticalGlue()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//垂直盒子/水平盒子</span></span><br><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b1,b2,b3;</span><br><span class="line">Box box;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoxLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;盒式布局&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮3&quot;</span>);</span><br><span class="line">box=Box.createVerticalBox();<span class="comment">//垂直盒子</span></span><br><span class="line"><span class="comment">//box=Box.createHorizontalBox()//水平盒子</span></span><br><span class="line">box.add(b1);</span><br><span class="line">box.add(Box.createGlue());</span><br><span class="line"><span class="comment">//box.add(Box.createVerticalStrut(10));</span></span><br><span class="line">box.add(b2);</span><br><span class="line">box.add(Box.createGlue());</span><br><span class="line">box.add(b3);</span><br><span class="line"></span><br><span class="line">f.add(box);</span><br><span class="line"><span class="comment">//f.pack();</span></span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> BoxLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/5a7482a37413c82fc2ace16801d75511.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/9df4f6c4f24517fb0023317a90010328.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变间隔</span></span><br><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxLayout_3</span> </span>&#123;</span><br><span class="line"> JFrame f;</span><br><span class="line"> JButton b;</span><br><span class="line"> Box box;</span><br><span class="line"> String name[]= &#123;<span class="string">&quot;按钮1&quot;</span>,<span class="string">&quot;按钮2&quot;</span>,<span class="string">&quot;按钮3&quot;</span>&#125;;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">BoxLayout_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> f=<span class="keyword">new</span> JFrame();</span><br><span class="line"> box=Box.createVerticalBox();</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;name.length;i++) &#123;</span><br><span class="line"> b=<span class="keyword">new</span> JButton(name[i]);</span><br><span class="line"> <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line"> box.add(Box.createVerticalStrut(<span class="number">10</span>));</span><br><span class="line"> <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line"> box.add(Box.createVerticalStrut(<span class="number">20</span>));</span><br><span class="line"> box.add(b);</span><br><span class="line"> &#125;</span><br><span class="line"> f.add(box);</span><br><span class="line"> f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> BoxLayout_3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/a635d72d75d4c2d0c61cab949c39312e.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxLayout_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JTextField t;</span><br><span class="line">JTextArea jt;</span><br><span class="line">JLabel l1,l2;</span><br><span class="line">JButton b;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">Box H1,H2,V1;</span><br><span class="line"><span class="comment">//水平 水平  垂直</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoxLayout_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line"></span><br><span class="line"><span class="comment">//主题</span></span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;主题:&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">H1=Box.createHorizontalBox();<span class="comment">//水平盒子</span></span><br><span class="line">H1.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//离布局间距</span></span><br><span class="line">H1.add(l1);</span><br><span class="line">H1.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//水平间距</span></span><br><span class="line">H1.add(t);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//setAlignmentX()用于使用了BoxLayout.Y_AXIS时，将控件在X轴方向设置为左对齐、右对齐或居中对</span></span><br><span class="line"><span class="comment">//setAlignmentY()将控件在Y轴方向设置为顶对齐、底对齐或居中对齐</span></span><br><span class="line"><span class="comment">//内容</span></span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;内容:&quot;</span>);</span><br><span class="line">jt=<span class="keyword">new</span> JTextArea();</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(jt);</span><br><span class="line">H2=Box.createHorizontalBox();<span class="comment">//水平</span></span><br><span class="line">H2.setAlignmentX(<span class="number">1</span>);  <span class="comment">//设置靠右对齐 X水平轴</span></span><br><span class="line">H2.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//边界间距</span></span><br><span class="line">l2.setAlignmentY(<span class="number">0</span>);<span class="comment">//设置标签垂直靠上对齐</span></span><br><span class="line">H2.add(l2);</span><br><span class="line">H2.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//间距</span></span><br><span class="line">gd.setAlignmentY(<span class="number">0</span>); <span class="comment">//文本域垂直靠上</span></span><br><span class="line">H2.add(gd);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//垂直</span></span><br><span class="line"><span class="comment">//H2和按键垂直</span></span><br><span class="line">V1=Box.createVerticalBox();</span><br><span class="line">V1.add(Box.createVerticalStrut(<span class="number">5</span>));<span class="comment">//和H1间距</span></span><br><span class="line">V1.add(H2);</span><br><span class="line"><span class="comment">//确定</span></span><br><span class="line">jt.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">gd.setViewportView(jt);</span><br><span class="line">V1.add(Box.createVerticalStrut(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">b.setAlignmentX(<span class="number">1</span>);  <span class="comment">//水平靠右</span></span><br><span class="line">V1.add(b);</span><br><span class="line"></span><br><span class="line">f.add(H1,BorderLayout.NORTH);<span class="comment">//主题</span></span><br><span class="line">f.add(V1,BorderLayout.CENTER);<span class="comment">//垂直加中间</span></span><br><span class="line"></span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">500</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span>  BoxLayout_2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/4783a159c0548e8d5d9d29d6d4fecc67.png"></p><h3 id="卡片布局"><a href="#卡片布局" class="headerlink" title="卡片布局"></a>卡片布局</h3><p><code>卡片布局</code>可以通过点击窗口中的按钮切换不同的面板。像卡片一样叠加，一张接着一张的显示</p><p><code>CardLayout成员方法</code>:<br>JPanel cp=new JPanel();<br>CardLayout c=new CardLayout();<br>c.<code>first</code>(cp):显示第一个卡片<br>c.<code>last</code>(cp)：显示最后一个卡片<br>c.<code>next</code>(cp)：显示当前所显示卡片之后的卡片<br>c.<code>previous</code>(cp)：显示当前所显示卡片之前的卡片<br>c.<code>show</code>(cp,String name)：显示指定标签的卡片</p><p>卡片布局使用步骤:<br>1.<code>创建CardLayout布局对象</code><br>CardLayout l = new CardLayout();<br>2.<code>创建容器对象</code><br>JPanel panel = new JPanel();<br>3.<code>设置容器对象的布局或使用默认布局</code><br>panel.setLayout(l);<br>4.<code>向容器中添加组件对象(设组件对象已创建)</code><br>panel.add(组件对象，“名称”);<br>5.<code>显示组件</code><br>l.show(panel,  “名称”);<br>l.first(panel);<br> l.last(panel);<br>l.next(panel);<br>l.previous(panel);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardLayout_1</span> </span>&#123;</span><br><span class="line"> JFrame f;</span><br><span class="line"> <span class="comment">//卡片布局面板</span></span><br><span class="line"> JPanel cp;</span><br><span class="line"> CardLayout c;</span><br><span class="line"> JLabel l;</span><br><span class="line"> <span class="comment">//控制面板</span></span><br><span class="line"> JPanel bp; <span class="comment">//按键面板</span></span><br><span class="line"> JButton b; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">CardLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> f=<span class="keyword">new</span> JFrame();</span><br><span class="line"> <span class="comment">//卡片布局设置</span></span><br><span class="line"> cp=<span class="keyword">new</span> JPanel();</span><br><span class="line"> c=<span class="keyword">new</span> CardLayout();</span><br><span class="line"> cp.setLayout(c);</span><br><span class="line"> f.add(cp,BorderLayout.CENTER);</span><br><span class="line"> <span class="comment">//标签</span></span><br><span class="line"> String lname[]= &#123;<span class="string">&quot;卡片A&quot;</span>,<span class="string">&quot;卡片B&quot;</span>,<span class="string">&quot;卡片C&quot;</span>&#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lname.length;i++) &#123;</span><br><span class="line"> l=<span class="keyword">new</span> JLabel(lname[i]);</span><br><span class="line"> l.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"> l.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷书&quot;</span>,Font.BOLD,<span class="number">16</span>));</span><br><span class="line"> l.setForeground(<span class="keyword">new</span> Color(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="comment">//像采用卡片布局的面板中加卡片</span></span><br><span class="line">cp.add(l,lname[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  bp=<span class="keyword">new</span> JPanel();</span><br><span class="line"> f.add(bp,BorderLayout.SOUTH);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> String bname[]= &#123;<span class="string">&quot;第一个&quot;</span>,<span class="string">&quot;前一个&quot;</span>,<span class="string">&quot;卡片A&quot;</span>,<span class="string">&quot;卡片B&quot;</span>,<span class="string">&quot;卡片C&quot;</span>,<span class="string">&quot;后一个&quot;</span>,<span class="string">&quot;最后一个&quot;</span>&#125;;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bname.length;i++) &#123;</span><br><span class="line"> JButton b=<span class="keyword">new</span> JButton(bname[i]);</span><br><span class="line"> bp.add(b);</span><br><span class="line"> b.addActionListener(<span class="keyword">new</span> ActionListener()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String event=b.getText();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;第一个&quot;</span>)) &#123;</span><br><span class="line">c.first(cp);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;前一个&quot;</span>)) &#123;</span><br><span class="line">c.previous(cp);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;卡片A&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;卡片A&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;卡片B&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;卡片B&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;卡片C&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;卡片C&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;后一个&quot;</span>)) &#123;</span><br><span class="line">c.next(cp);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;最后一个&quot;</span>)) &#123;</span><br><span class="line">c.last(cp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> f.pack();</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> CardLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//利用卡片布局实训相册</span></span><br><span class="line">![](https:<span class="comment">//cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/e348f8e551bc264d616c873b59e80976.png)</span></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span>  java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardLayout_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JPanel cp,p;</span><br><span class="line">CardLayout c;</span><br><span class="line">ImageIcon img;</span><br><span class="line">String imgname[]= &#123;<span class="string">&quot;Image/1.jpg&quot;</span>,<span class="string">&quot;Image/2.jpg&quot;</span>,<span class="string">&quot;Image/3.jpg&quot;</span>,<span class="string">&quot;Image/4.jpg&quot;</span>&#125;;</span><br><span class="line">String bname[]= &#123;<span class="string">&quot;第一个&quot;</span>,<span class="string">&quot;前一个&quot;</span>,<span class="string">&quot;图片A&quot;</span>,<span class="string">&quot;图片B&quot;</span>,<span class="string">&quot;图片C&quot;</span>,<span class="string">&quot;图片D&quot;</span>,<span class="string">&quot;后一个&quot;</span>,<span class="string">&quot;最后一个&quot;</span>&#125;;</span><br><span class="line">String imgname2[]= &#123;<span class="string">&quot;图片A&quot;</span>,<span class="string">&quot;图片B&quot;</span>,<span class="string">&quot;图片C&quot;</span>,<span class="string">&quot;图片D&quot;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CardLayout_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">cp=<span class="keyword">new</span> JPanel();</span><br><span class="line">c=<span class="keyword">new</span> CardLayout();</span><br><span class="line">cp.setLayout(c);</span><br><span class="line">f.add(cp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;imgname.length;i++) &#123;</span><br><span class="line">img=<span class="keyword">new</span> ImageIcon(imgname[i]);<span class="comment">//创建图片</span></span><br><span class="line">l=<span class="keyword">new</span> JLabel(img);<span class="comment">//创建标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//像采用卡片布局的面板中加卡片</span></span><br><span class="line"><span class="comment">//并为卡片设置名字</span></span><br><span class="line">cp.add(l,imgname2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">f.add(p,BorderLayout.SOUTH);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bname.length;i++) &#123;</span><br><span class="line">JButton b=<span class="keyword">new</span> JButton(bname[i]);<span class="comment">//防止局部变量</span></span><br><span class="line">p.add(b);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String event=b.getText();<span class="comment">//按键值</span></span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;第一个&quot;</span>))&#123;</span><br><span class="line">c.first(cp);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;前一个&quot;</span>)) &#123;</span><br><span class="line">c.previous(cp);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片A&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;图片A&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片B&quot;</span>)) &#123;</span><br><span class="line">c.show(cp, <span class="string">&quot;图片B&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片C&quot;</span>)) &#123;</span><br><span class="line">c.show(cp, <span class="string">&quot;图片C&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片D&quot;</span>)) &#123;</span><br><span class="line">c.show(cp, <span class="string">&quot;图片D&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;后一个&quot;</span>)) &#123;</span><br><span class="line">c.next(cp);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;最后一个&quot;</span>)) &#123;</span><br><span class="line">c.last(cp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> CardLayout_2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/26bef4624ae4de3d1529e8584a3d70e7.png"></p><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>事件处理的一般方法：<br>1.创建将要产生事件的组件对象<br>2.构造实现相应事件监听器接口的类，并创建事件监听器对象<br>3.为组件对象增加事件监听器对象：<code>组件对象</code>.add<code>XxxListener</code>(事件监听器对象);如：button.addActionListener(this);</p><blockquote><p>注：接口中的方法都含有所产生的事件对象参数，使用该参数的<code>getSource()</code>方法可以得到产生该事件的事件源</p></blockquote><h2 id="ActionListener"><a href="#ActionListener" class="headerlink" title="ActionListener"></a>ActionListener</h2><p>动作事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exception_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Exception_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;我是按钮，请点击&quot;</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">b.setText(<span class="string">&quot;我被点击了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(b);</span><br><span class="line"> f.pack();</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> Exception_2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/e4593828130f1643c3b92ecfabe3bbd6.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/5965bf0bb48c3ca5290232e90fe5d34d.png"></p><h2 id="ItemListener"><a href="#ItemListener" class="headerlink" title="ItemListener"></a>ItemListener</h2><p>选择监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemEvent_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JComboBox  xlk;<span class="comment">//下拉框</span></span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">String str[]= &#123;<span class="string">&quot;选项一&quot;</span>,<span class="string">&quot;选项二&quot;</span>,<span class="string">&quot;选项三&quot;</span>,<span class="string">&quot;选项四&quot;</span>,<span class="string">&quot;选项五&quot;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItemEvent_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">xlk=<span class="keyword">new</span> JComboBox(str);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">xlk.addItemListener(<span class="keyword">new</span> ItemListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">int</span> stateChange=e.getStateChange();<span class="comment">//获得事件类型</span></span><br><span class="line">String item=e.getItem().toString();<span class="comment">//获得触发此次事件的选项</span></span><br><span class="line"><span class="keyword">if</span>(stateChange==ItemEvent.SELECTED) &#123;   <span class="comment">//查看是否由选中选项触发</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次事件由  选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;此次事件由  选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(stateChange==ItemEvent.DESELECTED) &#123;  <span class="comment">//查看是否由取消选中选项触发</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次事件由  取消选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;此次事件由  取消选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;  <span class="comment">//由其他原因触发</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次事件由其他原因触发!&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;此次事件由其他原因触发!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(xlk,BorderLayout.NORTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> ItemEvent_1() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/06c581b66a5f8d2d6d2382f8f0ebc607.png"></p><h2 id="KeyListener"><a href="#KeyListener" class="headerlink" title="KeyListener"></a>KeyListener</h2><p>键盘事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyColor_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b1,b2,b3,b4,b5,b6,b7;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KeyColor_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;颜色&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">b1.setBackground(Color.WHITE);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">b2.setBackground(Color.WHITE);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">b3.setBackground(Color.WHITE);</span><br><span class="line">b4=<span class="keyword">new</span> JButton(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">b4.setBackground(Color.WHITE);</span><br><span class="line">b5=<span class="keyword">new</span> JButton(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">b5.setBackground(Color.WHITE);</span><br><span class="line">b6=<span class="keyword">new</span> JButton(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">b6.setBackground(Color.WHITE);</span><br><span class="line">b7=<span class="keyword">new</span> JButton(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">b7.setBackground(Color.WHITE);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;英文键盘模式&quot;</span>);</span><br><span class="line">f.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//f.setFocusable(true);//获得焦点</span></span><br><span class="line">b1.addKeyListener(<span class="keyword">new</span> KeyListener() &#123;  <span class="comment">//b1为焦点</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;  <span class="comment">//按下</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">switch</span>((<span class="keyword">char</span>)e.getKeyCode()) &#123;  <span class="comment">//判断按下的键值</span></span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_1:</span><br><span class="line">b1.setBackground(Color.red);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_2: </span><br><span class="line">b2.setBackground(Color.orange);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_3:</span><br><span class="line">b3.setBackground(Color.YELLOW);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_4:</span><br><span class="line">b4.setBackground(Color.green);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_5:</span><br><span class="line">b5.setBackground(Color.cyan);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_6:</span><br><span class="line">b6.setBackground(Color.blue);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_7:</span><br><span class="line">b7.setBackground(<span class="keyword">new</span> Color(<span class="number">128</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;  <span class="comment">//释放</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">switch</span>((<span class="keyword">char</span>)e.getKeyCode()) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_1:</span><br><span class="line">b1.setBackground(Color.WHITE);  <span class="comment">//null为原来色体</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_2:</span><br><span class="line">b2.setBackground(Color.WHITE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_3:</span><br><span class="line">b3.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_4:</span><br><span class="line">b4.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_5:</span><br><span class="line">b5.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_6:</span><br><span class="line">b6.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_7:</span><br><span class="line">b7.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(b1);</span><br><span class="line">f.add(b2);</span><br><span class="line">f.add(b3);</span><br><span class="line">f.add(b4);</span><br><span class="line">f.add(b5);</span><br><span class="line">f.add(b6);</span><br><span class="line">f.add(b7);</span><br><span class="line">f.add(l,BorderLayout.CENTER);</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> KeyColor_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/8ec4a3c05780f2b3a09ca1202b1c90e7.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyListener_1</span>  </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KeyListener_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;键盘事件&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">t.addKeyListener(<span class="keyword">new</span> KeyListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;  <span class="comment">//键盘输入</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String keytext=KeyEvent.getKeyText(e.getKeyCode());<span class="comment">//获得描述keycode的标签</span></span><br><span class="line"><span class="keyword">if</span>(e.isActionKey()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你按下的是动作键“&quot;</span>+keytext+<span class="string">&quot;”&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你按下的是非动作键“&quot;</span>+keytext+<span class="string">&quot;”&quot;</span>);</span><br><span class="line"><span class="comment">//获得与此事件中的键相关联的字符</span></span><br><span class="line"><span class="keyword">int</span> keycode=e.getKeyCode();</span><br><span class="line"><span class="keyword">switch</span>(keycode) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_CONTROL:  <span class="comment">//判断按下的是否为ctrl键</span></span><br><span class="line">System.out.println(<span class="string">&quot;,Ctrl键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_ALT:  <span class="comment">//判断是否为ait</span></span><br><span class="line">System.out.println(<span class="string">&quot;,AIt键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_SHIFT:</span><br><span class="line">System.out.println(<span class="string">&quot;,Shift键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123; <span class="comment">//键盘按下</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//获得输入的字符</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次输入的是“&quot;</span>+e.getKeyChar()+<span class="string">&quot;”&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123; <span class="comment">//键盘松开</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//获得描述Keycode的标签</span></span><br><span class="line">String keyText=KeyEvent.getKeyText(e.getKeyCode());</span><br><span class="line">System.out.println(<span class="string">&quot;你释放的是“&quot;</span>+keyText+<span class="string">&quot;”键&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">t.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">f.add(l,BorderLayout.WEST);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> KeyListener_1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/7dc7641d0ed513e381d08bb4cfef807c.png"></p><h2 id="MouseListener"><a href="#MouseListener" class="headerlink" title="MouseListener"></a>MouseListener</h2><p>鼠标事件<br><code>MouseListener</code>接口中的方法:<br>① void mouse<code>Pressed</code> ( MouseEvent );  //鼠标被按下<br>② void mouse<code>Released </code>( MouseEvent );  //鼠标被释放<br>③ void mouse<code>Clicked</code> ( MouseEvent );  //鼠标被单击<br>④ void mouse<code>Entered</code> ( MouseEvent );  //光标移入组件<br>⑤ void mouse<code>Exit</code> ( MouseEvent );    //光标移出组件</p><hr><p><code>MouseEvent</code>中的常用方法:<br>1.int  <code>getButton</code>()；<br> 返回更改了状态的鼠标按键(如果有)。<br>2.int  <code>getClickCount</code>()；<br> 返回与此事件关联的鼠标单击次数。<br>3.boolean  <code>isAltDown</code>()；<br>返回Alt修饰符在此事件上是否为down。<br>4. boolean  <code>isControlDown</code>()；<br>返回Ctrl修饰符在此事件上是否为down。<br>5.boolean  <code>isShiftDown</code>()；<br>返回Shift修饰符在此事件上是否为down.<br>6.int  <code>getPoint</code>()；<br>返回事件相对于源组件的x，y坐标<br>7.int  <code>getX</code>()；<br>返回事件相对于源组件的水平x坐标。<br>8.int  <code>getY</code>()；<br>返回事件相对于源组件的垂直Y坐标。<br>9.int  <code>isPopupTrigger</code>()；<br>返回鼠标事件是否为该平台的弹出菜单所触发的事件。<br>10.<code>MouseAdapter</code>适配器</p><hr><p><code>MouseMotionListener</code><br>1.当在组件上进行鼠标<code>拖动、移动</code>时产生该事件。<br>2.MouseMotionListener接口中的方法<br>① void <code>mouseDragged</code>( MouseEvent );<br>② void <code>mouseMoved </code>( MouseEvent );<br>3.MouseMotionAdapter适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseEvent_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MouseEvent_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;鼠标事件&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;鼠标测试处&quot;</span>);</span><br><span class="line">l.addMouseListener(<span class="keyword">new</span> MouseListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//鼠标发送单机事件触发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;单击了鼠标按键&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i=e.getButton();<span class="comment">//通过该值可以判断按下的是哪个键</span></span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON1)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标左键&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON2)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标滚轮&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON3)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标右键&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> Clickcount=e.getClickCount();<span class="comment">//点击次数</span></span><br><span class="line">System.out.println(<span class="string">&quot;点击次数为&quot;</span>+Clickcount+<span class="string">&quot;下&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//鼠标按键被按下时触发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;鼠标按键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i=e.getButton();<span class="comment">//通过该值可以判断按下的是哪个键</span></span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON1)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标左键&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON2)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标滚轮&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON3)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标右键&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//按下后松下</span></span><br><span class="line">System.out.println(<span class="string">&quot;鼠标已释放&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//光标移入组件被触发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;光标移入组件&quot;</span>);</span><br><span class="line">l.setForeground(Color.red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;光标移出组件&quot;</span>);</span><br><span class="line">l.setForeground(Color.black);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(l);</span><br><span class="line">f.pack();</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> MouseEvent_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/71c7048f849f53726c315faccec875d3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseMotionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMouseMotionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">JButton b;</span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyMouseMotionListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;MyMouseMotionListener&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;clik and drag the mouse&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">t.addMouseMotionListener(<span class="keyword">new</span> MouseMotionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">count++;</span><br><span class="line">t.append(count+<span class="string">&quot;The mouse is dragged:X=&quot;</span>+e.getX()+<span class="string">&quot;Y=&quot;</span>+e.getY()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">count++;</span><br><span class="line">t.append(count+<span class="string">&quot;The mouse is moving:X=&quot;</span>+e.getX()+<span class="string">&quot;Y=&quot;</span>+e.getY()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">f.add(l,BorderLayout.NORTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.add(b,BorderLayout.SOUTH);</span><br><span class="line">f.setSize(<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span>  MyMouseMotionListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/c0acc0f468ad183dc557eb980c691f22.png"></p><h2 id="WindowListener"><a href="#WindowListener" class="headerlink" title="WindowListener"></a>WindowListener</h2><p>窗口监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowFocusListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowFocusListener_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">JTextArea t;</span><br><span class="line">JLabel l;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindowFocusListener_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;窗口焦点测试&quot;</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">t.setLineWrap(<span class="keyword">true</span>);<span class="comment">//自动换行</span></span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;测试区域&quot;</span>);</span><br><span class="line">l.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>,Font.BOLD,<span class="number">50</span>));</span><br><span class="line">f.addWindowFocusListener(<span class="keyword">new</span> WindowFocusListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowGainedFocus</span><span class="params">(WindowEvent e)</span> </span>&#123;<span class="comment">//获得焦点</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">t.append(<span class="string">&quot;窗口获得焦点&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\&quot;窗口获得焦点\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowLostFocus</span><span class="params">(WindowEvent e)</span> </span>&#123; <span class="comment">//失去焦点</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">t.append(<span class="string">&quot;窗口失去焦点&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\&quot;窗口失去焦点\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">p.add(l);</span><br><span class="line">f.add(p,BorderLayout.CENTER);</span><br><span class="line">f.add(gd,BorderLayout.SOUTH);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> WindowFocusListener_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/85873dfabb0f1fc5f7671bf7c8a35632.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowListener_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindowListener_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;窗口事件&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;显示&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">t.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">f.add(l,BorderLayout.NORTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.addWindowListener(<span class="keyword">new</span> WindowListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowOpened</span><span class="params">(WindowEvent e)</span> </span>&#123; <span class="comment">//窗口打开时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被打开&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口被打开&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口将要关闭时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口将要被关闭&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口将要被关闭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosed</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口已经被关闭时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口已经被关闭&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口已经被关闭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowIconified</span><span class="params">(WindowEvent e)</span> </span>&#123;    <span class="comment">//窗口最小化时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被最小化&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口已经被最小化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeiconified</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口被非最小化时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被非最小化&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口已经被非最小化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口被激活时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被激活&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口被激活&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeactivated</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口不再处于激活状态时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口不再处于激活状态&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口不再处于激活状态&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"> <span class="keyword">new</span> WindowListener_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Swing高级"><a href="#Swing高级" class="headerlink" title="Swing高级"></a>Swing高级</h1><h2 id="JTable表格"><a href="#JTable表格" class="headerlink" title="JTable表格"></a>JTable表格</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一.创建表格控件的各种方式:</span><br><span class="line">(<span class="number">1</span>)  调用无参构造函数.</span><br><span class="line">JTable table = <span class="keyword">new</span> JTable();</span><br><span class="line">(<span class="number">2</span>)  以表头和表数据创建表格.</span><br><span class="line">String columnNames[]= &#123;<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;性别&quot;</span>,<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;政治面貌&quot;</span>&#125;;</span><br><span class="line">Object data[][]= &#123;&#123;<span class="string">&quot;陈峰&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;党员&quot;</span>&#125;,</span><br><span class="line">           &#123;<span class="string">&quot;田一飞&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">18</span>),<span class="string">&quot;团员&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;胡锦&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;党员&quot;</span>&#125;&#125;;</span><br><span class="line">JTable table = <span class="keyword">new</span> JTable(data, columnNames);</span><br><span class="line">JTableHeader tablerHeader=table.getTableHeader(); <span class="comment">//获取表格列名.</span></span><br><span class="line">(<span class="number">3</span>)利用表格模型创建表格</span><br><span class="line">DefaultTableModel tableModel=<span class="keyword">new</span> DefaultTableMode();<span class="comment">//创建表格模型</span></span><br><span class="line">JTable table=<span class="keyword">new</span> JTabel(tableModel); <span class="comment">//创建表格</span></span><br><span class="line">table.setRowSorter(<span class="keyword">new</span> TableRowSorter(tableModel)); <span class="comment">//设置排序器</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_list;</span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.DefaultTableModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableRowSorter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 默认方法创建  </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JTable table;</span><br><span class="line">JLabel l1,l2,l3,l4,l5;</span><br><span class="line">JButton b1,b2,b3;</span><br><span class="line">JTextField t1,t2,t3,t4;</span><br><span class="line">JPanel p;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">DefaultTableModel tableModel;</span><br><span class="line">String Listname[]= &#123;<span class="string">&quot;学号&quot;</span>,<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;专业&quot;</span>&#125;;</span><br><span class="line">Object[][] date= &#123;&#123;<span class="string">&quot;20172001&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">18</span>),<span class="string">&quot;软件工程&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;20172002&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;软件工程&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;20172003&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;软件工程&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;20172004&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">18</span>),<span class="string">&quot;软件工程&quot;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span> 默认方法创建() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;表格&quot;</span>);</span><br><span class="line">tableModel=<span class="keyword">new</span> DefaultTableModel(date,Listname);<span class="comment">//创建表格模型</span></span><br><span class="line">table=<span class="keyword">new</span> JTable(tableModel);<span class="comment">//创建表格</span></span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(table);<span class="comment">//创建滚动面板</span></span><br><span class="line">table.setRowHeight(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//设置表格排序器</span></span><br><span class="line">table.setRowSorter(<span class="keyword">new</span> TableRowSorter(tableModel));</span><br><span class="line"><span class="comment">//设置表格的选择模式为单选</span></span><br><span class="line">table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//为表格添加鼠标事件监听器</span></span><br><span class="line"><span class="comment">//点击表格 修改框反应</span></span><br><span class="line">table.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line"><span class="comment">//发生了单击事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获得被选中行的索引</span></span><br><span class="line"><span class="keyword">int</span> selectedRow=table.getSelectedRow(); <span class="comment">//行数</span></span><br><span class="line"><span class="comment">//从表格模型中获得指定单元格的值</span></span><br><span class="line"><span class="comment">//行数固定 改变列数来获取</span></span><br><span class="line">Object a=tableModel.getValueAt(selectedRow, <span class="number">0</span>);<span class="comment">//行 列</span></span><br><span class="line">Object b=tableModel.getValueAt(selectedRow, <span class="number">1</span>);</span><br><span class="line">Object c=tableModel.getValueAt(selectedRow, <span class="number">2</span>);</span><br><span class="line">Object d=tableModel.getValueAt(selectedRow, <span class="number">3</span>);</span><br><span class="line">t1.setText(a.toString());  <span class="comment">//将值赋给文本框</span></span><br><span class="line">t2.setText(b.toString());</span><br><span class="line">t3.setText(c.toString());</span><br><span class="line">t4.setText(d.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;学号&quot;</span>,JLabel.CENTER);</span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;姓名&quot;</span>,JLabel.CENTER);</span><br><span class="line">l3=<span class="keyword">new</span> JLabel(<span class="string">&quot;年龄&quot;</span>,JLabel.CENTER);</span><br><span class="line">l4=<span class="keyword">new</span> JLabel(<span class="string">&quot;专业&quot;</span>,JLabel.CENTER);</span><br><span class="line">l5=<span class="keyword">new</span> JLabel(<span class="string">&quot;修改表格&quot;</span>,JLabel.CENTER);</span><br><span class="line">t1=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">t2=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">t3=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">t4=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;添加&quot;</span>);</span><br><span class="line">b1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//创建表格行数组</span></span><br><span class="line">String contents[]= &#123;t1.getText(),t2.getText(),t3.getText(),t4.getText()&#125;;</span><br><span class="line">tableModel.addRow(contents);<span class="comment">//向表格模型中加一行</span></span><br><span class="line">l5.setText(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">l5.setForeground(Color.BLUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;修改&quot;</span>);</span><br><span class="line">b2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">int</span> selectedRow=table.getSelectedRow();<span class="comment">//获得被选中行的索引</span></span><br><span class="line"><span class="keyword">if</span>(selectedRow!=-<span class="number">1</span>) &#123;<span class="comment">//判断是否被选中</span></span><br><span class="line"><span class="comment">//修改表格模型中的指定值</span></span><br><span class="line">tableModel.setValueAt(t1.getText(), selectedRow, <span class="number">0</span>);</span><br><span class="line">tableModel.setValueAt(t2.getText(),selectedRow, <span class="number">0</span>);</span><br><span class="line">tableModel.setValueAt(t3.getText(),selectedRow, <span class="number">0</span>);</span><br><span class="line">tableModel.setValueAt(t4.getText(),selectedRow, <span class="number">0</span>);</span><br><span class="line">l5.setText(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">l5.setForeground(Color.darkGray);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">b3.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">int</span> selectedRow=table.getSelectedRow();<span class="comment">//获得被选中的索引</span></span><br><span class="line"><span class="keyword">if</span>(selectedRow!=-<span class="number">1</span>) &#123;<span class="comment">//判断是否被选中</span></span><br><span class="line"><span class="comment">//从表格中删除指定行</span></span><br><span class="line">tableModel.removeRow(selectedRow);</span><br><span class="line">l5.setText(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">l5.setForeground(Color.red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">p.add(l1);</span><br><span class="line">p.add(t1);</span><br><span class="line">p.add(l2);</span><br><span class="line">p.add(t2);</span><br><span class="line">p.add(l3);</span><br><span class="line">p.add(t3);</span><br><span class="line">p.add(l4);</span><br><span class="line">p.add(t4);</span><br><span class="line">p.add(l5);</span><br><span class="line">p.add(b1);</span><br><span class="line">p.add(b2);</span><br><span class="line">p.add(b3);</span><br><span class="line">p.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">f.add(p,BorderLayout.SOUTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 默认方法创建();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/791896742af1ff02701adcfb36c82b15.png"></p><h2 id="JTree树"><a href="#JTree树" class="headerlink" title="JTree树"></a>JTree树</h2><p>1.<code>JTree</code>类的构造方法:<br>JTree()<br>JTree(TreeNode root)  //根据指定<code>根节点</code>创建树<br>JTree(TreeModel newModel) //根据指定树模型创建树<br>2.<code>DefaultMutableTreeNode</code>类实现了TreeNode接口，用来创建树的节点。<br>DefaultMutableTreeNode()<br>DefaultMutableTreeNode(Object userObject) //创建一个具有<code>指定标签</code>的节点<br>DefaultMutableTreeNode(Object userObject,boolean allowsChildren) //创建一个具有指定标签的节点，并且允许有子节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_tree;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.tree.DefaultMutableTreeNode;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 创建<span class="title">tree_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JTree tree;</span><br><span class="line">DefaultMutableTreeNode top;<span class="comment">//资源管理器</span></span><br><span class="line"><span class="comment">//我的公文包  我的电脑  收藏夹  Readme</span></span><br><span class="line">DefaultMutableTreeNode node1_1,node1_2,node1_3,node1_4;</span><br><span class="line"><span class="comment">//公司文件 私人文件  本机磁盘</span></span><br><span class="line">DefaultMutableTreeNode node2_1,node2_2,node2_3,node2_4,node2_5;</span><br><span class="line"><span class="comment">//网站列表</span></span><br><span class="line">DefaultMutableTreeNode node3_1;</span><br><span class="line"><span class="comment">//空</span></span><br><span class="line">DefaultMutableTreeNode node4_1;</span><br><span class="line"><span class="keyword">public</span> 创建tree_2() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;TreeDemo&quot;</span>);</span><br><span class="line">top=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;资源管理器&quot;</span>);</span><br><span class="line"></span><br><span class="line">node1_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;我的公文包&quot;</span>);</span><br><span class="line">node1_2=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;我的电脑&quot;</span>);</span><br><span class="line">node1_3=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;收藏夹&quot;</span>);</span><br><span class="line">node1_4=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;Readme&quot;</span>);</span><br><span class="line"></span><br><span class="line">node2_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;公司文件&quot;</span>);</span><br><span class="line">node2_2=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;私人文件&quot;</span>);</span><br><span class="line">node2_3=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;本机磁盘(C:)&quot;</span>);</span><br><span class="line">node2_4=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;本机磁盘(D:)&quot;</span>);</span><br><span class="line">node2_5=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;本机磁盘(E:)&quot;</span>);</span><br><span class="line"></span><br><span class="line">node3_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;网站列表&quot;</span>);</span><br><span class="line">node4_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;&lt;空&gt;&quot;</span>);</span><br><span class="line">top.add(node1_1);</span><br><span class="line">top.add(node1_2);</span><br><span class="line">top.add(node1_3);</span><br><span class="line">top.add(node1_4);</span><br><span class="line"></span><br><span class="line">node1_1.add(node2_1);</span><br><span class="line">node1_1.add(node2_2);</span><br><span class="line">node1_2.add(node2_3);</span><br><span class="line">node1_2.add(node2_4);</span><br><span class="line">node1_2.add(node2_5);</span><br><span class="line">node1_3.add(node3_1);</span><br><span class="line"></span><br><span class="line">node3_1.add(node4_1);</span><br><span class="line">tree=<span class="keyword">new</span> JTree(top);</span><br><span class="line">f.add(tree);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">true</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 创建tree_2() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/0853fc6e23b16e61770838b0a3dfcd01.png"></p><h2 id="JMenu菜单"><a href="#JMenu菜单" class="headerlink" title="JMenu菜单"></a>JMenu菜单</h2><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p>菜单有如下三大组件：JMenuBar，JMenu，JMenuItem。<br>(1) 菜单栏(JMenuBar)：管理 菜单,不参与用户交互操作<br>(2)  菜单(JMenu)：整合管理菜单项（非叶结点）<br>(3)  菜单项(JMenuItem)：菜单系统中的基本组件（叶结点）<br>创建下拉菜单一般步骤<br>(1) 创建一个<code>JMenuBar</code>菜单栏对象，将其放置在JFrame窗口的顶部；<br>(2)  创建<code>JMenu</code>菜单对象，将其添加到<code>JMenuBar</code>菜单栏中;<br>(3)  创建<code>JMenuItem</code>菜单项，将其添加到<code>JMenu</code>菜单中。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/934eb444e08650e25707967ce054fc84.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/bc769fbbdc58a62576aa9c3029940943.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/5b00164a192996c8d6ad759f4e05921e.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/c62bd3c3c8f14d05a179d4df64f921a3.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/dd2dd1585d010fb274ecc1708b91882c.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/c73619116a40401a2ca552128497c308.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/0c6c1db5673153a535c5ad76a841ec5e.png"></p><hr><blockquote><p><code>JCheckboxMenuItem</code>类用于创建复选菜单项。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/fdf48913fb0040aa303702b3332c2f89.png"></p><blockquote><p><code>JRadioButtonMenuItem</code>类用于创建带有单选的菜单项。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/dd5663e6f48a732f3efc4695f33cd629.png"></p><h3 id="弹出菜单"><a href="#弹出菜单" class="headerlink" title="弹出菜单"></a>弹出菜单</h3><p>弹出式菜单：<code>JPopupMenu</code><br>(1) 构造方法： JPopupMenu ( );<br>(2)  常用方法：<br>① add( JMenuItem ) ：将指定菜单项添加到菜单末尾;<br>② <code>show</code>(Component , int , int ) ：<br>在组件调用者的坐标空间指定位置显示弹出菜单。<br>说明：弹出菜单默认不可见，需调用show()方法显示。<br>③<code> setVisible</code>( boolean ) ：设置弹出菜单的可见性。</p><h3 id="定制菜单"><a href="#定制菜单" class="headerlink" title="定制菜单"></a>定制菜单</h3><h4 id="使用分隔线"><a href="#使用分隔线" class="headerlink" title="使用分隔线"></a>使用分隔线</h4><p>(1) 作用：便于集中相似/相关的菜单项；<br>(2) JMenu类、JPopupMenu类提供添加分隔条方法<br><code>addSeparator()</code>：将新分隔符追加到菜单末尾；<br>Jmenu类还提供向指定索引位置插入分隔符方法：insertSeparator(int) 。<br>注意：索引位置从0开始。</p><h4 id="启动-禁用"><a href="#启动-禁用" class="headerlink" title="启动/禁用"></a>启动/禁用</h4><p>方法：<code>setEnable</code>(boolean);<br>① false：禁用菜单/菜单项；<br>② true：启用菜单/菜单项。<br>注意：禁用的菜单/菜单项呈灰色。</p><h4 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h4><p>(1) 作用：为菜单/菜单项设置快捷键；<br>(2) 设置方法<br>① <code>setMnemonic(int)</code>：参数为与键盘助记符对应的键值；<br>例：setMnemonic(KeyEvent.VK_F)，指定F为快捷键。<br>②<code> setMnemonic(char)</code> ：参数是键盘助记符对应的键值；<br>例：setMnemonic(‘F’)，指定F为快捷键。<br>(3) 说明：<br>①  如菜单名中含指定键盘快捷键，会为该键添加下划线；<br>②  快捷键<code>不区分大小写</code>。</p><h4 id="设置加速器"><a href="#设置加速器" class="headerlink" title="设置加速器"></a>设置加速器</h4><p>(1) 作用：不展开菜单 ，加速器可直接激活相应菜单项事件。<br>(2) 设置方法：<code>setaAccelerator(KeyStroke)</code><br>方法：<code>getKeyStroke</code>( int keyCode, int modifiers )<br> ① 作用： 获取<code>KeyStroke</code>对象(KeyStroke类中定义的静态方法)；<br> ②参数<code>keyCode</code>：键盘助记符对应的键值；<br> 由KeyEvent类中定义的VK_开头的静态常量指定。<br>③参数<code>modifiers</code>：多个参数，用|分隔<br>由InputEvent类中定义的静态常量指定。<br>例： CTRL_MASK、ALT_MASK、 SHIFT_MASK等 。<br>如：<br>getKeyStroke(KeyEvent.VK_<code>A</code>, InputEvent.<code>CTRL</code>_MASK | InputEvent.<code>ALT</code>_MASK));<br>//加速器按键为 CTRL+ALT+A</p><h3 id="笔记本实例"><a href="#笔记本实例" class="headerlink" title="笔记本实例"></a>笔记本实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SWng_Menu;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.InputEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 记事本作业版 <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JMenuBar cd;</span><br><span class="line">JMenu filecd,editcd,fontcd,lookcd,helpcd; <span class="comment">//五个主菜单  一级菜单</span></span><br><span class="line"><span class="comment">//文件菜单</span></span><br><span class="line">JMenuItem filemenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">8</span>];<span class="comment">//文件下的8个副菜单 放进数组  二级菜单</span></span><br><span class="line">String filemenuname[]= &#123;<span class="string">&quot;新建(N)&quot;</span>,<span class="string">&quot;新窗口(W)&quot;</span>,<span class="string">&quot;打开(O)&quot;</span>,<span class="string">&quot;保存(S)&quot;</span>,<span class="string">&quot;另存为(A)&quot;</span>,<span class="string">&quot;页面设置(U)&quot;</span>,<span class="string">&quot;打印(P)&quot;</span>,<span class="string">&quot;退出(X)&quot;</span>&#125;;<span class="comment">//文件</span></span><br><span class="line"><span class="comment">//编辑菜单</span></span><br><span class="line">JMenuItem editmenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">13</span>];<span class="comment">//编辑下12个副菜单  二级菜单</span></span><br><span class="line">String editmenuname[]= &#123;<span class="string">&quot;撤销(U)&quot;</span>,<span class="string">&quot;剪切(T)&quot;</span>,<span class="string">&quot;复制(C)&quot;</span>,<span class="string">&quot;粘贴(P)&quot;</span>,<span class="string">&quot;删除(L)&quot;</span>,<span class="string">&quot;使用Bing搜索&quot;</span>,<span class="string">&quot;查找(F)&quot;</span>,<span class="string">&quot;查找下一个(N)&quot;</span>,<span class="string">&quot;查找上一个(V)&quot;</span>,<span class="string">&quot;替换(R)&quot;</span>,<span class="string">&quot;转到(G)&quot;</span>,<span class="string">&quot;全选(V)&quot;</span>,<span class="string">&quot;时间/日期(D)&quot;</span>&#125;; <span class="comment">//编辑</span></span><br><span class="line"><span class="comment">//格式</span></span><br><span class="line">JMenu stylemenuItem[]=<span class="keyword">new</span> JMenu[<span class="number">2</span>];<span class="comment">// 二级菜单</span></span><br><span class="line">String formatmenuname[]= &#123;<span class="string">&quot;自动换行(W)&quot;</span>,<span class="string">&quot;字体(F)&quot;</span>&#125;;<span class="comment">//格式</span></span><br><span class="line"><span class="comment">//字体</span></span><br><span class="line">ButtonGroup bg;</span><br><span class="line">JRadioButtonMenuItem fontbody[]=<span class="keyword">new</span> JRadioButtonMenuItem[<span class="number">4</span>]; <span class="comment">//单选字体   三级菜单</span></span><br><span class="line">String fontbodyname[]= &#123;<span class="string">&quot;黑体&quot;</span>,<span class="string">&quot;宋体&quot;</span>,<span class="string">&quot;楷体&quot;</span>,<span class="string">&quot;隶书&quot;</span>&#125;; <span class="comment">//字体</span></span><br><span class="line"><span class="comment">//查看</span></span><br><span class="line">JMenuItem lookmenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">2</span>];</span><br><span class="line">String lookname[]= &#123;<span class="string">&quot;缩放(Z)&quot;</span>,<span class="string">&quot;状态栏(S)&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//帮助</span></span><br><span class="line">JMenuItem helpmenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">3</span>];</span><br><span class="line">String helpname[]= &#123;<span class="string">&quot;查看帮助(H)&quot;</span>,<span class="string">&quot;发送反馈(F)&quot;</span>,<span class="string">&quot;关于记事本&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//工具栏</span></span><br><span class="line">JToolBar tb;</span><br><span class="line">JButton Toolbu[]=<span class="keyword">new</span> JButton[<span class="number">7</span>];</span><br><span class="line">String Toolname[]= &#123;<span class="string">&quot;新建&quot;</span>,<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;保存&quot;</span>,<span class="string">&quot;剪切&quot;</span>,<span class="string">&quot;复制&quot;</span>,<span class="string">&quot;粘贴&quot;</span>,<span class="string">&quot;字体&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//文本域</span></span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="comment">//弹出菜单</span></span><br><span class="line">JPopupMenu tm;<span class="comment">//弹出菜单</span></span><br><span class="line">JMenuItem PopumenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">4</span>];<span class="comment">//弹出</span></span><br><span class="line">String popname[]= &#123;<span class="string">&quot;全选&quot;</span>,<span class="string">&quot;复制&quot;</span>,<span class="string">&quot;粘贴&quot;</span>,<span class="string">&quot;剪切&quot;</span>&#125;;  <span class="comment">//弹出窗口</span></span><br><span class="line"><span class="keyword">public</span> 记事本作业版() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;新建文本文档-记事本&quot;</span>);</span><br><span class="line">f.setIconImage(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;Image/记事本.png&quot;</span>).getImage());</span><br><span class="line">cd=<span class="keyword">new</span> JMenuBar();<span class="comment">//工具条</span></span><br><span class="line"><span class="comment">//五个主菜单</span></span><br><span class="line">filecd=<span class="keyword">new</span> JMenu(<span class="string">&quot;文件(F)&quot;</span>);</span><br><span class="line">filecd.setMnemonic(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">editcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;编辑(E)&quot;</span>);</span><br><span class="line">editcd.setMnemonic(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">fontcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;格式(O)&quot;</span>);</span><br><span class="line">fontcd.setMnemonic(<span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">lookcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;查看(V)&quot;</span>);</span><br><span class="line">lookcd.setMnemonic(<span class="string">&#x27;V&#x27;</span>);</span><br><span class="line">helpcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;帮助(H)&quot;</span>);</span><br><span class="line">helpcd.setMnemonic(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">cd.add(filecd);</span><br><span class="line">cd.add(editcd);</span><br><span class="line">cd.add(fontcd);</span><br><span class="line">cd.add(lookcd);</span><br><span class="line">cd.add(helpcd);</span><br><span class="line">f.setJMenuBar(cd);</span><br><span class="line"><span class="comment">//文件添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;filemenuname.length;i++) &#123;</span><br><span class="line">filemenuItem[i]=<span class="keyword">new</span> JMenuItem(filemenuname[i]);<span class="comment">//每一个菜单项加名字</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">filecd.addSeparator();</span><br><span class="line">filecd.add(filemenuItem[i]);<span class="comment">//都加到文件主菜单上</span></span><br><span class="line">filemenuItem[i].addActionListener(<span class="keyword">this</span>);<span class="comment">//都加监听</span></span><br><span class="line">&#125;</span><br><span class="line">filemenuItem[<span class="number">1</span>].setEnabled(<span class="keyword">false</span>);<span class="comment">//新窗口</span></span><br><span class="line">filemenuItem[<span class="number">4</span>].setEnabled(<span class="keyword">false</span>);<span class="comment">//另存为</span></span><br><span class="line">filemenuItem[<span class="number">5</span>].setEnabled(<span class="keyword">false</span>);  <span class="comment">//页面设置</span></span><br><span class="line">filemenuItem[<span class="number">6</span>].setEnabled(<span class="keyword">false</span>);  <span class="comment">//打印</span></span><br><span class="line">filemenuItem[<span class="number">0</span>].setMnemonic(<span class="string">&#x27;N&#x27;</span>);</span><br><span class="line">filemenuItem[<span class="number">2</span>].setMnemonic(<span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">filemenuItem[<span class="number">3</span>].setMnemonic(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">filemenuItem[<span class="number">0</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,InputEvent.CTRL_MASK));</span><br><span class="line">filemenuItem[<span class="number">2</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));</span><br><span class="line">filemenuItem[<span class="number">3</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));</span><br><span class="line">filemenuItem[<span class="number">7</span>].setMnemonic(<span class="string">&#x27;X&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编辑添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;editmenuname.length;i++) &#123;</span><br><span class="line">editmenuItem[i]=<span class="keyword">new</span> JMenuItem(editmenuname[i]);<span class="comment">//加名字</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">editcd.addSeparator();</span><br><span class="line">editcd.add(editmenuItem[i]);</span><br><span class="line">editmenuItem[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">editmenuItem[<span class="number">0</span>].setEnabled(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++) &#123;</span><br><span class="line">editmenuItem[i].setEnabled(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">editmenuItem[<span class="number">1</span>].setMnemonic(<span class="string">&#x27;T&#x27;</span>); <span class="comment">//剪切</span></span><br><span class="line">editmenuItem[<span class="number">1</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">2</span>].setMnemonic(<span class="string">&#x27;C&#x27;</span>); <span class="comment">//复制</span></span><br><span class="line">editmenuItem[<span class="number">2</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">3</span>].setMnemonic(<span class="string">&#x27;V&#x27;</span>); <span class="comment">//粘贴</span></span><br><span class="line">editmenuItem[<span class="number">3</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">11</span>].setMnemonic(<span class="string">&#x27;A&#x27;</span>); <span class="comment">//全选</span></span><br><span class="line">editmenuItem[<span class="number">11</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">12</span>].setMnemonic(<span class="string">&#x27;D&#x27;</span>);  <span class="comment">//时间</span></span><br><span class="line">editmenuItem[<span class="number">12</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5,InputEvent.CTRL_MASK));</span><br><span class="line"><span class="comment">//格式添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;formatmenuname.length;i++) &#123;</span><br><span class="line"> stylemenuItem[i]=<span class="keyword">new</span> JMenu(formatmenuname[i]);</span><br><span class="line"> <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line"> fontcd.addSeparator();</span><br><span class="line"> fontcd.add(stylemenuItem[i]);</span><br><span class="line">&#125;</span><br><span class="line">stylemenuItem[<span class="number">0</span>].setMnemonic(<span class="string">&#x27;W&#x27;</span>);</span><br><span class="line">stylemenuItem[<span class="number">0</span>].setEnabled(<span class="keyword">false</span>);</span><br><span class="line">stylemenuItem[<span class="number">1</span>].setMnemonic(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line"><span class="comment">//加字体</span></span><br><span class="line">bg=<span class="keyword">new</span> ButtonGroup();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fontbodyname.length;i++) &#123;</span><br><span class="line">fontbody[i]=<span class="keyword">new</span> JRadioButtonMenuItem(fontbodyname[i]);<span class="comment">//4个字体 加上名字</span></span><br><span class="line">bg.add(fontbody[i]);<span class="comment">//添加到按键组 实现单选</span></span><br><span class="line">stylemenuItem[<span class="number">1</span>].add(fontbody[i]);<span class="comment">//把4个字体文字添加到字体副菜单</span></span><br><span class="line">fontbody[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; lookname.length;i++) &#123;</span><br><span class="line">lookmenuItem[i]=<span class="keyword">new</span> JMenuItem(lookname[i]);</span><br><span class="line">lookmenuItem[i].setEnabled(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">lookcd.addSeparator();</span><br><span class="line">lookcd.add(lookmenuItem[i]);</span><br><span class="line">&#125;</span><br><span class="line">lookmenuItem[<span class="number">0</span>].setMnemonic(<span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">lookmenuItem[<span class="number">1</span>].setMnemonic(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line"><span class="comment">//帮助添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;helpname.length;i++) &#123;</span><br><span class="line">helpmenuItem[i]=<span class="keyword">new</span> JMenuItem(helpname[i]);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>||i==<span class="number">2</span>)</span><br><span class="line">helpcd.addSeparator();</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>||i==<span class="number">1</span>)</span><br><span class="line">helpmenuItem[i].setEnabled(<span class="keyword">false</span>);</span><br><span class="line">helpcd.add(helpmenuItem[i]);</span><br><span class="line">&#125;</span><br><span class="line">helpmenuItem[<span class="number">2</span>].addActionListener(<span class="keyword">new</span> CreatNewWindos());<span class="comment">//关于记事本</span></span><br><span class="line"><span class="comment">//文本域设置</span></span><br><span class="line">t=<span class="keyword">new</span> JTextArea();</span><br><span class="line">t.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.PLAIN,<span class="number">20</span>));</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);  <span class="comment">//文本域加滚动</span></span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line"><span class="comment">//弹出菜单</span></span><br><span class="line">tm=<span class="keyword">new</span> JPopupMenu();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;popname.length;i++) &#123;</span><br><span class="line">PopumenuItem[i]=<span class="keyword">new</span> JMenuItem(popname[i]);<span class="comment">//名字</span></span><br><span class="line">PopumenuItem[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">tm.addSeparator(); <span class="comment">//加分隔符</span></span><br><span class="line">tm.add(PopumenuItem[i]);<span class="comment">//加到弹出菜单上</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">t.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.isPopupTrigger())</span><br><span class="line">tm.show(e.getComponent(),e.getX(),e.getY());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">String Tooltext[]= &#123;<span class="string">&quot;新建&quot;</span>,<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;保存&quot;</span>,<span class="string">&quot;剪切&quot;</span>,<span class="string">&quot;复制&quot;</span>,<span class="string">&quot;粘贴&quot;</span>,<span class="string">&quot;字体&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//工具栏设置</span></span><br><span class="line">tb=<span class="keyword">new</span> JToolBar();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Toolname.length;i++) &#123;</span><br><span class="line">Toolbu[i]=<span class="keyword">new</span> JButton(Toolname[i]);<span class="comment">//按键加图片</span></span><br><span class="line">Toolbu[i].setToolTipText(Tooltext[i]);<span class="comment">//鼠标指向的时候</span></span><br><span class="line">Toolbu[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));<span class="comment">//添加一个手的样子 提示用户可以点击</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>||i==<span class="number">6</span>)</span><br><span class="line">tb.addSeparator(<span class="keyword">new</span> Dimension(<span class="number">20</span>,<span class="number">0</span>));<span class="comment">//分隔符</span></span><br><span class="line">tb.add(Toolbu[i]);<span class="comment">//加到工具栏</span></span><br><span class="line">Toolbu[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.add(tb,BorderLayout.NORTH);<span class="comment">//工具栏设置到北面</span></span><br><span class="line">tb.setVisible(<span class="keyword">true</span>);</span><br><span class="line">f.setSize(<span class="number">800</span>,<span class="number">600</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">true</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关于记事本的弹出窗口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatNewWindos</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存</span></span><br><span class="line">JFrame F=<span class="keyword">new</span> JFrame(<span class="string">&quot;关于记事本&quot;</span>);</span><br><span class="line">JLabel l=<span class="keyword">new</span> JLabel(<span class="string">&quot;开发者:18软件工程三班李振业&quot;</span>+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;2019.10.26&quot;</span>);</span><br><span class="line">l.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">l.setForeground(Color.GRAY);</span><br><span class="line">F.add(l);</span><br><span class="line">F.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">F.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">F.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 记事本作业版();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"> Object event=e.getSource(); <span class="comment">//取按键变量</span></span><br><span class="line"> <span class="comment">/***新建***/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">0</span>]||event==Toolbu[<span class="number">0</span>]) &#123;</span><br><span class="line"> t.setText(<span class="string">&quot;&quot;</span>); <span class="comment">//清空</span></span><br><span class="line"> f.setTitle(<span class="string">&quot;新建文本文档-记事本&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/***退出***/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">7</span>]) &#123;</span><br><span class="line"> System.exit(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/***打开***/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">2</span>]||event==Toolbu[<span class="number">1</span>]) &#123;</span><br><span class="line"> JFileChooser  filechoose=<span class="keyword">new</span> JFileChooser();<span class="comment">//弹出一个窗口</span></span><br><span class="line"> filechoose.setDialogTitle(<span class="string">&quot;文件打开&quot;</span>);<span class="comment">//显示弹开窗口的标题</span></span><br><span class="line"> filechoose.showOpenDialog(<span class="keyword">null</span>);<span class="comment">//ShowOpen 改变按钮的显示为打开</span></span><br><span class="line"> filechoose.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> String open_filepath=filechoose.getSelectedFile().getAbsolutePath();</span><br><span class="line"><span class="comment">//获取此文件的绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">File open_file=<span class="keyword">new</span> File(open_filepath);<span class="comment">//根据路径创建文件</span></span><br><span class="line">FileReader fr=<span class="keyword">new</span> FileReader(open_file); <span class="comment">//读取流</span></span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(fr); <span class="comment">//缓存流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> byt[]=<span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>)open_file.length()]; <span class="comment">//转为字节流</span></span><br><span class="line"><span class="keyword">int</span> content=br.read(byt);  <span class="comment">//读取内容</span></span><br><span class="line">f.setTitle(open_file.getName());  <span class="comment">//窗口改变名字</span></span><br><span class="line">t.append(<span class="keyword">new</span> String(byt,<span class="number">0</span>,content));<span class="comment">//文本域append追加显示文字</span></span><br><span class="line">fr.close();<span class="comment">//关闭流</span></span><br><span class="line"> &#125;<span class="keyword">catch</span>(Exception e1) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;没有打开文件&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/***保存**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">3</span>]||event==Toolbu[<span class="number">2</span>]) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"> JFileChooser  filechoose=<span class="keyword">new</span> JFileChooser();<span class="comment">//弹出一个窗口</span></span><br><span class="line"> filechoose.setDialogTitle(<span class="string">&quot;另存为&quot;</span>);<span class="comment">//显示弹开窗口的标题</span></span><br><span class="line"> filechoose.showSaveDialog(<span class="keyword">null</span>);  <span class="comment">//ShowSava 改变按钮的显示为保存</span></span><br><span class="line"> filechoose.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> String save_filepath=filechoose.getSelectedFile().getAbsolutePath();</span><br><span class="line"><span class="comment">//获取此文件的绝对路径</span></span><br><span class="line">  </span><br><span class="line">  File save_file=<span class="keyword">new</span> File(save_filepath);</span><br><span class="line">  FileWriter fw=<span class="keyword">new</span> FileWriter(save_file);<span class="comment">//写入流</span></span><br><span class="line">  BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(fw); <span class="comment">//缓存流</span></span><br><span class="line">  bw.write(t.getText());<span class="comment">//文本域的内容写入文件</span></span><br><span class="line">  bw.close();</span><br><span class="line">  fw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/***全选**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==editmenuItem[<span class="number">11</span>]||event==PopumenuItem[<span class="number">0</span>]) &#123;</span><br><span class="line"> t.selectAll();<span class="comment">//选定指定的开始和结束位置之间的文本。</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/***时间日期**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==editmenuItem[<span class="number">12</span>]) &#123;</span><br><span class="line"> Date dt=<span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat time=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss E&quot;</span>);</span><br><span class="line">t.append(time.format(dt));<span class="comment">//文本域append追加显示文字</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/***字体**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="comment">//黑体</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">0</span>]) &#123;</span><br><span class="line">  Font old_font=t.getFont();</span><br><span class="line">  Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;黑体&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line">  t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//宋体</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">1</span>]) &#123;</span><br><span class="line"> Font old_font=t.getFont();</span><br><span class="line"> Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line"> t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//楷体</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">2</span>]) &#123;</span><br><span class="line"> Font old_font=t.getFont();</span><br><span class="line"> Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line"> t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//隶书</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">3</span>]) &#123;</span><br><span class="line"> Font old_font=t.getFont();</span><br><span class="line"> Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;隶书&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line"> t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//字体窗口</span></span><br><span class="line"> <span class="keyword">if</span>(event==Toolbu[<span class="number">6</span>]) &#123;</span><br><span class="line"> <span class="keyword">new</span> 字体窗口();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/4897c94084ba1608179813a5c5aab115.png"></p><h2 id="自动弹窗"><a href="#自动弹窗" class="headerlink" title="自动弹窗"></a>自动弹窗</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 自动弹窗;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">/*1.JOptionPane.showMessageDialog(组件, “信息的弹框”);</span></span><br><span class="line"><span class="comment"> * showMessageDialog(Component parentComponent, Object message, String title, int messageType)</span></span><br><span class="line"><span class="comment"> *2. JOptionPane.showMessageDialog(null, “信息的弹框”, “窗口名字”, 默认或者风格);</span></span><br><span class="line"><span class="comment"> *默认或者风格种类: </span></span><br><span class="line"><span class="comment"> *1.参数为1  默认</span></span><br><span class="line"><span class="comment"> *2.参数为-1  无提示类型(图标)</span></span><br><span class="line"><span class="comment"> *3.参数为0   含义为错误(出现错误图标)</span></span><br><span class="line"><span class="comment"> *4.参数为2   含义为警告(出现感叹号图标)</span></span><br><span class="line"><span class="comment"> *5.参数为3  含义为问题(出现问题图标)</span></span><br><span class="line"><span class="comment"> *3.showMessageDialog(Component parentComponent, Object message, String title, int messageType, Icon icon)</span></span><br><span class="line"><span class="comment"> *定义图标，加载图片的图标，可以帮助用户识别正在显示消息的种类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">showMessageDialog</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">ImageIcon img=<span class="keyword">new</span> ImageIcon(<span class="string">&quot;Image/qq图标.jpg&quot;</span>);</span><br><span class="line">JButton b1,b2,b3,b4,b5,b6;<span class="comment">//默认  不带图标 警告 错误 问题 图标</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">showMessageDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;默认&quot;</span>);</span><br><span class="line">b1.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;无图标&quot;</span>);</span><br><span class="line">b2.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">b3.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b4=<span class="keyword">new</span> JButton(<span class="string">&quot;警告&quot;</span>);</span><br><span class="line">b4.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b5=<span class="keyword">new</span> JButton(<span class="string">&quot;问题&quot;</span>);</span><br><span class="line">b5.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b6=<span class="keyword">new</span> JButton(<span class="string">&quot;图标&quot;</span>);</span><br><span class="line">b6.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">p.add(b1);</span><br><span class="line">p.add(b2);</span><br><span class="line">p.add(b3);</span><br><span class="line">p.add(b4);</span><br><span class="line">p.add(b5);</span><br><span class="line">p.add(b6);</span><br><span class="line">f.add(p);</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">    <span class="keyword">new</span> showMessageDialog();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String event=e.getActionCommand();</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;默认&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;默认&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;无图标&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p,<span class="string">&quot;无图标&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;错误&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p,<span class="string">&quot;错误&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;警告&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;警告&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;问题&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;问题&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">3</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图标&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;问题&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">3</span>,img);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件选择器"><a href="#文件选择器" class="headerlink" title="文件选择器"></a>文件选择器</h2><h3 id="文件选择对话框"><a href="#文件选择对话框" class="headerlink" title="文件选择对话框"></a>文件选择对话框</h3><p><code>JFileChooser</code>类提供了一个供用户<code>选择文件</code>的对话框。利用该类创建文件选择对话框以及获取用户选择文件的基本步骤如下：<br>（1）创建一个JFileChooser类的对象。<br>（2）默认情况下每次只能选择一个文件，如果希望允许同时选择多个文件，可以通过调用方法<code>setMultiSelectionEnabled(boolean b)</code>设置，将入口参数设为true即表示允许多选。<br>（3）默认情况下只允许选择文件，如果希望允许选择文件夹，可以通过调用方法<code>setFileSelection- Mode(int mode)</code>设置，入口参数可选的静态常量有<code>FILES_ONLY</code>（只允许选择文件）、<code>DIRECTORIES_ ONLY</code>（只允许选择路径）和<code>FILES_AND_DIRECTORIES</code>（均可选择）。<br>（4）如果只希望在对话框中列出指定类型的文件，可以调用<code>setFileFilter(FileFilter filter)</code>方法设置文件过滤器。<br>（5）设置完成后调用<code>showOpenDialog(Component parent)</code>方法显示对话框，该方法将返回一个int型值，用来判断用户是否选择了文件或路径。<br>（6）如果用户选择了文件或路径，可以通过方法<code>getSelectedFile()</code>或<code>getSelectedFiles()</code>获得，方法getSelectedFile()返回的是File对象，方法getSelectedFiles()返回的是File型数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SWng_Menu;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 文件选择器 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JButton b;</span><br><span class="line">JTextField t;</span><br><span class="line">JPanel p;</span><br><span class="line"><span class="keyword">public</span> 文件选择器() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;文件选择器&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;文件:&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">JFileChooser wjchoose=<span class="keyword">new</span> JFileChooser();<span class="comment">//创建文件选择器</span></span><br><span class="line"><span class="comment">//显示文件选择对话框</span></span><br><span class="line"><span class="keyword">int</span> i=wjchoose.showOpenDialog(f);</span><br><span class="line"><span class="comment">//判断用户单击的是否为“打开”按钮</span></span><br><span class="line"><span class="keyword">if</span>(i==JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line"><span class="comment">//获取选中的文件对象</span></span><br><span class="line">File selected=wjchoose.getSelectedFile();</span><br><span class="line"><span class="comment">//显示选中文件的名称</span></span><br><span class="line">t.setText(selected.getName());</span><br><span class="line"><span class="comment">//t.setText(selected.getAbsolutePath());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">p.add(l);</span><br><span class="line">p.add(t);</span><br><span class="line">p.add(b);</span><br><span class="line">f.add(p);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">100</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 文件选择器();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">![](https:<span class="comment">//cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/aa5cd174f9d7e46ed9e86f8d280df984.png)</span></span><br></pre></td></tr></table></figure><h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><p>如果只希望在对话框中列出指定类型的文件，可以调用<code>setFileFilter(FileFilter filter)</code>方法设置文件过滤器。</p><p>javax.swing.filechooser.FileFilter类是一个<code>抽象类</code>，该类的具体定义如下：<br>public abstract class FileFilter {<br>    public abstract boolean <code>accept</code>(File f);<br>    public abstract String <code>getDescription</code>();<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SWng_Menu;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileFilter;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 文件选择过滤器 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="keyword">public</span> 文件选择过滤器() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;文件选择过滤器&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;&lt;双击打开照片&gt;&quot;</span>,SwingConstants.CENTER);</span><br><span class="line">l.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line">JFileChooser wjchoose;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建文件选择对话框</span></span><br><span class="line">wjchoose=<span class="keyword">new</span> JFileChooser();</span><br><span class="line"><span class="comment">//设置文件过滤器，只列出JPG或GIF格式的图片</span></span><br><span class="line">FileFilter file=<span class="keyword">new</span> FileNameExtensionFilter(<span class="string">&quot;图像文件(JPG/GIF)&quot;</span>,<span class="string">&quot;JPG&quot;</span>,<span class="string">&quot;JPEG&quot;</span>,<span class="string">&quot;GIF&quot;</span>);</span><br><span class="line">wjchoose.setFileFilter(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.getClickCount()==<span class="number">2</span>) &#123;<span class="comment">//点击次数</span></span><br><span class="line"><span class="comment">//显示文件选择对话框</span></span><br><span class="line"><span class="keyword">int</span> i=wjchoose.showOpenDialog(f);</span><br><span class="line"><span class="comment">//判断用户点击的是否为“打开”按钮</span></span><br><span class="line"><span class="keyword">if</span>(i==JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line"><span class="comment">//获取选中的图片对象</span></span><br><span class="line">File selectedFile=wjchoose.getSelectedFile();</span><br><span class="line">ImageIcon img=<span class="keyword">new</span> ImageIcon(selectedFile.getAbsolutePath());  <span class="comment">//传入图片路径创建图片对象</span></span><br><span class="line">l.setIcon(img);</span><br><span class="line">f.setSize(img.getIconWidth(),img.getIconHeight());<span class="comment">//图片的大小显示窗口大小</span></span><br><span class="line">l.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">f.add(l);</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 文件选择过滤器();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/eef8a9afcfc97a8209e6d7323fdad6cd.png"></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="相关概念-1"><a href="#相关概念-1" class="headerlink" title="相关概念"></a>相关概念</h2><p>(1）程序（<code>Program</code>）<br>是为实现特定目标或解决特定问题而用计算机语言编写的命令序列的集合。<br>(2）进程（<code>Process</code>）<br>是程序关于某个数据集合上的一次运行活动（对应一个exe），是独立运行的程序(正在运行的程序)；<br>对应了从代码加载、执行至执行完毕的一个完整过程；<br>是系统进行<code>资源分配和调度的一个独立单位</code>。<br>(3线程（<code>Thread</code>）<br>是进程的一个<code>实体</code>，<code>CPU调度和分派的基本单位</code>，是比进程更小的、能独立运行的基本单位。<br>一个应用程序中有多条并发执行的线索，每条线索都被称为一个线程。各线程交替执行，彼此间可以通信。<br>(4）并发执行：多个程序块宏观上<code>同时运行</code>的现象。<br>(5）单线程程序<br>程序未派生出多线程，只有一个线程；<br>程序代码按照调用顺序依次往下执行，没有程序代码交替运行的现象。<br>(6）多线程程序<br>程序派生出了多线程；<br>多段程序代码交替运行的现象，每段程序对应一个线程，各线程相互独立，并发执行。<br>(7）主线程</p><ol><li>Java程序启动时，自动产生一个进程，默认创建一个线程，该线程通常称为程序的主线程，应用来运行main()方法中的代码。</li><li>每个java程序都至少有一个线程：主线程；</li><li>重要性<br>①主线程用来产生其他子线程；<br>②主线程执行各种关闭动作，通常最后完成执行。</li></ol><hr><p>线程与进程的关系</p><ul><li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</li><li>操作系统把资源分配给进程，而同一进程的所有线程共享该进程的所有资源。</li><li>进程是拥有资源的基本单位，而线程是作为CPU调度和分配的基本单位。</li></ul><h2 id="Thread类方法"><a href="#Thread类方法" class="headerlink" title="Thread类方法"></a>Thread类方法</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/7945308f2d2543f8b626a2eb215909ff.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/a3c859ad01beae24a0a7df3adcf5b2d2.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/d38a39dd58e6984a07178fdfb9e7020f.png"></p><hr><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>线程运行的代码由<code>run()</code>方法实现。<br>方法(1) ： 继承<code>Thread</code>类，重写run()方法。<br>方法(2) ：实现<code>Runnable</code>接口，重写run()方法</p><blockquote><p>说明：实现Runnable接口方式更优。<br>java类只参单一继承，但能实现多个接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法一：继承Thread类，复写run方法</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>)   定义线程最简单的办法：定义类继承Thread。</span><br><span class="line">例：<span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">……. <span class="comment">//要在线程中执行的代码;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">2</span>)   启动新线程：调用start()方法</span><br><span class="line">例：Mythread t=<span class="keyword">new</span> Mythread();</span><br><span class="line">t.start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法二：实现Runnable接口，复写run方法</span><br><span class="line">(<span class="number">1</span>) 定义实现Runnable接口的类，实现run()方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">/*实现该方法*/</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">2</span>) 以Runnable对象为参数创建线程。</span><br><span class="line">① 以Runnable对象传给Thread的构造函数，创建独立的Thread对象；</span><br><span class="line">② 调用线程的start( )方法启动线程。</span><br><span class="line">例：Thread t=<span class="keyword">new</span> Thread(<span class="keyword">new</span> myThread());</span><br><span class="line">t.start(); </span><br></pre></td></tr></table></figure><p>/<em>使用Thread类来创建线程并启动线程，然后要求在线程中进行每隔1秒钟打印一行数据，循环3次。</em>/<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/070caf8a6116d8bf0f235913ff0acbfe.png"></p><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>线程状态<br>(1)   <code>新建</code>：<code>新创建</code>的线程对象处于新建 状态，不能运行。<br>(2)  <code> 就绪(可运行)</code><br>线程对象调用<code>start()</code>方法进入<code>就绪状态</code>，进入<code>线程队列</code>排队，此时具备了<code>运行条件</code>，一旦轮到CPU，就可脱离创建它的主线程独立开始自己的生命周期。<br>(3)   <code>运行</code><br>就绪线程<code>获得CPU使用权</code>，进入<code>运行状态</code>，自动调用<code>run()</code>方法，从第一句代码开始运行。</p><blockquote><p>一旦线程进入可执行状态，它就会在就绪与运行状态下转换，同时也有可能进入等待、休眠、阻塞、或死亡状态：</p></blockquote><p>(4) <code>等待</code><br>当处于运行状态的线程调用Thread类中的<code>wait</code>方法时，该线程便进入<code>等待状态</code>。<br>进入等待状态的线程必须调用Thread类中的<code>notify</code>方法才能被<code>唤醒</code>，而<code>notifyAll</code>方法是将所有处于等待状态的线程唤醒。<br>(5)   <code>休眠</code><br>当线程调用Thread类中的<code>sleep</code>方法时，则会进入<code>休眠状态</code>。<br>(6)   <code>阻塞(中断)</code><br>正在执行的线程如果发出输入输出请求，则不能继续执行，则进入<code>阻塞状态</code>。<br>只有引起阻塞的原因消失（如，输入输出结束），线程才可以继续进入就绪状态等待CPU处理。<br>(7)   <code>死亡</code><br>线程完成了全部工作（即执行完了run()方法）、或提前被强制终止了，就进入死亡状态。<br>处于死亡状态的线程<code>不具有继续执行的能力</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/518e10c11f6695812bc715c843f22c00.png"></p><h2 id="线程的调度及优先级"><a href="#线程的调度及优先级" class="headerlink" title="线程的调度及优先级"></a>线程的调度及优先级</h2><p><code>线程的调度</code>：<br>Java<code>虚拟机</code>为程序中的每个线程<code>分配CPU使用权</code>的特定机制。</p><hr><p><code>线程的调度模型</code>:<br>(1)  分时调度模型<br>所有线程<code>轮流获得CPU使用权</code>，<code>平均分配</code>每个线程占用的CPU时间片。<br>(2)   抢占式调度模型<br>让<code>可运行队列</code>中<code>优先级高</code>的线程<code>优先占用CPU</code>，<code>优先级相同</code>的线程<code>随机选择</code>一个线程占用CPU。</p><hr><p>线程优先级(priority)：<br>(1)   作用<br>将<code>线程的重要程度</code>告诉<code>线程调度机制</code>。<br>(2)  Thread类中用常量定义了java线程的优先级<br>① <code>NORM</code>_PRIORITY：值为5<br>② <code>MAX</code>_PRIORITY：值为10<br>③ <code>MIN</code>_PRIORITY：值为1 。<br>与优先级相关的方法：<br>① final void <code>setPriority</code> ( int newp)<br><code>修改</code>线程的<code>当前优先级</code><br>②<code>final int </code>getPriority<code>()</code>返回<code>线程的</code>优先级`<br>根据上例加入线程优先级设置，要求线程1的优先级最高，线程2的优先级最低。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/1e54a29fcb4a00a830fcd7061151fb45.png"></p><h2 id="线程的操作"><a href="#线程的操作" class="headerlink" title="线程的操作"></a>线程的操作</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>(1)格式：sleep(  long )<br>说明：参数为<code>毫秒</code>。<br>(2) 功能：<br><code>暂停</code>正在执行的<code>线程</code>，将CPU让给其他线程。<br>(3) 注意事项：<br>抛出<code>InterruptedException</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序的睡眠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xc</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">//不可以用Throws 抛出异常  继承和实现接口都不能抛</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);<span class="comment">//1000毫秒=1s  睡眠过程中</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 多线程1 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">xc c=<span class="keyword">new</span> xc();</span><br><span class="line"></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(c);</span><br><span class="line">t.setName(<span class="string">&quot;倒计时&quot;</span>);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h3><p>(1) 格式：yield(  )<br>(2) 功能：<br><code>暂停</code>正在执行的线程，执行<code>其他线程</code>。<br>(3)  yield()与sleep() ：<br>① 共同点：暂停正在运行的线程；<br>② 不同点：<br>yield()<code>不阻塞线程</code>，只将线程转换到就绪状态，让系统重新调度一次；<br>sleep() 线程会进入休眠状态，休眠一段时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程的让步</span></span><br><span class="line"><span class="comment">//应用遇到某些条件时，这件事暂时不做，先其他的做</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xc4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>) &#123;</span><br><span class="line">Thread.yield(); <span class="comment">//线程不执行 当i=5 线程分给其他线程   其他线程执行到满足条件 在让步 让步</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 多线程2 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">Xc4 xc=<span class="keyword">new</span> Xc4();</span><br><span class="line"></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(xc);</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(xc);</span><br><span class="line"></span><br><span class="line">t.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">    t1.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    t.start();</span><br><span class="line">    t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>(1) 格式：<br>① join( )<br>② join( long millis )<br>③ join( long millis, int nanos)<br>(2) 功能：<br><code>等待</code>线程终止，<code>时间最长为</code>millis毫秒+nanos纳秒。</p><blockquote><p>说明：<br>当在<code>某个线程中</code>调用<code>其他线程的join()方法时</code>，调用的线程将被<code>阻塞</code>，直到<code>被join()方法加入的线程执行完成后</code>才会继续运行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*在项目中创建JoinTest类，该类继承了Jframe类。该实例包括两个进度条，进度条的进度由线程来控制，通过使用join方法使上面的进度条必须等待下面的进度条完成后才可以继续。*/</span></span><br><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Thread t1;<span class="comment">//定义两个线程</span></span><br><span class="line"><span class="keyword">private</span> Thread t2;</span><br><span class="line">JFrame f;</span><br><span class="line">JProgressBar pb1; <span class="comment">//进度条1</span></span><br><span class="line">JProgressBar pb2; <span class="comment">//进度条2</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JoinTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">pb1=<span class="keyword">new</span> JProgressBar();</span><br><span class="line">pb2=<span class="keyword">new</span> JProgressBar();</span><br><span class="line">f.add(pb1,BorderLayout.NORTH);</span><br><span class="line">f.add(pb2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">pb1.setStringPainted(<span class="keyword">true</span>);  <span class="comment">//显示数字字符</span></span><br><span class="line">pb2.setStringPainted(<span class="keyword">true</span>);</span><br><span class="line">f.setSize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用匿名内部类形式初始化Thread实例</span></span><br><span class="line">t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  <span class="comment">//重写run方法</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">pb1.setValue(++count);  <span class="comment">//设置进度条的当前值</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);  <span class="comment">//使线程1休眠</span></span><br><span class="line"></span><br><span class="line">t2.join();         <span class="comment">//线程2插队</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start(); <span class="comment">//启动线程1 调用 run方法</span></span><br><span class="line"></span><br><span class="line">t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">pb2.setValue(++count);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">100</span>)  <span class="comment">//当增长为100时跳出</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t2.start();  <span class="comment">//启动线程2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">JoinTest br=<span class="keyword">new</span> JoinTest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/a0be3fd709f15b64ba04926c3daf7aa4.png"></p><h2 id="多线程的同步"><a href="#多线程的同步" class="headerlink" title="多线程的同步"></a>多线程的同步</h2><p>线程的同步：<code>用以解决多个线程同时访问同一个资源！</code></p><h3 id="资源共享冲突"><a href="#资源共享冲突" class="headerlink" title="资源共享冲突"></a>资源共享冲突</h3><p><code>资源共享的冲突</code>:<br>(1)  资源冲突：多个线程<code>同时访问</code>一个资源所导致<br>例：同时访问一个变量；<br>例：同时入往一台打印机上输出。<br>(2)   并发程序要处理的核心问题：<code>资源共享问题</code>。<br>(3)   在多线程环境下，必须<code>防止</code>两个线程<code>同时访问</code>同一个资源。<br><code>资源共享冲突的解决思路</code>:<br>(1)  在线程运行时给<code>资源上锁</code><br><code>第一个</code>访问这个资源的线程给它上锁，在解锁之前，其它线程不能访问这个资源；<code>第二个</code>线程给这个资源上锁，……，如此循环。<br>(2)  采用<code>串行访问方式</code><br>保证同一时刻<code>只有一个线程</code>能够访问这个共享资源。</p><hr><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>java同步机制： <code>synchronized</code><br>(1)  每个对象都有一个<code>锁</code>，在执行对象的<code>同步代码（需要共享资源的代码）</code>时，该对象会被<code>锁住</code>。<br>(2)   所有线程的<code>同步代码</code>都会<code>共享同一个锁</code>，该锁会<code>防止</code>多个线程<code>同时读写</code>共用的内存。<br>(3)   只要有一个线程还在<code>调用synchronized</code>方法，其他线程就<code>不允许访问</code>所有的synchronized方法，当线程<code>离开synchronized</code>方法，对象就被<code>解锁</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**********同步代码块格式*******</span><br><span class="line"><span class="keyword">synchronized</span> ( lock )&#123;</span><br><span class="line">     共享资源代码块</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(1) <code> lock</code>：锁对象(可为<code>任意对象</code>)。<br>① 未锁值：1 (<code>默认</code>)；<br>②  锁定值 :  0。<br>(2)  线程执行同步代码块时，先检查<code>锁对象标志位</code>：<br>①<code>未锁</code>时执行同步代码块，同时<code>锁定</code>标志位；<br>② <code>锁定</code>时其它的同步线程发生<code>阻塞</code>，<code>等待</code>同步代码解锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**********同步方法格式********</span><br><span class="line"><span class="keyword">synchronized</span>  返回值类型  方法名( 参数列表  ) &#123; </span><br><span class="line">共享资源代码块</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line">返回值类型  方法名( 参数列表  )&#123;</span><br><span class="line">   <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; …… &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Che</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  chepiao=<span class="number">100</span>;  <span class="comment">//static 使多个线程共享100张车票</span></span><br><span class="line"><span class="comment">//static的主要作用在于创建独立于具体对象的域变量或者方法</span></span><br><span class="line"><span class="comment">//被static修饰的变量或者方法是独立于该类的任何对象，也就是说，这些变量和方法不属于任何一个实例对象，而是被类的实例对象所共享。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String a=<span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);<span class="comment">//字符串随意定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//synchronized的作用是让他所管辖的代码部分，要么全部执行完要么全部不执行</span></span><br><span class="line"><span class="keyword">synchronized</span>(a) &#123;<span class="comment">//既可修饰代码块，又可以修饰函数,修饰函数不需要字符串  public synchronized void run() 让函数执行完</span></span><br><span class="line"><span class="comment">//两个线程的a是线程自己的，并不是共有的  加public static变成公共的</span></span><br><span class="line"><span class="comment">//一次执行完</span></span><br><span class="line"><span class="keyword">if</span>(chepiao&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;个车站正在卖第&quot;</span>+(<span class="number">101</span>-chepiao)+<span class="string">&quot;张车票&quot;</span>);</span><br><span class="line">--chepiao;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">50</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 车票售票实例 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Che());</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Che());</span><br><span class="line"><span class="comment">//t.setName(&quot;上海1&quot;);</span></span><br><span class="line">t.start();</span><br><span class="line"><span class="comment">//t1.setName(&quot;长沙2&quot;);</span></span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/61b952d791d16151ac59dbcb54692fd5.png"></p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>(1)   <code>死锁</code>——两个线程彼此占据着对方需要的资源，并且等待着对方释放资源。<br>(2)   死锁是由于线程间相互<code>竞争资源</code>或<code>彼此通信</code>而产生的一种阻塞现象，若没有外力作用，都将无法推进下去。<br>(3)   <code>死锁线程</code>：永远在<code>相互等待</code>的线程。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/185cad336950888b8cc2d5db0a87d625.png"></p><h2 id="多线程通信"><a href="#多线程通信" class="headerlink" title="多线程通信"></a>多线程通信</h2><p>线程通信：<code>解决线程间的协同工作问题(彼此配合)</code><br><code>Object类</code>提供线程通信的方法<br>(1)  void <code>wait</code>()<br>使当前线程<code>放弃</code>同步锁并进入等待，直到其他线程进入此同步锁，并调用<code>notify()</code>或<code>notifyAll()</code>方法<code>唤醒</code>该线程为止。<br>(2)  void <code>notify</code>()<br><code>唤醒</code>此同步锁上等待的<code>第一个调用wait()</code>方法的线程。<br>(3)  void <code>notifyAll</code>()<br><code>唤醒</code>此同步锁上等待的<code>调用wait()方法的所有线程</code>。</p><hr><p>两个线程，假设分别为A和B，A线程用于“放入苹果”，而B线程用于“拿走苹果”；一次只能放一个；A线程放好后，就通知线程拿走；B拿到后，就通知A接着放；如果A线程没有放，则B线程不能拿。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/64ad35084e4274644237a8c986ed257b.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/9b2f85a1c095e428ad5b61ba07c38698.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/12920a0d89af7aed84eda0356667547c.png"></p><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/8a4039605c0e57c609f0d217f0bc9582.png"></p><h2 id="文件、File类、java-io包"><a href="#文件、File类、java-io包" class="headerlink" title="文件、File类、java.io包"></a>文件、File类、java.io包</h2><p><code>文件</code>可以认为是相关记录或存放在一起的数据的集合；<br>文件一般是存放在<code>磁盘上</code>的，例如：硬盘、光盘和软盘等。<br> <code>File文件类</code>提供了文件和目录管理的功能，主要包括：<br>1.文件及目录的创建；<br>2.文件名、文件大小、最后修改日期等文件属性的查询；<br>3.文件目录管理、文件夹创建等操作。<br>File类位于<code>java.io</code>包中。 </p><blockquote><p>注意，File类并<code>不能直接</code>对文件内容进行读/写操作，只能查看文件的<code>属性</code>。</p></blockquote><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>文件对象（即，File类对象）不但可以表示文件，还可以表示目录，在程序中一个File类对象可以代表一个文件或目录。<img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/af5d5b286e435e5e67d969bb564a808e.png"></p><ul><li>(1)文件路径的几种<code>表达形式</code>：<br>File f1 = new File( “c:/ java123/abc.txt”  );<br>File f1 = new File( “c:// java123// abc.txt”  );</li><li>(2)创建文件对象<code>并非创建文件本身</code>，而是创建一个File类的对象所具有的<code>存储空间</code>，为后续文件的管理、文件的读写做好<code>准备</code>。<br>File f1 = new File( “<code>c:/ java123/abc.txt</code>“  );<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建文件:</span><br><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/input.txt&quot;</span>); <span class="comment">//开辟存储空间</span></span><br><span class="line">f.createNewFile(); <span class="comment">//创建文件</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/fbfecaa09d430d7d914449d031a5a1ec.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/03b69db45e9355b0e740b6dcc6c003c6.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/4b576515f1602659c7062b7f3765bcbc.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/10aa88f9d02264d0bc46688121443ea5.png"></p><blockquote><p><code>FilenameFilter </code>： 是一个接口，该接口有唯一方法 boolean  accept(File dir, String name) 用于判断dir、name指定文件是否为需要类型。<br><code>只要创建一个类，实现此接口即可实现文件过滤功能</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">File newwj=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/a.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(newwj.exists()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">newwj.createNewFile();<span class="comment">//创建文件</span></span><br><span class="line">System.out.println(<span class="string">&quot;文件已创建&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;名称:&quot;</span>+newwj.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;绝对路径:&quot;</span>+newwj.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件父路径:&quot;</span>+newwj.getParent());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FilePath=<span class="string">&quot;c:/java123/媒体文件夹/图片.jpg&quot;</span>;</span><br><span class="line"><span class="comment">//private static final String FilePath=&quot;c:&quot;+File.pathSeparator+&quot;java123&quot;+File.pathSeparator+&quot;abc.txt&quot;;</span></span><br><span class="line"><span class="comment">//pathseparator 文件路径分隔符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//当前工程所在的根目录 new File(&quot;.&quot;)</span></span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">File wj=<span class="keyword">new</span> File(FilePath);</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="comment">//File wj=new File(&quot;c:/java123&quot;,&quot;abc.txt&quot;);</span></span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line"><span class="comment">//File dir=new File(&quot;c:/java123&quot;);</span></span><br><span class="line"><span class="comment">//File wj=new File(dir,&quot;abc.txt&quot;);</span></span><br><span class="line">System.out.println(<span class="string">&quot;文件或目录是否存在：&quot;</span>+wj.exists());</span><br><span class="line">System.out.println(<span class="string">&quot;是文件吗:&quot;</span>+wj.isFile());</span><br><span class="line">System.out.println(<span class="string">&quot;是目录吗:&quot;</span>+wj.isDirectory());</span><br><span class="line">System.out.println(<span class="string">&quot;名称:&quot;</span>+wj.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;绝对路径:&quot;</span>+wj.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件大小:&quot;</span>+wj.length());   <span class="comment">//文件的长度，以字节为单位</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否为可读:&quot;</span>+wj.canRead());</span><br><span class="line">System.out.println(<span class="string">&quot;是否被写入:&quot;</span>+wj.canWrite());</span><br><span class="line">System.out.println(<span class="string">&quot;文件名字:&quot;</span>+wj.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件父路径:&quot;</span>+wj.getParent());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sj=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">Date a=<span class="keyword">new</span> Date(wj.lastModified());</span><br><span class="line">System.out.println(<span class="string">&quot;最后修改日期:&quot;</span>+wj.lastModified()+<span class="string">&quot;  &quot;</span>+sj.format(a));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用createNewFile类创建文件</span></span><br><span class="line">File f1=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/新建文件.txt&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b= f1.createNewFile();</span><br><span class="line">System.out.println(<span class="string">&quot;创建文件成功:&quot;</span>+ b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用mkdir创建单级空文件夹     mkdir可以创建多级空文件夹，单级也行</span></span><br><span class="line">File f2=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/新建文件夹&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b1=f2.mkdir();</span><br><span class="line">System.out.println(<span class="string">&quot;创建文件夹成功:&quot;</span>+b1);</span><br><span class="line"><span class="comment">//多级</span></span><br><span class="line">File f3=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/新建多级文件夹/1/2/3&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b3=f3.mkdirs();</span><br><span class="line">System.out.println(<span class="string">&quot;创建多级文件夹成功:&quot;</span>+b3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//list 返回文件下所以文件 及名称  隐藏文件也可以查看</span></span><br><span class="line">File f4=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123&quot;</span>);</span><br><span class="line">String arr[]=f4.list();</span><br><span class="line"><span class="keyword">for</span>(String fileName:arr) &#123;</span><br><span class="line">System.out.println(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//listFiles</span></span><br><span class="line">File f5=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123&quot;</span>);</span><br><span class="line">File []  files=f5.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File f:files) &#123;</span><br><span class="line">System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用delete删除文件或文件夹</span></span><br><span class="line"><span class="comment">//文件夹中有内容 不会删除返回false    从硬盘中删除 不走回收站，谨慎</span></span><br><span class="line"><span class="comment">/*if(f1.exists()&amp;&amp;f1.isFile()) &#123;</span></span><br><span class="line"><span class="comment"> boolean b4=f1.delete();//文件删除</span></span><br><span class="line"><span class="comment">System.out.println(&quot;删除成功&quot;+b4);</span></span><br><span class="line"><span class="comment">&#125;  */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//列出指定目录下的所有java源文件和满足条件的文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileAccept</span> <span class="keyword">implements</span> <span class="title">FilenameFilter</span></span>&#123;</span><br><span class="line">String extName=<span class="string">&quot;&quot;</span>;</span><br><span class="line">FileAccept(String extName)&#123;  <span class="comment">//构造方法赋值过滤条件</span></span><br><span class="line"><span class="keyword">this</span>.extName=extName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(java.io.File file,String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fileName.endsWith(extName);<span class="comment">//过滤条件w</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">File dir=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123&quot;</span>);</span><br><span class="line">String[] fileNames=dir.list();<span class="comment">//返回目录dir中的文件和目录的名称所组成的字符串数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;所有文件数:&quot;</span>+fileNames.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileNames.length;i++) &#123;</span><br><span class="line">System.out.println(fileNames[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">FileAccept con=<span class="keyword">new</span> FileAccept(<span class="string">&quot;mp3&quot;</span>);<span class="comment">//过滤条件</span></span><br><span class="line">fileNames=dir.list(con);</span><br><span class="line">System.out.println(<span class="string">&quot;所有mp3文件:&quot;</span>+fileNames.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileNames.length;i++) &#123;</span><br><span class="line">System.out.println(fileNames[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">FileAccept con1=<span class="keyword">new</span> FileAccept(<span class="string">&quot;txt&quot;</span>);</span><br><span class="line">fileNames=dir.list(con1);</span><br><span class="line">System.out.println(<span class="string">&quot;所有txt文件:&quot;</span>+fileNames.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileNames.length;i++) &#123;</span><br><span class="line">System.out.println(fileNames[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h2><ul><li>File类不负责文件的读写。Java中文件读写是通过“<code>流</code>”的形式完成的。</li><li>流是一组<code>有序的数据序列</code>，也称“数据流”。</li><li>流是以<code>先进先出</code>的方式完成数据的<code>发送</code>和<code>接收</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/b68fbb79829d99edfafae2150fbb7ab9.png"></li><li>根据数据的流向不同，分为<code>输入流</code>和<code>输出流</code>，如果数据的流向是从<code>外设</code>读取到<code>内存</code>中的程序称为“<code>输入流</code>”（Input Stream） ，反之称为<code>输出流</code>（ Output Stream ）。输入流类名以<code>In</code>开始，输出流类名以<code>Out</code>开始。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/7412c898e8a7ca4e8e0af1bff9bb50cd.png"></li></ul><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><ul><li><p>按照数据处理的方式不同，流又可分为<code>字节流</code>、<code>字符流</code>。字节流类名以Stream结尾，字符流类名以Reader或Writer结尾。</p></li><li><p><code>字节流</code>是指8位的通用字节流，<code>以字节为基本单位处理</code>，适合处理二进制文件（音频文件、图片、歌曲等），对于字节流进行操作的类大部分继承于<code>InputStream</code>（输入字节流）类和<code>OutputStream</code>（输出字节流）类；</p></li><li><p><code>字符流</code>是指16位的Unicode字符流，<code>以字符（两个字节）为基本单位处理</code>，非常适合处理字符串和文本，对于字符流进行操作的类大部分继承于<code>Reader</code>（读取流）类和<code>Writer</code>（写入流）类。</p></li><li><p>字节流可用于任何类型的对象，包括二进制对象，而字符流<code>只能处理字符或者字符串</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/c9f3c95a98f01df15b9f7431ac4b02ec.png"></p></li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>字节流——适于读写<code>二进制文件</code>.<br><code>InputStream（字节输入流）</code>和<code>OutputStream（字节输出流）</code>是字节流的两个顶层父类，提供了输入流类与输出流类的通用API。 </p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p> InputStream是抽象类，所有字节输入流类都直接或间接继承此类。<br>字节输入流类很多，使用较多有3个：<code>FileInputStream</code>、<code>BufferedInputStream</code>和<code>DataInputStream </code><br>(1)<code>FileInputStream</code>（字节文件输入流）：此类用于<code>从本地文件</code>中<code>读取</code>内容。<br>(2)<code>BufferedInputStream</code>：此类本身带有一个<code>缓冲区</code>，在读取数据时，先放到缓冲区中，可以<code>减少对数据源的访问</code>，提高运行的效率。<br>(3)<code>DataInputStream</code>：此类提供一些基于<code>多字节读取方法</code>，从而可以读取基本数据类型的数据，如，readDouble()、readInt()<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/571782ec2fee591393127f2378722da2.png"></p><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p>OutputStream是抽象类，所有字节输出流类都直接或间接继承此类。<br>字节输出流类很多，使用较多有3个：<code>FileOutputStream</code>、<code>BufferedOutputStream</code>和<code>DataOutputStream </code><br>(1)<code>FileOutputStream</code>（字节文件输出流）：此类用于向<code>本地文件</code>中<code>写入</code>数据。<br>(2)<code>BufferedOutputStream</code>：此类本身带有一个缓冲区，在写取数据时，先放到缓冲区中，实现缓冲的数据流。<br>(3)<code>DataOutputStream(OutputStream out) </code>：创建一个新的数据输出流，将数据<code>写入指定的基础输出流</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/fad4c5c25c26799ebe9817ac3e5db6c0.png"></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流——适于读写<code>文本文件</code><br>Reader和Writer是java.io包中的两个字符流类的顶层抽象父类，定义了在I/O流中读写字符数据的通用API。<br>在Java中，字符采用是16位的Unicode字符编码。常见字符输入/输出流是由<code>Reader和Writer</code>抽象类派生出来的。处理数据时是以<code>字符</code>为基本单位的。</p><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p><code>字符输入流</code><br><code>FileReader</code>：用来读取字符文件的便捷类。<br><code>BufferedReader</code>类：是Reader类的子类，为Reader 对象添加<code>字符缓冲器</code>，为数据输入分配内存存储空间，存取数据更为有效。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/3deb370c77aca4d3b2451a6743bc91a0.png"></p><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><p><code>字符输出流</code><br>Writer写入字符类型<br>字符输出流类很多，使用较多的有：FileWriter、BufferedWriter<br>（1）<code>FileWriter</code>：用来写入<code>字符文件</code>的便捷类。FileWriter 用于写入字符流。要写入原始字节流。<br>（2）<code>BufferedWriter</code>：将文本写入<code>字符输出流</code>，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。除非要求提示输出，否则建议用 BufferedWriter 包装所有其 write() 操作可能开销很高的 Writer。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/d972f7dfe72a073d33c17d34c2728002.png"></p><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>使用FileInputStream类 读文件<br><code>FileInputStream</code>类称为<code>文件输入流</code>，继承于InputStream类，是进行文件读操作的最基本类；<br>它的作用是将<code>文件中的数据输入到内存</code>中，我们可以利用它来<code>读文件</code>；<br>由于它属于<code>字节流</code>，因此在读取Unicode字符（如中文）的文件时可能会出现问题。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/1a625dc3173a56c68d4b9c0c8298a581.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/e0f08cba2758d309112110e6e40e5ae3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream读取文件“c:\java123\test.txt”的内容，并输出到控制台。一次读1个字节。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/test.txt&quot;</span>);<span class="comment">//创建文件对象</span></span><br><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="comment">//使用文件对象创建文件输入流对象，相对于打开文件</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;file.length();i++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch=(<span class="keyword">char</span>)(fis.read()); <span class="comment">//循环读取字符</span></span><br><span class="line">System.out.println(ch);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">fis.close();<span class="comment">//关闭流</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件打开失败&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动创建C:/java123/test.txt文件，test.txt文件里内容为123；<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/7144ece395f8c7795269ab44245c9d2f.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream读取文件“c:\java123\test.txt”的内容，并输出到控制台。读到的数据存放到byte型数组中*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile1</span> </span>&#123;</span><br><span class="line">  <span class="comment">///文件读取 FileInputStream  read 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File wj=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/abc.txt&quot;</span>); <span class="comment">//创建文件对象</span></span><br><span class="line">FileInputStream f=<span class="keyword">new</span> FileInputStream(wj);</span><br><span class="line"><span class="comment">/*//单个字节的读取/*</span></span><br><span class="line"><span class="comment">for(int i=0;i&lt;wj.length();i++) &#123;</span></span><br><span class="line"><span class="comment">char ch=(char)f.read();</span></span><br><span class="line"><span class="comment">System.out.print(ch);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//多个字节读取 字节数组</span></span><br><span class="line"><span class="keyword">byte</span> buy[]=<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)(wj.length())];  <span class="comment">//根据文件字节长度创建字节数组</span></span><br><span class="line">f.read(buy); <span class="comment">//读取文件中的数据放入字节数组中 </span></span><br><span class="line">String str=<span class="keyword">new</span> String(buy);  <span class="comment">//字节转换成字符</span></span><br><span class="line">System.out.println(str);</span><br><span class="line">f.close();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException fnfe) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件打开失败&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>使用<code>FileOutputStream类</code> 写文件<br>FileOutputStream类称为<code>文件输出流</code>，继承于OutputStream类，是进行文件写操作的最基本类；<br>它的作用是将<code>内存中的数据输出到文件</code>中，我们可以利用它来写文件。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/df394541f9f115357ed9c4e700a538f7.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/9846114d1b058195361ff7883d1f4ee9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream写文件“c:\java123\test.txt”。一次写一个字节。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String str=<span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/test.txt&quot;</span>);<span class="comment">//创建文件对象</span></span><br><span class="line"><span class="comment">//通过文件对象创建文件输出流对象</span></span><br><span class="line"><span class="comment">//附加第二个参数true，指定进行文件追加，默认为不追加</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将逐个字符写入文件中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">fos.write(str.charAt(i)); <span class="comment">//charAt返回指定索引位置的char值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/384faf5dfbeeb82d396ff445ffc8908a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream写文件“c:\java123\test.txt”。一次写一个字节数组。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo2</span> </span>&#123;</span><br><span class="line">   <span class="comment">//在函数内部不进行异常处理，将异常抛出函数外部</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String str=<span class="string">&quot;I Love Java&quot;</span>;</span><br><span class="line"><span class="comment">//通过文件名创建文件输出流对象</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:/java123/test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span> buffer[]=str.getBytes(); <span class="comment">//将字符串转换为字节数组</span></span><br><span class="line"><span class="comment">//将字节数组中包含的数据一次性写入到文件中</span></span><br><span class="line">fos.write(buffer);</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/83356024587dea48c7a9098ef624855d.png"></p><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>FileInputStream类和FileOutputStream类是成对出现的，一个进行<code>输入（读文件</code>）操作，一个进行<code>输出（写文件）</code>操作；<br>由于采用<code>字节</code>方式进行数据传输，不必考虑数据的格式问题，这两个类对文件操作的效率较高；<br>可以使用这两个类完成复制文件的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//文件的复制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile7</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   File f=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/abc.txt&quot;</span>);</span><br><span class="line">       File destination =<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/abccopy.txt&quot;</span>);</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.创建文件 输入流从系统文件获取字节</span></span><br><span class="line">          FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">           <span class="comment">//2.创建文件输出流将数据写入系统文件</span></span><br><span class="line">          FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">           <span class="comment">///3.保存字节数g</span></span><br><span class="line">          System.out.println(<span class="string">&quot;文件长度:&quot;</span>+fis.available()); <span class="comment">//返回文件的大小2</span></span><br><span class="line">           <span class="comment">//4.输入流读取字节数，并保存到字节数组中</span></span><br><span class="line">          <span class="keyword">byte</span> []buy=<span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">           <span class="comment">//5.将字节数组写入目标文件中</span></span><br><span class="line">          fis.read(buy);</span><br><span class="line">          fos.write(buy);</span><br><span class="line">           System.out.println(<span class="string">&quot;成功复制文本&quot;</span>);</span><br><span class="line">           <span class="comment">//6.最后关闭输入输出流，释放连接资源</span></span><br><span class="line">           fis.close();</span><br><span class="line">           fos.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;FileNotFoundException&quot;</span>); </span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;IOException &quot;</span>); </span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="comment">//*****************图片的复制*****************</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/媒体文件夹/图片.jpg&quot;</span>);</span><br><span class="line">        File destination =<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/图片copy.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建文件 输入流从系统文件获取字节</span></span><br><span class="line">            FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//2.创建文件输出流将数据写入系统文件</span></span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小&quot;</span>+fis.available());</span><br><span class="line">            <span class="comment">///3.保存字节数</span></span><br><span class="line">            <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">            <span class="comment">//4.输入流读取字节数，并保存到字节数组中</span></span><br><span class="line">            fis.read(b);</span><br><span class="line">            <span class="comment">//5.将字节数组写入目标文件中</span></span><br><span class="line">            fos.write(b);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功复制图片&quot;</span>);</span><br><span class="line">            <span class="comment">//6.最后关闭输入输出流，释放连接资源</span></span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;FileNotFoundException&quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException &quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="comment">//*****************歌曲的复制*****************</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile9</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/媒体文件夹/歌曲.mp3&quot;</span>);</span><br><span class="line">        File destination =<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/歌曲copy.mp3&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建文件 输入流从系统文件获取字节</span></span><br><span class="line">            FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//2.创建文件输出流将数据写入系统文件</span></span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小&quot;</span>+fis.available());</span><br><span class="line">            <span class="comment">///3.保存字节数</span></span><br><span class="line">            <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">            <span class="comment">//4.输入流读取字节数，并保存到字节数组中</span></span><br><span class="line">            fis.read(b);</span><br><span class="line">            <span class="comment">//5.将字节数组写入目标文件中</span></span><br><span class="line">            fos.write(b);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功复制音频&quot;</span>);</span><br><span class="line">            <span class="comment">//6.最后关闭输入输出流，释放连接资源</span></span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;FileNotFoundException&quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException &quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ul><li><p>FileReader类称为<code>文件读取流</code>，允许以<code>字符流</code>的形式对文件进行读操作，其构造方法有3种重载方式，以下是常用的几种：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/e8353174a28576610e7c0c3c2a0f8515.png"></p></li><li><p>该类将从文件中逐个地读取字符，效率比较低下，因此一般将该类对象包装到缓冲流中进行操作。</p></li></ul><h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/63e32d99f9c91991e82f55ecc535a792.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**FileReader配合BufferedReader读文件“c:\java123\test.txt”。逐行读取数据，并在控制台显示。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile10</span> </span>&#123;</span><br><span class="line">   <span class="comment">//字符流读取 FileReader  中文</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/abc.txt&quot;</span>);</span><br><span class="line"><span class="comment">//通过文件对象创建文件读取流对象</span></span><br><span class="line">FileReader fr=<span class="keyword">new</span> FileReader(f);</span><br><span class="line"><span class="comment">//将文件读取流包装成缓冲读取流</span></span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">String str;</span><br><span class="line"><span class="keyword">while</span>((str=br.readLine())!=<span class="keyword">null</span>) &#123; <span class="comment">//逐行读取数据</span></span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">br.close();  <span class="comment">//关流要要反着关</span></span><br><span class="line">fr.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/8f995851dec92d11aa2d97e7be8fd18c.png"></p><blockquote><p>与FileReader类相似，FileWriter类同样需要使用缓冲流进行包装。</p></blockquote><h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/00a50ecad200819921dd90dbdf54f007.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*FileWriter配合BufferedWriter写文件“c:\java123\test3.txt”。逐行写数据。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//通过文件对象创建文件输出字符流对象</span></span><br><span class="line">FileWriter fw=<span class="keyword">new</span> FileWriter(f);</span><br><span class="line"><span class="comment">//将文件输出字符流包装成缓冲流</span></span><br><span class="line">BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">bw.write(<span class="string">&quot;大家好！&quot;</span>);</span><br><span class="line">bw.write(<span class="string">&quot;我正在学习java&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;请多多指教！&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;Luckybug@21cn.com&quot;</span>);</span><br><span class="line">bw.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/ce1f22b99abeffd321a8b4100f97ef38.png"></p><h2 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h2><p>控制台输入<code>System.in</code>实际上是一个<code>InputStream类</code>的对象；<br>System.in 的<code>read</code>方法可以从控制台接受输入，它只能以<code>字节</code>形式接收数据，并且一次只能接受一个字节，这使输入操作很不便；<br>必须将System.in进行处理，才可以顺利地从控制台接受输入，这将使用到:<br><code>InputStreamReader</code>类<br><code>BufferedReader</code>类.<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/ba8085bae22cac393f5d6245a0eb035a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsoleInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//将System.in转化为字符流对象</span></span><br><span class="line">InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line"><span class="comment">//用缓冲流包装</span></span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的姓名:&quot;</span>);</span><br><span class="line">String name=br.readLine();<span class="comment">//接受输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的年龄:&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> age=Integer.parseInt(br.readLine());<span class="comment">//接受输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;你的姓名:&quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;你的年龄:&quot;</span>+name);</span><br><span class="line">br.close();</span><br><span class="line">isr.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"> <span class="comment">/*                    通过控制台输入内容写入文件**/</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner sca=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//写文件</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入文件名：&quot;</span>);</span><br><span class="line">        String name=sca.next();</span><br><span class="line">        File file=<span class="keyword">new</span> File(name+<span class="string">&quot;.txt&quot;</span>);<span class="comment">//文件名        相对路径（项目名根目录下）</span></span><br><span class="line"><span class="comment">//      FileOutputStream fs=new FileOutputStream(file);                //如果文件存在 覆盖</span></span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);<span class="comment">//true表示追加，如果文件存在 向里面继续添加内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入写入的内容:&quot;</span>);</span><br><span class="line">        String str=sca.next();</span><br><span class="line">        <span class="keyword">byte</span> bytes[]=str.getBytes();         <span class="comment">//FileOutputStream 是基于字节流  把要写入的信息 保存到字节数组中</span></span><br><span class="line">        fos.write(bytes,<span class="number">0</span>,bytes.length);<span class="comment">//将字节数组中全部内容写到文件中   从0—数组的长度</span></span><br><span class="line">        fos.close();<span class="comment">//关闭流</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件写入成功！&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读文件</span></span><br><span class="line">        FileInputStream fis=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">byte</span> bt[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//1KB       每次最多读取的1KB  根据文件大小而定</span></span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((temp=fis.read(bt))!=-<span class="number">1</span>)&#123;    <span class="comment">//将数据保存到数组（缓冲区）中 并返回读取的字节数  -1表示读完了</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bt,<span class="number">0</span>,temp));<span class="comment">//输出数组中保存内容 按照每次读取的字节数</span></span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h1><h1 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h1><p>网络<br>(1) 概念：连接终端系统(主机)的<code>通信系统</code>。<br>(2) 功能：实现<code>资源共享、通信</code>。</p><ul><li>局域网（Local Area Network，LAN），就是同一区域内通过一定形式连接起来的计算机。</li><li>广域网（Wide Area Network，WAN），由LAN延伸到更大的范围。</li><li>因特网（Internet），由无数的LAN和WAN组成。</li><li><code>服务器</code>是指<code>提供信息的计算机或程序</code>，<code>客户机</code>是指<code>请求信息的计算机或程序</code>，而网络用于连接服务器与客户机，实现两者相互通信。<br>端口：区分应用程序，实现程序间的通信<blockquote><p>说明： 0～1023端口用于知名网络服务和应用，1024以上的端口用于用户的普通应用程序。</p></blockquote></li></ul><h1 id="Applet"><a href="#Applet" class="headerlink" title="Applet"></a>Applet</h1><h2 id="Applet概述"><a href="#Applet概述" class="headerlink" title="Applet概述"></a>Applet概述</h2><ul><li>Applet是指嵌入<code>HTML</code>文件中，能够运行于<code>浏览器</code>的<code>Java类</code>。</li><li>Java 中 Applet 类继承了 <code>java.applet.Applet </code>类。</li><li>Applet 类没有定义 main()，所以一个 Applet 程序<code>不会调用 main() </code>方法。</li><li>Applet 有 Web 浏览器强制执行的严格的安全规则，Applet 的安全机制被称为<code>沙箱安全</code>。</li><li>Applet不能独自运行，执行方式是在<code>浏览器</code>或<code>JDK自带的Appletviewer</code>中运行。</li><li>Applet的运行环境是<code>浏览器</code>，需要编写<code>HTML</code>文件，并嵌入<code>Applet类</code>，浏览器才会加载与运行它。</li><li>Applet的执行过程：<br>1.浏览器<code>加载</code>指定URL的<code>HTML文件</code>；<br>2.浏览器<code>解析</code>HTML文件；<br>3.浏览器<code>加载</code>HTML文件中指定的<code>Applet类</code>；<br>4.浏览器中的<code>Java运行环境</code>运行此Applet。</li></ul><h2 id="Applet生命周期"><a href="#Applet生命周期" class="headerlink" title="Applet生命周期"></a>Applet生命周期</h2><p>Applet生命周期是指从浏览器下载Applet一直到用户终止Applet运行的过程。<br>Applet生命周期包括<code>创建</code>、<code>运行</code>与<code>消亡</code>等几个状态。<br>1、<code>加载Applet</code><br> 当一个Applet被下载到本地系统时，将发生以下操作：</p><ul><li>产生Applet主类的一个<code>实例</code>；</li><li>对Applet自身进行<code>初始化</code>；</li><li>启动Applet运行，将Applet完全显示出来。</li></ul><p>2、<code>离开或返回Applet所在的Web页面</code><br>  当用户离开Applet所在的Web页面，Applet将停止运行。当用户返回时，Applet将再次启动运行。<br>3、<code>重新加载Applet</code><br>  当用户执行浏览器的刷新造作时，浏览器将先卸载此Applet，再加载此Applet。在这个过程中，Applet先停止自身的运行，接着进行善后处理，释放其所占的资源，然后重新加载Applet。<br>4、<code>退出浏览器</code><br>   当用户退出浏览器时，Applet停止运行，进行善后处理，才让浏览器退出。</p><p>生命周期<code>相关方法</code>：</p><ul><li>void <code>init</code>()：该方法的目的是为你的 Applet 提供所需的任何<code>初始化</code>。在 Applet 标记内的 param 标签被处理后调用该方法。</li><li>void <code>start</code>():浏览器调用 init 方法后，该方法被<code>自动调用</code>。每当用户从其他页面返回到包含 Applet 的页面时，则调用该方法。</li><li>void <code>stop</code>():当用户从包含 Applet 的页面<code>移除</code>的时候，该方法自动被调用。因此，可以在相同的 Applet 中反复调用该方法。</li><li>void <code>destroy</code>():此方法仅当浏览器<code>正常关闭时</code>调用。因为 Applet 只有在 HTML 网页上有效，所以你不应该在用户离开包含 Applet 的页面后遗漏任何资源。</li><li>void <code>paint</code>()：该方法在 start() 方法之后立即被调用，或者在 Applet 需要重绘在浏览器的时候调用。paint() 方法实际上继承于 <code>java.awt</code>。<br>如图<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/4b20a79435a19272a525fe6410862610.png"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.applet.Applet;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;</span><br><span class="line">StringBuffer buffer;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">buffer=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">addItem(<span class="string">&quot;Applet初始化...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;addItem(<span class="string">&quot;Applet启动...&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;addItem(<span class="string">&quot;Applet停止运行...&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;addItem(<span class="string">&quot;准备卸载...&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String newWord)</span></span>&#123;</span><br><span class="line">System.out.println(newWord);</span><br><span class="line">buffer.append(newWord);</span><br><span class="line">repaint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">g.drawRect(<span class="number">0</span>,<span class="number">0</span>,getSize().width-<span class="number">1</span>,getSize().height-<span class="number">1</span>);</span><br><span class="line">g.drawString(buffer.toString(),<span class="number">5</span>,<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Applet程序实现"><a href="#Applet程序实现" class="headerlink" title="Applet程序实现"></a>Applet程序实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="comment">//使用JDK自带的Appletviewer运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;  <span class="comment">//继承Applet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;    <span class="comment">//重写paint()方法</span></span><br><span class="line"><span class="comment">//Graphics类参数是画图的关键，可以画点，线，矩形，文字，图像等，还可以设置颜色和字体。</span></span><br><span class="line">g.drawString(<span class="string">&quot;02:05:52&quot;</span>, <span class="number">10</span>, <span class="number">30</span>);<span class="comment">//绘制字符串 坐标x,y</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/9bf00b56f2c81d5904eafc14d1c94943.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock_Applet</span> <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> width,height; <span class="comment">//用于保存Applet的宽度和高底</span></span><br><span class="line"><span class="keyword">int</span> hours=<span class="number">0</span>,minutes=<span class="number">0</span>,seconds=<span class="number">0</span>;<span class="comment">//用于保存时，分，秒的数值</span></span><br><span class="line">String timeString=<span class="string">&quot;&quot;</span>; <span class="comment">//用于以数字方式显示时间的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  <span class="comment">//初始化</span></span><br><span class="line">width=getSize().width; <span class="comment">//获取Applet的宽度</span></span><br><span class="line">height=getSize().height;<span class="comment">//获取Applet的高度</span></span><br><span class="line">setBackground(Color.black); <span class="comment">//设置Applet的背景为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;  <span class="comment">//启动</span></span><br><span class="line">Calendar cal=Calendar.getInstance();<span class="comment">//产生一个新的Calendar</span></span><br><span class="line">hours=cal.get(Calendar.HOUR_OF_DAY);</span><br><span class="line"><span class="keyword">if</span>(hours&gt;<span class="number">12</span>) &#123;</span><br><span class="line">hours-=<span class="number">12</span>;<span class="comment">//转化为12小时制</span></span><br><span class="line">&#125;</span><br><span class="line">minutes=cal.get(Calendar.MINUTE);</span><br><span class="line">seconds=cal.get(Calendar.SECOND);</span><br><span class="line"><span class="comment">//构造表示当前时间的字符串</span></span><br><span class="line">timeString=((hours&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+hours+<span class="string">&quot;:&quot;</span>+((minutes&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+minutes+<span class="string">&quot;:&quot;</span>+((seconds&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+seconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//停止</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123; <span class="comment">//绘制</span></span><br><span class="line">g.setColor(Color.white); <span class="comment">//设置白色来绘制时钟图形</span></span><br><span class="line">Font bigBoldFont=<span class="keyword">new</span> Font(<span class="string">&quot;SanSerif&quot;</span>,Font.BOLD,<span class="number">20</span>); </span><br><span class="line">g.setFont(bigBoldFont);</span><br><span class="line">g.drawString(timeString, (width-<span class="number">80</span>)/<span class="number">2</span>, height-height/<span class="number">2</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/ce1cc49ba7325178ddf4c5c09fd002ec.png"></p><blockquote><p>复杂案例，运用<code>线程</code>和<code>事件处理</code>实现数字时钟和模拟时钟的切换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock_App</span> <span class="keyword">extends</span> <span class="title">Applet</span> <span class="keyword">implements</span> <span class="title">Runnable</span>,<span class="title">MouseListener</span>  </span>&#123;</span><br><span class="line"><span class="keyword">int</span> width,height; <span class="comment">//用于保存Applet的宽度和高度</span></span><br><span class="line">Thread t=<span class="keyword">null</span>; <span class="comment">//用于画图的线程</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> threadSuspended; <span class="comment">//用于标志画图线程是否处于运行状态</span></span><br><span class="line">AudioClip sound;<span class="comment">//声音判断对象</span></span><br><span class="line"><span class="keyword">int</span> hours=<span class="number">0</span>,minutes=<span class="number">0</span>,seconds=<span class="number">0</span>;<span class="comment">//用于保存时，分，秒的数值</span></span><br><span class="line">String timeString=<span class="string">&quot;&quot;</span>; <span class="comment">//以数字方式显示时间的字符串</span></span><br><span class="line"><span class="keyword">boolean</span> digitalmode=<span class="keyword">false</span>;<span class="comment">//用于表示当前的画面是数字还是模拟方式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">width=getSize().width; <span class="comment">//获取Applet的宽度</span></span><br><span class="line">height=getSize().height;<span class="comment">//获取Applet的高度</span></span><br><span class="line">setBackground(Color.black); <span class="comment">//设置Applet的背景为黑色</span></span><br><span class="line">addMouseListener(<span class="keyword">this</span>); <span class="comment">//******注册事件监听程序，this指Applet本身******</span></span><br><span class="line">sound=getAudioClip(getDocumentBase(),<span class="string">&quot;ticker.au&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="keyword">null</span>) &#123;  <span class="comment">//判断绘图线程是否存在</span></span><br><span class="line">t=<span class="keyword">new</span> Thread(<span class="keyword">this</span>);  <span class="comment">//创建一个新线程</span></span><br><span class="line">t.setPriority(Thread.MIN_PRIORITY); <span class="comment">//设置线程为低优先级</span></span><br><span class="line">threadSuspended=<span class="keyword">false</span>; <span class="comment">//设置标志为线程未挂起</span></span><br><span class="line">t.start(); <span class="comment">//启动线程</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123; <span class="comment">//如果线程已存在</span></span><br><span class="line">threadSuspended=<span class="keyword">false</span>;<span class="comment">//设置线程标志为运行状态</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">threadSuspended=<span class="keyword">true</span>;<span class="comment">//设置线程标志为挂起状态</span></span><br><span class="line">sound.stop(); <span class="comment">//声音片段停止</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画秒钟</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHand</span><span class="params">(<span class="keyword">double</span> angle,<span class="keyword">int</span> radius,Graphics g)</span> </span>&#123;</span><br><span class="line">angle-=<span class="number">0.5</span>*Math.PI;<span class="comment">//减去90度，因为坐标与时钟相差90度</span></span><br><span class="line"><span class="keyword">int</span> x=(<span class="keyword">int</span>)(radius*Math.cos(angle));</span><br><span class="line"><span class="keyword">int</span> y=(<span class="keyword">int</span>)(radius*Math.sin(angle));</span><br><span class="line">g.drawLine(width/<span class="number">2</span>, height/<span class="number">2</span>, width/<span class="number">2</span>+x, height/<span class="number">2</span>+y);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//画时针和分针 根据三角函数等计算当前时间的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawWedge</span><span class="params">(<span class="keyword">double</span> angle,<span class="keyword">int</span> radius,Graphics g)</span> </span>&#123;</span><br><span class="line">angle-=<span class="number">0.5</span>*Math.PI;<span class="comment">//减去90度，因为坐标与时钟相差90度</span></span><br><span class="line"><span class="keyword">int</span> x=(<span class="keyword">int</span>)(radius*Math.cos(angle));<span class="comment">//计算针头的x坐标</span></span><br><span class="line"><span class="keyword">int</span> y=(<span class="keyword">int</span>)(radius*Math.sin(angle));<span class="comment">//计算针头的y坐标</span></span><br><span class="line">angle+=<span class="number">2</span>*Math.PI/<span class="number">3</span>;<span class="comment">//将angle调整为第一针尾点的角度</span></span><br><span class="line"><span class="keyword">int</span> x2=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.cos(angle));<span class="comment">//计算第一针尾点的x坐标</span></span><br><span class="line"><span class="keyword">int</span> y2=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.sin(angle));<span class="comment">//计算第一针尾点的y坐标</span></span><br><span class="line">angle+=<span class="number">2</span>*Math.PI/<span class="number">3</span>;<span class="comment">//将angle调整为第二针尾点的角度</span></span><br><span class="line"><span class="keyword">int</span> x3=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.cos(angle));<span class="comment">//计算第二针尾点的x坐标</span></span><br><span class="line"><span class="keyword">int</span> y3=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.sin(angle));<span class="comment">//计算第二针尾点的y坐标</span></span><br><span class="line"><span class="comment">//画左翼</span></span><br><span class="line">g.drawLine(width/<span class="number">2</span>+x2, height/<span class="number">2</span>+y2, width/<span class="number">2</span>+x, height/<span class="number">2</span>+y);</span><br><span class="line"><span class="comment">//画右翼</span></span><br><span class="line">g.drawLine(width/<span class="number">2</span>+x3, height/<span class="number">2</span>+y3, width/<span class="number">2</span>+x, height/<span class="number">2</span>+y);</span><br><span class="line"><span class="comment">//画针尾</span></span><br><span class="line">g.drawLine(width/<span class="number">2</span>+x2, height/<span class="number">2</span>+y2, width/<span class="number">2</span>+x3, height/<span class="number">2</span>+y3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">g.setColor(Color.white); <span class="comment">//设置白色来绘制时钟图像</span></span><br><span class="line"><span class="keyword">if</span>(digitalmode) &#123;  <span class="comment">//判断是否以数字方式显示</span></span><br><span class="line">Font bigBoldFont=<span class="keyword">new</span> Font(<span class="string">&quot;SanSerif&quot;</span>,Font.BOLD,<span class="number">20</span>); </span><br><span class="line">g.setFont(bigBoldFont);</span><br><span class="line">g.drawString(timeString, (width-<span class="number">80</span>)/<span class="number">2</span>, height-height/<span class="number">2</span>+<span class="number">10</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//以模拟方式显示</span></span><br><span class="line">drawWedge(<span class="number">2</span>*Math.PI*hours/<span class="number">12</span>,width/<span class="number">5</span>,g);</span><br><span class="line">drawWedge(<span class="number">2</span>*Math.PI*minutes/<span class="number">60</span>,width/<span class="number">3</span>,g);</span><br><span class="line">drawWedge(<span class="number">2</span>*Math.PI*seconds/<span class="number">60</span>,width/<span class="number">2</span>,g);</span><br><span class="line">&#125;</span><br><span class="line">sound.play();<span class="comment">//声音判断开始部分</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(threadSuspended==<span class="keyword">false</span>) &#123;</span><br><span class="line">Calendar cal=Calendar.getInstance();<span class="comment">//产生一个新的Calendar</span></span><br><span class="line">hours=cal.get(Calendar.HOUR_OF_DAY); <span class="comment">//获取当前时间时</span></span><br><span class="line"><span class="keyword">if</span>(hours&gt;<span class="number">12</span>) &#123;</span><br><span class="line">hours-=<span class="number">12</span>;<span class="comment">//转化为12小时制</span></span><br><span class="line">&#125;</span><br><span class="line">minutes=cal.get(Calendar.MINUTE); <span class="comment">//获取分</span></span><br><span class="line">seconds=cal.get(Calendar.SECOND); <span class="comment">//获取秒</span></span><br><span class="line"><span class="comment">//构造表示当前时间的字符串</span></span><br><span class="line">timeString=((hours&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+hours+<span class="string">&quot;:&quot;</span>+((minutes&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+minutes+<span class="string">&quot;:&quot;</span>+((seconds&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+seconds;</span><br><span class="line">repaint(); <span class="comment">//调用repaint()方法重绘屏幕</span></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">t.sleep(<span class="number">1000</span>); <span class="comment">//等待一秒钟</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line"><span class="comment">//不做处理；</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(digitalmode) <span class="comment">//判断当前是否以数字方式显示时钟</span></span><br><span class="line">digitalmode=<span class="keyword">false</span>;  <span class="comment">//将显示方式改为模拟方式</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">digitalmode=<span class="keyword">true</span>; <span class="comment">//将显示方式改为数字方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/e1c4ab6a587902838a52701a3368c599.png"></p><h3 id="Applet运行方式"><a href="#Applet运行方式" class="headerlink" title="Applet运行方式"></a>Applet运行方式</h3><p>1.Eclipse中JDK自带appletviewer运行(以上均为此方法运行);</p><p>2.Applet嵌入到HTML中<br>applet标签属性:<br>(1)CODEBASE=codebaseURL:指定Applet的URL地址，此URL是包含Applet代码的目录。<br>(2)CODE=appleFile:指定包含Applet或JApplet字节码的文件名。此文件名可以包含相对路径名。<br>(3)ALT=alternateText:指定当Applet不能运行时的替换文字。<br>(4)NAME=appletInstanceName:为即将创建的Applet指定一个名字。<br>(5) WIDTH=pixels HEIGHT=pixels:以像素为单位，指定Applet显示区的宽度和高度。<br>(6) ALIGN=alignment:指定Applet在浏览器中的对齐方式。<br>(7) ASPACE=pixels HSPACE=pixels:指定Applet显示区上下和左右两侧所空出的像素数。<br>(8)ARCHIVE=archiveFiles:可以通过逗号分隔定义多个归档文件（.jar或.zip文件）。ARCHIVE属性并不是＜applet＞标记的基本属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span>  <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">g.drawString(<span class="string">&quot;Hello World&quot;</span>, <span class="number">25</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">applet</span> <span class="attr">code</span>=<span class="string">&quot;Hello.class&quot;</span> <span class="attr">codebase</span>=<span class="string">&quot;&quot;</span>  <span class="attr">width</span>=<span class="string">300</span> <span class="attr">height</span>=<span class="string">300</span>&gt;</span><span class="tag">&lt;/<span class="name">applet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--code为Applet程序，有包名可以带上包名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--codebase用于指定class文件路径，即绝对路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到bin目录下生成的Hello.class字节码文件，复制到和Html文件同一文件夹下,点击Html文件运行(受版本影响可能没有运行结果)<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/e8e0424a346a3ec17a5a27df40659a24.png"><br>3.命令appletviewer运行<br>确保环境变量已配好<br>打开DOS命令行，输入</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appletviewer applet.html</span><br></pre></td></tr></table></figure><h3 id="HTML标记方法"><a href="#HTML标记方法" class="headerlink" title="HTML标记方法"></a>HTML标记方法</h3><p>HTML标记方法用于获取HTML文件中关于Applet的信息。</p><ul><li><code>URL getDocumentBase()</code>。 返回包含Applet的HTML的URL。</li><li><code>URL getCodeBase()</code>。返回Applet主类的URL，它可以不同于包含Applet的HTML文件的URL。</li><li><code>String getParameter(String name)</code>。返回定义在HTML文件的<param>标记中指定参数的值。如果指定参数在HTML中无说明，此方法返回null。</li></ul><h3 id="多媒体支持方式"><a href="#多媒体支持方式" class="headerlink" title="多媒体支持方式"></a>多媒体支持方式</h3><p>Applet类提供从指定的URL获取图像和声音的方法，使Applet可以很方便地实现多媒体功能。</p><ul><li><code>Image getImage(URL url)</code>。 返回能够显示在屏幕上的图像对象。</li><li><code>AudioClip getAudioClip(URL url)</code>。返回指定URL上的声音数据，返回一个类型为AudioClip的对象，通过此对象可以实现声音演播。</li><li><code>void play(URL url)</code>。直接演播指定URL地址上的声音文件。</li></ul><h3 id="管理Applet环境"><a href="#管理Applet环境" class="headerlink" title="管理Applet环境"></a>管理Applet环境</h3><p>Applet能够与其运行环境进行交互。但是Applet类中对于Applet环境的管理只能提供有限的支持，因为各种浏览器可能具有不同的特性。 </p><ul><li><code>AppletContext getAppletContext()</code>。返回一个AppletContext类的实例，通过这个实例Applet可以管理它的环境。</li><li><code>Applet getApplet(String name)</code>。返回名为name的Applet。该名字在HTML标记中通过NAME属性说明。如果在同一Web页面上不存在名为name的Applet,该方法返回值为空。</li><li><code>Enumeration getApplets()</code>。返回当前Web页上的所有的Applet的列表。为保证安全性，该方法得到的返回集中的Applet都是与调用此方法的Applet来自同一主机。</li><li><code>Void showDocument(URL url)</code>。用指定的URL置换当前的Web页。</li></ul><h3 id="Applet信息报告方法"><a href="#Applet信息报告方法" class="headerlink" title="Applet信息报告方法"></a>Applet信息报告方法</h3><p>Applet信息报告方法使Applet能简便地向用户报告一些Applet的相关信息，如参数信息等。</p><ul><li><code>void  showStatus(String status)</code>。在浏览器状态栏上显示字符串。</li><li><code>String getAppletInfo()</code>。报告关于Applet的作者、版权、版号等有关信息。</li><li><code>String[][] getParameterInfo()</code>。返回描述Applet参数的字符串数组</li></ul><h3 id="Applet的显示"><a href="#Applet的显示" class="headerlink" title="Applet的显示"></a>Applet的显示</h3><p>（1）Applet显示相关的3个方法<br>① paint()。 具体执行Applet的绘制。定义如下：<br>       <code>public void paint( Graphics g)</code><br>② update(). 用于更新Applet的显示。此方法首先清除背景，再调用paint()完成Applet的具体绘制。定义如下：<br>        <code>public void update(Graphics g)</code><br>③ repaint(). 用于Applet的重新显示。它调用update()方法实现对Applet的更新。定义如下：<br>       <code>public void repaint()</code></p><p>（2）Graphics类<br>Graphics在包java.awt中，是进行Applet绘制的关键类。支持基本绘图，支持图像的显示。<br>提供的绘图方法包括两类：绘制图形和文本。<br>①<code>Graphics图形绘制方法有</code>：画直线(drawLine)，画矩形(drawRect和fillRect), 画椭圆(drawOval和fillOval), 画弧(drawArc和fillArc)<br>② <code>Graphics绘制文本的方法</code>：<br>  drawByte(byte[] data, int offset,int length, int x,int y)<br>  drawChar(char[] data, int offset,int length, int x,int y)<br>  drawString(Sting str,int x,int y);</p><h3 id="播放声音"><a href="#播放声音" class="headerlink" title="播放声音"></a>播放声音</h3><p>java.applet包中的Applet类和<code>AudioClip接口</code>为播放声音提供了支持。<br>在Java 2平台支持的音频文件的种类包括：.au,.aif, .midi, .wav,  .rfm。<br>播放声音的Applet方法有：<br>   (1) 加载声音文件<br>     <code>public AudioClip getAudioClip(URL url)</code><br>    <code>public AudioClip getAudioClip(URL url,String name)</code><br>   (2) 直接演播指定URL中的文件<br>    <code>public void play(URL url)</code><br>     <code>public void play(URL url, String name)</code></p><p>接口AudioClip中所定义的方法有：<br>   (1) <code>public void play()</code> 开始播放声音文件，每次从头播放<br>   (2) <code>public void loop()</code> 开始循环播放声音文件<br>   (3) <code>public void stop()</code> 停止播放声音文件<br>在Applet中，声音文件的加载一般只需进行一次，通常放在init()方法中，声音文件的播放和停止可以进行很多次，所以可放在start()和stop()方法中，或通过相应动作按钮的事件处理机制进行控制。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="2020/11/14/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/11/14/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、背景知识"><a href="#一、背景知识" class="headerlink" title="一、背景知识"></a>一、背景知识</h1><h2 id="什么是GitHub？"><a href="#什么是GitHub？" class="headerlink" title="什么是GitHub？"></a>什么是GitHub？</h2><blockquote><p><code>GitHub Page</code>s 是由 GitHub 官方提供的一种免费的<code>静态站点托管服务</code>，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。<br><a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages">About GitHub Pages</a></p></blockquote><h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><blockquote><p><code>Hexo</code> 是一个快速、简洁且高效的<code>静态博客框架</code>，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。<br><a href="https://hexo.io/zh-cn/">Hexo官网</a><br><a href="http://coderunthings.com/2017/08/20/howhexoworks/?utm_source=qq&utm_medium=social&utm_oi=619975022605897728">Hexo工作原理</a></p></blockquote><h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git?"></a>什么是Git?</h2><blockquote><p>GIT(<code>分布式版本控制系统</code>),git支持分布式部署，可以有效、高速的处理从很小到非常大的项目版本管理。分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000">Git教程</a></p></blockquote><h2 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h2><blockquote><p>Node.js就是一个用于创建服务器端应用程序的<code>运行系统</code>，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p></blockquote><h2 id="Hexo-GitHub文章发布原理"><a href="#Hexo-GitHub文章发布原理" class="headerlink" title="Hexo+GitHub文章发布原理"></a>Hexo+GitHub文章发布原理</h2><blockquote><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p></blockquote><h2 id="SSH运行原理及应用"><a href="#SSH运行原理及应用" class="headerlink" title="SSH运行原理及应用"></a>SSH运行原理及应用</h2><blockquote><p>需要使用SSH提供的公钥，可以省去hexo d命令时的密码登录.<br><a href="https://blog.csdn.net/qq_35246620/article/details/54317740?utm_source=qq&utm_medium=social&utm_oi=619975022605897728">SSH运行原理及应用</a></p></blockquote><h2 id="Markdown标记语言"><a href="#Markdown标记语言" class="headerlink" title="Markdown标记语言"></a>Markdown标记语言</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。文档后缀为 .md, .markdown。<br><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown API</a><br><a href="https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app">Markdown语法手册</a></p></blockquote><hr><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><blockquote><p>Hexo 基于 Node.js，搭建过程中还需要使用 <code>npm（Node.js 已带） 和 git</code>，因此先搭建本地操作环境，安装 Node.js 和 Git。<br><a href="https://nodejs.org/zh-cn">Node.js下载网址</a><br><a href="https://blog.csdn.net/antma/article/details/86104068">Node.js安装教程</a></p></blockquote><hr><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><blockquote><p><a href="https://git-scm.com/download/win">Git下载地址</a><br><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Git安装及配置</a><br>安装完成后，在<code>博客文件</code>里右击-&gt;<code>Git Bash</code>(全程用Git Bash,git为linux命令)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>回车，出现程序版本号即可。</p><blockquote><p>注意:如果出现<code>&quot;npm&quot;</code>不是内部指定，说明环境变量没配好,Node.js文件目录复制路径到Path中即可.</p></blockquote><hr><h1 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h1><blockquote><p>1.通过淘宝镜像安装博客框架<br>2.如果出现”cnpm”不是内部指定，说明环境变量没配好,根据提示目录复制路径到<code>Path</code>中即可.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h1 id="四、Hexo搭建"><a href="#四、Hexo搭建" class="headerlink" title="四、Hexo搭建"></a>四、Hexo搭建</h1><h2 id="常用cmd操作"><a href="#常用cmd操作" class="headerlink" title="常用cmd操作:"></a>常用cmd操作:</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回根目录:<span class="built_in">cd</span>/</span><br><span class="line">进入某目录:<span class="built_in">cd</span> 目录名</span><br><span class="line">返回上一目录:<span class="built_in">cd</span> ..</span><br><span class="line">查看文件目录:<span class="built_in">dir</span></span><br></pre></td></tr></table></figure><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 文件名</span><br></pre></td></tr></table></figure><h2 id="根据命令操作文件夹"><a href="#根据命令操作文件夹" class="headerlink" title="根据命令操作文件夹"></a>根据命令操作文件夹</h2><p>命令进入文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init -----创建一个新的hexo项目放在所创建文件夹下</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new xxx  // 新建一篇标题为xxx的文章</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s(server) -----为hexo在本地起一个http server, 然后通过浏览器访问博客</span><br></pre></td></tr></table></figure><blockquote><p>文件名/source/_posts/xxxx.md 中修改博客，修改后操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean -----清除缓存</span><br><span class="line">hexo g(generate) ----生成将要发布的博客网站包含html在内的静态资源</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="五、部署到GitHub"><a href="#五、部署到GitHub" class="headerlink" title="五、部署到GitHub"></a>五、部署到GitHub</h1><h2 id="1-注册登录GuiHub"><a href="#1-注册登录GuiHub" class="headerlink" title="1.注册登录GuiHub"></a>1.注册登录GuiHub</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意用户名与网址访问域名要`一致`</span><br></pre></td></tr></table></figure><h2 id="2-创建GuiHub库-new-repository"><a href="#2-创建GuiHub库-new-repository" class="headerlink" title="2.创建GuiHub库(new repository)"></a>2.创建GuiHub库(new repository)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意Repository name：`用户名`.guihub.io (格式不能变)</span><br></pre></td></tr></table></figure><h2 id="3-SSH登录GitHub远程主机"><a href="#3-SSH登录GitHub远程主机" class="headerlink" title="3.SSH登录GitHub远程主机"></a>3.SSH登录GitHub远程主机</h2><h3 id="生成，密匙"><a href="#生成，密匙" class="headerlink" title="生成，密匙"></a>生成，密匙</h3><blockquote><p>git上传文件到GitHub利用SSH登录远程主机：<br> 登录方式有两种：1.<code>口令登录</code> 2.<code>公钥登录</code>。<br> 区别:口令登录每次都要输入密码，公钥登录不需要输入密码.<br> 安装了 Git Bash，自带了 SSH。检验一下是否安装 SSH，我们在新建的文件夹中右键打开 Git Bash输入命令:<br>``shell<br>    git config –global user.name “Gitub用户名”<br>    git config –global user.email “GitHub邮箱” </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">然后检查SSH安装和生成密匙</span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">    ssh</span><br><span class="line">    ssh-keygen -t rsa -C &quot;GitHub邮箱&quot;</span><br></pre></td></tr></table></figure><blockquote><p>敲四次回车就会生成两个文件，分别为秘钥 id_rsa 和公钥<code> id_rsa.pub.</code> （注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p></blockquote><ul><li>Linux 系统：~/.ssh</li><li>Mac 系统：~/.ssh</li><li>Windows 10 ：C:/Users/ASUS/.ssh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):</span><br><span class="line">//到这里可以直接回车将密钥按默认文件进行存储</span><br></pre></td></tr></table></figure><p>然后<code>复制公钥 id_rsa.pub</code> 文件里的内容,或者通过命令查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh </span><br><span class="line">ls</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="添加到Github"><a href="#添加到Github" class="headerlink" title="添加到Github"></a>添加到Github</h3><blockquote><p>进入GitHub主页，点击右上角。再点击setting-&gt;SSH and GPG keys-&gt;New SSH key-&gt;将复制的id_rsa.pub内容粘贴到key内点击Add SSH key</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">验证:ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="4-安装GuiHub部署插件"><a href="#4-安装GuiHub部署插件" class="headerlink" title="4.安装GuiHub部署插件"></a>4.安装GuiHub部署插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="5-设置-config-yml文件"><a href="#5-设置-config-yml文件" class="headerlink" title="5.设置_config.yml文件"></a>5.设置_config.yml文件</h2><p>   可以使用笔记本编辑，推荐使用<code>sublime  text</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_config.yml文件修改(最下面):</span><br><span class="line"> type: git</span><br><span class="line"> repo:  https://github.com/lzyblog/lzyblog.github.io （仓库url）</span><br><span class="line"> branch: master </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d （部署到Github）</span><br></pre></td></tr></table></figure><h3 id="6-修改博客"><a href="#6-修改博客" class="headerlink" title="6.修改博客"></a>6.修改博客</h3><h4 id="博客目录构成介绍"><a href="#博客目录构成介绍" class="headerlink" title="博客目录构成介绍"></a>博客目录构成介绍</h4><p>打开文件夹,可以看到博客的目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- node_modules</span><br><span class="line">- public</span><br><span class="line">- scaffolds</span><br><span class="line">- source</span><br><span class="line">    - _posts</span><br><span class="line">    - about</span><br><span class="line">    - archive</span><br><span class="line">    - img</span><br><span class="line">    - tags</span><br><span class="line">- themes</span><br><span class="line">node_modules是node.js各种库的目录，public是生成的网页文件目录，scaffolds里面就三个文件，存储着新文章和新页面的初始设置，source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，themes存放着主题文件，一般也用不到。</span><br><span class="line"></span><br><span class="line">我们平时写文章只需要关注source/_posts这个文件夹就行了。</span><br><span class="line"></span><br><span class="line">网站图片都保存在D:\study\program\blog\source\img目录下，可以修改成自己的图片。</span><br></pre></td></tr></table></figure><p>通过文件名\source_posts目录下<code>xxx.md</code>文件修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s （可在本地预览） </span><br><span class="line">hexo g  (部署)</span><br><span class="line">hexo d   (提交Github)</span><br></pre></td></tr></table></figure><p>输入网址:仓库名.guihub.io<br>(如果发现<code>peployer不存在</code>,需要重新引入部署插件)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><hr><h1 id="六-修改主题"><a href="#六-修改主题" class="headerlink" title="六.修改主题"></a>六.修改主题</h1><p> <a href="https://hexo.io/themes/">登录Hexo网址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone `主题url`.git themes/主题名</span><br><span class="line">然后_config.yml配置:theme: 主题名</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s (预览)</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><code>Hexo更改主题后启动服务器</code>，界面显如下字符:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial</span><br></pre></td></tr></table></figure><p><code>解决方案</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p><code>清除缓存</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p><code>生成静态文件即可</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h1 id="七-主题优化"><a href="#七-主题优化" class="headerlink" title="七.主题优化"></a>七.主题优化</h1><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly官方文档</a></p><h3 id="添加标签、分类、关于页面"><a href="#添加标签、分类、关于页面" class="headerlink" title="添加标签、分类、关于页面"></a>添加标签、分类、关于页面</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（创建页面）</span><br><span class="line">hexo new page &quot;xxx页面名&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/19/88c9b1c1c75ce31f1162ba5b86a70353.png"></p><h3 id="Hexo插件"><a href="#Hexo插件" class="headerlink" title="Hexo插件"></a>Hexo插件</h3><p>感谢：<a href="https://www.antmoe.com/posts/a811d614/index.html?utm_source=qq&utm_medium=social&utm_oi=619975022605897728#%E5%89%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">小康博客</a><br><a href="https://easyhexo.com/0-Intro/">Hexo文档</a><br>感谢：<a href="https://blog.lete114.top/article/Butterfly-config.html#%E5%89%8D%E8%A8%80">Lete博客</a><br><a href="https://www.cnblogs.com/dldbk/p/13530468.html">颜色十六进制表</a><br>感谢：<a href="https://plushine.cn/54808.html#%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD">XJHui’s Blog</a></p><h3 id="github-jsDelivr搭建图床"><a href="#github-jsDelivr搭建图床" class="headerlink" title="github+jsDelivr搭建图床"></a>github+jsDelivr搭建图床</h3><p><a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a><br>PicGo,Typora下载<br><a href="https://www.lanzous.com/b00zdvy5e">点击下载—密码:6kjr</a></p><h3 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h3><p>非常感谢博主<a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a>提供的方法<br><a href="https://github.com/coneycode/hexo-git-backup">GitHub项目地址</a><br><a href="https://github.com/coneycode/hexo-git-backup/blob/master/README.md">官方文档</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在博客文件里右击-&gt;Git Bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-git-backup --save </span><br></pre></td></tr></table></figure><blockquote><p>在GuiHub中新建仓库,例如Hexo_Backup，权限为private，分支为master<br>获取所建库 SSH<br>在Hexo配置文件中添加</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line">       <span class="attr">backup:</span> <span class="string">git@github.com:xingjiahui/Hexo-Backup.git,master(分支名,新库为main)</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b(back)</span><br></pre></td></tr></table></figure><blockquote><p>每次更新博客后，都需要<code>hexo b</code><br>备份的用处:</p></blockquote><ul><li>当hexo g 报错没有头绪时，可以使用备份文件</li><li>当本地文件丢失时，可以使用备份文件</li><li>使用前提，配好环境(已下载<code>Node.js和Git</code>)</li></ul><h3 id="相关素材-图库"><a href="#相关素材-图库" class="headerlink" title="相关素材(图库)"></a>相关素材(图库)</h3><p>感谢：<a href="http://www.mackxin.com/">馨客栈</a></p><blockquote><p>图库：<a href="https://www.pexels.com/zh-cn/">pexels</a> and <a href="https://unsplash.com/">Unsplash</a></p></blockquote><h3 id="valine评论系统"><a href="#valine评论系统" class="headerlink" title="valine评论系统"></a>valine评论系统</h3><p><a href="https://lete114.now.sh/article/Valine-LeanCloud-Config.html#%E5%89%8D%E8%A8%80">Lete保姆级valine教程</a><br><a href="https://www.leancloud.cn/">leancloud管理评论</a><br><a href="https://valine.js.org/">Valine文档</a><br>进入leancloud网站注册，并创建应用，找到应用key<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@1086c981d4982e49807f906e95be603883cef644/2020/11/17/d6a49b1aa90d7450e26c5f426ec117c4.png" width="500px" height="300px"><br>复制<code>AppID</code>和<code>AppKey</code>,找到Hexo配置文件中valine配置即可</p><h4 id="自定义表情（基于valine）"><a href="#自定义表情（基于valine）" class="headerlink" title="自定义表情（基于valine）"></a>自定义表情（基于valine）</h4><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">Butterfly官方文档</a></p><blockquote><p>在博客文件名`source<code>\目录下创建_data文件夹,</code>_data<code>文件夹里面创建</code>valine.json`文件，输入以下格式</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;QQ1&quot;</span>: <span class="string">&quot;QQ/aini.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ2&quot;</span>: <span class="string">&quot;QQ/aixin.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ3&quot;</span>: <span class="string">&quot;QQ/aoman.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ4&quot;</span>: <span class="string">&quot;QQ/baiyan.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ5&quot;</span>: <span class="string">&quot;QQ/bangbangtang.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ6&quot;</span>: <span class="string">&quot;QQ/baojin.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ7&quot;</span>: <span class="string">&quot;QQ/baoquan.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ8&quot;</span>: <span class="string">&quot;QQ/bishi.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ9&quot;</span>: <span class="string">&quot;QQ/bizui.gif&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&gt; 然后在Hexo主文件下_config.yml里面找到`valine`下`emojiCDN:` https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/(填入官方文档给的地址)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/GamerNoTitle/Valine-Magic">表情开源仓库</a></p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p><a href="https://blog.csdn.net/shepherd_dirk/article/details/84646379">各语言名称</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在&#96;&#96;&#96;后面加代码名称</span><br></pre></td></tr></table></figure><h4 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h4><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">GitHub项目地址</a><br><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">官方文档</a><br>感谢：<a href="https://plushine.cn/52527.html#%E5%89%8D%E8%A8%80">XJHui’s Blog</a></p><blockquote><p>放在音乐页面中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer(安装插件)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">插件文档</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aplayer: true（在Font-Matter中）</span><br><span class="line">&#123;% meting &quot;2751269737&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br><span class="line">参数介绍：</span><br><span class="line"><span class="code">    &quot;narrow&quot;: false,// （可选）播放器袖珍风格</span></span><br><span class="line"><span class="code">    &quot;autoplay&quot;: true,// （可选) 自动播放，移动端浏览器暂时不支持此功能</span></span><br><span class="line"><span class="code">    &quot;mode&quot;: &quot;random&quot;,// （可选）曲目循环类型，有 &#x27;random&#x27;（随机播放）, &#x27;single&#x27; (单曲播放), &#x27;circulation&#x27; (循环播放), &#x27;order&#x27; (列表播放)， 默认：&#x27;circulation&#x27;</span></span><br><span class="line"><span class="code">    &quot;showlrc&quot;: 3,// （可选）歌词显示配置项，可选项有：1,2,3</span></span><br><span class="line"><span class="code">    &quot;mutex&quot;: true,// （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span></span><br><span class="line"><span class="code">    &quot;theme&quot;: &quot;#e6d0b2&quot;,// （可选）播放器风格色彩设置，默认：#b7daff</span></span><br><span class="line"><span class="code">    &quot;preload&quot;: &quot;metadata&quot;,// （可选）音乐文件预载入模式，可选项： &#x27;none&#x27; &#x27;metadata&#x27; &#x27;auto&#x27;, 默认: &#x27;auto&#x27;</span></span><br><span class="line"><span class="code">    &quot;listmaxheight&quot;: &quot;513px&quot;,// (可选) 该播放列表的最大长度</span></span><br></pre></td></tr></table></figure><h3 id="CSS和JS引入方式"><a href="#CSS和JS引入方式" class="headerlink" title="CSS和JS引入方式"></a>CSS和JS引入方式</h3><p><a href="https://blog.lete114.top/article/Butterfly-config.html#%E5%89%8D%E8%A8%80">来源</a><br>在<code>主题文件</code>/themes/butterfly/source/找到css和js文件夹，css和js文件写在里面<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/18/20769c4cdc51d61d26f2f5fb2b6a2e68.png"><br>在<code>Hexo配置文件</code>中，找到inject下head(<code>引入css</code>)和bottom(<code>引入js</code>)<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/18/c0f6c14c4ab57267e08f43db3604362e.png"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">head:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/xxx.css&quot;&gt;</span></span><br><span class="line"><span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/GitHub用户名/GitHub用户名.github.io/css/Lete.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/GitHub用户名/GitHub用户名.github.io/js/Lete.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用阿里iconfont图标"><a href="#使用阿里iconfont图标" class="headerlink" title="使用阿里iconfont图标"></a>使用阿里iconfont图标</h3><p>感谢：<a href="https://www.antmoe.com/posts/80c43671/index.html">小康博客</a><br><a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2">阿里云iconfont</a></p><h3 id="添加2D人物模型"><a href="#添加2D人物模型" class="headerlink" title="添加2D人物模型"></a>添加2D人物模型</h3><p>在博客文件夹下右击,Git Bash</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span> <span class="string">hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">live2d-widget-model-hijiki(模型名)</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">模型名及样式</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">在根目录配置文件中添加如下代码：</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki(模型名)</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure><h3 id="页脚添加博客运行时间"><a href="#页脚添加博客运行时间" class="headerlink" title="页脚添加博客运行时间"></a>页脚添加博客运行时间</h3><p>来源：<a href="https://blog.hclonely.com/posts/57bd67ce/">HCLonely Blog</a></p><blockquote><p>在博客根目录/themes/Butterfly/layout/includes/<code>footer.pug</code>文件，在最后span=theme.ICP.text下一行添加以下内容：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#running-time</span><br><span class="line">    script.setInterval(()&#x3D;&gt;&#123;let create_time&#x3D;Math.round(new Date(&#39;2020-01-03 00:00:00&#39;).getTime()&#x2F;1000);let timestamp&#x3D;Math.round((new Date().getTime()+8*60*60*1000)&#x2F;1000);let second&#x3D;timestamp-create_time;let time&#x3D;new Array(0,0,0,0,0);if(second&gt;&#x3D;365*24*3600)&#123;time[0]&#x3D;parseInt(second&#x2F;(365*24*3600));second%&#x3D;365*24*3600;&#125;if(second&gt;&#x3D;24*3600)&#123;time[1]&#x3D;parseInt(second&#x2F;(24*3600));second%&#x3D;24*3600;&#125;if(second&gt;&#x3D;3600)&#123;time[2]&#x3D;parseInt(second&#x2F;3600);second%&#x3D;3600;&#125;if(second&gt;&#x3D;60)&#123;time[3]&#x3D;parseInt(second&#x2F;60);second%&#x3D;60;&#125;if(second&gt;0)&#123;time[4]&#x3D;second;&#125;currentTimeHtml&#x3D;&#39;本站已安全运行 &#39;+time[0]+&#39; 年 &#39;+time[1]+&#39; 天 &#39;+time[2]+&#39; 时 &#39;+time[3]+&#39; 分 &#39;+time[4]+&#39; 秒&#39;;document.getElementById(&quot;running-time&quot;).innerHTML&#x3D;currentTimeHtml;&#125;,1000);</span><br></pre></td></tr></table></figure><blockquote><p>2020-01-03 00:00:00为<code>网站起始时间</code></p></blockquote><h3 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h3><p>感谢:<a href="https://blog.lete114.top/article/Butterfly-config-2.3.5.html#%E5%88%86%E7%B1%BB">Lete博主</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p>在<code>博客文件夹目录\source\link\index.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2020-06-03 17:53:02</span><br><span class="line">type: link</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>博客文件夹\source\ </code>目录下新建<code>_data </code>文件夹，文件夹内新建 <code>link.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">描述</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="attr">1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">名字</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">URL</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">图像URL</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">描述</span></span><br><span class="line"><span class="attr">class2:</span></span><br><span class="line">   <span class="attr">class_name:</span> <span class="string">架构工具</span></span><br><span class="line">   <span class="attr">class_desc:</span> <span class="string">描述</span></span><br><span class="line">   <span class="attr">link_list:</span></span><br><span class="line">     <span class="attr">1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">名字</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">URL</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">图像URL</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">描述</span></span><br></pre></td></tr></table></figure><h3 id="添加留言板"><a href="#添加留言板" class="headerlink" title="添加留言板"></a>添加留言板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page messageboard</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 留言板</span><br><span class="line">date: 2020-06-10 10:25:42</span><br><span class="line">type: messageboard</span><br><span class="line">---</span><br><span class="line"><span class="section"># 有什么想和我说的吗？？</span></span><br></pre></td></tr></table></figure><h3 id="添加公告栏装饰"><a href="#添加公告栏装饰" class="headerlink" title="添加公告栏装饰"></a>添加公告栏装饰</h3><blockquote><p>在<code>Butterfly\_config.yml</code>配置文件中查找<code>card_announcement: </code>下的 <code>content: </code>后面添加（有文字直接在文字后加）</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span> <span class="comment">#公告栏</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">城市轮廓，你的孤独&lt;img</span> <span class="string">src=&quot;图片URL&quot;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h3><p><a href="https://blog.lete114.top/article/eef7397d.html#%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9">Lete搜索配置</a><br>主题配置文件中找到local_search</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><p><code>安装插件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><blockquote><p>当文章过多 search.xml 文件大小会越来越大，会拖慢博客的加载速度<br>找到主题文件\source\js\local-search.js<br>修改<code> url: GLOBAL_CONFIG.root + path,</code> 为 url: “<a href="https://cdn.jsdelivr.net/gh/%60%E4%BD%A0GitHub%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0GitHub%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%60.github.io/search.xml&quot;">https://cdn.jsdelivr.net/gh/`你GitHub的用户名/你GitHub的用户名`.github.io/search.xml&quot;</a>,</p></blockquote><h3 id="修改主题样式颜色"><a href="#修改主题样式颜色" class="headerlink" title="修改主题样式颜色"></a>修改主题样式颜色</h3><p>找到主题配置文件下<code>theme_color</code><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/19/70f357966459c14caa28a36e6d1a9462.png"></p><h3 id="添加页面及图标"><a href="#添加页面及图标" class="headerlink" title="添加页面及图标"></a>添加页面及图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 页面名</span><br></pre></td></tr></table></figure><blockquote><p>主题配置文件中修改：格式为（ 名字: /类型/  || iconURL）<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/20/5440d7e98043788788eddb217f0b8cdc.png"><br>在所创文件下Font_Mater加type：类型名<br>打开<a href="https://fontawesome.com/">Font Awesome</a><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/20/3be5946c06432ec960f4e7aa7aa29db9.png"><br>复制class到主题配置文件中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo+GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
