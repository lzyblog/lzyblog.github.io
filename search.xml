<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UML软件建模技术</title>
      <link href="2020/12/21/UML%E8%BD%AF%E4%BB%B6%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/"/>
      <url>2020/12/21/UML%E8%BD%AF%E4%BB%B6%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb网上书城项目</title>
      <link href="2020/12/14/JavaWeb%E7%BD%91%E4%B8%8A%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/12/14/JavaWeb%E7%BD%91%E4%B8%8A%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯C语言组</title>
      <link href="2020/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AFC%E8%AF%AD%E8%A8%80%E7%BB%84/"/>
      <url>2020/12/14/%E8%93%9D%E6%A1%A5%E6%9D%AFC%E8%AF%AD%E8%A8%80%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="第六届蓝桥杯省赛"><a href="#第六届蓝桥杯省赛" class="headerlink" title="第六届蓝桥杯省赛"></a>第六届蓝桥杯省赛</h1><h2 id="C语言A组"><a href="#C语言A组" class="headerlink" title="C语言A组"></a>C语言A组</h2><h3 id="方程整数解"><a href="#方程整数解" class="headerlink" title="方程整数解"></a>方程整数解</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/14/fbd570020853b16b486e8726e4060b39.png"><br>方程: a^2 + b^2 + c^2 = 1000<br>（或参见【图1.jpg】）<br>这个方程有整数解吗？有：a,b,c=6,8,30 就是一组解。<br>你能算出另一组合适的解吗？</p><p><strong>请填写该解中最小的数字。</strong></p><p>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************</span></span><br><span class="line"><span class="comment">解题思路：</span></span><br><span class="line"><span class="comment">a,b,c为三个整数，整数分正整数、负整数与零。</span></span><br><span class="line"><span class="comment">a,b,c的范围:31*31=961     32*32=1024(最大1000)</span></span><br><span class="line"><span class="comment">所以a,b,c取值范围为&#123;-31&lt;=a&lt;=31,-31&lt;=b&lt;=31,-31&lt;=c&lt;=31 | a,b,c∈Z&#125;</span></span><br><span class="line"><span class="comment">a,b,c全排列，输出符号条件的abc值</span></span><br><span class="line"><span class="comment">*******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(a=<span class="number">-31</span>;a&lt;<span class="number">32</span>;a++)</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">-31</span>;b&lt;<span class="number">32</span>;b++)</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">-31</span>;c&lt;<span class="number">32</span>;c++)</span><br><span class="line"><span class="keyword">if</span>(a*a+b*b+c*c==<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,c=%d\n&quot;</span>,a,b,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为 -30 </span></span><br></pre></td></tr></table></figure><h3 id="星系炸弹"><a href="#星系炸弹" class="headerlink" title="星系炸弹"></a>星系炸弹</h3><p>在X星系的广袤空间中漂浮着许多X星人造“炸弹”，用来作为宇宙中的路标。<br>每个炸弹都可以设定多少天之后爆炸。<br>比如：阿尔法炸弹2015年1月1日放置，定时为15天，则它在2015年1月16日爆炸。<br>有一个贝塔炸弹，2014年11月9日放置，定时为1000天，请你计算它爆炸的准确日期。</p><p>请填写该日期，格式为 yyyy-mm-dd  即4位年份2位月份2位日期。比如：2015-02-19<br>请严格按照格式书写。不能出现其它文字或符号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本题用 Excel 或者用程序计算都可以 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这里需要注意的就是闰年和非闰年以及大月小月和 2 月, 闰年的 2 月有 29 天, 非闰年的 2 月有 28 天, 因此, 闰年有 366 天, 非闰年有 365 天.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">上半年是单月大，下半年是双月大。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(以除大拇指的突起算，从左手到右手，除2月(闰平年有28天，闰年有29天),其余大月31，小月30)</span></span><br><span class="line"><span class="comment">1月大、2月平、3月大、4月小、5月大、6月小、7月大、8月大、9月小、10月大、11月小、12月大。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">判断闰年的方法: (Y%400==0)||(Y%4==0&amp;&amp;Y%100!=0) 能被400整除或者能被4整除，不能被100整除 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">另外, 根据示例, 放置炸弹的那天按第 0 天计算.</span></span><br><span class="line"><span class="comment">2014年11月9日放置，定时为1000天</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">1000</span>;</span><br><span class="line"><span class="comment">//存放12月的日数 </span></span><br><span class="line"><span class="keyword">int</span> Mdays[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y=<span class="number">2014</span>;</span><br><span class="line"><span class="keyword">int</span> M=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> D=<span class="number">9</span>;</span><br><span class="line"><span class="comment">//2014年11月09日距离爆炸有1000天，在此循环1000次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sum;i++)</span><br><span class="line">&#123;</span><br><span class="line">D++; <span class="comment">//每循环一次日数+1</span></span><br><span class="line"><span class="keyword">if</span>(D&gt;Mdays[M<span class="number">-1</span>])&#123;  <span class="comment">//如果日数大于11月的日数，则日数重置为1,月数加1 </span></span><br><span class="line">D=<span class="number">1</span>;   <span class="comment">//日数重置 </span></span><br><span class="line">M++;   <span class="comment">//月数加1 </span></span><br><span class="line"><span class="keyword">if</span>(M&gt;<span class="number">12</span>)  <span class="comment">//如果月数大于12,则月数重置为1,年数加1 </span></span><br><span class="line">&#123;</span><br><span class="line">M=<span class="number">1</span>;  <span class="comment">//月数重置 </span></span><br><span class="line">Y++;  <span class="comment">//年数加1 </span></span><br><span class="line"><span class="comment">//新开始一年后，对是否是闰年进行判断</span></span><br><span class="line"><span class="keyword">if</span>((Y%<span class="number">400</span>==<span class="number">0</span>)||(Y%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;Y%<span class="number">100</span>!=<span class="number">0</span>))&#123;</span><br><span class="line">Mdays[<span class="number">1</span>]=<span class="number">29</span>;  <span class="comment">//闰年2月29天 </span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">Mdays[<span class="number">1</span>]=<span class="number">28</span>;  <span class="comment">//平年2月28天 </span></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>,Y,M,D);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 2017-8-5</span></span><br></pre></td></tr></table></figure><h3 id="奇妙的数字"><a href="#奇妙的数字" class="headerlink" title="奇妙的数字"></a>奇妙的数字</h3><p>小明发现了一个奇妙的数字。它的平方和立方正好把0~9的10个数字每个用且只用了一次。<br>你能猜出这个数字是多少吗？</p><p>请填写该数字，不要填写任何多余的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">平方和立方正好把0~9的10个数字每个用且只用了一次</span></span><br><span class="line"><span class="comment">1.定义变量x2,表示数字的平方,x3表示数字的立方</span></span><br><span class="line"><span class="comment">2.定义数组test[10],代表(0~9)10个数出现的次数</span></span><br><span class="line"><span class="comment">然后取出x2和x3的每一位</span></span><br><span class="line"><span class="comment">用数组的10个元素来标识各个数出现的次数,</span></span><br><span class="line"><span class="comment">每出现一次加1，最后再判断数组a的10个元素是不是1.</span></span><br><span class="line"><span class="comment">如果为1，则说明满足要求 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt; </span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1001</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> test[<span class="number">10</span>];  </span><br><span class="line">    <span class="built_in">memset</span>(test,<span class="number">0</span>,<span class="keyword">sizeof</span>(test));  </span><br><span class="line">    <span class="keyword">while</span>(a)  </span><br><span class="line">    &#123;  </span><br><span class="line">        test[a%<span class="number">10</span>]++;  </span><br><span class="line">        a/=<span class="number">10</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(b)  </span><br><span class="line">    &#123;  </span><br><span class="line">        test[b%<span class="number">10</span>]++;  </span><br><span class="line">        b/=<span class="number">10</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(test[i] != <span class="number">1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            flag = <span class="literal">false</span>;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> flag;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>   </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">int</span> x2,x3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> x2 = i*i;  </span><br><span class="line">        <span class="keyword">int</span> x3 = i*i*i;  </span><br><span class="line">        <span class="keyword">if</span>(solve(x2,x3))  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 69</span></span><br></pre></td></tr></table></figure><h3 id="格子中输出"><a href="#格子中输出" class="headerlink" title="格子中输出"></a>格子中输出</h3><p>StringInGrid函数会在一个指定大小的格子中打印指定的字符串。<br>要求字符串在水平、垂直两个方向上都居中。<br>如果字符串太长，就截断。<br>如果不能恰好居中，可以稍稍偏左或者偏上一点。</p><pre><code>    答案：width-2-strlen(s))/2,&quot; “,s,(width-strlen(s)-1)/2,” &quot;</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringInGrid</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buf, s);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(s)&gt;width<span class="number">-2</span>) buf[width<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;(height<span class="number">-1</span>)/<span class="number">2</span>;k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**%s的含义：printf(&quot;%s&quot;,10,s);</span></span><br><span class="line"><span class="comment">意思是输出字符串s，但至少占10个位置，不足的在字符串s左边补空格，这里等同于printf(&quot;%10s&quot;,s);</span></span><br><span class="line"><span class="comment">**关键之处是 %*s%s%s . 根据上面的分析我们知道, 其中间的 %s 是用来打印字符串的, 两边的 %s 是用来打印空格的. 由于需要对齐, </span></span><br><span class="line"><span class="comment">所以需要知道每行的总长度和字符串的长度才可以计算出要打印的空格的个数.</span></span><br><span class="line"><span class="comment">右边空格数5个：(width-strlen(s)-2)/2 </span></span><br><span class="line"><span class="comment">左边空格数5个： (width-strlen(s)-1)/2</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面“,”后面为所填内容 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*s%s%*s&quot;</span>,(width-<span class="built_in">strlen</span>(s)<span class="number">-2</span>)/<span class="number">2</span>,<span class="string">&quot;&quot;</span>,s,(width-<span class="built_in">strlen</span>(s)<span class="number">-2</span>)/<span class="number">2</span>,<span class="string">&quot;&quot;</span>);  <span class="comment">//填空</span></span><br><span class="line">          </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=(height<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; k&lt;height<span class="number">-1</span>; k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringInGrid(<span class="number">20</span>,<span class="number">6</span>,<span class="string">&quot;abcd1234&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+------------------+</span></span><br><span class="line"><span class="comment">|                  |</span></span><br><span class="line"><span class="comment">|     abcd1234     |</span></span><br><span class="line"><span class="comment">|                  |</span></span><br><span class="line"><span class="comment">|                  |</span></span><br><span class="line"><span class="comment">+------------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="九数组分数"><a href="#九数组分数" class="headerlink" title="九数组分数"></a>九数组分数</h3><p>1,2,3…9 这九个数字组成一个分数，其值恰好为1/3，如何组法？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = x[<span class="number">0</span>]*<span class="number">1000</span> + x[<span class="number">1</span>]*<span class="number">100</span> + x[<span class="number">2</span>]*<span class="number">10</span> + x[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> b = x[<span class="number">4</span>]*<span class="number">10000</span> + x[<span class="number">5</span>]*<span class="number">1000</span> + x[<span class="number">6</span>]*<span class="number">100</span> + x[<span class="number">7</span>]*<span class="number">10</span> + x[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a*<span class="number">3</span>==b) <span class="built_in">printf</span>(<span class="string">&quot;%d / %d\n&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=<span class="number">9</span>)&#123;</span><br><span class="line">test(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=k; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">&#123;t=x[k]; x[k]=x[i]; x[i]=t;&#125;</span><br><span class="line">f(x,k+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//划线部分应将x[k]和x[i]的值再交换回来， </span></span><br><span class="line">t=x[k]; x[k]=x[i]; x[i]=t; <span class="comment">// 填空处</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">f(x,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5832 / 17496</span></span><br><span class="line"><span class="comment">5823 / 17469</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="牌型种数"><a href="#牌型种数" class="headerlink" title="牌型种数"></a>牌型种数</h3><p>小明被劫持到X赌城，被迫与其他3人玩牌。<br>一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。<br>这时，小明脑子里突然冒出一个问题：<br>如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">递归函数要包含递归主题，递归出口（判断递归结束的条件）。</span></span><br><span class="line"><span class="comment">递归思想：由于不论顺序，所以假定从A开始选择个数（0~4）直到 K(13)。</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;   <span class="comment">//we表示种类数 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//n表示每次选择的dian点的牌的数量</span></span><br><span class="line"><span class="comment">//dian表示牌的点数</span></span><br><span class="line"><span class="comment">//sum为13，即牌每个人发13张  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> dian,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">sum+=n;</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dian==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">my(i,dian+<span class="number">1</span>,sum); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//牌数=13 </span></span><br><span class="line"><span class="keyword">int</span> dian=<span class="number">0</span>;<span class="comment">//点数&lt;=13 </span></span><br><span class="line">my(<span class="number">0</span>,dian,sum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//3598180</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈IOS和Android</title>
      <link href="2020/12/12/%E8%B0%88%E8%B0%88IOS%E5%92%8CAndroid/"/>
      <url>2020/12/12/%E8%B0%88%E8%B0%88IOS%E5%92%8CAndroid/</url>
      
        <content type="html"><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>Android （美国谷歌公司开发的移动操作系统）</p><ul><li>安卓是一种基于<code>Linux内核</code>（不包含GNU组件）的自由及开放源代码的操作系统。主要使用于移动设备，如智能手机和平板电脑，由美国Google公司和开放手机联盟领导及开发。</li><li>Android操作系统最初由Andy Rubin开发，主要支持手机。2005年8月由Google收购注资。2007年11月，Google与84家硬件制造商、软件开发商及电信营运商组建开放手机联盟共同研发改良Android系统。随后Google以Apache开源许可证的授权方式，发布了Android的源代码。</li><li>第一部Android智能手机发布于2008年10月。Android逐渐扩展到平板电脑及其他领域上，如电视、数码相机、游戏机、智能手表等。2011年第一季度，Android在全球的市场份额首次超过塞班系统，跃居全球第一。 2013年的第四季度，Android平台手机的全球市场份额已经达到78.1%。2013年09月24日谷歌开发的操作系统Android在迎来了5岁生日，全世界采用这款系统的设备数量已经达到10亿台。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/a7eff2fee1da45a99414127adaf9170d.png"></li><li>Android一词的本义指“机器人”，同时也是Google于2007年11月5日宣布的基于Linux平台的开源手机操作系统的名称，该平台由操作系统、中间件、用户界面和应用软件组成。</li><li>Android一词最早出现于法国作家利尔亚当（Auguste Villiers de l’Isle-Adam）在1886年发表的科幻小说《未来夏娃》（L’ève future）中。他将外表像人的机器起名为Android。</li><li>Android的Logo是由Ascender公司设计的，诞生于2010年，其设计灵感源于男女厕所门上的图形符号，于是布洛克绘制了一个简单的机器人，它的躯干就像锡罐的形状，头上还有两根天线，Android小机器人便诞生了。其中的文字使用了Ascender公司专门制作的称之为“Droid ” 的字体。Android是一个全身绿色的机器人，绿色也是Android的标志。颜色采用了PMS 376C和RGB中十六进制的#A4C639来绘制，这是Android操作系统的品牌象征。有时候，它们还会使用纯文字的Logo。</li><li>编程语言:C/C++(底层),Java,Kotlin等(应用层)。</li></ul><h1 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h1><p>IOS(Input Output System)，即输入输出系统，是由苹果公司开发的移动操作系统。</p><ul><li>苹果公司最早于2007年1月9日的Macworld大会上公布这个系统，最初是设计给iPhone使用的，后来陆续套用到iPod touch、iPad上。iOS与苹果的MacOS操作系统一样，属于类Unix的商业操作系统。原本这个系统名为iPhone OS，因为iPad，iPhone，iPod touch都使用iPhone OS，所以2010年WWDC大会上宣布改名为iOS（iOS为美国Cisco公司网络设备操作系统注册商标，苹果改名已获得Cisco公司授权）。</li><li>2016年1月，随着iOS 9.2.1版本的发布，苹果修复了一个存在了3年的漏洞。 [2]  2018年9月22日，美国苹果公司在最新的操作系统中秘密加入了基于iPhone用户和该公司其他设备使用者的“信任评级”功能。、</li><li>软件语言:<a href="https://baike.baidu.com/item/Swift/14080957">Swift</a>,<a href="https://baike.baidu.com/item/Objective-C/8374012">Objective-C</a>,<a href="https://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80/105958?fromtitle=c&fromid=7252092">C</a>,<a href="https://baike.baidu.com/item/C%2B%2B/99272">C++</a>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/64fe3ed21c4b81d505ab9f284970e7de.png"></li></ul><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul><li><p>应用的设备不同<br>IOS和安卓最大的区别在于本身所应用的设备不同。ios系统主要是应用在iPhone、IPad、itouch设备上的操作系统，安卓系统主要是应用在安卓智能手机上的操作系统。</p></li><li><p>开源与封闭<br>英特尔前CEO安迪·格鲁夫曾提到过一个理论“ <code>硬件性能随着摩尔定律飞速提升，软件总有办法尽量榨干硬件提升带来的性能。</code>” 这便是著名的安迪比尔定理。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/1df02760dd4d1f9d77e58de3167a9df9.png"><br>随着软件的飞速发展，老旧的硬件必定满足不了当前软件巨大的内存运行需求，自然会影响使用流畅度。<br>而系统的开放性主要体现在两个方面：<code>源代码</code>和<code>应用接口</code>。Android系统基于Linux开发，跟 Linux一脉相承，开放性极强。安卓拥有自己的开源<code>AOSP</code>(Android Open Source Project)，只要遵循<code>GPL</code>和<code>Apache Licence 2.0</code>开源协议，那么你就可以使用安卓源代码进行二次开发。而安卓由于源代码开放，自然可玩性也比iOS高,但这时的应用开发者有更多的权限去开发自己的App，给App增添更多功能，这无形中加重了手机硬件的运行负担，使得手机使用寿命大大缩短。<br>此外，安卓比iOS开放了更多的<code>应用接口API</code>，我们可以很自然地利用安卓实现很多在iOS上不折腾就没法做的功能。在安卓，你可以随心随意地更换输入法，随意用任何浏览器打开链接，随意从任何途经安装程序，随意调用第三方程序分享文件——这些在iOS上不越狱都做不到，即使越狱也未必比安卓做得更好。<br>而IOS系统最大的一个特点就是<code>沙盒机制</code>，<code>封闭性比较强</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/59f65d945b8e9f79e55eeed9a258da79.png"></p></li><li><p>系统安全性区别<br>IOS系统是一款比较强大的<code>操作系统</code>，在ios系统运行的程序不管程序多大都不会造成死机，玩起来非常的流程，而且系统的安全性比较高。<br>安卓系统是属于<code>代码系统</code>，如果所有的应用程序需要下载下来之后才能玩，系统用久之后会经常出现卡机或者是死机的现象，而且安卓系统还存在恶意的插件在系统上自动运行，系统漏洞多，导致个人资料被盗、系统耗电大，流量消耗大等，系统安全性相对来说比较低。</p></li></ul><h1 id="IOS系统流畅的真正原因"><a href="#IOS系统流畅的真正原因" class="headerlink" title="IOS系统流畅的真正原因"></a>IOS系统流畅的真正原因</h1><ul><li><p><strong>优先级别不同</strong><br>IOS对屏幕反应的优先级是最高的，它的响应顺序依次为<code>Touch--Media--Service--Core</code>架构，换句话说当用户只要触摸接触了屏幕之后，系统就会最优先去处理屏幕显示（Touch这个层级）然后才是媒体（Media），服务（Service）以及Core架构。；<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/bff085ae73ae81601e25138687131cfa.png"><br>而Android系统的优先级响应层级则是<code>Application--Framework--Library--Kernal</code>架构，和显示相关的图形图像处理这一部分属于Library，可以看到到第三位才是它，当触摸屏幕之后Android系统首先会激活应用，框架然后才是屏幕最后是核心架构。</p></li><li><p><strong>硬件工作配置不同：iOS基于GPU加速</strong><br>在处理器等配置到到了同等级的情况下，GPU就成为了一个凸显差异的重要因素。一些大型软件像是3D游戏对GPU性能要求都会比较高，而iOS系统对图形的各种特效处理基本上正好都是<code>基于GPU硬件</code>进行加速的，它可以不用完全借助CPU或者程序本身，而是通过GPU进行渲染以达到更流畅的操控表现。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/8f4db78aaa7626ea7a9e5acb9b088341.png"><br>而Android系统产品则并非如此，因为Android需要适应不同的手机硬件，需要满足各种差异配置，所以很多图形特效大多都要靠程序本身进行加速和渲染，并严重依赖CPU运算的操作自然会加大处理器的负荷，从而出现卡顿的问题。</p></li><li><p><strong>开发机制不同：安卓机制效率低</strong><br>Android的编程语言是<code>JAVA</code>，而iOS的则为<code>Objective-C</code>，IOS采用的是<code>沙盒运行机制</code>，安卓采用的是<code>Java虚拟机运行机制</code>。Objective-C的优势是<code>效率高</code>但比较“唯一”，而JAVA的优势则是<code>跨平台</code>不过运行效率相对偏低，其实这两个编程语言所带来的机制不同，就已经造成了各自系统之间的流畅性差异化。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/12/e80710c53aa2a1bdb7a5d43bed46a91e.png"><br>iOS的Objective-C，编译器gcc，而这个gcc编译出来的代码又被苹果专为iOS架构优化到了极致，运行过程中也不需要虚拟机在中间插手，执行效率自然很高。<br>Android是通过JAVA虚拟机来执行，并且系统需要占用大量内存来换取执行速度，再加上不定期的内存自动回收机制，从而直接导致了卡顿现象的出现。</p></li><li><p><strong>后台管理方式不同</strong><br>苹果是假后台，即<code>墓碑机制</code>，当你回到主界面的时候之前的软件就相当于暂停使用，不再消耗RAM（利用远程通知机制，如果你没启动qq，有朋友给你发消息的话，腾讯服务器会告诉<code>苹果服务器</code>，苹果服务器给你的手机发通知，不需要你的qq在后台）；<br>而安卓是真后台，即使你退出软件，软件也会在后台自启(比如接收qq信息，qq软件必须在运行状态来接收腾讯服务器传来的消息)，从而继续占用你的RAM，而RAM是有限的，当RAM剩余太少的时候你就会感觉到卡顿。同时，后台的程序运行也会占用CPU资源，使手机处理能力下降，这也是安卓手机需要通过使用更高的配置来提高流畅度的原因。<br><a href="https://zhuanlan.zhihu.com/p/137812632">关于iPhone的后台机制详细讲解，通俗易懂！</a></p></li><li><p><strong>线程不同</strong><br>苹果的单线程比安卓机强，大部分安卓机都是<code>堆核</code>，而苹果是<code>堆料</code>，安卓是<code>小核高频</code>，苹果是<code>大核低频</code>，在一个核上堆20多亿晶体管，堪称堆料狂魔，自然单线程神速，上面也说了，苹果在运行一个应用时，另一个是暂停的，所以神一般的单线程加上大部分情况下只运行一个，当然神速。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="2020/12/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题魔改</title>
      <link href="2020/12/02/Butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9/"/>
      <url>2020/12/02/Butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="基础美化"><a href="#基础美化" class="headerlink" title="基础美化"></a>基础美化</h1><p>基础美好请仔细查看<a href="https://butterfly.js.org/">Butterfly主题文档</a></p><h1 id="JS-CSS的引入"><a href="#JS-CSS的引入" class="headerlink" title="JS/CSS的引入"></a>JS/CSS的引入</h1><ul><li>JS/CSS一般写在<code>themes\butterfly\source</code>文件夹下对应CSS/JS文件夹里。</li><li>打开主题配置文件(<code>config.yml</code>);</li><li>定位搜索(Ctrl+F)找到<code>inject</code></li><li><code>head</code>引入CSS，<code>bottom</code>引入JS。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">   <span class="attr">head:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/xxx.css&quot;&gt;</span> <span class="comment">#相对路径引入</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;外链&quot;&gt;</span> <span class="comment">#外链方式引入：将文件上传到 cdn，如七牛云、又拍云、GitHub+Jsdeliver 等。</span></span><br><span class="line">   <span class="attr">bottom:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/GitHub用户名/GitHub用户名.github.io/js/background.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;xxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;xxx页面名&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/22b37d2a111a098b4a18becec22d8efb.png"></p><p>图标素材点击<a href="https://fontawesome.com/">Font Awesome</a>，找到对应图标点击找到<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/66c5304d4b7a11c6136927abd66275b6.png"></p><h1 id="图标动画"><a href="#图标动画" class="headerlink" title="图标动画"></a>图标动画</h1><p><a href="https://www.antmoe.com/posts/a811d614/index.html">感谢小康博主</a><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/69d9b869911a6fd7264af2834d2bf927.png"><br>理论上这些动效是可以给任意 DOM 元素添加的。添加方式很简单，引入一个 css 库：<a href="https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@latest/butterfly/css/font-awesome-animation.min.css">https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@latest/butterfly/css/font-awesome-animation.min.css</a></p><p>然后在 DOM 元素的类名添加相应的动画即可。</p><blockquote><p>例如分类可以写为 分类: /categories/ || fas fa-folder-open  <code>faa-wrench animated-hover</code></p></blockquote><h1 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h1><div class="note warning flat"><p>注意：标签外挂是Hexo独有的功能，並不是标签的Markdown格式。<br>以下的写法，只适用于Butterfly主题，用在其它主題上不会有效果，甚至可能会报错。使用前请留意</p></div><p>配置主题文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default flat"><p>default 提示标签符</p></div><div class="note primary flat"><p>primary 提示标签符</p></div><div class="note success flat"><p>success 提示标签符</p></div><div class="note info flat"><p>info 提示标签符</p></div><div class="note warning flat"><p>warning 提示标签符</p></div><div class="note danger flat"><p>danger 提示标签符</p></div><h1 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h1><p>找到主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="comment">#全局字体大小</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="comment">#代码字体大小</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="comment">#全局字体</span></span><br><span class="line">  <span class="attr">code-font-family:</span>  <span class="comment">#代码字体</span></span><br></pre></td></tr></table></figure><p><a href="https://www.zsfmyz.top/demo/font/">字体对照表</a></p><h1 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h1><p>新建\themes\butterfly\source\css\Myidea.css（css文件名称自定义）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置鼠标样式*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="页脚渐变"><a href="#页脚渐变" class="headerlink" title="页脚渐变"></a>页脚渐变</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚footer */</span></span><br><span class="line"><span class="comment">/* 渐变色滚动动画 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, #ee7752, #ce3e75, #<span class="number">23</span>a6d5, #<span class="number">23</span>d5ab);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">-moz-animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">-o-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/272f832b461c620d418265018f4f6d16.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*页脚a标签字体颜色*/</span></span><br><span class="line"><span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h1><p>在<code>C:\blog\lzyblog\source\_posts</code>目录下新建<code>background.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文章透明度"><a href="#文章透明度" class="headerlink" title="文章透明度"></a>文章透明度</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 文章页背景 */</span><br><span class="line"><span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="comment">/* 以下代表白色透明度为0.3*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 所有背景（包括首页卡片、文章页、页面页等） */</span></span><br><span class="line"><span class="selector-id">#aside_content</span> <span class="selector-class">.card-widget</span>, <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>, <span class="selector-class">.layout_page</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:not(.recent-posts)</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#page</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>, <span class="selector-class">.read-mode</span> <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>&#123;</span><br><span class="line">    <span class="comment">/* 以下代表白色透明度为0.3 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="昵称颜色"><a href="#昵称颜色" class="headerlink" title="昵称颜色"></a>昵称颜色</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 博主昵称颜色 */</span></span><br><span class="line"><span class="selector-class">.author-info__name</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7242</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/f60544faff00e4c69603da563eda7c40.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 首页中间打字效果上方 博客昵称颜色*/</span></span><br><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#site_title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#80bdab</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 顶部导航栏 博客昵称颜色*/</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f9f2f4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="评论框"><a href="#评论框" class="headerlink" title="评论框"></a>评论框</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 评论框  */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vwrap</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交按钮 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#vcomment</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e58a8a</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">-o-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">-ms-transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 评论区代码块 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v</span><span class="selector-attr">[data-class=v]</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c7254e</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F9F2F4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置评论框 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vcard</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消回复聊天框 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vquote</span> <span class="selector-class">.vcard</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Valine访客标签"><a href="#Valine访客标签" class="headerlink" title="Valine访客标签"></a>Valine访客标签</h1><p><a href="https://akilar.top/posts/d2222705/">感谢Akilar博主</a></p><ol><li>打开<code>[lzyblog]\themes\butterfly\layout\includes\third-party\comments\valine.pug</code>,按指示添加如下字段(<code>去掉+号</code>)。<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">serverURLs: &#x27;#&#123;theme.valine.serverURLs&#125;&#x27;,</span><br><span class="line">      emojiCDN: &#x27;#&#123;theme.valine.emojiCDN&#125;&#x27;,</span><br><span class="line">      emojiMaps: !&#123;emojiMaps&#125;,</span><br><span class="line">      enableQQ: #&#123;theme.valine.enableQQ&#125;,</span><br><span class="line">      path: window.location.pathname,</span><br><span class="line"><span class="addition">+     master: &#x27;#&#123;theme.valine.master&#125;&#x27;.split(&#x27;,&#x27;),</span></span><br><span class="line"><span class="addition">+     friends: &#x27;#&#123;theme.valine.friends&#125;&#x27;.split(&#x27;,&#x27;),</span></span><br><span class="line"><span class="addition">+     tagMeta: &#x27;#&#123;theme.valine.tagMeta || &quot;博主,小伙伴,访客&quot;&#125;&#x27;.split(&#x27;,&#x27;)</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>打开<code>[lzyblog]\_config.butterfly.yml,</code><ul><li>在valine配置项添加如下内容。<br>md5加密可以使用<a href="https://tool.chinaz.com/tools/md5.aspx">在线转码</a>,务必使用<code>32位[小]</code>进行转码。</li></ul></li></ol><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> valine:</span><br><span class="line">       appId:  # leancloud application app id</span><br><span class="line">       appKey:  # leancloud application app key</span><br><span class="line">       ........#去掉+号</span><br><span class="line"><span class="addition">+     master: # md5加密后的博主邮箱</span></span><br><span class="line"><span class="addition">+       - d4e7????4d361ad7????44a14e9e2a94  #可添加多个</span></span><br><span class="line"><span class="addition">+     friends: # md5加密后的小伙伴邮箱</span></span><br><span class="line"><span class="addition">+       - 5c?????bfe6rfc72a????e268ad3819c #可添加多个</span></span><br><span class="line"><span class="addition">+       - 7c?????bfe65fc02a????e2????3919c</span></span><br><span class="line"><span class="addition">+     tagMeta: &#x27;博主,小伙伴,访客&#x27; # 标签要显示的文字,默认&#x27;博主,小伙伴,访客&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>在CDN配置项添加如下内容。将Valine.min.js替换成HCLonely魔改的版本(+号替换-号）。</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-valine: https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js</span></span><br><span class="line"><span class="addition">+valine: https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure><h1 id="a标签颜色"><a href="#a标签颜色" class="headerlink" title="a标签颜色"></a>a标签颜色</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a标签默认颜色 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停时的颜色 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e58a8a</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*a标签颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://tools.jb51.net/static/colorpicker/">在线颜色选择器 | RGB颜色查询对照表</a></p><h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p><code>C:\lzyblog\source\link\index.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2020-06-03 17:53:02</span><br><span class="line">type: link</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>C:\lzyblog\source\ </code>目录下新建<code>_data </code>文件夹，文件夹内新建 <code>link.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="attr">1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lzyblog</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://lzyblog.github.io/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/19/1f52735f41052a8a163fbef9101b879e.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">越努力越幸运</span></span><br><span class="line">    <span class="attr">2:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.xxxxxx.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://xxxxx/favicon.ico</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">Test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">class2:</span></span><br><span class="line">   <span class="attr">class_name:</span> <span class="string">链接无效</span></span><br><span class="line">   <span class="attr">link_list:</span></span><br><span class="line">     <span class="attr">1:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">       <span class="attr">link:</span> <span class="string">https://lzyblog.github.io/</span></span><br><span class="line">       <span class="attr">avatar:</span> </span><br><span class="line">       <span class="attr">descr:</span> <span class="string">Test</span></span><br><span class="line">     <span class="attr">2:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">       <span class="attr">link:</span> <span class="string">https://lzyblog.github.io/</span></span><br><span class="line">       <span class="attr">avatar:</span> </span><br><span class="line">       <span class="attr">descr:</span> <span class="string">Test</span></span><br></pre></td></tr></table></figure><h1 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h1><p>找到主题配置文件里<code>theme_color</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span> <span class="comment">#(自定义主题色)</span></span><br><span class="line">   <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span> <span class="comment">#文章颜色</span></span><br><span class="line">   <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span> <span class="comment">#分页器颜色</span></span><br><span class="line">   <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span> <span class="comment"># 鼠标移动到按钮上的显示的颜色</span></span><br><span class="line">   <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span> <span class="comment">#选择文字的背景颜色</span></span><br><span class="line">   <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span> <span class="comment">#链接颜色</span></span><br><span class="line">   <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">   <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span> <span class="comment"># 小剪刀颜色、小摩托颜色</span></span><br><span class="line">   <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span> <span class="comment"># 代码`code`的颜色</span></span><br><span class="line">   <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span> <span class="comment"># 代码`code`的背景颜色</span></span><br><span class="line">   <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">   <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span> <span class="comment"># &gt;  &gt;&gt; &gt;&gt;&gt; 描述颜色</span></span><br><span class="line">   <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br></pre></td></tr></table></figure><h1 id="公告栏装饰"><a href="#公告栏装饰" class="headerlink" title="公告栏装饰"></a>公告栏装饰</h1><p>在 C:\lzyblog\themes\Butterfly_config.yml 里找到 <code>card_announcement: </code>下的 <code>content: </code>后面添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span> <span class="comment">#公告栏</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">城市的轮廓，你的孤独&lt;img</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/19/33a1542ce0a798e62e404f0bd948149f.png&quot;&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h1><p><a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a><br>PicGo,Typora下载<br><a href="https://www.lanzous.com/b00zdvy5e">点击下载—密码:6kjr</a></p><h1 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h1><p>非常感谢博主<a href="https://plushine.cn/38834.html#Demo">XJHui’s Blog</a>提供的方法<br><a href="https://github.com/coneycode/hexo-git-backup">GitHub项目地址</a><br><a href="https://github.com/coneycode/hexo-git-backup/blob/master/README.md">官方文档</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在博客文件里右击-&gt;Git Bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-git-backup --save </span><br></pre></td></tr></table></figure><ul><li>在GuiHub中新建仓库,例如Hexo_Backup，权限为private，分支为master</li><li>复制所建库的SSH</li><li>在Hexo配置文件中添加</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line">       <span class="attr">backup:</span> <span class="string">git@github.com:xingjiahui/Hexo-Backup.git,master(分支名,新库为main)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b(back)</span><br></pre></td></tr></table></figure><blockquote><p>每次更新博客后，都需要<code>hexo b</code></p></blockquote><p>备份的用处:</p><ul><li>当hexo g 报错没有头绪时，可以使用备份文件</li><li>当本地文件丢失时，可以使用备份文件</li><li>使用前提，配好环境(已下载<code>Node.js和Git</code>)</li></ul><h1 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h1><p><a href="https://blog.lete114.top/article/eef7397d.html#%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9">Lete搜索配置</a><br>主题配置文件中找到local_search</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><p><code>安装插件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><blockquote><p>当文章过多 search.xml 文件大小会越来越大，会拖慢博客的加载速度<br>找到主题文件\source\js\local-search.js<br>修改<code> url: GLOBAL_CONFIG.root + path,</code> 为 url: “<a href="https://cdn.jsdelivr.net/gh/%60%E4%BD%A0GitHub%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0GitHub%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%60.github.io/search.xml&quot;">https://cdn.jsdelivr.net/gh/`你GitHub的用户名/你GitHub的用户名`.github.io/search.xml&quot;</a>,</p></blockquote><h1 id="valine评论系统"><a href="#valine评论系统" class="headerlink" title="valine评论系统"></a>valine评论系统</h1><p><a href="https://lete114.now.sh/article/Valine-LeanCloud-Config.html#%E5%89%8D%E8%A8%80">Lete保姆级valine教程</a><br><a href="https://www.leancloud.cn/">leancloud管理评论</a><br><a href="https://valine.js.org/">Valine文档</a><br>进入leancloud网站注册，并创建应用，找到应用key<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@1086c981d4982e49807f906e95be603883cef644/2020/11/17/d6a49b1aa90d7450e26c5f426ec117c4.png" width="500px" height="300px"><br>复制<code>AppID</code>和<code>AppKey</code>,找到Hexo配置文件中valine配置即可</p><h2 id="自定义表情（基于valine）"><a href="#自定义表情（基于valine）" class="headerlink" title="自定义表情（基于valine）"></a>自定义表情（基于valine）</h2><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">Butterfly官方文档</a></p><blockquote><p>在博客文件名`source<code>\目录下创建_data文件夹,</code>_data<code>文件夹里面创建</code>valine.json`文件，输入以下格式</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;QQ1&quot;</span>: <span class="string">&quot;QQ/aini.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ2&quot;</span>: <span class="string">&quot;QQ/aixin.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ3&quot;</span>: <span class="string">&quot;QQ/aoman.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ4&quot;</span>: <span class="string">&quot;QQ/baiyan.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ5&quot;</span>: <span class="string">&quot;QQ/bangbangtang.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ6&quot;</span>: <span class="string">&quot;QQ/baojin.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ7&quot;</span>: <span class="string">&quot;QQ/baoquan.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ8&quot;</span>: <span class="string">&quot;QQ/bishi.gif&quot;</span>,</span><br><span class="line"><span class="attr">&quot;QQ9&quot;</span>: <span class="string">&quot;QQ/bizui.gif&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后在Hexo主文件下_config.yml里面找到<code>valine</code>下<code>emojiCDN:</code> <a href="https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/(%E5%A1%AB%E5%85%A5%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BB%99%E7%9A%84%E5%9C%B0%E5%9D%80)">https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/(填入官方文档给的地址)</a></p></blockquote><p>寻找表情去前往<a href="https://github.com/GamerNoTitle/Valine-Magic">表情开源仓库</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">54O2OYplcci4GjXUK0GjalFz-gzGzoHsz</span> <span class="comment"># leancloud application app id</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">sB0Y5Ydm1XnlyKUY5uR3RxsW</span> <span class="comment"># leancloud application app key</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span> <span class="comment"># i18n: zh-CN/zh-TW/en/ja</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">请留下你的足迹（昵称栏输入QQ后按下Tab键，可以自动获取昵称和邮箱）</span> <span class="comment"># valine comment input placeholder (like: Please leave your footprints)</span></span><br><span class="line">  <span class="attr">nick:</span> <span class="string">昵称/QQ号(必填)</span></span><br><span class="line">  <span class="attr">mail:</span> <span class="string">邮箱(必填)</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># valine comment header info (nick/mail/link)</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Record reviewer IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line">  <span class="attr">bg:</span> <span class="comment"># valine background</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">emojiCDN:</span> <span class="string">https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">true</span> <span class="comment"># enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line">  <span class="attr">requiredFields:</span> <span class="string">nick,mail</span> <span class="comment"># required fields (nick/mail)</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><h1 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h1><p>1.悬浮音乐播放器<br><a href="https://github.com/MoePlayer/hexo-tag-aplayer">GitHub项目地址</a><br><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">官方文档</a><br>感谢：<a href="https://plushine.cn/52527.html#%E5%89%8D%E8%A8%80">XJHui’s Blog</a></p><p>2.创建音乐页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer(安装插件)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">插件文档</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aplayer: true（在Font-Matter中）</span><br><span class="line">&#123;% meting &quot;2751269737&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br><span class="line">参数介绍：</span><br><span class="line"><span class="code">    &quot;narrow&quot;: false,// （可选）播放器袖珍风格</span></span><br><span class="line"><span class="code">    &quot;autoplay&quot;: true,// （可选) 自动播放，移动端浏览器暂时不支持此功能</span></span><br><span class="line"><span class="code">    &quot;mode&quot;: &quot;random&quot;,// （可选）曲目循环类型，有 &#x27;random&#x27;（随机播放）, &#x27;single&#x27; (单曲播放), &#x27;circulation&#x27; (循环播放), &#x27;order&#x27; (列表播放)， 默认：&#x27;circulation&#x27;</span></span><br><span class="line"><span class="code">    &quot;showlrc&quot;: 3,// （可选）歌词显示配置项，可选项有：1,2,3</span></span><br><span class="line"><span class="code">    &quot;mutex&quot;: true,// （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span></span><br><span class="line"><span class="code">    &quot;theme&quot;: &quot;#e6d0b2&quot;,// （可选）播放器风格色彩设置，默认：#b7daff</span></span><br><span class="line"><span class="code">    &quot;preload&quot;: &quot;metadata&quot;,// （可选）音乐文件预载入模式，可选项： &#x27;none&#x27; &#x27;metadata&#x27; &#x27;auto&#x27;, 默认: &#x27;auto&#x27;</span></span><br><span class="line"><span class="code">    &quot;listmaxheight&quot;: &quot;513px&quot;,// (可选) 该播放列表的最大长度</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 音乐</span><br><span class="line">date: 2020-11-19 18:02:36</span><br><span class="line">aplayer: true</span><br><span class="line">---</span><br><span class="line"><span class="section"># 吉他指弹音乐歌单</span></span><br><span class="line">&#123;% meting &quot;5345536427&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/5601fa22acbc611a681a7980f3ad0c25.png"></p><h1 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h1><p><a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2">阿里云iconfont</a><br>找到喜欢的图标，添加入库：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/d33765ab9b09455c6b8d641e3a134212.png"><br>打开购物车，点击添加至项目。<br>然后复制代码，浏览器打开，复制到一个新建CSS文件里。<br>打开代码可以看到如下CSS样式：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/4939d458354cd2338ae01a3e14cb4dd4.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/846b77ff8ea72734aeba60e48dc91cc2.png"><br>把以上新建的CSS文件存到<code>\themes\Butterfly\source\css</code>目录下。<br>在博客配置文件下引入CSS。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/610ee90c11ff51aa1988b668a59dd959.png"><br>按格式使用<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/fb3f6c235a83610b301c7ed7994db7d2.png"><br>修改图标大小和颜色：在<code>\themes\Butterfly\source\css</code>目录下创建一个<code>Icon_size.css</code>文件(自定义名称),然后同样引入博客<code>配置文件head</code>下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*.icon-bilibili:before &#123;</span></span><br><span class="line"><span class="comment">  content: &quot;\e600&quot;;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">/* 卡片处小图标 */</span></span><br><span class="line"><span class="selector-class">.card_icon_bilibili</span> &#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF69B4</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_git</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6495ED</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_qq</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#FF8C00</span> ;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_csdn</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_icon_zhihu</span>&#123;</span><br><span class="line">  <span class="comment">/* 修改颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00BFFF</span>;</span><br><span class="line">  <span class="comment">/* 修改大小 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加2D人物模型"><a href="#添加2D人物模型" class="headerlink" title="添加2D人物模型"></a>添加2D人物模型</h1><p>在博客文件夹下右击,Git Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-hijiki(模型名)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">模型名及样式</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在根目录配置文件中添加如下代码：</span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  <span class="built_in">log</span>: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hijiki(模型名)</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure><h1 id="博客运行时间"><a href="#博客运行时间" class="headerlink" title="博客运行时间"></a>博客运行时间</h1><p>来源：<a href="https://blog.hclonely.com/posts/57bd67ce/">HCLonely Blog</a></p><blockquote><p>在博客根目录/themes/Butterfly/layout/includes/<code>footer.pug</code>文件，在最后span=theme.ICP.text下一行添加以下内容：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#running-time</span><br><span class="line">    script.setInterval(()&#x3D;&gt;&#123;let create_time&#x3D;Math.round(new Date(&#39;2020-01-03 00:00:00&#39;).getTime()&#x2F;1000);let timestamp&#x3D;Math.round((new Date().getTime()+8*60*60*1000)&#x2F;1000);let second&#x3D;timestamp-create_time;let time&#x3D;new Array(0,0,0,0,0);if(second&gt;&#x3D;365*24*3600)&#123;time[0]&#x3D;parseInt(second&#x2F;(365*24*3600));second%&#x3D;365*24*3600;&#125;if(second&gt;&#x3D;24*3600)&#123;time[1]&#x3D;parseInt(second&#x2F;(24*3600));second%&#x3D;24*3600;&#125;if(second&gt;&#x3D;3600)&#123;time[2]&#x3D;parseInt(second&#x2F;3600);second%&#x3D;3600;&#125;if(second&gt;&#x3D;60)&#123;time[3]&#x3D;parseInt(second&#x2F;60);second%&#x3D;60;&#125;if(second&gt;0)&#123;time[4]&#x3D;second;&#125;currentTimeHtml&#x3D;&#39;本站已安全运行 &#39;+time[0]+&#39; 年 &#39;+time[1]+&#39; 天 &#39;+time[2]+&#39; 时 &#39;+time[3]+&#39; 分 &#39;+time[4]+&#39; 秒&#39;;document.getElementById(&quot;running-time&quot;).innerHTML&#x3D;currentTimeHtml;&#125;,1000);</span><br></pre></td></tr></table></figure><blockquote><p>2020-01-03 00:00:00为<code>网站起始时间</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Buffterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Buffterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="2020/12/02/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>2020/12/02/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p></li><li><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p></li><li><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p></li><li><p>Markdown 编写的文档后缀为 .md, .markdown。</p></li></ul><p><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown教程</a><br><a href="https://c.runoob.com/front-end/712">Markdown在线编辑器</a><br><a href="https://typora.io/">Typora编辑工具</a><br><a href="https://blog.csdn.net/zzh45828/article/details/105883083?utm_source=app">Typora搭配Markdown</a></p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a><span id="jump">快捷键</span></h2><p><code>非源代码模式</code>下使用：</p><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center">Ctrl + B</td></tr><tr><td align="center">斜体</td><td align="center">Ctrl + I</td></tr><tr><td align="center">引用</td><td align="center">Ctrl + Q</td></tr><tr><td align="center">插入链接</td><td align="center">Ctrl + L</td></tr><tr><td align="center">插入代码</td><td align="center">Ctrl + K</td></tr><tr><td align="center">插入图片</td><td align="center">Ctrl + G</td></tr><tr><td align="center">插入表格</td><td align="center">Ctrl + T</td></tr><tr><td align="center">提升标题</td><td align="center">Ctrl + H</td></tr><tr><td align="center">有序列表</td><td align="center">Ctrl + O</td></tr><tr><td align="center">无序列表</td><td align="center">Ctrl + U</td></tr><tr><td align="center">横线</td><td align="center">Ctrl + R</td></tr><tr><td align="center">撤销</td><td align="center">Ctrl + Z</td></tr><tr><td align="center">重做</td><td align="center">Ctrl + Y</td></tr></tbody></table><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/84a26db56c9c0099690b44375a4e1c00.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文本高亮：==高亮文本==</span><br><span class="line">下标：水 H~2~O(用~中间的字体会标在下方)</span><br><span class="line">上标：面积 m^3^(尖符合中间的字会标记在上方)</span><br></pre></td></tr></table></figure><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<code>段落的换行是使用两个以上空格加上回车</code>。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*我是斜体*</span></span><br><span class="line"><span class="strong">**我是粗体**</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*我是粗斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">~~我是删除线~~</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"></span></span></span></span></span><br></pre></td></tr></table></figure><p><em>我是斜体</em><br><strong>我是粗体</strong><br><strong><em>我是粗斜体</em></strong><br><del>我是删除线</del></p><h2 id="字号、颜色"><a href="#字号、颜色" class="headerlink" title="字号、颜色"></a>字号、颜色</h2><p>通过html标记实现</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">23</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体，颜色#0099ff 字号23<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font color="#0099ff" size="23" face="黑体">我是黑体，颜色#0099ff 字号23</font><br>颜色值可以查看<a href="https://www.sojson.com/web/online.html">调色板</a></p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>markdown不支持空格，需要使用html标记语言<code>&amp;nbsp;</code></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">- - -</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">---------</span></span></span><br></pre></td></tr></table></figure><hr><hr><hr><hr><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文本<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><u>下划线文本</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^要注明的文本</span>]:<span class="link">这是对注明文本的补充说明。</span></span><br></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>（1）无序列表<br>无序列表使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)作为列表标记，这些标记后面要添加<code>一个</code>空格，然后再填写内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>（2）有序列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第一项</span><br><span class="line"><span class="number">2.</span> 第二项</span><br><span class="line"><span class="number">3.</span> 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>（3）列表嵌套<br>列表嵌套只需在子列表中的选项前面添加<code>四个空格</code>即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><p>（1）引用<br>Markdown 区块引用是在段落开头使用 <code>&gt;</code>符号 ，然后后面紧跟一个<code>空格符号</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p></blockquote></blockquote></blockquote></blockquote><p>（2）代码区块<br>1.代码区块使用 4 个空格或者<code>一个制表符（Tab) </code>，要与上面内容隔一个换行符。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a=1;</span><br><span class="line">int b=1;</span><br><span class="line">printf(a+b);</span><br></pre></td></tr></table></figure><pre><code>int a=1;int b=1;printf(a+b);</code></pre><p>2.可以用  ```  包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.单个代码块用单个 ` 包裹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C语言的&#96;scanf()&#96;怎么使用。</span><br></pre></td></tr></table></figure><p>C语言的<code>scanf()</code>怎么使用。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址  &quot;链接标题&quot;</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com/  &quot;百度&quot;</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">链接地址</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">www.baidu.com</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/" title="百度">百度</a><br>或者<br><a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>1.<strong>标题</strong>跳转（只限英文标题）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我向跳转到标题</span>](<span class="link">#要去哪个标题</span>)</span><br></pre></td></tr></table></figure><p><a href="#Typora">我向跳转到Typora</a><br>2.<strong>瞄点</strong>设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标页面设置：<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;jump&quot;</span>&gt;</span></span>快捷键<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">点击页面设置：[<span class="string">点我跳转到快捷键</span>](<span class="link">#jump</span>)</span><br></pre></td></tr></table></figure><p><a href="#jump">点我跳转到快捷键</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line">例如：![<span class="string">RUNOOB 图标</span>](<span class="link">http://static.runoob.com/images/runoob-logo.png</span>)</span><br></pre></td></tr></table></figure><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>可以使用快捷键Ctrl+T（非源代模式）<br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h2><pre><code>-: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h1><p>(1）对于 Markdown 中的语法符号，前面加<code>反斜线\</code>即可显示符号本身。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\\  --- \反斜线</span><br><span class="line">\<span class="emphasis">* ----  *</span>星号</span><br><span class="line">\<span class="emphasis">_----下划线</span></span><br><span class="line"><span class="emphasis">\&#123;\&#125; \[\] \(\) ----  &#123;&#125; [] ()</span></span><br><span class="line"><span class="emphasis">\#  ----  #</span></span><br><span class="line"><span class="emphasis">\+   ---- +</span></span><br><span class="line"><span class="emphasis">\-   -----   -</span></span><br><span class="line"><span class="emphasis">\.  ----- .</span></span><br><span class="line"><span class="emphasis">\!  ---- !</span></span><br></pre></td></tr></table></figure><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><p>可以使用<strong>HTML标记</strong>语言进行一些扩展。</p><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">orange</span>&gt;</span>背景色是：orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table><h2 id="Emoji表情符号"><a href="#Emoji表情符号" class="headerlink" title="Emoji表情符号"></a>Emoji表情符号</h2><p>emoji表情使用:EMOJICODE:的格式，详细列表可见 <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a><br>但是部分平台不支持。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:smile:</span><br><span class="line">:heart<span class="emphasis">_eyes:</span></span><br><span class="line"><span class="emphasis">:yum:</span></span><br><span class="line"><span class="emphasis">:kissing_</span>heart:</span><br></pre></td></tr></table></figure><h2 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h2><p><a href="https://blog.csdn.net/testcs_dn/article/details/44229085">markdown编辑器使用LaTex数学公式</a><br>1.行内公式：使用两个”$”符号引用公式:(与最左边隔开一个空格)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$公式$</span><br><span class="line">$\sqrt&#123;x^&#123;2&#125;&#125;$ </span><br></pre></td></tr></table></figure><p>显示结果:<br> $\sqrt{x^{2}}$ </p><p>2.行间公式：使用两对“$$”符号引用公式<br><a href="https://www.mohu.org/info/symbols/symbols.htm">常用数学符号的 LaTeX 表示方法</a></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>部分平台不支持，属于Typora扩展语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">c&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;c</span><br><span class="line">c(yes)-&gt;e</span><br><span class="line">c(no)-&gt;op1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/9cd7e37d1fd654d36c1832fe87254d28.png"></p><h2 id="Todo列表"><a href="#Todo列表" class="headerlink" title="Todo列表"></a>Todo列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 已处理的事情1</span><br><span class="line"><span class="bullet">-</span> [ ] 已处理的事情2</span><br><span class="line"><span class="bullet">-</span> [x] 未处理的事情1</span><br><span class="line"><span class="bullet">-</span> [x] 未处理的事情2</span><br><span class="line"><span class="bullet">-</span> [x] 未处理的事情3</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> 已处理的事情1</li><li><input disabled type="checkbox"> 已处理的事情2</li><li><input checked disabled type="checkbox"> 未处理的事情1</li><li><input checked disabled type="checkbox"> 未处理的事情2</li><li><input checked disabled type="checkbox"> 未处理的事情3</li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode每日一道</title>
      <link href="2020/11/24/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93/"/>
      <url>2020/11/24/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="2020/11/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理笔记</title>
      <link href="2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络笔记</title>
      <link href="2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记</title>
      <link href="2020/11/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><code>感谢!!</code><br><a href="https://blog.csdn.net/gl620321/article/details/107128661?utm_source=app">思维导图来源</a><br><a href="https://mubu.com/doc/Cd-Y4YOfkh#">操作系统王道</a></p><h1 id="操作系统引论及概述"><a href="#操作系统引论及概述" class="headerlink" title="操作系统引论及概述"></a>操作系统引论及概述</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/04/41a83c1d8dace273dc87b961c251a70f.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/24b735899f12b5416d21e4c0ebb4c288.png"></p><h2 id="OS功能和目标"><a href="#OS功能和目标" class="headerlink" title="OS功能和目标"></a>OS功能和目标</h2><p><code>操作系统</code>(Operating System，OS)是计算机系统中最重要的系统软件，它管理整个计算机系统的软件资源和硬件资源，是用户与计算机硬件的桥梁，是其它软件和程序的运行基础。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/c2d24416e4d4d5732a88766f3d7817f2.png"><br>（1）<code>作为系统资源的管理者</code></p><ul><li><code>处理机</code>管理<br>计算机系统中最重要的资源是中央处理机（简称CPU），任何计算都必须在CPU上进行。<br>在处理机管理中，最核心的问题是CPU时间的分配问题，这涉及分配的策略和方法。</li><li><code>存储器</code>管理<br>存储管理的主要工作是对内存储器进行合理分配、有效保护和扩充。<br>内存是现代计算机系统的中心，是可以被CPU和I/O设备共同访问的数据仓库。<br>内存通常是CPU直接寻址和访问的、唯一的大容量存储器。</li><li><code>设备</code>管理<br>设备管理是操作系统中最庞杂、琐碎的部分，其原因是：<br>①设备管理涉及很多实际的物理设备，这些设备品种繁多、用法各异。<br>②各种外部设备都能和主机并行工作，而且，有些设备可被多个进程所共享。<br>③主机和外部设备，以及各类外部设备之间的速度极不匹配，极差很大。</li><li><code>文件</code>管理<br>以上三种管理都是针对计算机的硬件资源的管理。<br>文件系统管理则是对软件资源的管理。为了管理庞大的系统软件资源及用户提供的程序和数据，操作系统将它们组织成文件的形式，操作系统对软件的管理实际上是对文件系统的管理。</li><li><code>作业</code>管理<br>作业指用户在一次计算过程中或者事务处理过程中，要求计算机所作工作的集合。<br>作业由程序、数据和作业说明书组成。在批处理系统中，作业是占据内存的基本单位。<br>作业管理是通过管理让这些作业按照自己所想要的方式来进行工作。</li></ul><p>（2）<code>作为用户和计算机硬件之间的接口</code></p><ul><li>命令接口<br>命令接口<code>允许用户直接使用</code>，命令接口又分<code>联机命令接口</code>和<code>脱机命令接口</code>。<br>联机命令接口：用户说一句，系统做一句（<code>交互式命令接口</code>）。<br>脱机命令接口：用户说一堆，系统做一堆（批<code>处理命令接口</code>）。</li><li>程序接口<br>用户程序<code>间接使用</code></li><li>GUI（图像用户界面）</li></ul><h2 id="OS特征"><a href="#OS特征" class="headerlink" title="OS特征"></a>OS特征</h2><p>OS四大特征：<code>并发</code>、<code>共享</code>、<code>虚拟</code>、<code>异步</code>。</p><ul><li><p>并发<br><code>并发</code>: 指两个或多个事件在同一<code>时间间隔内</code>发生。宏观上是同时发生的,但微观上是交替发生的。<br><code>并行</code>: 指两个或多个事件在同一<code>时刻同时</code>发生。<br>并发和共享是操作系统的两个最基本特征。<br>操作系统并发性指计算机系统中同时存在着多个运行着的程序。</p><blockquote><p>例如：8-9点一号执行，9-10点二号执行，10-11点三号执行，为并发情况。而在8点一二号一起执行为并行情况。</p></blockquote></li><li><p>共享<br>资源共享指系统中的资源可供内存中多个并发执行的进程共同调用。<br><code>互斥共享</code><br>｜ 同一个时间段只允许一个进程访问资源(摄像头/麦克风)<br><code>同时共享</code><br>｜ 允许一个时间段多个进程“同时”(宏观上)访问某些资源（微观上是分时共享），比如硬盘读写<br>并发和共享互为存在条件。</p></li><li><p>虚拟<br>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体(前者)是实际存在的,而逻辑上对应物(后者)是用户感受到的。</p></li><li><p>异步<br>异步是指,在多道程序环境下,允许多个程序并发执行,但由于资源有限,进程的执行不是一贯到底的,是<code>走走停停</code>（等待资源进程阻塞）,以不可预知的速度向前推。</p></li></ul><h2 id="OS发展与分类"><a href="#OS发展与分类" class="headerlink" title="OS发展与分类"></a>OS发展与分类</h2><ul><li><p>手工操作阶段<br>纸带机（用户独占全机，人机速度矛盾，资源利用率极低）。</p></li><li><p>单道批处理系统<br>引入了脱机输入/输出技术（磁带），通过<code>监督程序</code>（操作系统雏形）控制作业输入输出。<br>外围机负责把输入纸带录入磁带。<br>缓解了人机速度矛盾，提高了资源利用率，但是CPU是串行的，大量CPU时间浪费在I/O等待上。</p></li><li><p>多道批处理系统<br>磁带往内存输入多道程序，并发执行，输入、计算、输出互不干扰<br>操作系统诞生，引入了中断技术，资源利用率大幅上升，但是缺少人机交互功能，用户响应时间长（用户提交作业之后只能等待作业完成）。</p></li><li><p>分时操作系统<br>分时操作系统：计算机以<code>时间片</code>为单位<code>轮流</code>为各个用户/作业服务,各个用户可通过终端与计算机进行交互。<br>主要优点:用户请求可以被即时响应,解决了人机交互问题。允许多个用户同时使用一台计算机,并且用户对计算机的操作相互独立,感受不到别人的存在。<br>主要缺点:不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的,循环地为每个用户/作业服务一个时间片,不区分任务的紧急性。</p></li><li><p>实时操作系统<br><code>硬实时系统</code>：必须在绝对严格的规定时间内完成处理。<br><code>软实时系统</code>：能接受偶尔违法时间规定。<br>主要优点:能够优先响应一些紧急任务,某些紧急任务不需时间片排队。在实时操作系统的控制下,计算机系统接收到外部信号后及时进行处理,并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</p></li><li><p>网络操作系统<br>网络操作系统:是伴随着计算机网络的发展而诞生的,能把网络中各个计算机有机地结合起来,实现数据传送等功能,实现网络中各种资源的共享(如文件共享)和各台计算机之间的通信。(如: Windows NT就是一种典型的网络操作系统,网站服务器就可以使用)</p></li><li><p>分布式操作系统<br>分布式操作系统:主要特点是分布性和并行性。系统中的各台计算机地位相同,任何工作都可以分布在这些计算机上,由它们并行、协同完成这个任务。</p></li></ul><h2 id="OS运行机制-体系结构"><a href="#OS运行机制-体系结构" class="headerlink" title="OS运行机制/体系结构"></a>OS运行机制/体系结构</h2><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><ul><li><p>指令<br>指令就是处理器(CPU)能识别、处理的最基本命令。<br><code>特权指令</code>：如内存清零指令。（不允许用户程序使用）<br><code>非特权指令</code>：如普通的运算指令。</p></li><li><p>处理机状态<br><code>用户态</code>：此时CPU只能执行非特权指令。<br><code>核心态</code>：特权命令、非特权命令都可执行。</p><blockquote><p>处理机状态用程序状态寄存器(PSW)中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态。</p></blockquote></li><li><p>程序<br><code>内核程序</code>：系统的管理者，可以执行特权和非特权指令，运行在核心态。<br><code>应用程序</code>：只能执行非特权指令，运行在用户态。</p></li></ul><h3 id="OS内核"><a href="#OS内核" class="headerlink" title="OS内核"></a>OS内核</h3><p>计算机最底层的软件，是操作系统最核心的部分。实现操作系统<code>内核功能</code>的程序才是<code>内核程序</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/222957e356925c52dca1823b5730791a.png"></p><ul><li><code>时钟管理</code><br>实现计时功能。</li><li><code>中断处理</code><br>负责实现中断机制。</li><li><code>原语</code><br>是一种特殊的程序，处于操作系统最底层，是最接近硬件的部分。<br>运行时间短，调用频繁，具有<code>原子性</code>——运行只能一气呵成，不可中断。</li><li><code>系统资源管理</code><br>进程管理、存储管理、设备管理。<blockquote><p>有的操作系统不把这个作为“内核功能”（微内核)，不同操作系统，对内核功能的划分可能不一样。</p></blockquote></li></ul><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p>操作系统的体系结构：<code>大内核</code>和<code>微内核</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/926936683836e9fe7e5cbf31a498d3c5.png"></p><ul><li><p>大内核<br>将操作系统的<code>主要功能模块</code>都作为系统内核，运行在核心态。<br>高性能，但是内核代码庞大难以维护。</p></li><li><p>微内核<br>只把<code>基本概念</code>保留在内核。<br>功能少，功能清晰方便维护，但是需要频繁的在核心态和用户态之间切换，性能低。</p></li></ul><blockquote><p>OS体系结构可以类比于企业的管理问题：<code>内核</code>就是企业的<code>管理层</code>，负责一些重要的工作。只有管理层才能执行<code>特权指令</code>，普通员工只能执行<code>非特权指令</code>。<code>用户态</code>、<code>核心态</code>之间的<code>切换</code>相当于普通员工和管理层之间的工作交流。<br><code>大内核</code>：企业初创时体量不大，管理层的人会负责大部分的事情。<br><code>微内核</code>：随着企业体力越来越大，管理层只负责最核心的一些工作。</p></blockquote><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p>中断机制的诞生：<br>早期计算机，各程序只能串行执行，系统资源利用率低。<br>为了解决上述问题，人们发明操作系统，引入中断机制，实现了多道程序并发执行。<br><code>本质：发生中断</code>就意味着<code>需要操作系统介入,开展管理工作</code>。</p><h3 id="中断的概念和作用"><a href="#中断的概念和作用" class="headerlink" title="中断的概念和作用"></a>中断的概念和作用</h3><p>​中断信号可以使CPU从<code>用户态</code>切换为<code>核心态</code>,<code>使操作系统获得计算机的控制权</code>。有了中断才能实现多道程序并发执行。</p><blockquote><p>由于操作系统的管理工作(比如进程切换、分配I/O设备等)需要使用<code>特权指令</code>,因此CPU要从用户态转为核心态。</p></blockquote><p><code>中断</code>是CPU从用户态-&gt;核心态切换的<code>唯一途径</code>。<br>核心态-&gt;用户态切换只需要执行一个<code>特权指令</code>，将<code>PSW</code>设置为<code>0</code>。</p><h3 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h3><ul><li><p><code>内中断</code>(异常/例外/陷入)<br>信号来源CPU<code>内部</code>，<code>与当前执行的指令有关</code><br><code>自愿中断(指令中断) </code>：</p><pre><code>      系统调用时使用的访管指令(陷入指令/trap指令)</code></pre><p><code>强迫中断</code>：</p><pre><code>      1.硬件故障（缺页错误）2.软件中断（除0错误）</code></pre><p>陷阱、陷入(trap)</p><pre><code>      有意而为之的异常，系统调用</code></pre><p>故障(fault)</p><pre><code>      错误条件引起的，可能被故障处理程序修复的，如缺页</code></pre><p>终止(abort)</p><pre><code>      致命错误，无法修复，终止处理程序不再将控制返回给应用程序，如除0</code></pre></li><li><p><code>外中断</code>(狭义中断)<br>信号来源CPU<code>外部</code>，<code>与当前执行的指令无关</code><br><code>外设请求</code>：</p><pre><code>       外设(比如打印机)I/O操作完成发出中断信号       键盘输入一个字符​</code></pre><p><code>人工干预</code>：</p><pre><code>        用户强制终止一个进程</code></pre></li></ul><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组<code>系统调用</code>组成。<br>系统调用是操作系统提供给应用程序(程序员/编程人员)使用的接口,可以理解为一种可供应用程序调用的特殊函数,应用程序可以发出<code>系统调用请求</code>来获得操作系统的服务,操作系统会对各个请求进行<code>协调管理</code>。</p><blockquote><p>例如A和B共用打印机，A按下打印后，打印机工作，B接着又按下打印，打印机不会把A和B的打印内容混合在一起。</p></blockquote><p>应用程序通过<code>系统调用请求</code>操作系统的服务。<br>​系统中的各种共享资源都由操作系统统一掌管,因此在用户程序中,凡是与资源有关的操作(如存储分配、I/O操作、文件管理等) ,都必须通过系统调用的方式向操作系统提出服务请求,由操作系统代为完成。这样可以保证系统的稳定性和安全性,防止用户进行非法操作。<br>系统调用相关的处理需要在<code>核心态</code>下完成。</p><h3 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/e7ab8bab64bae5282f57c5f7297e7ec8.png"></p><ul><li>系统调用是操作系统向上提供的接口</li><li>有的库函数是对于系统调用的进一步封装</li><li>大多数高级语言提供的库函数间接进行系统调用</li></ul><h3 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/7f5ff4cb6568a412aaa0f91b3528db13.png"></p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/01/02066158f4beb9f2c557383fcf86ec8a.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS+JavaScript</title>
      <link href="2020/11/24/HTML+CSS+JavaScript/"/>
      <url>2020/11/24/HTML+CSS+JavaScript/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> HTML+CSS+JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML+CSS+JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法随笔</title>
      <link href="2020/11/24/%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/"/>
      <url>2020/11/24/%E7%AE%97%E6%B3%95%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="菲波拉契"><a href="#菲波拉契" class="headerlink" title="菲波拉契"></a>菲波拉契</h2><blockquote><p>有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？<br>//这是一个菲波拉契数列问题</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？   </span></span><br><span class="line"><span class="comment">//这是一个菲波拉契数列问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1=f2=1;</span></span><br><span class="line"><span class="comment">f3=f1+f2=2;</span></span><br><span class="line"><span class="comment">fn=f(n-1)+f(n-2);</span></span><br><span class="line"><span class="comment">1,1,2,3,5,8,13,21...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第1个月的兔子对数：1\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第2个月的兔子对数：1\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,f,m=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">24</span>;i++)&#123;</span><br><span class="line">f=f2;   <span class="comment">//引进f保存叠加变量 </span></span><br><span class="line">f2=f1+f2;</span><br><span class="line">f1=f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个月的兔子对数：%d\n&quot;</span>,i,f2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><blockquote><p>判断101-200之间有多少个素数，并输出所有素数。<br>程序分析：判断素数的方法：用一个数分别去<code>除2到sqrt(这个数)</code>，如果能被整除， 则表明此数不是素数，反之是素数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"><span class="comment">//判断素数的方法：用一个数分别去除2~sqrt(这个数)，如果能被整除，则表明不是素数，反之为素数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);i++) <span class="comment">//从 2到算术平方根遍历 </span></span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)    <span class="comment">//存在约数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//非素数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(isPrime(i))&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,i);</span><br><span class="line">count++; </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n素数：只有1和它本身这两个因子的数！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n素数个数:%d\n&quot;</span>,count); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.输出斐波纳契数列前40个数据。<br>（要求：利用函数调用实现，输出来时为一排10个，则输出有4行；若一排8个，则输出有5行。）</p><p>2.输出魔方阵。如3行3列、4行4列、5行5列（如输入3，则输出的魔方阵为3行3列，如输入4，输出的魔方阵为4行4列。）<br><a href="https://blog.csdn.net/leipinyuan/article/details/79090126">魔方阵</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言程序设计</title>
      <link href="2020/11/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>2020/11/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_45583303/article/details/105373477">MSDN Library官方文档下载与安装（MFC）</a></p><p><a href="https://blog.csdn.net/huijunma2010/article/details/86553407">C语言编译器哪个好_6款好用的C语言编译器推荐</a></p><p><a href="https://bloodshed-dev-c.en.softonic.com/">Dev-C++编译器下载地址</a></p><h1 id="程序设计和C语言"><a href="#程序设计和C语言" class="headerlink" title="程序设计和C语言"></a>程序设计和C语言</h1><p><strong><em><code>程序</code>，就是一组计算机能识别和执行的指令。</em></strong></p><h2 id="计算机语言的发展"><a href="#计算机语言的发展" class="headerlink" title="计算机语言的发展"></a>计算机语言的发展</h2><p>计算机语言就是指计算机和人都能识别的语言。</p><ul><li>机器语言<br>计算机工作基于<code>二进制</code>，从根本上说，计算机只能识别和接受由0和1组成的指令。<br><code>机器指令</code>：计算机能直接识别和接受的二进制代码。例如：1011 0110 0000 0000 代表一次加法<br>机器语言就是<code>机器指令的集合</code>。</li><li>汇编语言<br>汇编语言又叫符号语言，指用一些英文和数字表示一个指令，例如ADD代表“加”。<br>计算机并不能直接识别符号，需要通过<code>汇编语言</code>把符号语言的指令转化为<code>机器指令</code>。</li></ul><blockquote><p>机器语言和汇编语言完全依赖于具体机器特性，是面向机器的语言，称为计算机**<em><code>低级语言</code>**</em>。</p></blockquote><ul><li>高级语言<br>高级语言不依赖于具体机器，所编写的程序对任何型号的计算机都适用。<br>当然，计算机也不能直接识别高级语言程序，需要通过<code>编译器</code>转化为机器指令。</li></ul><blockquote><p>高级语言经历了不同的发展阶段：（1）非结构化的语言（2）结构化语言（3）面向对象的语言。</p></blockquote><h2 id="C语言的发展及特点"><a href="#C语言的发展及特点" class="headerlink" title="C语言的发展及特点"></a>C语言的发展及特点</h2><p>1970年美国AT&amp;T贝尔实验室的Ken Thompson以<code>BCPL语言</code>为基础设计了B语言，1972-1973年，<code>D.M.Ritchie</code>在B语言的基础上设计出了C语言。开发C语言的目的在于<code>尽可能降低用它所写的软件对硬件平台的依赖程度，使之具有可移植性</code>  。<br><code>C语言特点</code>:</p><ul><li>语言简洁、紧凑，使用方便、灵活。<br>C语言一共只有37个关键字、9中控制语句。只包含极少与硬件有关的拆分，C语言不直接提供输入输出等语句（这些都由编译系统所提供的库函数实现），相当简洁。</li><li>运算符丰富<br>C语言运算符包含范围很广泛，共有34种运算符。</li><li>数据类型丰富。</li><li>具有结构化的控制语句。</li><li>语法限制不太严格，程序设计自由度大。</li><li><strong><em>C语言允许<code>直接访问物理地址</code>，能进行位（bit）操作，能实现汇编语言的大部分功能，<code>可以直接对硬件进行操作</code></em></strong>。</li><li>用C语言编写的程序可移植性好。</li></ul><h2 id="C语言结构"><a href="#C语言结构" class="headerlink" title="C语言结构"></a>C语言结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  //编译预处理指令</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//定义主函数 </span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//函数开始的标志</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;HelloWorld!&quot;</span>); <span class="comment">//输出语句</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//函数执行完毕时返回函数值0</span></span><br><span class="line">&#125;<span class="comment">//函数结束的标志</span></span><br></pre></td></tr></table></figure><ul><li>一个程序由一个或多个源程序文件组成。<br>①预处理指令。（#include&lt;stdio.h&gt;)<br>②全局声明。在函数之外进行数据声明，对整个源程序文件范围内有效，在函数中声明的变量为局部变量，只在函数范围内有效。<br>③函数定义。</li><li>函数是C程序的主要组成部分。<br>一个C语言程序是由一个或多个函数组成的，其中必须包含一个main函数（有且只有一个main函数）。</li><li>一个函数包括两个部分<br>①函数首部<br>即函数第1行，包括函数名、函数类型、函数属性、函数参数名、参数类型。<br>②函数体<br>包含声明部分和执行部分。</li><li>程序总是从main函数开始执行的。</li><li>程序中对计算机的操作是由函数中的C语言完成的。</li><li>在每个数据声明和语句的最后必须有一个分号。</li><li>C语言本身不提供输入输出语句。</li><li>程序应当包含注释。</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>一个程序主要包括<code>对数据的描述</code>和<code>对操作的描述</code>。操作的描述即要求计算机进行操作的步骤，也就是<code>算法</code>。</p><blockquote><p>著名计算机科学家沃思(Nikiklaus Wirth)提出一个公式： <strong><em><code>算法+数据结构=程序</code></em></strong></p></blockquote><h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h2><ul><li><strong><em>有穷性</em></strong><br>一个算法应包含有限的操作步骤，而不能是无限的。</li><li><strong><em>确定性</em></strong><br>算法中每一个步骤都应当是确定的，而不应当是含糊的、模棱两可的。</li><li><strong><em>有零个或多个输入</em></strong><br>输入就是在执行算法时需要从外界取得必要的信息。</li><li><strong><em>有一个或多个输出</em></strong><br>算法的目的就是为了求解，“解”就是输出。</li><li><strong><em>有效性</em></strong><br>算法中的每一个步骤都应当能有效地执行，并得到确定的结果。</li></ul><h2 id="算法的优劣"><a href="#算法的优劣" class="headerlink" title="算法的优劣"></a>算法的优劣</h2><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>时间复杂度和空间复杂度<br>①时间复杂度：算法运行所需的时间。<br>②空间复杂度：算法运行所需的存储空间的多少。</li></ul><h2 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h2><ul><li>自然语言</li><li>流程图<br>①顺序结构<br>②选择结构<br>③循环结构</li><li>N-S流程图</li><li>伪代码</li><li>计算机语言</li></ul><h2 id="结构化程序设计方法"><a href="#结构化程序设计方法" class="headerlink" title="结构化程序设计方法"></a>结构化程序设计方法</h2><ul><li>自顶向下</li><li>逐步细化</li><li>模块化设计</li><li>结构化编码</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th align="center">类型</th><th align="center">16位</th><th align="center">32位</th><th align="center">64位</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">short int</td><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">2</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">unsigned int</td><td align="center">2</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">long</td><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">long long</td><td align="center">8</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">unsigned long</td><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr></tbody></table><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>在程序运行过程中，其值不能被改变的量称为常量。</p><ul><li><p>整型常量。如1000，123。<br>①八进制整数：常数前加0进行修饰。如0123。<br>②十六进制整数：常量前加0x作为前缀。如0x123。</p></li><li><p>实型常量。<br>①十进制小数形式。如123.4，0.3。<br>②指数形式。如12.34e3（代表12.34*10的三次方）</p></li><li><p>字符常量<br>①普通字符。如’a’,’3’。<br>②转义字符。以字符”&quot;开头的字符序列。</p></li><li><p>字符串常量。如”China”。</p></li><li><p>符号常量。用#define指令，指定用一个符号代表一个常量。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> PI 3.1415      <span class="comment">//注意行末没有分号</span></span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量代表一个有名字的、具有特定属性的一个**<em><code>存储单元</code>**</em>，可以用来存放数据，页就是存放变量的值，在程序运行时间，变量的值是可以改变的。 </li><li>变量必须<code>先定义，后使用</code>。变量名和变量值是不同的概念，变量名是存储空间的名字，变量值是存放在存储空间的数据。</li><li>在编译时，通过变量名找到相应的内存地址，从该存储单元中读取数据。</li></ul><h2 id="常变量"><a href="#常变量" class="headerlink" title="常变量"></a>常变量</h2><p>C99允许使用<code>常变量</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//a被定义为一个整型变量，指定值为3，而且在变量存在期间其值不能改变。</span></span><br></pre></td></tr></table></figure><p>常变量和符号变量的区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> pi=<span class="number">3.1415</span></span><br></pre></td></tr></table></figure><ul><li>符号常量使用#define定义，是预编译指令，它是用符号常量代表一个字符串，在预编译时仅是进行字符替换，在预编译后，符号常量就不存在了（全置换为3.1415了），对符号常量是不分配存储单元的。</li><li>常变量占用存储单元，有变量值，只是该值不变而已。</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识就是一个对象的名字。</p><ul><li>C语言规定标识符只能使用<code>字母、数字和下划线</code>组成，且不能以数字开头。</li><li>C语言区分大小写，sun和SUM是两个不同的变量。</li><li>标识符不能是关键字。</li></ul><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><ul><li><p>基本整型（int型）<br>编译系统分配给int型数据2个字节或者<code>4</code>个字节（由具体的C编译系统自行决定）。<br>整型在存储单元中的存储方式是：用整数的补码形式存放。<br>一个正数的补码是此数的二进制形式，如5的二进制形式是101，如果用两个字节存放一个整数，则在存储单元中数据形式为 0000 0000 0000 0101。第一个数字为符号位，0代表整数，1代表负数。<br>求负数的补码方法：**<em>先将此数的绝对值写成二进制形式，然后对其后面所有各二进制按位取反，再加1**</em>。如-5：1111 1111 1111 1011。</p></li><li><p>短整型（short int）<br>int数据4个字节，短整型2个字节，存储方式和int型相同。</p></li><li><p>长整型（long int)</p></li><li><p>双长整型（long long int)</p><blockquote><p>sizeof(short)&lt;=sizeof(int)&lt;=sizeof(long)&lt;=sizeof(long long)</p></blockquote></li><li><p>无符号和有符号<br>有符号(sighed)整型数据存储单元中最高位代表符号（0为正，1为负）。<br>无符号(unsighed)，存储单元中全部二进制都用作存放数值本身，而没有符号。无符号只能存放不带符号的整数，如123，而不能存放负数，如-123。但由于最高位不要来表示符号，而用来表示数值，所以<code>无符号整型变量可以存放的正数范围比一般整型变量中整数的范围扩大一倍</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> num=<span class="number">10</span>;  <span class="comment">//signed可以省去</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> NUM=<span class="number">10</span>;  <span class="comment">//不能为负数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>,NUM);  <span class="comment">//指定用%u格式输出</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字符型数据"><a href="#字符型数据" class="headerlink" title="字符型数据"></a>字符型数据</h2><p>字符是以<code>整数形式</code>（字符的ASCII代码）存放在内存单元中的。例如</p><table><thead><tr><th align="center">字符</th><th align="center">ASCII代码</th><th align="center">二进制形式</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">65</td><td align="center">1000001</td></tr><tr><td align="center">a</td><td align="center">97</td><td align="center">1100001</td></tr><tr><td align="center">1</td><td align="center">49</td><td align="center">0110001</td></tr><tr><td align="center">%</td><td align="center">32</td><td align="center">0100000</td></tr><tr><td align="center">%</td><td align="center">37</td><td align="center">0100101</td></tr><tr><td align="center">\n</td><td align="center">10</td><td align="center">0001010</td></tr></tbody></table><p>可以看到，以上的字符的ASCII代号码最多用<code>7个二进制</code>就可以表示。所有，在C中，**<em>指定一个字节(8位)存储一个字符**</em>。此时，字节中第一位置为0，如“a”十进制数97，二进制数为0110 0001。</p><blockquote><p>字符‘1’只是代表一个形状为1的符号，在需要时按原样输出，在内存中以ASCII码形式存储，占1个字节。整数1是以整数形式存储方式（以二进制补码方式）存储的，占2个或4个字节。</p></blockquote><p><strong><em><code>字符变量</code></em></strong><br>字符变量用<code>char</code>定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c=<span class="string">&#x27;?&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c\n&quot;</span>,c,c);<span class="comment">// 63 ?</span></span><br><span class="line"><span class="comment">//%d输出整型，%c输出字符，一个字符既可以以字符形式输出，也可以以整型形式输出。</span></span><br><span class="line"><span class="comment">//定义c为字符型变量并使初值为字符&#x27;?&#x27;。&#x27;?&#x27;的ASCII代码是63，系统把整数63赋给变量c。</span></span><br><span class="line"><span class="comment">//c是字符变量，实际上是一个字节的整型变量，由于常用来存放字符，故称为字符变量。</span></span><br><span class="line"><span class="comment">//可以把0~127之间的整数赋给一个字符变量</span></span><br></pre></td></tr></table></figure><h2 id="浮点型数据"><a href="#浮点型数据" class="headerlink" title="浮点型数据"></a>浮点型数据</h2><p>浮点型数据是用来<code>表示具有小数点的实数</code>的。在C语言中，实数是以<code>指数形式</code>存放在存储单元中的。一个实数表示为指数可以有不止一种形式，如3.14159可以表示为：3.14159<em>10^0,0.314159</em>10^1,0.0314159<em>10^2等，可以看到：小数点的位置是可以在314159几个数字之间和之前或之后浮点的，只要在小数点位置浮动的同时改变指数的值，就可以保证其指不变。由于小数点位置可以浮点，所以实数的指数形式称为**</em><code>浮点数</code>***。</p><blockquote><p>规范化指数形式：小数部分中小数点前的数字为0、小数点后第1位数字不为0的表示形式。如0.1314159*10^1。</p></blockquote><p>浮点数类型包括float(单精度浮点型)、double(双精度浮点型)、long double(长双精度浮点型)。</p><ul><li>float型(单精度浮点型)<br>编译系统为每一个float型变量分配<code>4</code>个字节，数值以规范化的<code>二进制数指数形式</code>存放在存储单元中。存储时，分成小数部分和指数部分两个部分，分别存放。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a=<span class="number">3.14159f</span>;<span class="comment">//加f后缀，表示单精度浮点型</span></span><br></pre></td></tr></table></figure><ul><li><p>double型(双精度浮点型）<br>为了扩大能表示的数值范围，用8个字节存储一个double型数据，可以得到15位有效数字。</p></li><li><p>long double型(长双精度型)<br>分配16字节。</p></li></ul><h2 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h2><ul><li>基本的算术运算符</li></ul><blockquote><p>两个实数消除结果为双精度实数，<code>两个整数相除结果为负数</code>，如5/3=1，舍去小数部分。但是，如果除数或被除数中有一个负数，则舍入方向是不固定的。如-5/3可能为-1或者-2。多数C编译系统采取“<code>向零取整</code>”的方法，即5/3=1，-5/3=-1，取整后向零靠拢。</p></blockquote><ul><li>自增、自减运算符<br>作用是使变量的值加1或减1，只能用于变量。常用于循环，使循环变量加1；也用于指针变量，使指针指向下一个地方。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">++i,--i; <span class="comment">//在使用i之前，先使i的值加(减)1，先加后用 </span></span><br><span class="line">i++,i--;  <span class="comment">//在使用i之后，使i的值加(减)1，先用后加</span></span><br><span class="line"><span class="comment">//例i=3</span></span><br><span class="line">j=++i;  <span class="comment">//i的值先变成4，在赋值给j，j的值为4</span></span><br><span class="line">j=i++;  <span class="comment">//先将i的值赋给j，j的值为3，然后i变为4</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/smwikipedia/articles/1229984.html">i++ : 顺序点(sequence point) 与 副作用 (side effect)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2</span>,b=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//在执行b+=()+()时++a的值已经是4了,++a的作用就是程序执行进行a=a+1的操作,两个括号使这个过程被执行了两次，所以由3变成4.</span></span><br><span class="line"><span class="comment">//计算机处理这种运算式的时候，不是依次读入每个字符的，而是整体一起读入的，然后再进行变量替换的，两个++a对于计算机而已，就是a自加2次，然后算完的a再进行计算其他优先低的运算符</span></span><br><span class="line">b+=(++a)+(++a);  <span class="comment">//b=b+(++a=3)+(++a=4);//b=3+4+4(到这一步的表达式的时候a值为4，传回的是引用参数类型，最后一个a为4，返回引用两个a都是4)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b); <span class="comment">//b=11</span></span><br></pre></td></tr></table></figure><h2 id="优先级与结合性"><a href="#优先级与结合性" class="headerlink" title="优先级与结合性"></a><span id="priority">优先级与结合性</span></h2><p>用算术运算符和括号将运算对象（操作符）连接起来的式子称为<code>C算术表达式</code>。如a*b/c-1.5+’a’。</p><ul><li>优先级<br>按符号优先级顺序执行，例如先乘除后加减。</li><li>结合性<br>优先级相同时，算术运算符的结合方向为“从左至右”，例如a-b+c。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/c7a92f12de8994c61d6b12dc1dccc5c6.png"><blockquote><p><strong><em>优先级</em></strong><br>赋值运算符  &lt;  &amp;&amp;和||  &lt;  关系运算符  &lt;  算术运算符  &lt;  !(非）</p></blockquote></li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>可以利用强制类型转换运算符将一个表达式转换为所需类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">double</span>)a;</span><br><span class="line">(<span class="keyword">int</span>)(x+y);</span><br><span class="line">(<span class="keyword">float</span>)(<span class="number">5</span>%<span class="number">3</span>);</span><br></pre></td></tr></table></figure><blockquote><p>强制类型转换时，得到一个所需类型的中间数据，而原来变量的类型未发生变化。</p></blockquote><h2 id="C运算符"><a href="#C运算符" class="headerlink" title="C运算符"></a>C运算符</h2><table><thead><tr><th>C运算符</th><th>说明</th></tr></thead><tbody><tr><td>算术运算符</td><td>+  -  *  / % ++  –</td></tr><tr><td>关系运算符</td><td>&gt; &lt; == &gt;= &lt;= !=</td></tr><tr><td>逻辑运算符</td><td>！ &amp;&amp; ||</td></tr><tr><td>位运算符</td><td>&lt;&lt;   &gt;&gt;  ~ | ^ &amp;</td></tr><tr><td>赋值运算符</td><td>=</td></tr><tr><td>条件运算符</td><td>?:</td></tr><tr><td>逗号运算符</td><td>,</td></tr><tr><td>指针运算符</td><td>*和&amp;</td></tr><tr><td>求字节数运算符</td><td>sizeof</td></tr><tr><td>强制类型转换运算符</td><td>(类型)</td></tr><tr><td>成员运算符</td><td>.  -&gt;</td></tr><tr><td>下标运算符</td><td>[]</td></tr><tr><td>其他</td><td>如函数调用运算符()</td></tr></tbody></table><h2 id="C语句"><a href="#C语句" class="headerlink" title="C语句"></a>C语句</h2><p>语句的作用是向计算机系统发出操作指令，要求执行相应的操作。</p><ul><li>控制语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()...<span class="keyword">else</span>... <span class="comment">//条件语句</span></span><br><span class="line"><span class="keyword">for</span>()...       <span class="comment">//循环语句</span></span><br><span class="line"><span class="keyword">while</span>()...     <span class="comment">//循环语句</span></span><br><span class="line"><span class="keyword">do</span>...<span class="keyword">while</span>()   <span class="comment">//循环语句</span></span><br><span class="line"><span class="keyword">continue</span>       <span class="comment">//结束本次循环语句</span></span><br><span class="line"><span class="keyword">break</span>   <span class="comment">//中止循环语句</span></span><br><span class="line"><span class="keyword">switch</span>         <span class="comment">//多分支选择语句</span></span><br><span class="line"><span class="keyword">return</span>         <span class="comment">//返回语句</span></span><br><span class="line"><span class="keyword">goto</span>           <span class="comment">//转向语句，在结构化程序中基本不用goto语句</span></span><br></pre></td></tr></table></figure><ul><li>函数调用语句<br>由一个函数调用加分号构成</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is a c statement&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>表达式语句<br>一个表达式的最后加一个分号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i++    <span class="comment">//表达式</span></span><br><span class="line">i++;   <span class="comment">//表达式语句</span></span><br></pre></td></tr></table></figure><ul><li>空语句<br>只有一个分号，可以用来作为流程的转向点或者循环语句中的循环体。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;</span><br></pre></td></tr></table></figure><ul><li>复合语句<br>使用{}把一些语句和声明语句括起来称为复合语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> pi=<span class="number">3.14</span>,r=<span class="number">2.5</span>,area;</span><br><span class="line">area=pi*r*r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;area=%f&quot;</span>,area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><ul><li><p>赋值运算符(=)</p></li><li><p>复合赋值运算符<br>在赋值符(=)之前加上其他运算符。例如+=,-=,*=,/=，%</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a+=<span class="number">3</span>;    <span class="comment">//等价于 a=a+3</span></span><br><span class="line">x*=y+<span class="number">8</span>;  <span class="comment">//等价于 x=x*(y+3)</span></span><br><span class="line">x%=<span class="number">3</span>;    <span class="comment">//等价于 x=x%3</span></span><br></pre></td></tr></table></figure><ul><li>赋值表达式<br>由赋值运算符将一个变量和表达式连接起来。<br>赋值运算符左侧值称为左值，左值不能为表达式和常量，而应该是变量。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=(b=<span class="number">3</span>*<span class="number">4</span>);  <span class="comment">//正确</span></span><br><span class="line">(a=b)=<span class="number">3</span>*<span class="number">4</span>; <span class="comment">//不正确</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a=b);<span class="comment">//可以在printf函数中完成赋值和输出</span></span><br></pre></td></tr></table></figure><ul><li><p>赋值过程中的类型转换<br>① 浮点型数据赋给整型变量时，先对浮点数取整，即舍弃小数部分，然后赋予整型变量。</p><pre><code>  int i=3.56;//i=3</code></pre><p>②整型数据赋给单、双精度变量时，数值不变，但以浮点数形式存储到变量中。</p><pre><code>  float f=23;  //先转换成23.0，再按指数形式存储</code></pre><p>③double型赋值给float变量时，先将双精度转换为单精度，即只取6~7位有效数字，存储到float变量的4个字节中，float型赋值给double变量时，数值不变，在内存中以8个字节存储，有效位数扩展到15位。<br>④字符型赋值给整型变量时，将字符的ASCII代码赋给整型变量。</p><pre><code>  int i=&#39;A&#39;; //i=65</code></pre><p>⑤将一个占字节多的整型数据赋给一个占字节少的整型变量或字符变量，只将其低字节原封不动地送到被赋值的变量（即发生“截断”）。</p><pre><code>  int i=289;  char c=&#39;a&#39;;  c=i;   //c的值为33，如果用%c输出，即字符“！”。  //因为整型是4字节，字符型是1字节，所以只取得了int型变量值289二进制最后8位，即0010 0001，为33。</code></pre></li><li><p>赋值表达式和赋值语句</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max=a   <span class="comment">//赋值表达式，末尾没有分号</span></span><br><span class="line">max=a;<span class="comment">//赋值语句</span></span><br></pre></td></tr></table></figure><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><ul><li><p>所谓输入输出是以<code>计算机主机</code>为主体而言的。从计算机向输出设备（如显示器、打印机等）输出数据称为<code>输出</code>，从输入设备（如键盘、磁盘、光盘等）向计算机输入数据称为<code>输入</code>。</p></li><li><p>C语言本身不提供输入输出语句，输入输出操作是由C标准函数库中的函数来实现的。printf和<br>scanf不是C语言的关键字，而是库函数的名字。</p></li><li><p>在使用系统库函数时，要在程序开头用预处理指令#include把有关头文件放到本程序中。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include是将所需要的“头文件”包括到源文件中。</span></span><br><span class="line"><span class="comment">//stido是standard input&amp;output(标准输入和输出)的缩写。</span></span><br><span class="line"><span class="comment">//.h是header的缩写</span></span><br><span class="line"><span class="comment">//此语句的意思就是将stido.h头文件的内容调出来取代本行的#include指令。</span></span><br></pre></td></tr></table></figure><h2 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h2><ul><li><p><strong><em>printf(格式控制，输出序列);</em></strong></p></li><li><p>格式控制<br>①格式声明：由%和格式字符组成。如%d，作用是将数据指定格式输出。<br>②普通字符：需要按原样输出。</p></li><li><p>输出列表<br>程序需要输出的数据，可以是常量、变量或表达式。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a,b);</span><br></pre></td></tr></table></figure><blockquote><p>printf是函数，因此格式控制和输出序列但是函数的参数。</p></blockquote><h2 id="格式字符"><a href="#格式字符" class="headerlink" title="格式字符"></a>格式字符</h2><ul><li><strong><em>d格式符</em></strong></li></ul><p>用来输出一个有符号的十进制整数。<br>输出时可以指定数据的<code>域宽（即所占列数）</code>，如%5d，指定输出占5列，输出的数据在此5列区域的<code>右侧</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d\n%5d\n&quot;</span>,<span class="number">12</span>,<span class="number">-134</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   12  //12前有3个空格 </span></span><br><span class="line"><span class="comment"> -134  //-134前有1个空格</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>输出long(长整型)：<code>%ld</code><br>输出long long(双长整型)：<code>%lld</code></p></blockquote><ul><li><strong><em>c格式符</em></strong></li></ul><p>用来输出一个字符。也可在指定域宽。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cahr ch=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a);</span><br></pre></td></tr></table></figure><blockquote><p>一个整数，如果在0~127范围中，也可以使用%c输出字符形式。系统会将整数作为ASCII码转换成相应字符输出。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a=<span class="number">121</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a);  <span class="comment">//输出y</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">377</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a);<span class="comment">//输出y</span></span><br><span class="line"><span class="comment">// 当整数比较大时，会按其最后一个字节(8位)的信息以字符形式输出。</span></span><br><span class="line"><span class="comment">//377最后一个字节信息是0111 1001，即十进制的121，是y的ASCII码。</span></span><br></pre></td></tr></table></figure><ul><li><strong><em>s格式符</em></strong></li></ul><p>用来输出一个字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,<span class="string">&quot;CHINA&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><em>f格式符</em></strong></li></ul><p>用来输出实数（包括单双精度、长双精度），以小数形式输出。</p><p>①基本型，用%f<br>不指定输出长度，则系统默认：<code>实数中整数部分全部输出，小数部分输出6位。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a=<span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%l\n&quot;</span>,a/<span class="number">3</span>);  <span class="comment">// 0.333333 a虽然是双精度，但使用%l只能输出6位小数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②指定数据宽度和小数位数，用**<em>%<code>m</code>.<code>n</code>f**</em>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对上例a的值指定宽度和小数位数输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%20.15f\n&quot;</span>,a/<span class="number">3</span>);</span><br><span class="line"><span class="comment">//   0.333333333333333 注意0前面有3个空间</span></span><br></pre></td></tr></table></figure><blockquote><p>一个双精度只能保证<code>15位</code>有效数值，单精度只能保证<code>6位</code>有效数字。</p></blockquote><p>③ 输出的数据向左对齐，用%-m.nf。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(%<span class="number">-25.15f</span>,%<span class="number">25.15f</span>\n<span class="string">&quot;,a,a);</span></span><br><span class="line"><span class="string">// 3333.333333333333500     ,     3333.333333333333500（空白处为5个空格）</span></span><br></pre></td></tr></table></figure><ul><li>e格式符<br>%e指定以指数形式输出实数。</li><li>i格式符<br>%i与%d相同。</li><li>o格式符<br>%o以八进制整数形式输出。</li><li>x格式符<br>%x以十六进制数形式输出整数。</li><li>u格式符<br>%u输出无符号（unsigned）型数据，以十进制整数形式输出。</li><li>g格式符<br>%g用来输出浮点数。</li><li>% 附加字符 格式字符<br>双%输出一个%<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f%%%\n&quot;</span>,<span class="number">1.0</span>/<span class="number">3</span>);</span><br><span class="line"><span class="comment">//0.333333%</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><p><strong><em>scanf(格式控制，地址列表)</em></strong><br>格式控制同printf一样，地址列表是由若干个地址组成的表列，可以是<code>变量的地址或字符串的首地址</code>。</p><ul><li>格式控制后面应当是变量地址，不是变量名。</li><li>输入数据顺序应与格式控制一一对应。</li><li>输入空格、回车、Tab键或遇非法字符（不属于数值的字符）则认为该数据结束。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sacnf(<span class="string">&quot;a=%f,b=%f,c=%f&quot;</span>,&amp;a,&amp;b,&amp;c); <span class="comment">//在输入时应输入a=1,b=3,c=2 一一对应</span></span><br></pre></td></tr></table></figure><h2 id="字符输入输出"><a href="#字符输入输出" class="headerlink" title="字符输入输出"></a>字符输入输出</h2><ul><li><strong><em>putchar输出一个字符</em></strong><br><code>putchar(c)</code><br>c可以是字符或者整型（0~127）,也可以输出转义字符。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a=<span class="string">&#x27;B&#x27;</span>,b=<span class="string">&#x27;O&#x27;</span>,c=<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line"><span class="built_in">putchar</span>(a);</span><br><span class="line"><span class="built_in">putchar</span>(b);</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BOY</span></span><br></pre></td></tr></table></figure><ul><li><strong><em>getchar输入一个字符</em></strong><br><code>getchar()</code><br>getchar函数没有参数，只能接收一个字符，并且可以接收屏幕上无法显示的字符，如转义字符。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a,b,c;</span><br><span class="line">a=getchar();</span><br><span class="line">b=getchar();</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="built_in">putchar</span>(a);</span><br><span class="line"><span class="built_in">putchar</span>(b);</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输入信息时，并不是在键盘上输入一个字符就立即送到计算机中去，这些字符先暂存在键盘的<code>缓冲区</code>，只有按了<code>Enter</code>键才把这些字符输入到计算机中去。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c1,c2;</span><br><span class="line">c1=getchar();</span><br><span class="line">c2=c1+<span class="number">32</span>;     <span class="comment">//大写转小写</span></span><br><span class="line">purchar(c2);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><p>在顺序结构中，各语句是按自上而下的顺序执行的，实际上，很多情况下，需要根据某个条件来判断是否执行指定的操作，这就是要引用选择结构的原因。<br>c语言有两种选择语句：<br>① <strong><em>if</em></strong> 语句，用来实现两个分支的选择结构<br>② <strong><em>switch</em></strong> 语句，用来实现多分支的选择结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现两个数升序输出</span></span><br><span class="line"><span class="comment">//注意，实现两个数的互换，不能直接赋值，必须借助第三个变量，就比如将A和B两个杯子的水互换一样。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">flaot a,b,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f,%f&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)&#123; <span class="comment">//交换</span></span><br><span class="line">t=a;</span><br><span class="line">a=b;</span><br><span class="line">b=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5.2f,%5.2f\n&quot;</span>,a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>表达式可以是关系表达式、逻辑表达式、数值表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if形式</span></span><br><span class="line"><span class="keyword">if</span>(表达式) 语句<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************</span></span><br><span class="line"><span class="comment">//if...else...形式</span></span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************</span></span><br><span class="line"><span class="comment">//if...else if...形式</span></span><br><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>) 语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>) 语句<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">3</span>) 语句<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式n) 语句n</span><br><span class="line"><span class="keyword">else</span>语句n+<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h2><p>用关系运算符将两个数值或数值表达式连接起来的式子，称关系表达式。</p><table><thead><tr><th align="center">关系运算符</th><th align="center">优先级</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">高</td></tr><tr><td align="center">&lt;=</td><td align="center">高</td></tr><tr><td align="center">&gt;</td><td align="center">高</td></tr><tr><td align="center">&gt;=</td><td align="center">高</td></tr><tr><td align="center">==</td><td align="center">低</td></tr><tr><td align="center">！=</td><td align="center">低</td></tr></tbody></table><blockquote><p>前4种关系运算符(&lt;,&lt;=,&gt;,&gt;=)优先级别相同，后2种也相同。</p></blockquote><h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h2><table><thead><tr><th align="center">逻辑运算符</th><th align="center">含义</th><th align="center">举例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与</td><td align="center">a&amp;&amp;b</td><td align="center">如果a和b都为真，则结果为真，否则为假</td></tr><tr><td align="center">||</td><td align="center">逻辑或</td><td align="center">a||b</td><td align="center">如果a和b有一个以上为真，则结果为真，二者都为假时，结果为假</td></tr><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">!a</td><td align="center">如果a为假，则！a为真，如果a为真，则！a为假</td></tr></tbody></table><hr><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">!a</th><th align="center">!b</th><th align="center">a&amp;&amp;b</th><th align="center">a||b</th></tr></thead><tbody><tr><td align="center">真</td><td align="center">真</td><td align="center">假</td><td align="center">假</td><td align="center">真</td><td align="center">真</td></tr><tr><td align="center">真</td><td align="center">假</td><td align="center">假</td><td align="center">真</td><td align="center">假</td><td align="center">真</td></tr><tr><td align="center">假</td><td align="center">真</td><td align="center">真</td><td align="center">假</td><td align="center">假</td><td align="center">真</td></tr><tr><td align="center">假</td><td align="center">假</td><td align="center">真</td><td align="center">真</td><td align="center">假</td><td align="center">假</td></tr></tbody></table><blockquote><p>表示逻辑运算结果时，1代表真，0代表假。<br>判断一个量是否为“真”时，0代表假，非0代表真，即将一个非零的数值认作为“真”。`</p></blockquote><p><a href="#priority">优先级</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>&gt;<span class="number">3</span>&amp;&amp;<span class="number">8</span>&lt;<span class="number">4</span>-!<span class="number">0</span>  <span class="comment">//为0</span></span><br><span class="line"><span class="comment">//先根据优先级自左向右扫描求解</span></span><br><span class="line"><span class="comment">//5&gt;3为1,!0为1，8&lt;3为0，最后1&amp;&amp;0为0</span></span><br></pre></td></tr></table></figure><blockquote><p>C99中增加一种逻辑型变量_Boole，在头文件中stdbool.h中，将bool定义为_Bool的同义词,同时定义了true和false两个常量。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;score);</span><br><span class="line"><span class="keyword">bool</span> a,b;    <span class="comment">//a,b被定义为逻辑变量</span></span><br><span class="line">a=score&gt;=<span class="number">60</span>;</span><br><span class="line">b=score&lt;=<span class="number">69</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="literal">true</span>&amp;&amp;b==<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The grade is C\n&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><p>赋值号右侧为条件表达式，？是条件运算符，有3个操作对象，是C语言中唯一的一个<code>三目运算符</code>。</p><pre><code>    max=(a&gt;b)?a:b;</code></pre><p>当(a&gt;b)为真时将a赋给max，为假时b赋给max，可以用来求最大值。</p><blockquote><p>条件运算符优先级比关系运算符和算术运算符都低。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">ch=(c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)?(ch+<span class="number">32</span>):ch; <span class="comment">//判断是否为大写字母，是大写转换成小写。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>switch语句的作用是根据表达式的值，使流程跳转到不同的语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)   <span class="comment">//表达式类型应为整数类型（包括字符型）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:   <span class="comment">//case后面跟一个常量（或常量表达式）</span></span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//break跳出选择。</span></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> 常量n:</span><br><span class="line">语句n;</span><br><span class="line"><span class="keyword">default</span>:   <span class="comment">//没有匹配到case就会执行default语句</span></span><br><span class="line">语句n+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> grade;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;grade);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your score:&quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(grade)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;85~100\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;70~84\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;60~69\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;60\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter data error!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="while语言"><a href="#while语言" class="headerlink" title="while语言"></a>while语言</h2><p>先判断条件表达式，当循环条件为真时，执行循环体语句，否则跳出循环。</p><pre><code>    whie(表达式) 语句</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum=sum+i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h2><p>先执行循环体，然后判断循环条件是否成立。</p><pre><code>    do        语句    while(表达式);</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum=sum+i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for语句可以用于循环次数不确定而只给出循环结束条件的情况。</p><pre><code>    for(循环变量初始化;循环条件;循环变量增值)        语句    for(int i=1;i&lt;=100;i++)        sum=sum+i;</code></pre><blockquote><p>当循环条件为空语句时，此时循环进入死循环。</p></blockquote><ul><li><p>逗号表达式<br>可以使用逗号连接多个表达式</p><pre><code>  for(int i=0,j=100;i&lt;=j;i++,j--);</code></pre></li></ul><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>break使流程跳到循环体之外，接着执行循环体下面的语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">50</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已达到%d&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>countinue用于结束本次循环，即跳过循环体中下面尚未执行的语句，转到循环体结束点之前，接着执行循环变量增值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出下列4*5的矩阵</span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">2 4 6 8 10</span></span><br><span class="line"><span class="comment">3 6 9 12 15</span></span><br><span class="line"><span class="comment">4 8 12 16 20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;  <span class="comment">//i控制4行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++,n++)&#123; <span class="comment">//j控制5列</span></span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">5</span>==<span class="number">0</span>)   <span class="comment">//n累计输出数据的个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">//输出5个后换行</span></span><br><span class="line"><span class="comment">//if(i==3&amp;&amp;j==1) break;  //遇到第3行第1列终止循环，结果导致第三行空白</span></span><br><span class="line"><span class="comment">//if(i==3$$j==1) continue; //第3行第1列的数字3不会输出。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i*j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组用来描述一批具有<code>同名的同属性</code>的数据。</p><pre><code>    数据类型 数组名[常量表达式];    int arr[10];</code></pre><ul><li><p>数组是一组有序数据的集合。</p></li><li><p>用数组名和下标来唯一确定数组中的元素</p></li><li><p>数组的每一个元素都属于同一个数据类型。</p></li><li><p>数组下标是从0开始的是，数组长度是固定的。。</p></li><li><p>C语言不允许对数组的大小作动态定义，数组大小不依赖于程序运行过程中变量的值。</p></li><li><p>数组的存储形式。<br>以int arr[10]为例，经过声明定义后，在内存中划分一片存储空间，存放了一个有10个整型元素的数组(空间大小为<code>4*10=40字节</code>,int为4字节)。</p></li><li><p>一维数组初始化</p><pre><code>  int arr[10]=&#123;0,1,2,3,4,5,6,7,8,9&#125;;  int arr[]=&#123;1,3,2,4&#125;; //系统根据元素个数分配大小  int arr[10]=&#123;1,2,3&#125;; //其余数据初始化为0，如果是字符型数组初始化为&#39;\0&#39;,如果是指针型数组，初始化为NULL，即空指针。  int arr[10]=&#123;0&#125;;  //全为0数组</code></pre></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">arr[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--) <span class="comment">//逆序输出，下标9~0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维数组实例"><a href="#一维数组实例" class="headerlink" title="一维数组实例"></a>一维数组实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理Fibonacci数列问题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//前两个赋值为1</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">f[i]=f[i<span class="number">-2</span>]+f[i<span class="number">-1</span>]; <span class="comment">//先后求f[2]~f[19]的值</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">//输出5个后换行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%12d&quot;</span>,f[i]);  <span class="comment">//输出一个数，确定域宽</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">           1           1           2           3           5</span></span><br><span class="line"><span class="comment">           8          13          21          34          55</span></span><br><span class="line"><span class="comment">          89         144         233         377         610</span></span><br><span class="line"><span class="comment">         987        1597        2584        4181        6765</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//每次将相邻的两个数比较，将小的调到前头。</span></span><br><span class="line"><span class="comment">//如果有n个数，则要进行n-1趟比较</span></span><br><span class="line"><span class="comment">//在第1趟中要进行n-1次两两比较，在j趟比较中要进行n-j次两两比较</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input 10 numbers:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;   <span class="comment">//实现9次循环，9趟比较 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>-j;i++)&#123;  <span class="comment">//每一趟进行9-j比较 </span></span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123; <span class="comment">//比较然后交换 </span></span><br><span class="line">t=a[i];</span><br><span class="line">a[i]=a[i+<span class="number">1</span>];</span><br><span class="line">a[i+<span class="number">1</span>]=t;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the sorted numbers:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组常称为矩阵，用矩阵形式（行和列）表示二维数组，是<code>逻辑上的概念</code>，而在内存中，各元素是<code>连续存放</code>的，不是二维的，是<code>线性</code>的。</p><pre><code>    数据类型 数组名[行下标][列下标]    int a[3,4]; //表示3行4列的数组</code></pre><p>二维数组初始化</p><pre><code>    int a[3][4]=&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;;//按行存放    int a[3][4]=&#123;&#123;1&#125;,&#123;5&#125;,&#123;9&#125;&#125;;  //只对一部分赋值</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个二维数组的行和例互换，存到另一个二维数组中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">3</span>][<span class="number">2</span>],i,j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array a:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)  <span class="comment">//处理a数组中的一行中各元素，从0开始，0，1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++) <span class="comment">//处理a数组中某一列元素，0,1,2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,a[i][j]);</span><br><span class="line">b[j][i]=a[i][j];   <span class="comment">//a数组元素赋值给b数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array b:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,b[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">array a:</span></span><br><span class="line"><span class="comment">    1    2    3</span></span><br><span class="line"><span class="comment">    4    5    6</span></span><br><span class="line"><span class="comment">array b:</span></span><br><span class="line"><span class="comment">    1    4</span></span><br><span class="line"><span class="comment">    2    5</span></span><br><span class="line"><span class="comment">    3    6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求3*4矩阵其中值最大的那个元素的值，及其所在行号和列号。</span></span><br><span class="line"><span class="comment">//打擂台算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,row=<span class="number">0</span>,colum=<span class="number">0</span>,max;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,&#123;<span class="number">-10</span>,<span class="number">10</span>,<span class="number">-5</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">max=a[<span class="number">0</span>][<span class="number">0</span>];  <span class="comment">//认为a[0][0]最大，为擂主</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&gt;max)  <span class="comment">//如果大于max，就取代原值</span></span><br><span class="line">&#123;</span><br><span class="line">max=a[i][j];</span><br><span class="line">row=i;   <span class="comment">//记下行号</span></span><br><span class="line">colum=j;  <span class="comment">//记下列号</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=%d\nrow=%d\ncolum=%d\n&quot;</span>,max,row,colum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><p>用来存放字符数据的数组，数组中一个元素存放一个字符。</p><pre><code>    char c[10];    c[0]=&#39;I&#39;;    c[1]=&#39;a&#39;;</code></pre><p>由于字符型数据是以整数形式存放的，因此也可以用整型数组存放字符数据。</p><pre><code>    int c[10];    c[0]=&#39;a&#39;;</code></pre><p>字符数组初始化</p><pre><code>    char c[10]=&#123;&#39;I&#39;,&#39;&#39;,&#39;a&#39;,&#39;m&#39;,&#39;&#39;,&#39;h&#39;,&#39;a&#39;,&#39;p&#39;,&#39;p&#39;,&#39;y&#39;&#125;;</code></pre><p>C语言规定以字符’<code>\0</code>‘作为结束标志，例如”C program”共9个字符，在字符数组中它占10个字节，最后一个’\0’是系统自动加上去的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出一个菱形图</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> diamond[<span class="number">5</span>][<span class="number">5</span>]=&#123;&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,&#123;<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;,&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;*&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,diamond[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment"> * *</span></span><br><span class="line"><span class="comment">*   *</span></span><br><span class="line"><span class="comment"> * *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><p>引入<code>#include&lt;string.h&gt;</code>函数库</p><ul><li>puts——输出字符串<br>  puts(String);</li><li>gets——输入字符串<br>  gets(String);</li><li>strcat——字符串连接<br>  strcat(str1,str2) //str2连接到str1后面</li><li>strcpy和strncpy——字符串复制<br>  strcpy(str1,string);  //string复制到str1<br>  strcpy(str2,string,n); //string前n个字符复制到str2</li><li>strcmp——字符串比较<br>  strcmp(str1,str2);//按照ASCII码</li><li>strlen——字符串长度<br>  strlen(str);</li><li>strlwr——转换为小写<br>  strlwr(str);</li><li>strupr——转换为大写<br>  strupr(str);</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有3个字符串，要求找出其中最大者</span></span><br><span class="line"><span class="comment">//思路：成绩一个3行20列的二维数组，每一行容纳20个字符</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">3</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> stirng[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">gets(str[i]);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(str[<span class="number">0</span>],str[<span class="number">1</span>])&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">string</span>,str[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">string</span>,str[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(str[<span class="number">2</span>],<span class="built_in">string</span>)&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">string</span>,str[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nThe largest string is:\n&quot;</span>,<span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入一行字符，统计其中有多少个单词，单词之间用空格隔开</span></span><br><span class="line"><span class="comment">//思路：如果当前字符为空格，则表示未出现新单词，使word=0,num不累加</span></span><br><span class="line"><span class="comment">//如果当前不为空格，前一字符为空格(word=0),新单词出现，num加1，word=1；</span></span><br><span class="line"><span class="comment">//若前一字符为非空格(word=1），未出现新单词，num不加1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">81</span>];</span><br><span class="line"><span class="keyword">int</span> i,num=<span class="number">0</span>,word=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">gets(<span class="built_in">string</span>); <span class="comment">//输入一个字符串给字符数组string</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;(c=<span class="built_in">string</span>[i])!=<span class="string">&#x27;\0&#x27;</span>;i++)&#123;  <span class="comment">//只要字符不是&#x27;\0&#x27;就继续执行循环</span></span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;              <span class="comment">//如果是空格，使word置0</span></span><br><span class="line">word=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(word==<span class="number">0</span>)&#123;</span><br><span class="line">word=<span class="number">1</span>;<span class="comment">//将自己置1，代表自己非空格</span></span><br><span class="line">num++;<span class="comment">//num累加1，代表增加一个单词</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;There ara %d words in this line.\n&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>无参函数<pre><code>  类型名 函数名()  &#123;      //函数体包括声明部分和语句部分  &#125;</code></pre></li><li>有参函数<pre><code>  类型名 函数名(形式参数列表)  &#123;      //函数体  &#125;</code></pre><h2 id="虚实结合"><a href="#虚实结合" class="headerlink" title="虚实结合"></a>虚实结合</h2><pre><code>  int max(int x,int y); //x，y为形参  int a=1,b=2,m;  m=max(1,2);   //a,b为实参</code></pre>形参并不占内存中的存储单元，当被调用时，临时分配内存单元。<br>实参向形参的数据传递是”值传递’，单向传递，形参不能传给实参，因为他们具有不同的存储单元。</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数的返回值是通过return语句获得的。<br>函数类型决定返回值的类型。</p><pre><code>    int max(int x,int y)    &#123;    return(x&gt;y?x:y);    &#125;</code></pre><p>对于不带返回值，可以定义函数为void，定义后不允许出现return语句。</p><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>用户自定义函数，需要在主调函数中对被调函数做<code>声明</code>。其作用是把函数的具体信息(函数名、函数参数个数，参数类型等)通知给编译系统。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>; <span class="comment">//函数声明 ，可以不带参数名</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的递归调用"><a href="#函数的递归调用" class="headerlink" title="函数的递归调用"></a>函数的递归调用</h2><ul><li><p>函数不可以嵌套定义，但可以嵌套调用。</p></li><li><p>当调用一个函数的过程中又出现直接或间接地调用该函数本身，称为函数的递归调用。</p></li><li><p>通过使用if语句来终止无止尽的递归。</p></li><li><p>一个递归的问题可以分为”回溯”和”递推”两部分。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用递归的方法求n！</span></span><br><span class="line"><span class="comment">//当n=0,1时，n!=1; 当n&gt;1时，n!=n*(n-1)!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>;  <span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">int</span> n,y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input an integer number&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">y=fac(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>,n,y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n&lt;0,data error!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)</span><br><span class="line">f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">f=fac(n<span class="number">-1</span>)*n;  <span class="comment">//n&gt;1时，n!=n*(n-1)</span></span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Hanoi(汉诺问题)</span></span><br><span class="line"><span class="comment">古代有一个梵塔，塔内有3个座A，B，C，开始时A座上有64个盘子，盘子大小不等，大的在下，小的在上。有一个老和尚想把这64个盘子从A座移到C座，但规定每次只能移动一个盘，且在移动过程中在3个座上始终保存大盘在下，小盘在上。在移动过程中可以利用B座。要求编程序输出移动盘子的过程。</span></span><br><span class="line"><span class="comment">解题思路：</span></span><br><span class="line"><span class="comment">①老和尚1命令第2个和尚将63个盘子从A移到B。</span></span><br><span class="line"><span class="comment">②自己将1一个盘子（最底下的、最大的盘子）从A移到C。</span></span><br><span class="line"><span class="comment">③再命令第2个和尚将63个盘子从B移到C。</span></span><br><span class="line"><span class="comment">第2个和尚依次递归。</span></span><br><span class="line"><span class="comment">例如先分析将A座上3个盘子移到C座：</span></span><br><span class="line"><span class="comment">①将A座上2个盘子移到B座（借助C）。 A-&gt;C,A-&gt;C,C-&gt;B</span></span><br><span class="line"><span class="comment">②将A座上1个盘子移到C座。A-&gt;C</span></span><br><span class="line"><span class="comment">③将B座上2个盘子移到C座上（借助A）。B-&gt;A  B-&gt;C,A-&gt;C</span></span><br><span class="line"><span class="comment">分析可知：</span></span><br><span class="line"><span class="comment">移动n个盘子要经历(2^n-1)步，3个盘子要7步。</span></span><br><span class="line"><span class="comment">①将A座上n-1个盘子移到B座（借助C）。 A-&gt;C,A-&gt;C,C-&gt;B</span></span><br><span class="line"><span class="comment">②将A座上1个盘子移到C座。A-&gt;C</span></span><br><span class="line"><span class="comment">③将B座上n-1个盘子移到C座上（借助A）。B-&gt;A  B-&gt;C,A-&gt;C</span></span><br><span class="line"><span class="comment">①③步都是n-1个盘子从一个座移到另一个座上。</span></span><br><span class="line"><span class="comment">因此，可以分解成两类操作：</span></span><br><span class="line"><span class="comment">（1）将n-1个盘子从一个座移到另一个座上(n&gt;1)。这就是大和尚让小和尚做的工作</span></span><br><span class="line"><span class="comment">（2）将1个盘子从一个座移到另一座上。这是大和尚自己做的工作。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编程思路：</span></span><br><span class="line"><span class="comment">分别用两个函数实现以上两类操作，用hanoi函数实现上面第1类操作（即模拟小和尚的认为），用move函数实现第2类操作（模拟大和尚的任务）。</span></span><br><span class="line"><span class="comment">函数调用hanoi(n,one,two,three)表示将n个盘子从”one“移到”three“座的过程（借助”two“）。</span></span><br><span class="line"><span class="comment">函数调用move(x,y)表示将1个盘子从x座移到y座的过程。x,y代表A,B,C座之一。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> one,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span>; <span class="comment">//对hanoi函数的声明</span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input the number of diskes:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The step to move %d diskes:\n&quot;</span>,m);</span><br><span class="line">hanoi(m,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> one,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//将n个盘从one座借助two座，移到three座</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span>;  <span class="comment">//对move函数的声明，因为主函数不需要调用，所以可以在函数内声明</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">move(one,three); </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hanoi(n<span class="number">-1</span>,one,three,two);</span><br><span class="line">move(one,three);</span><br><span class="line">hanoi(n<span class="number">-1</span>,two,one,three);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%c\n&quot;</span>,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input the number of diskes:3</span></span><br><span class="line"><span class="comment">The step to move 3 diskes:</span></span><br><span class="line"><span class="comment">A-&gt;C</span></span><br><span class="line"><span class="comment">A-&gt;B</span></span><br><span class="line"><span class="comment">C-&gt;B</span></span><br><span class="line"><span class="comment">A-&gt;C</span></span><br><span class="line"><span class="comment">B-&gt;A</span></span><br><span class="line"><span class="comment">B-&gt;C</span></span><br><span class="line"><span class="comment">A-&gt;C</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><ul><li><p>数组元素可以作为函数实参，不能用作形参。(因为形参是函数被调用时临时分配内存，不可能为单个数组元素分配存储单元，数组都是连续存放的）</p></li><li><p>数组名可以作为函数实参或者形参。注意，数组名做实参时，向形参传递的是数组元素<code>首地址</code>。</p></li><li><p>当形参数组名获得了实参数组的首地址后，它们共占同一存储单元，具有相同的值。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序:对数组中10个整数由小到大排序 </span></span><br><span class="line"><span class="comment">//每一轮找出未经排序的数中最小的一个</span></span><br><span class="line"><span class="comment">//由于形参数组已经使用选择符排序了，形参数组改变实参数组也随之改变了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> n)</span></span>; <span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter array:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">sort(a,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The sorted array:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">array</span>[j]&lt;<span class="built_in">array</span>[k])</span><br><span class="line">k=j;</span><br><span class="line">t=<span class="built_in">array</span>[k];</span><br><span class="line"><span class="built_in">array</span>[k]=<span class="built_in">array</span>[i];</span><br><span class="line"><span class="built_in">array</span>[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h2><ul><li><p>在一个函数内定义的变量是<code>局部变量</code>，只在本函数范围内有效。</p></li><li><p>在函数外定义的变量是<code>全局变量</code>，可以为本文件中其他函数所共用。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">5</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>; <span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">8</span>;            <span class="comment">//局部变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>,max(a,b));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//形参a,b的作用范围</span></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">c=a&gt;b?a:b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果：max=8</span></span><br><span class="line">为什么结果为<span class="number">8</span>呢？</span><br><span class="line">因为全局变量a被局部变量a屏蔽了，相当于全局变量a在<span class="number">6</span>~<span class="number">8</span>行不存在，所以函数max是比较<span class="number">8</span>和<span class="number">5</span>的大小。</span><br></pre></td></tr></table></figure><blockquote><p>全局变量在程序的全部执行过程中都占用存储单元。</p></blockquote><h2 id="变量的存储方式和生存期"><a href="#变量的存储方式和生存期" class="headerlink" title="变量的存储方式和生存期"></a>变量的存储方式和生存期</h2><p>从变量的作用域来看，变量可以分<code>全局变量</code>和<code>局部变量</code>。<br>从变量生存期来看，变量的存储可以分<code>静态存储方式</code>和<code>动态存储方式</code>。</p><ul><li>静态存储方式：指在程序运行期间由系统分配固定的存储空间的方式。</li><li>动态存储方式：指在程序运行期间根据需要进行动态的分配存储空间的方式。</li></ul><p>内存中共用户使用的存储空间分3部分：<br>①程序区<br>②静态存储区<br>③动态存储区<br>数据分别存放在静态存储区和动态存储区中，全局变量全部存放在静态存储区中，在程序开始执行时给全局变量分配存储区，程序执行完毕后释放，在执行过程中占据固定的存储空间。<br>在动态存储区中存放以下数据：<br>①函数形式参数<br>②函数中没有用关键字static声明的变量，即自动变量<br>③函数调用时的现场保护和返回地址等</p><h2 id="存储类别"><a href="#存储类别" class="headerlink" title="存储类别"></a>存储类别</h2><p>每一个变量和函数都有两个属性：数据类型和数据的存储类别（如静态存储和动态存储）。<br>C的存储类别包括4种：自动的(auto)、静态的(static)、寄存器的(register)、外部的(extern)。</p><ul><li>自动变量auto<br>自动变量动态分配存储空间，属于动态存储类别，数据存储在动态存储区中，函数调用结束后即释放，函数中的形参和定义的局部变量都属于此类。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">int</span> b,c=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中a是形参，b和c是自动变量，对c赋初值3，执行完f函数后，自动释放a,b,c所占的内存单元</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上关键字”auto“可以省略，不写auto则隐含指定为”自动存储类别“。</p></blockquote><ul><li><p>静态局部变量static<br>静态局部变量属于静态存储类别，在静态存储区内分配存储单元，在程序整个运行期间都不释放。</p><blockquote><p>对静态局部变量是在编译时赋初值的，即只赋值一次，以后每次调用函数时不用重新赋值而是保留上次函数调用结束时结束的值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出1到5的阶乘值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)    <span class="comment">//先后5次调用fac函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>,i,fac(i));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> f=<span class="number">1</span>;  <span class="comment">//f保留了上次调用结束的值</span></span><br><span class="line">f=f*n;  <span class="comment">//上次的f值的基础上再乘以n</span></span><br><span class="line"><span class="keyword">return</span> f;<span class="comment">//返回值f是n!的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1！=1</span></span><br><span class="line"><span class="comment">2！=2</span></span><br><span class="line"><span class="comment">3！=6</span></span><br><span class="line"><span class="comment">4！=24</span></span><br><span class="line"><span class="comment">5！=120</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>寄存器变量register<br>变量的值一般是存放在内存中的，当程序用到哪一个变量的值是，由控制器发出指令将内存中该变量的值送到运算器进行运算，如果需要存数，再从运算器将数据送到内存中。<br>如果有一些变量使用频繁，为提高效率，允许将局部变量的值放到<code>CPU中的寄存器</code>中，这种变量叫寄存器变量。</p><pre><code>  register int f;</code></pre></li></ul><h2 id="外部变量extern"><a href="#外部变量extern" class="headerlink" title="外部变量extern"></a>外部变量extern</h2><p>此类属于全局变量范围，全局变量作用域从<code>变量的定义处</code>开始，到本程序文件的末尾。并通过extern可以扩展变量的作用域。</p><ul><li>在一个文件内扩展外部变量的作用域<br>可以是把作用域扩展到<code>变量定义处之前</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio,h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> A,B,C;   <span class="comment">//扩展外部变量的作用域，可以省略数据类型</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入3个整数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;A,&amp;B,&amp;C);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最大值:%d\n&quot;</span>,max());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> A,B,C;     <span class="comment">//定义外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">m=A&gt;B?A:B;</span><br><span class="line"><span class="keyword">if</span>(C&gt;m)</span><br><span class="line">m=C;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将外部变量的作用域扩展到其他文件<br>如果一个程序包括两个文件，两个文件都需要用到同一个外部变量Num，则可以在任一个文件中<code>定义外部变量</code>Num，在另一个文件中用<code>extern对Num做外部声明</code>，即”extern Num“。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file1.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> A;    <span class="comment">//定义外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span>)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="keyword">extern</span> A;   <span class="comment">//作用域扩展</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将外部变量的作用域限制在本文件中<br>static声明可以将外部变量只限于本文件引用。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file1.c</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> A;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="keyword">extern</span> A;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...<span class="comment">//运行出错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部函数和外部函数"><a href="#内部函数和外部函数" class="headerlink" title="内部函数和外部函数"></a>内部函数和外部函数</h2><ul><li><p>内部函数<br>如果一个函数只能被本文件内其他函数所调用，则称为<code>内部函数</code>（静态函数）。</p><pre><code>  static 类型名 函数名（形参名）  static int fun(int a,intb);</code></pre></li><li><p>外部函数<br>如果定义函数时省略extern，则默认为外部函数。</p><pre><code>  extern int fun(int a,int b);</code></pre></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别定义3个函数用来输入字符串、删除字符、输出字符串。分别放在3个文件中，main函数在另一文件中，由它来调用以上3个函数。</span></span><br><span class="line"><span class="comment">//file.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">enter_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span>;    <span class="comment">//对函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">delete_string</span><span class="params">(<span class="keyword">char</span> str[],<span class="keyword">char</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span>;</span><br><span class="line"><span class="keyword">char</span> c,str[<span class="number">80</span>];</span><br><span class="line">enter_string(str);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c);</span><br><span class="line">delete_string(str,c);</span><br><span class="line">printf_string(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enter_string</span><span class="params">(<span class="keyword">char</span> str[<span class="number">80</span>])</span>  <span class="comment">//定义外部函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">gets(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file3.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_string</span><span class="params">(<span class="keyword">char</span>[],<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=j=<span class="number">0</span>;str[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(str[i]!=ch)</span><br><span class="line">str[j++]=str[i];</span><br><span class="line">str[j]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file4.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>enter_string为函数原型，函数原型能够把函数的作用域扩展到定义该函数的文件之外（不需要extern),典型例子是#include指令的作用。</p></blockquote><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>感谢<a href="https://blog.csdn.net/best_xiaolong/article/details/110152320?utm_source=app">C语言指针，这可能是史上最干最全的讲解啦（附代码）！！！</a></p><ul><li>指针的使用使得不同区域的代码可以轻易的共享内存数据,可以动态的分配内存。</li><li>指针使得一些复杂的链接性的数据结构的构建成为可能，比如链表，链式二叉树等等。</li><li>有些操作必须使用指针。如操作申请的堆内存。</li><li>C语言中的一切函数调用中，值传递都是“按值传递”的。如果我们要在函数中修改被传递过来的对象，就必须通过这个对象的指针来完成。</li></ul><h2 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h2><ul><li>计算机访问某个数据的时候，首先要通过<code>地址总线</code>传送数据存储或者读取的位置，然后在通过<code>数据总线</code>传送需要存储或者读取的数据。一般地，int整型的位数等于数据总线的宽度，指针的位数等于地址总线的宽度。</li><li>计算机是以<code>一个字节(8位)</code>为基本访问单元，小于一个字节的数据，必须通过位操作来进行访问。所以可以认为，计算每次都是从第p个字节开始访问的。访问的长度将由编译器根据实际类型进行计算.<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/fedde9697c0f70e1d88f3b8e0306fae7.png"></li><li><code>sizeof</code>关键字是编译器用来计算某些类型的数据的长度的，以<code>字节</code>为基本单位。<pre><code>  sizeof(char)=1;    sizeof(int)=4;</code></pre></li></ul><h2 id="数据具有地址"><a href="#数据具有地址" class="headerlink" title="数据具有地址"></a>数据具有地址</h2><p>内存在<code>物理上</code>是由一组<code>DRAM芯片</code>组成的。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/8a1d29718a181cd42b1b1c775be52bdd.png"><br>而作为一个程序员，我们不需要了解内存的物理结构，<code>操作系统</code>将<code>RAM等硬件和软件结合起来</code>，给程序员提供的一种对内存使用的抽象。这种抽象机制使得程序使用的是<code>虚拟存储器</code>,而不是直接操作和使用真实存在的物理存储器。所有的虚拟地址形成的集合就是<code>虚拟地址空间</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/81d7302266706682d303fe496474e92c.png"><br>也就是说，内存是一个很大的，线性的字节数组（平坦寻址）。每一个字节都是固定的大小，由8个二进制位组成。<code>且都有一个唯一的编号,编号从0开始，一直到最后一个字节</code>。<br>如上图中，这是一个256M的内存，他一共有256x1024x1024  = 268435456个字节，那么它的地址范围就是 0 ~268435455  。<br>由于内存中的每一个字节都有一个唯一的编号。<br>因此，在程序中使用的变量，常量，甚至数函数等数据，当他们被载入到内存中后，都有自己唯一的一个编号，这个编号就是这个数据的地址。<br>指针就是这样形成的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;    </span><br><span class="line"><span class="keyword">int</span>  num = <span class="number">97</span>;    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch 的地址:%p&quot;</span>,&amp;ch);   </span><br><span class="line"><span class="comment">//ch 的地址:0028FF47    </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num的地址:%p&quot;</span>,&amp;num); </span><br><span class="line"> <span class="comment">//num的地址:0028FF40    </span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> ch 的地址:0028FF47</span></span><br><span class="line"><span class="comment"> num的地址:0028FF40</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>指针的值实质是内存单元（即字节）的编号，所以指针单独从数值上看，也是整数，他们一般用16进制表示。</li><li>指针的值（虚拟地址值）使用一个机器字的大小来存储。</li><li>也就是说,对于一个机器字为w位的电脑而言,它的虚拟地址空间是0~2w － 1 ,程序最多能访问2w个字节。</li><li>这就是为什么xp这种32位系统最大支持4GB内存的原因了。<br>我们可以大致画出变量ch和num在内存模型中的存储。（假设 char占1个字节，int占4字节）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/039219167813dd4cf772ef2df8648e55.png"></p><h2 id="变量和内存"><a href="#变量和内存" class="headerlink" title="变量和内存"></a>变量和内存</h2><p>用上面例子中的  int num = 97 这个局部变量来分析变量在内存中的存储模型。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/039219167813dd4cf772ef2df8648e55.png"><br>已知：num的类型是int，占用了4个字节的内存空间，其值是97，地址是0028FF40。我们从以下几个方面去分析。</p><ul><li>内存的数据<br>内存的数据就是变量的值对应的二进制。<br>97的二进制是 : 00000000 00000000 00000000 0110000 , 但使用的小端模式存储时，低位数据存放在低地址，所以图中画的时候是倒过来的。</li><li>内存数据的类型<br>内存的数据类型决定了这个数据占用的字节数，以及计算机将如何解释这些字节。<br>num的类型是int，因此将被解释为 一个整数。</li><li>内存数据的名称<br>内存的名称就是变量名。实质上，内存数据都是以地址来标识的，根本没有内存的名称这个说法，这只是高级语言提供的抽象机制 ，方便我们操作内存数据。<br>而且在C语言中，并不是所有的内存数据都有名称，例如使用malloc申请的堆内存就没有。</li><li>内存数据的地址<br>如果一个类型占用的字节数大于1，则其变量的地址就是地址值最小的那个字节的地址。<br>因此num的地址是 0028FF40。内存的地址用于标识这个内存块。</li><li>内存数据的生命周期<br>num是main函数中的局部变量，因此当main函数被启动时，它被分配于栈内存上，当main执行结束时，消亡。</li></ul><h2 id="什么是指针"><a href="#什么是指针" class="headerlink" title="什么是指针"></a>什么是指针</h2><ul><li>在程序中定义一个变量，在对程序进行编译时，系统就会给这个变量分配内存单元，并根据变量类型，分配一定长度的空间。<br>例如：对int型变量分配4个字节，<code>内存区的每一个字节都有一个编号</code>，即“地址”，它相当于旅馆中的房间号，地址所标识的内存单元中存放的数据就相当于居住的旅客。</li><li>由于通过地址能找到所需的单元变量，可以说，<code>地址指向该变量单元</code>，因此将地址形象化地称为“<code>指针</code>”。<br>例如：有一个房间号为2008的房间，地址就是2008，或者说2008指向这个房间。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/3deace18cca60dd5b8169b8cc9fe6db9.png"></li><li>在C语言中，对变量的访问有<code>直接访问</code>和<code>间接访问</code>。<br>例如以下，直接通过<code>变量名i</code>找到存储单元称为直接访问方式。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/7e1ea1bfca185d8222b5820e060057e4.png"><br>另外一种指通过把变量i的地址存放在另一变量中，然后通过该变量来间接找到变量i的地址，从而访问变量i，称为“<code>间接访问</code>”。而这个存储变量地址的特殊变量称为“<code>指针变量</code>”。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *i_pointer; <span class="comment">//定义指向整型的指针变量，能存放整型数据地址(int *)，*只是表示它为指针变量</span></span><br><span class="line">i_pointer=&amp;i;   <span class="comment">//将i的地址存放到i_pointer中,即(2000),&amp;为取地址操作符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*i_pointer);<span class="comment">//*为取值操作符，取出所指向地址的值。</span></span><br><span class="line"><span class="comment">//即找到存放变量i地址的变量i_pointer，从中取出i的地址(2000),然后到2000字节开始的存储单元中取出i的值(3)</span></span><br></pre></td></tr></table></figure><blockquote><p>总之，一个变量的地址称为该变量的“<code>指针</code>”。例如，地址2000是变量i的指针<br>存放另一变量的地址的变量(指针)，称为“<code>指针变量</code>”，例如，i_pointer就是指针变量。<br>指针变量就是地址变量，用来存放地址，指针变量的值是地址(即指针)。<code>指针是一个地址，指针变量是存放地址的变量</code>。</p></blockquote><h2 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h2><p>存放地址的变量是指针变量，它用来指向另一个对象（如变量、数组、函数等）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过指针变量访问整型变量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">100</span>,b=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *pointer1,*pointer2; <span class="comment">//定义指向整型的指针变量</span></span><br><span class="line">pointer1=&amp;a;             <span class="comment">//把a的地址赋值pointer1</span></span><br><span class="line">pointer2=&amp;b;<span class="comment">//把b的地址赋值pointer2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的地址:%p\n&quot;</span>,pointer1); <span class="comment">//%p为指针格式符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b的地址:%p\n&quot;</span>,pointer2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>,*pointer1,*pointer2);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a的地址:000000000062FE0C</span></span><br><span class="line"><span class="comment">b的地址:000000000062FE08</span></span><br><span class="line"><span class="comment">a=100,b=10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>定义指针变量<pre><code>  类型名 *指针变量名；  int *p1;  //指向int型变量的指针变量  float *p2; //指向float型变量的指针变量  char *p3; //指向char型变量的指针变量</code></pre></li><li>不同数据类型在内存中所占的字节数和存放方式是不同的，必须指定数据类型，才能按存储单元的长度以及数据的存储形式正确的存取数据。</li><li>一个变量的指针的含义包括两个方面：<code>一是以存储单元编号表示的地址(如编号为2000的字节)，一是它指向的存储单元的数据类型(如int，char)</code>，所以在说明变量类型时，不能单一说“a是一个指针变量”，而应该完整地说“a是指向整型数据的指针变量”。</li><li>指针变量只能存放地址，不能存放数据。</li></ul><h2 id="引用指针变量"><a href="#引用指针变量" class="headerlink" title="引用指针变量"></a>引用指针变量</h2><ul><li><p>给指针变量赋值</p><pre><code>  p=&amp;a;  //把a的地址赋给变量p</code></pre><p>指针变量p的值是变量a的地址，p指向a。</p></li><li><p>引用指针变量指向的变量<br>如果已执行”p=&amp;a”,即p指向了a的地址，则</p><pre><code>  printf(&quot;%d&quot;,*p); //*取值运算符  *p=1;  //表示将整数1赋给p所指向的变量a，即等价于a=1</code></pre><p>以整数的形式输出指针变量p所指向的变量a的值。</p></li><li><p>引用指针变量的值</p><pre><code>  printf(&quot;%o&quot;,p);  //以八进制输出变量p的值，即p指向的a的地址。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入a和b两个整数，按先大后小的顺序输出a和b </span></span><br><span class="line"><span class="comment">//输入a和b两个整数，按先大后小的顺序输出a和b </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个整数(输入一个数，按下回车):\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">int</span> *p1,*p2,*t;</span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">t=p1;  <span class="comment">//t为中间变量也要是同类型指针变量</span></span><br><span class="line">p1=p2;</span><br><span class="line">p2=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d\n&quot;</span>,a,b); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Max:%d,min:%d&quot;</span>,*p1,*p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">请输入两个整数(输入一个数，按下回车):</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">a=3,b=100</span></span><br><span class="line"><span class="comment">Max:100,min:3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/4826b2e82d5fe87d981cafdc6629a4db.png"></p><blockquote><p>a和b的值并未交换，但p1和p2的值却改变了。p1的值由&amp;a变成了&amp;b，p2的值由&amp;b变成了&amp;a，也就是a和b的地址发生交换，值不变，这样输出<em>p1和</em>p2时，实际上是输出变量b和a的值。</p></blockquote></li><li><p>如果已经执行了语句pointer_1=&a;则&amp;<em>pointer_1与&amp;a相同。因为&amp;和</em>优先级相同，但按自右向左方向结合，因此先进行*pointer_i的运算，它就是变量a，再执行&amp;运算。</p></li><li><p><em>&amp;a的含义是先进行&amp;a运算，得到a的地址，再进行</em>运算，即&amp;a所指向的变量，也就是变量a。与*pointer_1作用一样。</p></li><li><p>(*pointer_1)++等价于a++;</p></li></ul><h2 id="指针变量作为函数参数"><a href="#指针变量作为函数参数" class="headerlink" title="指针变量作为函数参数"></a>指针变量作为函数参数</h2><p>作用是将一个变量的地址传送到另一个函数中。<br><code>实参为地址(p)，形参为指向的变量(int *p)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">int</span> *p1,*p2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个整数(输入一个数，按下回车):\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未交换：a=%d,b=%d\n&quot;</span>,a,b); <span class="comment">//未交换 </span></span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">swap(p1,p2);  <span class="comment">//实现交换 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换后：a=%d,b=%d\n&quot;</span>,a,b);   <span class="comment">//函数中是交换a和b值，故发生交换变化 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Max:%d,min:%d&quot;</span>,*p1,*p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span>  <span class="comment">//*p1和*p2就是a，b变量 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t=*p1;  <span class="comment">//t=a </span></span><br><span class="line">*p1=*p2; <span class="comment">//a=b</span></span><br><span class="line">*p2=t;   <span class="comment">//b=t</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入a,b,c三个整数，按大小顺序输出。</span></span><br><span class="line"><span class="comment">//a&lt;b,ab交换,a&lt;c,ac交换 ,b&lt;c,bc交换</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2,<span class="keyword">int</span> *p3)</span></span>;<span class="comment">//函数声明，该函数使得a&gt;b&gt;c </span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入3个整数:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">int</span> *p1,*p2,*p3;</span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line">p3=&amp;c;</span><br><span class="line"><span class="comment">//extern swap(p1,p2); //扩展作用域</span></span><br><span class="line">exchange(p1,p2,p3);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&gt;%d&gt;%d&quot;</span>,a,b,c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2,<span class="keyword">int</span> *p3)</span> <span class="comment">//等价于 int *p1=p1 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> *q)</span></span>;  <span class="comment">//函数声明 </span></span><br><span class="line"><span class="keyword">if</span>(*p1&lt;*p2)</span><br><span class="line">swap(p1,p2);</span><br><span class="line"><span class="keyword">if</span>(*p1&lt;*p3)</span><br><span class="line">swap(p1,p3);</span><br><span class="line"><span class="keyword">if</span>(*p2&lt;*p3)</span><br><span class="line">swap(p2,p3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t=*p;</span><br><span class="line">*p=*q;</span><br><span class="line">*q=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组和指针"><a href="#数组和指针" class="headerlink" title="数组和指针"></a>数组和指针</h2><ul><li>一个变量有地址，一个数组包含若干元素，每个数组元素都在内存中占用存储单元，它们都有相应的地址。</li><li>指针变量既然可以指向变量，当然也可以指向数组元素(把某一元素的地址放到一个指针变量中)。</li><li><code>所谓数组元素的指针就是数组元素的地址</code>。</li><li>指针变量指向一个数组元素<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>; /</span><br><span class="line"><span class="keyword">int</span> *p;    </span><br><span class="line">p=&amp;[<span class="number">0</span>];   <span class="comment">//把a[0]元素的地址赋给指针变量p，也就是指向第0号元素。</span></span><br><span class="line"><span class="comment">//由于数组名就是数组首元素的地址，故p=&amp;[0]等价于p=a</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/a026acc530af4c753fc1f6ea7d8247bc.png"></li></ul><h2 id="引用数组元素"><a href="#引用数组元素" class="headerlink" title="引用数组元素"></a>引用数组元素</h2><p>①下标法，如a[i]形式<br>②<code>指针法，如*(a+i)或*(p+i)</code> //表示从a[0]开始通过i累加查找数组元素<br>其中a是<code>数组名</code>(首元素的地址)，p是指向数组元素的指针变量，其初值<code>p=a</code>。<br>即通过数组名计算数组元素地址，找出元素的值。</p><blockquote><p>p+1并不是将p的值(地址)简单地加1，而是加上一个数组元素所占的字节数。例如，int型数组每个元素占4字节，p+1意味着p的值(地址)加4个字节，以使它指向下一个元素。p+1所代表的地址实际上是<code>(p+1)*d</code>,d是一个数组元素所占的字节数(依据数据类型)。</p></blockquote><p>③<code>用指针变量指向数组元素</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过数组名计算数组元素地址，找出元素的值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入10个整数:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="comment">//通过数组名和元素序号计算元素地址，再找到该元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,*(a+i));   </span><br><span class="line"><span class="comment">//(a+i)是a数组中序号为i的元素的地址，*(a+i)是该元素的值。 </span></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入10个整数:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// p=a(p=&amp;a[0])表示指针指向数组a的首地址，p++每次指向下一个元素</span></span><br><span class="line"><span class="keyword">for</span>(p=a;p&lt;(a+<span class="number">10</span>);p++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,*p);   </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="数组名做函数参数"><a href="#数组名做函数参数" class="headerlink" title="数组名做函数参数"></a>数组名做函数参数</h2><pre><code>    f(int arr[],int n)</code></pre><p>在编译时是将arr按指针变量处理的，相当于将函数的首部写成</p><pre><code>    f(int *arr,int n)</code></pre><blockquote><p>C语言调用函数时虚实结合的方法都是采用“<code>值传递</code>”方式，当用变量名作为函数参数时传递的是变量的值，当用<code>数组名</code>作为函数参数时，由于数组名代表的是数组<code>首元素地址</code>，因此传递的值是<code>地址</code>，所以要求<code>形参为指针变量</code>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/08/e6c4326ff26c355b50dc5847ed1888ba.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///将数组a中n个整数按相反顺序存放 </span></span><br><span class="line"><span class="comment">//将a[0]与a[n-1]对换,a[1]与a[n-2]对换。。。。 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//void reserve(int a[],int n);  //reverse函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>; <span class="comment">//传递指针变量 </span></span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;原数组:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> reserve(a,<span class="number">10</span>); <span class="comment">//数组名作地址，等价于传递了首元素地址 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n倒序后:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span> <span class="comment">//x为指针变量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p,t,*i,*j,m;</span><br><span class="line">m=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">i=a;   <span class="comment">//i指向a，即指向数组第一个元素 </span></span><br><span class="line">j=a+n<span class="number">-1</span>;  <span class="comment">//j指向数组的最后一个元素 ，从0开始要减1 </span></span><br><span class="line">p=a+m;<span class="comment">//p指向中间值</span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;=p;i++,j--)</span><br><span class="line">&#123;</span><br><span class="line">t=*i;</span><br><span class="line">*i=*j;</span><br><span class="line">*j=t;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">void reverve(int a[],int n)  //x是数组名 </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int t,i,j,m;</span></span><br><span class="line"><span class="comment">m=(n-1)/2;   //中间变量 </span></span><br><span class="line"><span class="comment">for(i=0;i&lt;=m;i++)  //小于中间值就发生提供 </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">j=n-1-i;  //j指向对应的元素，例a[0]对应倒数第一个元素 a[n-1]</span></span><br><span class="line"><span class="comment">t=a[i];</span></span><br><span class="line"><span class="comment">a[i]=a[j];</span></span><br><span class="line"><span class="comment">a[j]=t;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从十个数中找出其中最大值和最小值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_min_value</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>; <span class="comment">//函数声明 </span></span><br><span class="line"><span class="keyword">int</span> max,min;  <span class="comment">//全局变量 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入10个整数:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); </span><br><span class="line">&#125; </span><br><span class="line">max_min_value(a,<span class="number">10</span>);  <span class="comment">//数组名当参数 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nmax=%d,min=%d\n&quot;</span>,max,min);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_min_value</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p,*a_end; <span class="comment">//定义两个指针变量 </span></span><br><span class="line">a_end=a+n;    <span class="comment">//指向最后一个元素地址 </span></span><br><span class="line">max=min=*a;  <span class="comment">//设a[0]为最大最小值 </span></span><br><span class="line"><span class="keyword">for</span>(p=a+<span class="number">1</span>;p&lt;a_end;p++) <span class="comment">//p=a+1即a[1],p&lt;a[n],p++即a下一个元素 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*p&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=*p;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(*p&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=*p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.形参和实参都用数组名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">f(a,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实参用数组名，形参用指针变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">f(a,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.实参形参都用指针变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],*p=a;</span><br><span class="line">f(p,<span class="number">10</span>);    <span class="comment">//传地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span>  <span class="comment">//接收地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.实参为指针变量，形参为数组名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],*p=a;</span><br><span class="line">f(p,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span>  <span class="comment">//实现同一首地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组与指针"><a href="#多维数组与指针" class="headerlink" title="多维数组与指针"></a>多维数组与指针</h2><p>二维数组在内存中是线性存放的，但在逻辑上可以认为是“数组的数组”，分行和列来理解。</p><pre><code>    int a[3][4]=&#123;&#123;1,3,5,7&#125;,&#123;9,11,13,15&#125;,&#123;17,19,21,23&#125;&#125;;</code></pre><p>设二维数组的首行的首地址为2000，则有：</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/09/01d7f1351a27ceb6940a80be6dc48455.png"></p><table><thead><tr><th align="center">表示形式</th><th align="center">含义</th><th align="center">地址</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">二维数组名，指向一维数组a[0]，即0行首地址</td><td align="center">2000</td></tr><tr><td align="center">a[0],* (a+0),* a</td><td align="center">0行0列元素地址</td><td align="center">2000</td></tr><tr><td align="center">a+1,&amp;a[1]</td><td align="center">1行首地址</td><td align="center">2016</td></tr><tr><td align="center">a[1],*(a+1)</td><td align="center">1行0列元素a[1] [0]的地址</td><td align="center">2016</td></tr><tr><td align="center">a[1]+2,*(a+1)+2,&amp;a[1] [2]</td><td align="center">1行2列元素a[1] [2]的地址</td><td align="center">2024</td></tr><tr><td align="center">*(a[1]+2), *( *(a+1)+2),a[1] [2]</td><td align="center">1行2列元素a[1] [2]的地址</td><td align="center">元素值为13</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>&#125;,&#123;<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;************指向第一个元素的地址***************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*a:%d\n&quot;</span>,*a); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0]:%d\n&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0]:%d\n&quot;</span>,&amp;a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0][0]:%d\n&quot;</span>,&amp;a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;************指向第二行的地址，相差16字节*************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a+1:%d\n&quot;</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(a+1):%d\n&quot;</span>,*(a+<span class="number">1</span>));  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[1]:%d\n&quot;</span>,a[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[1]:%d\n&quot;</span>,&amp;a[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[1][0]:%d\n&quot;</span>,&amp;a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;************指向第三行的地址，相差16字节***************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a+2:%d\n&quot;</span>,a+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(a+2):%d\n&quot;</span>,*(a+<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[2]:%d\n&quot;</span>,a[<span class="number">2</span>]); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[2]:%d\n&quot;</span>,&amp;a[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[2][0]:%d\n&quot;</span>,&amp;a[<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">************指向第一个元素的地址***************</span></span><br><span class="line"><span class="comment">a:6487536</span></span><br><span class="line"><span class="comment">*a:6487536</span></span><br><span class="line"><span class="comment">a[0]:6487536</span></span><br><span class="line"><span class="comment">&amp;a[0]:6487536</span></span><br><span class="line"><span class="comment">&amp;a[0][0]:6487536</span></span><br><span class="line"><span class="comment">************指向第二行的地址，相差16字节*************</span></span><br><span class="line"><span class="comment">a+1:6487552</span></span><br><span class="line"><span class="comment">*(a+1):6487552</span></span><br><span class="line"><span class="comment">a[1]:6487552</span></span><br><span class="line"><span class="comment">&amp;a[1]:6487552</span></span><br><span class="line"><span class="comment">&amp;a[1][0]:6487552</span></span><br><span class="line"><span class="comment">************指向第三行的地址，相差16字节***************</span></span><br><span class="line"><span class="comment">a+2:6487568</span></span><br><span class="line"><span class="comment">*(a+2):6487568</span></span><br><span class="line"><span class="comment">a[2]:6487568</span></span><br><span class="line"><span class="comment">&amp;a[2]:6487568</span></span><br><span class="line"><span class="comment">&amp;a[2][0]:6487568</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>指向多维数组元素的指针变量<br>把二维数组a分解为一维数组a[0],a[1],a[2]之后，设p为指向二维数组的指针变量。可定义为：</p><pre><code>  int(*p)[4];</code></pre><p>它表示p是一个指针变量，它指向包含<code>4个元素的一维数组</code>。若指向第一个一维数组a[0],其值等于a,a[0],或&amp;a[0][0]等。<br><code>而p+i则指向一维数组a[i]</code>。</p><blockquote><p>从前面分析可得出<code>*(p+i)+j</code>是二维数组<code>i行j列</code>的元素的地址，而<code>*(*(p+i)+j)</code>则是i行j列元素的<code>值</code>。</p></blockquote></li><li><p>二维数组指针变量说明的一般形式为：</p><pre><code>  类型说明符(*指针变量名)[长度]</code></pre><p>其中“<code>类型说明符</code>”为所指数组的<code>数据类型</code>。”<code>*</code>“表示其后的变量是<code>指针类型</code>。“<code>长度</code>”表示<code>二维数组分解为多个一维数组时，一维数组的长度，也就是二维数组的列数</code>。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用指针输出二维数组的指 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>&#125;,&#123;<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>];  <span class="comment">//二维数组指针   4为每个一维数组的长度</span></span><br><span class="line"><span class="keyword">int</span> i,j;   <span class="comment">//行列 </span></span><br><span class="line">p=a;    <span class="comment">//指针指向二维数组a的首地址 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d  &quot;</span>,*(*(p+i)+j));</span><br><span class="line"><span class="comment">//*(*(p+i)+j)则是i行j列元素的值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="字符串与指针"><a href="#字符串与指针" class="headerlink" title="字符串与指针"></a>字符串与指针</h2> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/09/13a3ccf618dabfdbeeb9f215cb06c0c0.png" width="400px" height="400px"><pre><code>     //char string[]=&quot;I love China!&quot;;    char *string=&quot;I love China!&quot;;  //定义一个字符指针     printf(&quot;%s\n&quot;,string);</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//实现字符数组的复制 (下标法)</span></span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">&quot;I Love China!&quot;</span>,b[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;*(a+i)!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">*(b+i)=*(a+i);</span><br><span class="line">&#125;</span><br><span class="line">*(b+i)=<span class="string">&#x27;\0&#x27;</span>;  <span class="comment">//最后补上0，若不补会不知道字符串结尾在哪 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String a is:%s\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String b is:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;b[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b[i]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//实现字符数组的复制 </span></span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">&quot;I Love China!&quot;</span>,b[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;*(a+i)!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">*(b+i)=*(a+i);</span><br><span class="line">&#125;</span><br><span class="line">*(b+i)=<span class="string">&#x27;\0&#x27;</span>;  <span class="comment">//最后补上0，若不补会不知道字符串结尾在哪 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String a is:%s\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String b is:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;b[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b[i]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String a is:I Love China!</span></span><br><span class="line"><span class="comment">String b is:I Love China!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>字符指针做函数参数<br>①用字符数组作参数<br>②形参用字符指针变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span>;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//区别以下两种写法 第二种不能运行 </span></span><br><span class="line"><span class="keyword">char</span> b[]=<span class="string">&quot;We are family!&quot;</span>;</span><br><span class="line"><span class="comment">//如果用指针指向字符串(常量存储区),则它不能被修改</span></span><br><span class="line"><span class="comment">//char *b=&quot;We are family!&quot;;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String a=%s\nstring b=%s\n&quot;</span>,a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncopy string a to string b:\n&quot;</span>);</span><br><span class="line">copy_string(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nstring a=%s\nstring b=%s\n&quot;</span>,a,b);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;*from!=<span class="string">&#x27;\0&#x27;</span>;from++,to++)</span><br><span class="line">&#123;</span><br><span class="line">*to=*from;</span><br><span class="line">&#125;</span><br><span class="line">*to=<span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String a=I Love China!</span></span><br><span class="line"><span class="comment">string b=We are family!</span></span><br><span class="line"><span class="comment">copy string a to string b:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">string a=I Love China!</span></span><br><span class="line"><span class="comment">string b=I Love China!!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="https://fishc.com.cn/blog-9-1097.html">C++内存分配方式详解——堆、栈、自由存储区、全局/静态存储区和常量存储区</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以上copy_string还有六种简化版写法</span></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((*to=*from)!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">to++;</span><br><span class="line">from++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  *比++优先级高</span></span><br><span class="line"><span class="keyword">while</span>((*to++=*from++)!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*from!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*to++=*from++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//&#x27;\0&#x27;整型为0,当循环条件为0，即退出循环</span></span><br><span class="line"><span class="keyword">while</span>(*to++=*from++)</span><br><span class="line">&#123;</span><br><span class="line">;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;*to++=*from++;)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1,*p2;</span><br><span class="line">p1=from;</span><br><span class="line">p2=to;</span><br><span class="line"><span class="keyword">while</span>((*p2++=*p1++)!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>字符指针变量和字符数组的区别</p></li><li><p>字符数组由若干个元素组成，每个元素中放一个字符，而字符指针变量中存放的是地址(字符串第1个字符的地址)，决不是将字符串放到字符指针变量中。</p></li><li><p>赋值方法。对字符数组只能对各个元素赋值，不能用以下方法对字符数组赋值。</p><pre><code>  char str[20];  str=&quot;I love China!&quot;;</code></pre></li></ul><p>而对字符指针变量，可以采用下面方法赋值：</p><pre><code>    char *a;    a=&quot;I love Chia!&quot;;</code></pre><p>但注意赋给a的不是字符，而是字符串第一个元素的地址。</p><ul><li><p>对字符指针变量赋初值</p><pre><code>  char *a=&quot;I love China!&quot;;  等价于  char *a;  a=&quot;I love China!&quot;;</code></pre></li></ul><p>而对数组的初始化:</p><pre><code>    char str[20]=&#123;&quot;I love China!&quot;&#125;;    不能等价于    char str[20];    str[]=&quot;I love China&quot;;</code></pre><ul><li><p>如果定义了一个字符数组，在编译时为它分配内存单元，它有确定的地址。而定义一个字符指针变量时，给指针变量分配内存单元，在其中可以放一个字符变量的地址也就是说，该指针变量可以指向一个字符型数据，但如果未给它赋予一个地址值，则它并未具体指向一个确定的字符数据。</p><pre><code>  char str[10];  scanf(&quot;%s&quot;,str);  //以上是完全可以的，但下面方法不行  char *a;  scanf(&quot;%s&quot;,a);</code></pre></li><li><p>指针变量的值是可以变化的，使其指向不同的数据</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">a+=<span class="number">7</span>;  <span class="comment">//指向第7个数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I Love China!</span></span><br><span class="line"><span class="comment">China!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>另外需要说明的是，若定义了一个指针变量，并使它指向一个字符串，就可以用下标形式引用指针变量所指的字符串中的字符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The sixth character is %c\n\n&quot;</span>,a[<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;a[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The sixth character is e</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">I Love China!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h2><p><code>用函数指针变量调用函数</code>。一个函数在编译时被分配给一个入口地址，这个函数的入口地址就称为函数的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较a和b的大小，求大值 </span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c语言不允许嵌套注释，下列这种方法可以方便使用 </span></span><br><span class="line"><span class="comment">//相当于开关，用哪段代码就填1，不用就0 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(0)  <span class="comment">//#为预编译,(1)为真，就执行下面代码到endif为止</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">c=max(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,max=%d\n\n&quot;</span>,a,b,c);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">c=a;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(1)</span></span><br><span class="line"><span class="comment">//将main函数改为</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>,<span class="keyword">int</span>); <span class="comment">//定义指向函数的指针 </span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">p=max;    <span class="comment">//使p指向max函数 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">c=(*p)(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d,max=%d\n\n&quot;</span>,a,b,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>函数指针变量常用的用途之一是<code>把指针作为参数传递到其他函数</code>。函数的指针也可以作为参数，以实现函数地址的传递，这样就能够在被调用的函数中使用实参函数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实参函数名    f1            f2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span>(*x1)(<span class="keyword">int</span>),<span class="keyword">int</span>(*x2)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,i,j;</span><br><span class="line">a=(*x1)(i);  <span class="comment">//调用f1函数</span></span><br><span class="line">b=(*x2)(i,j); <span class="comment">//调用f2函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上函数的原理可以简述如下：有一个函数(sub()),它有两个形参(x1,x2)，定义x1和x2为指向函数的指针变量。在调用函数sub时，实参为两个函数名f1和f2,给形参传递的是函数f1和f2的地址。这样在函数sub中就可以调用f1和f2函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span> </span><br><span class="line"><span class="comment">/*有两个整数a和b，由用户输入1，2或3。*/</span> </span><br><span class="line"><span class="comment">/*如输入1，程序就给出a和b中最大者*/</span></span><br><span class="line"><span class="comment">/*输入2就给出a和b中最小者，输入3则求和*/</span></span><br><span class="line"><span class="comment">/*******************************************************/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">//函数声明 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> (*p)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span>; <span class="comment">//fun函数声明 </span></span><br><span class="line"><span class="keyword">int</span> a,b,n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter a and b:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b=&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please choose 1,2or3\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) fun(a,b,max);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) fun(a,b,min);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>) fun(a,b,add); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span>(*p)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">result=(*p)(x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)</span><br><span class="line">z=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">z=y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">if</span>(x&lt;y)</span><br><span class="line">z=x;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">z=y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;min=&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;add=&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Enter a and b:</span></span><br><span class="line"><span class="comment">a=2</span></span><br><span class="line"><span class="comment">b=3</span></span><br><span class="line"><span class="comment">please choose 1,2or3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">min=2ff</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="返回指针值的函数"><a href="#返回指针值的函数" class="headerlink" title="返回指针值的函数"></a>返回指针值的函数</h2><pre><code>    类型名 *函数名(参数列表)    int *a(int x,int y); //带回整型指针值</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有若干个学生的成绩 (每个学生有4门课程)</span></span><br><span class="line"><span class="comment">要求在用户输入学生序号以后，能输出该学生的全部成绩</span></span><br><span class="line"><span class="comment">用指针函数来实现 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span>score[][<span class="number">4</span>]=&#123;&#123;<span class="number">60.0</span>,<span class="number">70.0</span>,<span class="number">80.5</span>,<span class="number">90.5</span>&#125;,&#123;<span class="number">56.0</span>,<span class="number">55.0</span>,<span class="number">67.0</span>,<span class="number">88.0</span>&#125;,&#123;<span class="number">99.0</span>,<span class="number">78.0</span>,<span class="number">78.8</span>,<span class="number">79.8</span>&#125;,&#123;<span class="number">56</span>,<span class="number">78</span>,<span class="number">77</span>,<span class="number">90</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> *<span class="title">search</span><span class="params">(<span class="keyword">double</span>(*pointer)[<span class="number">4</span>],<span class="keyword">int</span> n)</span></span>;  <span class="comment">//指针函数声明，返回指向double型的指针 </span></span><br><span class="line"><span class="keyword">double</span> *p;</span><br><span class="line"><span class="keyword">int</span> i,m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of Studnet:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The scores of NO.%d are:\n&quot;</span>,m);</span><br><span class="line">p=search(score,m);  <span class="comment">//把地址赋给p </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5.2f\t&quot;</span>,*(p+i));  <span class="comment">//打印 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">double</span> *<span class="title">search</span><span class="params">(<span class="keyword">double</span> (*pointer)[<span class="number">4</span>],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> *p;</span><br><span class="line">p=*(pointer+n);  <span class="comment">//序号加行数的索引 </span></span><br><span class="line"><span class="keyword">return</span> p;  <span class="comment">//返回地址 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Please enter the number of Studnet:1</span></span><br><span class="line"><span class="comment">The scores of NO.1 are:</span></span><br><span class="line"><span class="comment">56.00   55.00   67.00   88.00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>指针函数和函数指针的区别</li><li>指针函数是带指针的函数，其本质是一个函数</li><li>函数指针是指向函数的指针变量，因而函数指针本身首先应是指针变量，只不过该指针变量指向函数。</li></ul><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>一个数组，若其元素均为指针类型的数据，称为指针数组，也就是说，指针数组中的每一个元素都相当于一个指针变量。<br>一维数组的定义形式为：</p><pre><code>    类型名 数组名[数组长度]    int *name[4];</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;<span class="comment">//整型数组</span></span><br><span class="line"><span class="comment">//指针数组，5个指针指向a数组的对应元素 </span></span><br><span class="line"><span class="keyword">int</span> *name[<span class="number">5</span>]=&#123;&amp;a[<span class="number">0</span>],&amp;a[<span class="number">1</span>],&amp;a[<span class="number">2</span>],&amp;a[<span class="number">3</span>],&amp;a[<span class="number">4</span>]&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,*name[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1  3  5  7  9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将下边字符串按字符顺序(由小到大)输出</span></span><br><span class="line"><span class="comment">char *name[]=&#123;&quot;Fishc.com&quot;,&quot;www.fishc.com&quot;,&quot;home.fishc.com&quot;,&quot;Fishc.com/dz&quot;&#125;; </span></span><br><span class="line"><span class="comment">我们可以声明一个数组指针来指向；</span></span><br><span class="line"><span class="comment">将排序利用strcmp()函数来解决</span></span><br><span class="line"><span class="comment">各个功能抽象为函数或文件 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">char</span> *name[]=&#123;<span class="string">&quot;Fishc.com&quot;</span>,<span class="string">&quot;www.fishc.com&quot;</span>,<span class="string">&quot;home.fishc.com&quot;</span>,<span class="string">&quot;Fishc.com/dz&quot;</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n=<span class="number">4</span>;</span><br><span class="line">sort(name,n);</span><br><span class="line">print(name,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *t;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(name[k],name[j])&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">k=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=i)</span><br><span class="line">&#123;</span><br><span class="line">t=name[i];</span><br><span class="line">name[i]=name[k];</span><br><span class="line">name[k]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,name[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Fishc.com</span></span><br><span class="line"><span class="comment">Fishc.com/dz</span></span><br><span class="line"><span class="comment">home.fishc.com</span></span><br><span class="line"><span class="comment">www.fishc.com</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>字符在内存中存放形式:<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/60c4d36002b6af45500021b0cf3129e7.png"><br>可以声明数组指针：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/e67f6074740f9eec435d31b12221b8cf.png"></p><h2 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h2><pre><code>    char **p;</code></pre><p>p的前面有两个<em>号。</em>运算符的结合性是<code>从右到左</code>，因此*<em>p相当于</em>(<em>p),显然</em>p是指针变量的定义形式。如果没有最前面的<em>，那就是定义了一个指向字符数据的指针变量。现在它前面又有一个</em>号，表示<code>指针变量p是指向一个字符指针变量的。*p就是p所指向的另一个指针变量</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *name[]=&#123;<span class="string">&quot;I Love China&quot;</span>,<span class="string">&quot;Lzyblog&quot;</span>,<span class="string">&quot;github&quot;</span>,<span class="string">&quot;Very Good!&quot;</span>&#125;;<span class="comment">//指针数组每一个指针指向了字符串的首地址 </span></span><br><span class="line"><span class="keyword">char</span> **p; <span class="comment">//指向指针的指针 </span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">p=name+i; <span class="comment">//指向下一个元素，即下一个字符串 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I Love China</span></span><br><span class="line"><span class="comment">Lzyblog</span></span><br><span class="line"><span class="comment">github</span></span><br><span class="line"><span class="comment">Very Good!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="指针数组作main函数的形参"><a href="#指针数组作main函数的形参" class="headerlink" title="指针数组作main函数的形参"></a>指针数组作main函数的形参</h2><p>指针数组的一个重要应用是<code>作为main函数的形参</code>。</p><pre><code>    int main() //一般形式    int main(int agrc,char *argv[]); //main函数带参数</code></pre><p>main函数是由<code>操作系统</code>调用的，那么main函数形参的值不可能是在程序中得到的，而是和命令一起给出的。也就是在一个命令行中包括<code>命令名</code>和<code>需要传给main函数的参数</code>。</p><p>命令行的一般形式为:</p><pre><code>    命令名 参数1 参数2...参数n</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the number of string is:%d\n&quot;</span>,argc<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;argc;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the string %d is:%s\n&quot;</span>,i,argv[i]);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到运行后形成的.exe文件<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/5ccb7555bdacc776487665fdd0ceb61d.png"><br>打开DOS命令行:<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/10/a3f91c0630712c2f61490b72f7e3b859.png"></p><h2 id="指针总结"><a href="#指针总结" class="headerlink" title="指针总结"></a>指针总结</h2><ul><li>指针数据类型总结</li></ul><table><thead><tr><th align="center"><strong>定义</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">int i;</td><td align="center"><strong>定义整型变量</strong></td></tr><tr><td align="center">int *p;</td><td align="center"><strong>p为指向整型数据的指针变量</strong></td></tr><tr><td align="center">int a[n];</td><td align="center"><strong>定义整型数组a，它有n个元素</strong></td></tr><tr><td align="center">int *p[n];</td><td align="center"><strong>定义指针数组p，它由n个指向整型数据的指针元素组成</strong></td></tr><tr><td align="center">int (*p)[n];</td><td align="center"><strong>p为指向含n个元素的一维数组的指针变量</strong></td></tr><tr><td align="center">int f();</td><td align="center"><strong>f为带回整型函数值的函数</strong></td></tr><tr><td align="center">int *p();</td><td align="center"><strong>p为带回一个指针的函数，该指针指向整型数据</strong></td></tr><tr><td align="center">int (*p)();</td><td align="center"><strong>p为指向函数的指针，该函数返回一个整型值</strong></td></tr><tr><td align="center">int **p;</td><td align="center"><strong>p是一个指针变量，它指向一个指向整型数据的指针变量</strong></td></tr></tbody></table><ul><li>指针运算小结</li></ul><p><strong>①指针变量加(减)一duh个整数</strong><br>例如:p++、p–、p+i、p-i、p+=i、p-=i等。</p><p><strong>②指针变量赋值</strong><br>将一个变量地址赋给一个指针变量，如:</p><pre><code>    p=&amp;a;        //将变量a的地址赋给p    p=array;     //将数组array首元素地址赋给p    p=&amp;array[i]; //将数组array第i个元素的地址赋给p    p=max;    //max为已定义的函数，将max的入口地址赋给p    p1=p2;      //p1和p2都是指针变量，将p2的值赋给p1</code></pre><p><strong>③指针变量可以有空值，即该指针变量不指向任何变量，可以这样表示:</strong></p><pre><code>    p=NULL;</code></pre><p><strong>④两个指针变量可以相减。</strong><br>如果两个指针变量都指向一个数组中的元素，则两个指针变量值之差是两个指针之间的元素个数。</p><p><strong>⑤两个指针变量比较</strong><br>若两个指针指向同一个数组的元素，则可以进行比较。指向前面的元素的指针变量”小于”指向后面元素的指针变量。</p><h2 id="关于void类型"><a href="#关于void类型" class="headerlink" title="关于void类型"></a>关于void类型</h2><p>void真正发挥的作用在于：</p><ul><li><p>对函数返回的确定</p></li><li><p>对函数参数的限定</p><pre><code>  void abc(void);</code></pre></li><li><p>void指针和const指针<br>ANSI C新标准增加了一种”void”指针类型，即不指定它是指向哪一种类型数据的指针变量。</p></li></ul><pre><code>    void *p;</code></pre><p>表示指针变量p不指向一个确定的类型数据，它的作用仅仅是用来<code>存放一个地址</code>。<br>void指针它可以指向<code>任何类型数据</code>。也就是说，可以用任何类型的指针直接给void指针赋值.但是，如果需要将void指针的值赋给其他类型的指针，则需要进行强制类型转换。</p><p><code>Const作用</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//const放前面使变量常量化，使其不能改变，每一个字符都是const变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//声明一个名为str的指针变量</span></span><br><span class="line"><span class="comment">//它指向一个字符型常量，初始化str为指向字符串</span></span><br><span class="line"><span class="comment">//I Love China! </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(1) </span></span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&#x27;L&#x27;</span>;  <span class="comment">//这条语句是错的，但可以改变str指针的值 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">str=<span class="string">&quot;I Love MyCountry!\n\n&quot;</span>; <span class="comment">//合法！ </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *<span class="keyword">const</span> str=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//常量指针是一个固定的指针，不可以改变它的值，但它所指的数据可以改变 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&#x27;I&#x27;</span>;  <span class="comment">//合法！ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(0) </span></span><br><span class="line">str=<span class="string">&quot;I Love MyCountry!\n\n&quot;</span>; <span class="comment">//非法！ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *<span class="keyword">const</span> str=<span class="string">&quot;I Love China!&quot;</span>;</span><br><span class="line"><span class="comment">//常量指针是一个固定的指针，不可以改变它的值，但它所指的数据可以改变 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&#x27;I&#x27;</span>;  <span class="comment">//非法！ </span></span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;I Love MyCountry!\n\n&quot;</span>; <span class="comment">//非法！ </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n%s&quot;</span>,str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>扩展知识点<br>hmemcpy() //万能断点<br>memcpy()</p><pre><code>  void *memcpy()(void *dest,const void *src,size_t count);</code></pre></li></ul><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>预处理命令如包含命令#include&lt;stdio.h&gt;,宏定义命令#define PI 3.1415926等。<br>在源程序中这些命令都放在函数之外，而且一般都放在源文件的前面，它们称为预处理部分。</p><h2 id="define"><a href="#define" class="headerlink" title="define"></a>define</h2><ul><li>无参宏定义</li></ul><p>无参宏的宏名后不带参数。<br>其定义的一般形式为：</p><pre><code>    #define 标识符 字符串    #define PI 3.1415926   //不带分号，它的作用是用PI代替3.1415926</code></pre><p>其中的“#”表示这是一条预处理命令。。<br>凡是以“#”开头的均为<code>预处理命令</code>。<br><code>define</code>为宏定义命令。”标识符”为所定义的宏名。”字符串”可以是常数、表达式、格式串等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> s;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the radius:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;r);</span><br><span class="line">s=PI*r*r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%g\n\n&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>宏定义是用宏名表示一个字符串，只是一种简单的代换，字符串中可以含任何字符，可以是常数，也可以是表达式。</li><li>宏定义不是说明或语句，在行末<code>不必加分红</code>，如加上分号则连分号也一起置换。</li><li>宏定义必须写在函数之外，其作用域为宏定义命令起到源程序结束。如要终止其作用域可使用<code>#undef</code>命令，例#undef PI。</li><li>宏名在源程序中若用引号括起来，则预处理程序不对其作宏代换。</li><li>宏定义允许嵌套，在宏定义的字符串中可以使用已经定义的宏名。在宏展开时由预处理程序层层代换。</li><li>习惯上宏名用大写字母表示，以便于于变量区别。但也允许用小写字母。</li><li>也可以用宏定义表示数据类型，使书法方便。</li></ul><pre><code>    #define INTEGER1 int    typedef INTEGER2 int;</code></pre><ul><li>宏定义和typedef定义的区别</li></ul><p>宏定义只是简单的字符串代换，是在<code>预处理</code>完成的。<br><code>typedef</code>是在<code>编译时</code>处理的，它不是作简单的代换，而是对类型说明符<code>重新命名</code>。被命名的标识符<code>具有类型定义说明的功能</code>,且后面带分号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P1N1 char*</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* P1N2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P1N1 x,y; <span class="comment">//替换后变成: char *x,y;  //x为指针变量，y为字符型 </span></span><br><span class="line">P1N2 a,b; <span class="comment">//替换后变成: char *a,*b; //a和b都为指针类型，占4个字节 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;By #define : %d %d\n\n&quot;</span>,<span class="keyword">sizeof</span>(x),<span class="keyword">sizeof</span>(y)) ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;By typedef : %d %d\n\n&quot;</span>,<span class="keyword">sizeof</span>(a),<span class="keyword">sizeof</span>(b)) ;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">By #define : 8 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By typedef : 8 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>指针的长度跟CPU的位数相等，大部分CPU都是32位，所以指针的长度是32bit，也就是4个字节。(任何指针长度都是4个字节，不管是什么指针)</p></blockquote><ul><li>带参宏定义</li></ul><p>C语言允许带有参数。在宏定义中的参数称为形式参数，在宏调用中的参数称为实际参数。<br>对带参数的宏，在调用中，不仅要宏展开，而且要用实参去代换形参。<br>带参宏定义的一般形式为：</p><pre><code>    #define 宏名(形参表) 字符串</code></pre><p>带参宏调用的一般形式为：宏名(实参表);</p><pre><code>    #define M(y) y*y+3*y  //宏定义    ...    k=M(5);     //宏调用    ...</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) (a&gt;b)?a:b</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* P1N2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,max;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Input two numbers: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">max=MAX(x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The Max is %d\n&quot;</span>,max);</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">Input two numbers: 3 9</span></span><br><span class="line"><span class="comment">The Max is 9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li><p>带参宏定义中，宏名和形参表之间不能用空格重新。</p></li><li><p>在带参宏定义中，形式参数不分配内存单元，因此不必作类型定义。而宏调用中的实参有具体的值。要用它的去代换形参，因此必须作类型说明。这用函数的实参与形参传递不同，在函数中，形参和实参是两个不同的量，各有自己的作用域，调用时要把实参值赋予形参，进行“值传递”。而在带参宏中，<code>只是符号代换，不存在值传递的问题</code>。</p></li><li><p>在宏定义中的形参是标识符，而宏调用中的实参可以是表达式。</p><pre><code>  #define ADD(y) (y)  SAY(a+b+c);</code></pre></li><li><p>在宏定义中，字符串内的形参通常要用括号括起来以避免出错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define SQ(y) (y)*(y)  //不加括号,160/(a+1)*(a+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQ(y) ((y)*(y))<span class="comment">//加了括号,160/((a+1)*(a+1))</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,sq;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input a number: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">sq=<span class="number">160</span>/SQ(a+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sq = %d\n&quot;</span>,sq);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">input a number: 3</span></span><br><span class="line"><span class="comment">sq = 10</span></span><br><span class="line"><span class="comment">input a number: 3</span></span><br><span class="line"><span class="comment">sq = 160</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><ul><li><p>一个include命令只能指定一个被包含文件，若有多个文件要包含，则需要用多个include命令。</p></li><li><p>文件包含允许被嵌套，即在一个被包含的文件中又可以包含另一个文件。</p></li><li><p>包含命令中的文件名可以用双引号括起来，也可以用尖括号括起来。</p><pre><code>  #include“stdio.h”  #include&lt;math.h&gt;</code></pre></li><li><p>使用尖括号表示在包含文件目录中去查找(包含目录是由用户在设置环境时设置的)，而不在源文件目录去查找。</p></li><li><p>使用双引号则表示首先在当前的源文件目录中查找，若未找到才到包含目录中去查找。用户编程时可根据自己文件所在的目录来选择某一种命令形式。</p></li></ul><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><table><thead><tr><th align="center">条件编译指令</th><th>说明</th></tr></thead><tbody><tr><td align="center"><strong>#if</strong></td><td>如果条件为真，则执行相应操作</td></tr><tr><td align="center"><strong>#elif</strong></td><td>如果前面条件为假，而该条件为真，则执行相应操作</td></tr><tr><td align="center"><strong>#else</strong></td><td>如果前面条件均为假，则执行相应操作</td></tr><tr><td align="center"><strong>#endif</strong></td><td>结束相应的条件编译指令</td></tr><tr><td align="center"><strong>#ifdef</strong></td><td>如果该宏已定义，则执行相应操作</td></tr><tr><td align="center"><strong>#ifndef</strong></td><td>如果该宏没有定义，则执行相应操作</td></tr></tbody></table><ul><li>预处例程序提供了条件编译的功能。可以按不同的条件去编译不同的程序部分，因而产生不同的目标代码文件。这对于程序的移植和调试是很有用的。</li><li>条件编译由三种规则：</li></ul><p><strong>①第一种形式:</strong></p><pre><code>    #ifdef 标识符        程序段1    #else        程序段2    #endif</code></pre><p>它的功能是，如果标识符已被#define命令定义过则对程序段1进行编译；否则对程序段2进行编译。<br>如果没有程序段2(它为空),本格式中的#else可以没有,即可以写为:</p><pre><code>    #ifdef 标识符        程序段    #endif</code></pre><p><strong>③第二种形式:</strong></p><pre><code>    #ifndef 标识符        程序段1    #else        程序段2    #endif</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORRECT <span class="meta-string">&quot;China&quot;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter your country : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CORRECT     <span class="comment">//如果没有宏定义 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORRECT <span class="meta-string">&quot;China&quot;</span>  <span class="comment">//则宏定义 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cmp(str,CORRECT)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nYeah! You are Chinese!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nYou are not Chinese!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> *str1,<span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(str1[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(str2[j]==str1[i])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(!str2[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">Please enter your country : China</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Yeah! You are Chinese!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p> <strong>③第三种形式:</strong></p><pre><code>     #if 常量表达式         程序段1     #else         程序段2     #endif</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//相当与开关，确定求圆还是正方形的面积 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROUND 1  <span class="comment">//1为真 指求园的面积，0为假，求正方形的面积 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926  <span class="comment">//圆周率 </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">double</span> s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input a number: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;r);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ROUND</span></span><br><span class="line">s=r*r*PI;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Area of round if:%6.5f\n\n&quot;</span>,s);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">s=r*r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Area of spuare if:%6.5f\n\n&quot;</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input a number: 3</span></span><br><span class="line"><span class="comment">Area of round if:28.27433</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>将不同类型的数组组合成一个有机的整体，以便于引用。</p><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><p>定义一个结构的一般形式为：</p><pre><code>    struct 结构名    &#123;        成员列表    &#125;;</code></pre><p>成员列表由若干个成员组成，每个成员都是该结构的一个组成部分。对对每个成员也必须作类型说明，其形式为:</p><pre><code>    类型说明符 成员名;</code></pre><ul><li>定义结构类型变量的方法</li></ul><p><strong>①先声明结构体类型再定义变量名</strong></p><pre><code>    类型名      结构体   变量名1，变量名2    struct student student1,student2;</code></pre><p>定义了student1和student2为strcut student类型的变量,即它们具有strcut student类型的结构。</p><p><strong>②在声明类型的同时定义变量</strong></p><pre><code>    strcut 结构体名    &#123;        成员表列    &#125;变量名变量;    strcut student    &#123;        int num;        char name[20];        char sex;        int age;        float score;        char addr[30];    &#125;student1,student2</code></pre><p>在定义了结构体变量后，系统会为之分配内存单元<br>例如：student1和student2在内存中各占(4+20+1+4+4+30=67)个字节。</p><p><strong>③直接定义结构体类型变量</strong></p><pre><code>    struct    &#123;        成员表列    &#125;变量名表列;</code></pre><p>即不出现结构体名。</p><ul><li>结构体嵌套</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">birthday</span>;</span> <span class="comment">//成员birthday被说明为data结构类型，成员名可与程序中其他变量同名，互不干扰。</span></span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy1,boy2;</span><br></pre></td></tr></table></figure><h2 id="结构体变量的引用"><a href="#结构体变量的引用" class="headerlink" title="结构体变量的引用"></a>结构体变量的引用</h2><p>不能将一个结构体变量作为一个整体进行输出<br>正确引用方式：</p><pre><code>    结构体变量名.成员名    student1.num  //表示student1变量中的num成员    student1.num=100; //对变量成员赋值</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy1,boy2;</span><br><span class="line"></span><br><span class="line">boy1.num=<span class="number">007</span>;</span><br><span class="line">boy1.name=<span class="string">&quot;Jake&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input sex and score\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c %f&quot;</span>,&amp;boy1.sex,&amp;boy1.score);</span><br><span class="line"></span><br><span class="line">boy2=boy1;  <span class="comment">//把boy1全体成员赋给boy2 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\nName = %s\n&quot;</span>,boy2.num,boy2.name);<span class="comment">// </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\nScore = %f\n&quot;</span>,boy2.sex,boy2.score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Please input sex and score</span></span><br><span class="line"><span class="comment">M 91</span></span><br><span class="line"><span class="comment">Number = 7</span></span><br><span class="line"><span class="comment">Name = Jake</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment">Score = 91.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>如果成员本身又属于一个结构体类型，则要用若干个成员运算符，一级一级地找到最低的一级的成员。只能对最低级的成员进行赋值或存取以及运算。<br>例如以上结构体嵌套：</p><pre><code>  student1.num;  student1.birthday.month  //多个点运算符访问最低级成员</code></pre></li><li><p>对结构体变量的成员可以向普通变量一样进行各种运算(根据其类型决定可以进行的运算)</p></li><li><p>可以引用结构体变量成员的地址，也可以引用结构体变量的地址。<br>结构体变量的地址注意用在函数参数，传递结构体变量的地址。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy1;</span><br><span class="line">boy1.num=<span class="number">007</span>;</span><br><span class="line">boy1.name=<span class="string">&quot;Jake&quot;</span>;</span><br><span class="line"><span class="comment">//结构体地址和第一个成员地址一样</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The address of struct is %o \n&quot;</span>,&amp;boy1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The address of num is %o \n&quot;</span>,&amp;boy1.num);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The address of struct is 30577000</span></span><br><span class="line"><span class="comment">The address of num is 30577000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="结构体变量初始化"><a href="#结构体变量初始化" class="headerlink" title="结构体变量初始化"></a>结构体变量初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line">&#125;a=&#123;<span class="number">101</span>,<span class="string">&quot;LEE SIN&quot;</span>,<span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//a.num=101;  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num=%d\nname=%s\nsex=%s\n&quot;</span>,a.num,a.name,a.sex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>结构体数组每一个元素都是一个结构体类型的数据，它们都分别包括各个成员项。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 3</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> phone[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">man</span>[<span class="title">NUM</span>];</span> <span class="comment">//结构体数组 </span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;NUM;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input name:\n&quot;</span>);</span><br><span class="line">gets(man[i].name); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input phone:\n&quot;</span>);</span><br><span class="line">gets(man[i].phone); </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tname\t\t\t\t\tphone\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;NUM;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%20s\t\t\t%20s\n&quot;</span>,man[i].name,man[i].phone);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input name:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">input phone:</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">input name:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">input phone:</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">input name:</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">input phone:</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">        name                                    phone</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                   1                                       2</span></span><br><span class="line"><span class="comment">                   3                                       4</span></span><br><span class="line"><span class="comment">                   5                                       6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="结构体数组定义"><a href="#结构体数组定义" class="headerlink" title="结构体数组定义"></a>结构体数组定义</h2><pre><code>    //第一种方法    struct student    &#123;        int num;        char sex;    &#125;;    struct student a[3];  //a为结构体数组名    //第二种方法    struct student    &#123;        int num;        char sex;    &#125;a[3];</code></pre><h2 id="结构体数组初始化"><a href="#结构体数组初始化" class="headerlink" title="结构体数组初始化"></a>结构体数组初始化</h2><pre><code>    //第一种方法    struct student    &#123;        int num;        char sex;    &#125;a[3]=&#123;&#123;1,'M'&#125;,&#123;2,'M'&#125;,&#123;3,'M'&#125;&#125;;    //第二种方法    struct student    &#123;        int num;        char sex;    &#125;;    struct student a[3]=&#123;&#123;1,'M'&#125;,&#123;2,'M'&#125;,&#123;3,'M'&#125;&#125;;</code></pre><h2 id="指向结构体类型数据的指针"><a href="#指向结构体类型数据的指针" class="headerlink" title="指向结构体类型数据的指针"></a>指向结构体类型数据的指针</h2><ul><li><p>一个结构体变量的指针就是该结构体变量所占据的内存段的<code>起始地址</code>。</p></li><li><p>可以设一个指针变量，用来指向一个结构体变量，此时该指针变量的值是结构体变量的起始地址。</p></li><li><p>指针变量也可以用来指向结构体数组中的元素。</p></li><li><p>结构体变量声明的一般形式:</p><pre><code>  struct 结构名 *结构指针变量名  struct student *pstu; </code></pre></li><li><p>赋值是把结构变量的首地址赋予该指针变量，不能把结构名赋予该指针变量。因为结构名只能表示一个结构形式，编译系统并不对它分配内存空间。</p></li><li><p>有了结构指针变量，就能更方便地访问结构变量的各个成员。<br>其访问形式如下:</p><pre><code>  (*结构指针变量).成员名  (*pstu).num;  //或者  结构指针变量-&gt;成员名  pstu-&gt;num</code></pre></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;boy=&#123;<span class="number">102</span>,<span class="string">&quot;Lzy&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">88.0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">pstu</span>;</span></span><br><span class="line">pstu=&amp;boy;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\n Name = %s\n&quot;</span>,boy.num,boy.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\n Score = %f\n\n&quot;</span>,boy.sex,boy.score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\n Name = %s\n&quot;</span>,(*pstu).num,(*pstu).name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\n Score = %f\n\n&quot;</span>,(*pstu).sex,(*pstu).score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number = %d\n Name = %s\n&quot;</span>,pstu-&gt;num,pstu-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sex = %c\n Score = %f\n\n&quot;</span>,pstu-&gt;sex,pstu-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Number = 102</span></span><br><span class="line"><span class="comment"> Name = Lzy</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment"> Score = 88.000000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Number = 102</span></span><br><span class="line"><span class="comment"> Name = Lzy</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment"> Score = 88.000000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Number = 102</span></span><br><span class="line"><span class="comment"> Name = Lzy</span></span><br><span class="line"><span class="comment">Sex = M</span></span><br><span class="line"><span class="comment"> Score = 88.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="结构指针变量作函数参数"><a href="#结构指针变量作函数参数" class="headerlink" title="结构指针变量作函数参数"></a>结构指针变量作函数参数</h2><p>将一个结构体变量的值传递给另一个函数，有3个方法:</p><ul><li>用结构体变量的成员作参数</li><li>用结构体变量作实参</li><li>用指向结构体变量(或数组)的指针作实参，将结构体变量(或数组)的地址传给形参</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有一个结构体变量stu，内含学生学号、姓名和3门课程的成绩。通过调用函数print将它们输出。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> score[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student)</span></span>;  <span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line">stu.num=<span class="number">8</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(stu.name,<span class="string">&quot;I Love China!!&quot;</span>);<span class="comment">//使用stu.name=&quot;I Love China!!&quot;，结构体成员必须定义成char *name;</span></span><br><span class="line">stu.score[<span class="number">0</span>]=<span class="number">98.5</span>;</span><br><span class="line">stu.score[<span class="number">1</span>]=<span class="number">99.0</span>;</span><br><span class="line">stu.score[<span class="number">2</span>]=<span class="number">99.5</span>;</span><br><span class="line">print(stu);   <span class="comment">//结构体变量作实参</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student stu)</span>  <span class="comment">//接收到结构体变量，知道了结构体变量的位置,相当于将整个结构体复制过去</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tnum: %d\n&quot;</span>,stu.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tname: %s\n&quot;</span>,stu.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_1: %5.2f\n&quot;</span>,stu.score[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_2: %5.2f\n&quot;</span>,stu.score[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_3: %5.2f\n&quot;</span>,stu.score[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     num     : 8</span></span><br><span class="line"><span class="comment">        name    : I Love China!!</span></span><br><span class="line"><span class="comment">        score_1 : 98.50</span></span><br><span class="line"><span class="comment">        score_2 : 99.00</span></span><br><span class="line"><span class="comment">        score_3 : 99.50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改用指向结构体变量的指针作实参 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> score[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line">stu.num=<span class="number">8</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(stu.name,<span class="string">&quot;I Love China!!&quot;</span>);<span class="comment">//stu.name=&quot;I Love China!!&quot;</span></span><br><span class="line">stu.score[<span class="number">0</span>]=<span class="number">98.5</span>;</span><br><span class="line">stu.score[<span class="number">1</span>]=<span class="number">99.0</span>;</span><br><span class="line">stu.score[<span class="number">2</span>]=<span class="number">99.5</span>;</span><br><span class="line">print(&amp;stu);      <span class="comment">//传结构体变量的地址 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *p)</span> <span class="comment">//接收结构体变量地址，用结构体指针p指向它 ，复制过去的只是地址，比上一种方法效率高</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tnum: %d\n&quot;</span>,p-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tname: %s\n&quot;</span>,p-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_1: %5.2f\n&quot;</span>,p-&gt;score[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_2: %5.2f\n&quot;</span>,p-&gt;score[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\tscore_3: %5.2f\n&quot;</span>,p-&gt;score[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态存储分配"><a href="#动态存储分配" class="headerlink" title="动态存储分配"></a>动态存储分配</h2><p>全局变量是分配在内存中的静态存储区的，非静态的局部变量是分配在内存中的动态存储区的，这个存储区是一个称为<code>栈(stack)</code>的区域。<br>此外，C语言和允许建立内存动态分配区域，以存放一些临时用的数据，这些数据不必在程序的声明部分定义，也不必等到函数结束时才释放，而是需要时随时开辟，不需要时随时释放。<br>这些数据是存放在一个特别的自由存储区，称为<code>堆区(heap)</code>。<br>对内存的动态分配主要通过系统提供的库函数来实现的,主要有malloc,calloc,free,realloc这4个函数。</p><pre><code>    #include&lt;stdlib.h&gt;</code></pre><ul><li><p><strong>malloc函数</strong></p><pre><code>  void *malloc(unsigned int size);  malloc(100); //开辟100字节的临时分配域，函数值为其第1个字节的地址</code></pre></li></ul><p>在内存的动态存储区中分配一个长度为size的连续空间。形参size的类型定为无符号整型(不允许为负数)。此函数的值(即”返回值”)是所分配区域的<code>第一字节的地址</code>，或者说，此函数是一个指针型函数，返回的指针指向该分配域的开头位置。</p><blockquote><p>注意指针的基类型为void,即不指向任何类型的数据，只提供一个地址。如果此函数未能成功地执行(例如内存空间不足),则返回<code>空指针(NULL)</code>。</p></blockquote><ul><li><p><strong>calloc函数</strong></p><pre><code>  void *calloc(unsigned n,unsigned size);  p=calloc(50,4);  //开辟50*4个字节的临时分配域，把起始地址赋给指针变量p</code></pre></li></ul><p>在内存的动态存储区中分配n个长度为size的连续空间，这个空间一般比较大，足以<code>保存一个数组</code>。<br>用calloc函数可以为一维数组开辟动态存储空间，n为数组元素个数，每个元素长度为size。这就是动态数组。函数返回指向所分配域的起始位置的指针；如果分配不成功，返回NULL。</p><ul><li><p><strong>free函数</strong></p><pre><code>  void free(void *p)  free(p);  //释放指针变量p所指向的已分配的动态空间</code></pre></li></ul><p>释放指针变量p所指向的动态空间，使这部分空间能重新被其它变量使用。<br>p是最近一次调用calloc或malloc函数时得到的函数返回值。free函数无返回值。</p><ul><li><p><strong>realloc函数</strong></p><pre><code>  void *realloc(void *p,unsigned int size)  realloc(p,50);   //将p所指向的已分配的动态空间改为50字节</code></pre></li></ul><p>如果已经通过malloc函数或者calloc函数获得了动态空间，想改变其大小，可以使用realloc函数<code>重新分配</code>。<br>使用realloc函数将p所指向的动态空间的大小改为size。p的值不变。如果重新分配不唱歌，返回NULL。</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表是动态地进行存储分配的一种结构。<br>链表的组成：</p><ul><li>头指针<br>存放一个地址，该地址指向第一个元素</li><li>结点<br>用户需要的实际数据和链接节点的指针(数据域和指针域)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/438aed32557a8ad5fd91581d99a1f5f7.png"></p><p>根据下图建立链表</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/22856f77e6266b65c762fb94d68d77fe.png"></p><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//数据域 </span></span><br><span class="line"><span class="keyword">long</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="comment">//指针域 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span> <span class="comment">//指向struct student的指针 </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>,*<span class="title">head</span>,*<span class="title">p</span>;</span><span class="comment">//头指针 </span></span><br><span class="line"></span><br><span class="line">a.num=<span class="number">10101</span>;</span><br><span class="line">a.score=<span class="number">89.5</span>;</span><br><span class="line">b.num=<span class="number">10103</span>;</span><br><span class="line">b.score=<span class="number">90</span>;</span><br><span class="line">c.num=<span class="number">10107</span>;</span><br><span class="line">c.score=<span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">head=&amp;a;  <span class="comment">//头指针指向第一个元素 </span></span><br><span class="line">a.next=&amp;b; <span class="comment">//存放下一个元素的地址 </span></span><br><span class="line">b.next=&amp;c; <span class="comment">//存放下一个元素的地址 </span></span><br><span class="line">c.next=<span class="literal">NULL</span>; <span class="comment">// </span></span><br><span class="line">p=head;  <span class="comment">//使指针p指向head </span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld %5.1f\n&quot;</span>,p-&gt;num,p-&gt;score); <span class="comment">//输出p指向的结点的数据 </span></span><br><span class="line">p=p-&gt;next;  <span class="comment">//使p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>); <span class="comment">//最后一个指针指向NULL </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10101  89.5</span></span><br><span class="line"><span class="comment">10103  90.0</span></span><br><span class="line"><span class="comment">10107  85.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="动态链表"><a href="#动态链表" class="headerlink" title="动态链表"></a>动态链表</h2><p>所谓动态链表是指在程序执行过程中<code>从无到有</code>地建立起一个链表，即一个一个地开辟结点和输入各结点数据，并建立起前后相链的关系。<br>根据下面的分析写程序建立一个含有学生(学号、成绩)数据的单向动态链表。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/e1f408b7fa777e88c9ca528a7c7ee638.png"></p><ul><li>约定学号不会为0，如果输入学号为0，则表示建立链表的过程完成，该结点不会连接到链表中</li><li>如果输入的p1-&gt;num≠0，则输入的是第一个结点数据(n=1)，令heaad=p1,即把p1的值赋给head,也就是使head也指向新开辟的结点p1所指向的新开辟的结点就成为链第一个结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/b064f1235a628c1ffa102ac1fddbf7fd.png"></li><li>再开辟另一个结点并使p1指向它，接着输入该结点的数据</li><li>如果输入的p1-&gt;num不等于0，则应链入第2个结点(n=2)，将新结点的地址赋给第一个结点的next成员</li><li>接着使p2=p1,也就是使p2指向刚才建立的结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/07899a62115e93e738c7b8e3c2e26e7e.png"></li><li>再开辟一个结点并使p1指向它，并输入该结点的数据</li><li>在第三次循环中，由于n=3(n≠1),又将p1的值赋给p2-&gt;next,也就是将第3个结点连接到第2个结点之后,并使p2=p1,使p2指向最后一个结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/dad0a42dc7e428ec02b64e99d9af8317.png"></li><li>再开辟一个新结点，并使p1指向它，输入该结点的数据。由于p1-&gt;num的值为0,不再执行循环,此新结点不应被连接到链表中</li><li>将NULL赋给p2-&gt;next</li><li>建立链表过程至此结束，p1最后所指的结点未链入链表中，第三个结点的next成员的值为NULL,它不指向任何结点<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/4edfab5febfc3d57d5324441f4dd2733.png"></li></ul><h2 id="链表输出"><a href="#链表输出" class="headerlink" title="链表输出"></a>链表输出</h2><ul><li>首先要知道链表第一个结点的地址,也就是要知道head的值。</li><li>然后设一个指针变量p,先指向第一个结点,输出p所指的结点,然后使p后移一个结点,再输出,直到链表的尾结点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/ff33f3e7ac2f23d6d07c098b69e195b1.png"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student) <span class="comment">//student结构的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span>;  <span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>;  <span class="comment">//打印链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//全局变量，用来记录存放了多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--当num为0结束输入--\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line">stu=creat();  <span class="comment">//得到head头指针 </span></span><br><span class="line">print(stu);  <span class="comment">//根据头指针找到链表并输出 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span> <span class="comment">//只是创建了一个指针，并没有分配内存大小 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="comment">//动态申请空间，并使p1,p2指向这个新生成的空间 </span></span><br><span class="line">p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);<span class="comment">//LEN是结构体的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入第1个学生的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score);</span><br><span class="line"></span><br><span class="line">head=<span class="literal">NULL</span>;  <span class="comment">//初始化 </span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num != <span class="number">0</span>) <span class="comment">//不等于0 </span></span><br><span class="line">&#123;</span><br><span class="line">n++;   <span class="comment">//出现新结点 </span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p1;  <span class="comment">//头节点指向 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line">p2=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score); </span><br><span class="line"> &#125; </span><br><span class="line"> p2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> head;  <span class="comment">//首地址，链表的标识记号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease are %d records!\n\n&quot;</span>,n);</span><br><span class="line"></span><br><span class="line">p=head;   <span class="comment">//使p指向第1个结点 </span></span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>) <span class="comment">//不是空表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//输出一个结点中的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号为 %d 的成绩是: %f\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">p=p-&gt;next;   <span class="comment">//p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>);<span class="comment">//p不为空地址 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">--当num为0结束输入--</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">Please enter the num :01</span></span><br><span class="line"><span class="comment">Please enter the score :99</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :02</span></span><br><span class="line"><span class="comment">Please enter the score :78</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :03</span></span><br><span class="line"><span class="comment">Please enter the score :66</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :0</span></span><br><span class="line"><span class="comment">Please enter the score :0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 99.000000</span></span><br><span class="line"><span class="comment">学号为 2 的成绩是: 78.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 66.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="链表删除"><a href="#链表删除" class="headerlink" title="链表删除"></a>链表删除</h2>从一个动态链表中删去一个结点,并不是真正从内存中把它抹掉,而是把它从链表中分离开来,只要撤销原来的链接关系即可。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/66f3e5fafdc6ffbc594a4d77e675c0b6.png"></li></ul><p>写一函数以删除动态链表中指定的结点。<br>解题思路：</p><ul><li><p>从p指向的第一个结点开始，检查该结点中的num值是否等于输入的要求删除的那个学号</p></li><li><p>如果相等就将该结点删除，若不相等，就将p后移一个结点，再如此进行下去，直到遇到表尾为止。</p></li><li><p>可以设两个指针变量p1和p2,先使p1指向第一个结点</p></li><li><p>如果要删除的不是第一个结点,则使p1后移指向下一个结点(将p1-&gt;next赋给p1),在此之前应将p1的值赋给p2,使p2指向刚才检查过的那个结点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/5fd8e0e9c712c50255acec82b8dc72e8.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)  <span class="comment">//student结构的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span>;  <span class="comment">//创建链表</span></span><br><span class="line"><span class="comment">//del函数用于删除结点,*head即链表的头指针，num是要删除的结点num </span></span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>; <span class="comment">//打印链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//全局变量，用来记录存放了多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>,*<span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--当num为0结束输入--\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line">stu=creat();  <span class="comment">//得到head头指针 </span></span><br><span class="line">p=stu;</span><br><span class="line">print(p);  <span class="comment">//根据头指针找到链表并输出 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num to delete :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">print(del(p,num));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span> <span class="comment">//只是创建了一个指针，并没有分配内存大小 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="comment">//动态申请空间，并使p1,p2指向这个新生成的空间 </span></span><br><span class="line">p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);<span class="comment">//LEN是结构体的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入第1个学生的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score);</span><br><span class="line"></span><br><span class="line">head=<span class="literal">NULL</span>;  <span class="comment">//初始化 </span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num != <span class="number">0</span>) <span class="comment">//不等于0 </span></span><br><span class="line">&#123;</span><br><span class="line">n++;   <span class="comment">//出现新结点 </span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p1;  <span class="comment">//头节点指向 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line">p2=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score); </span><br><span class="line"> &#125; </span><br><span class="line"> p2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> head;  <span class="comment">//首地址，链表的标识记号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease are %d records!\n\n&quot;</span>,n);</span><br><span class="line"></span><br><span class="line">p=head;   <span class="comment">//使p指向第1个结点 </span></span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>) <span class="comment">//不是空表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//输出一个结点中的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号为 %d 的成绩是: %f\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">p=p-&gt;next;   <span class="comment">//p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>);<span class="comment">//p不为空地址 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="comment">//如果头结点指向NULL，这是一个空链表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nThis list is null!\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;  <span class="comment">//goto直接跳到end </span></span><br><span class="line">&#125;</span><br><span class="line">p1=head; <span class="comment">//p1指向head </span></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num!=num&amp;&amp;p1-&gt;next!=<span class="literal">NULL</span>) <span class="comment">//指向第一个结点数据不等于所删除数据,且不是最后一个结点 </span></span><br><span class="line">&#123;</span><br><span class="line">p2=p1;   <span class="comment">//p1的值给p2 </span></span><br><span class="line">p1=p1-&gt;next; <span class="comment">//p1指向下一个结点 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num==p1-&gt;num)  <span class="comment">//找到所要删除的学号 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p1==head)  <span class="comment">//为头结点时 </span></span><br><span class="line">&#123;</span><br><span class="line">head=p1-&gt;next;  <span class="comment">//头结点给p1的下一个,把p1去掉 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p1-&gt;next就是B-&gt;C,p2-&gt;next就是A-&gt;B,next为指向下一地址的指针 </span></span><br><span class="line">p2-&gt;next=p1-&gt;next;  <span class="comment">//例A(p2),B(p1),C三个结点，改成A,C </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nDelete No: %d succeed!\n&quot;</span>,num);</span><br><span class="line">n=n<span class="number">-1</span>;  <span class="comment">//n为全局变量，接收学生个数 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//到达尾结点 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d not been found!\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">--当num为0结束输入--</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">Please enter the num :01</span></span><br><span class="line"><span class="comment">Please enter the score :90</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :02</span></span><br><span class="line"><span class="comment">Please enter the score :78</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :03</span></span><br><span class="line"><span class="comment">Please enter the score :66</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :0</span></span><br><span class="line"><span class="comment">Please enter the score :0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 90.000000</span></span><br><span class="line"><span class="comment">学号为 2 的成绩是: 78.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 66.000000</span></span><br><span class="line"><span class="comment">Please enter the num to delete :2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Delete No: 2 succeed!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 2 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 90.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 66.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="链表插入"><a href="#链表插入" class="headerlink" title="链表插入"></a>链表插入</h2><p>对链表的插入是指将一个结点插入到一个已有的链表中。<br>为了能正确插入，必须解决两个问题:<br>①怎样找到插入的位置<br>②怎样实现插入</p></li><li><p>我们可以先用指针变量p0指向待插入的结点,p1指向第一个结点。将p0-&gt;num与p1-&gt;num相比较,如果p0-&gt;num&gt;p1-&gt;num,此时将p1后移,并使p2指向刚才p1所指的结点。<br>三种情况：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/b269953d32c1271e7b610a34b89822d1.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/13/d884a8af5a256a5340c1b75929fc7979.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)  <span class="comment">//student结构的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span>;  <span class="comment">//创建链表</span></span><br><span class="line"><span class="comment">//del函数用于删除结点,*head即链表的头指针，num是要删除的结点num </span></span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="comment">//第一个参数是需要被插入的链表，第二个参数是待插入的结构的地址 </span></span><br><span class="line"><span class="function">struct student *<span class="title">insert</span><span class="params">(struct student *head,struct student *stud)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>; <span class="comment">//打印链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">//全局变量，用来记录存放了多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>,*<span class="title">p</span>,<span class="title">stud</span>;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--当num为0结束输入--\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************\n&quot;</span>);</span><br><span class="line">stu=creat();  <span class="comment">//得到head头指针 </span></span><br><span class="line">p=stu;</span><br><span class="line">print(p);  <span class="comment">//根据头指针找到链表并输出 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num to delete :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">print(del(p,num));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num to insert :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;stud.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;stud.score);</span><br><span class="line">p=insert(stu,&amp;stud);</span><br><span class="line">print(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">creat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span> <span class="comment">//只是创建了一个指针，并没有分配内存大小 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="comment">//动态申请空间，并使p1,p2指向这个新生成的空间 </span></span><br><span class="line">p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);<span class="comment">//LEN是结构体的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入第1个学生的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score);</span><br><span class="line"></span><br><span class="line">head=<span class="literal">NULL</span>;  <span class="comment">//初始化 </span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num != <span class="number">0</span>) <span class="comment">//不等于0 </span></span><br><span class="line">&#123;</span><br><span class="line">n++;   <span class="comment">//出现新结点 </span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p1;  <span class="comment">//头节点指向 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line">p2=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease enter the num :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1-&gt;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the score :&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p1-&gt;score); </span><br><span class="line"> &#125; </span><br><span class="line"> p2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> head;  <span class="comment">//首地址，链表的标识记号 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease are %d records!\n\n&quot;</span>,n);</span><br><span class="line"></span><br><span class="line">p=head;   <span class="comment">//使p指向第1个结点 </span></span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>) <span class="comment">//不是空表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="comment">//输出一个结点中的学号和成绩 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号为 %d 的成绩是: %f\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">p=p-&gt;next;   <span class="comment">//p指向下一结点 </span></span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>);<span class="comment">//p不为空地址 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">struct student *<span class="title">del</span><span class="params">(struct student *head,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="comment">//如果头结点指向NULL，这是一个空链表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nThis list is null!\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;  <span class="comment">//goto直接跳到end </span></span><br><span class="line">&#125;</span><br><span class="line">p1=head; <span class="comment">//p1指向head </span></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num!=num&amp;&amp;p1-&gt;next!=<span class="literal">NULL</span>) <span class="comment">//指向第一个结点数据不等于所删除数据,且不是最后一个结点 </span></span><br><span class="line">&#123;</span><br><span class="line">p2=p1;   <span class="comment">//p1的值给p2 </span></span><br><span class="line">p1=p1-&gt;next; <span class="comment">//p1指向下一个结点 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num==p1-&gt;num)  <span class="comment">//找到所要删除的学号 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p1==head)  <span class="comment">//为头结点时 </span></span><br><span class="line">&#123;</span><br><span class="line">head=p1-&gt;next;  <span class="comment">//头结点给p1的下一个,把p1去掉 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p1-&gt;next就是B-&gt;C,p2-&gt;next就是A-&gt;B,next为指向下一地址的指针 </span></span><br><span class="line">p2-&gt;next=p1-&gt;next;  <span class="comment">//例A(p2),B(p1),C三个结点，改成A,C </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nDelete No: %d succeed!\n&quot;</span>,num);</span><br><span class="line">n=n<span class="number">-1</span>;  <span class="comment">//n为全局变量，接收学生个数 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//到达尾结点 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d not been found!\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct student *<span class="title">insert</span><span class="params">(struct student *head,struct student *stud)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p0</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"></span><br><span class="line">p1=head; <span class="comment">//p1指向head头结点 </span></span><br><span class="line">p0=stud; <span class="comment">//p0指向待插入的结构 </span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p0;</span><br><span class="line">p0-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//两种情况退出while </span></span><br><span class="line"><span class="keyword">while</span>((p0-&gt;num&gt;p1-&gt;num)&amp;&amp;(p1-&gt;next!=<span class="literal">NULL</span>))</span><br><span class="line">&#123; </span><br><span class="line">p2=p1;</span><br><span class="line">p1=p1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p0-&gt;num&lt;=p1-&gt;num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(head==p1) <span class="comment">//p1是头结点,插入头部 </span></span><br><span class="line">&#123;</span><br><span class="line">head=p0;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>   <span class="comment">//普通情况，插入中间 </span></span><br><span class="line">&#123;</span><br><span class="line">p2-&gt;next=p0;</span><br><span class="line">&#125;</span><br><span class="line">p0-&gt;next=p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//p0的num最大,插入到末尾 </span></span><br><span class="line">&#123;</span><br><span class="line">p1-&gt;next=p0;</span><br><span class="line">p0-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n=n+<span class="number">1</span>;   <span class="comment">//增加了数据 </span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">--当num为0结束输入--</span></span><br><span class="line"><span class="comment">********************</span></span><br><span class="line"><span class="comment">Please enter the num :01</span></span><br><span class="line"><span class="comment">Please enter the score :88</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :02</span></span><br><span class="line"><span class="comment">Please enter the score :78</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :03</span></span><br><span class="line"><span class="comment">Please enter the score :67</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please enter the num :0</span></span><br><span class="line"><span class="comment">Please enter the score :0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 88.000000</span></span><br><span class="line"><span class="comment">学号为 2 的成绩是: 78.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 67.000000</span></span><br><span class="line"><span class="comment">Please enter the num to delete :2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Delete No: 2 succeed!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 2 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 88.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 67.000000</span></span><br><span class="line"><span class="comment">Please enter the num to insert :4</span></span><br><span class="line"><span class="comment">Please enter the score :100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Please are 3 records!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学号为 1 的成绩是: 88.000000</span></span><br><span class="line"><span class="comment">学号为 3 的成绩是: 67.000000</span></span><br><span class="line"><span class="comment">学号为 4 的成绩是: 100.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h1><p>使几个不同的变量<code>共同占同一段内存</code>的结构称为“共用体”类型的结构。<br>定义共同体类型变量的一般形式为:</p><pre><code>  union 共用体名  &#123;      成员表列  &#125;变量表列;</code></pre></li></ul><p>例如</p><pre><code>    union data    &#123;        int;        char ch;        float f;    &#125;a,b,c;    //或    union data    &#123;        int i;        char ch;        float f;    &#125;;    union data a,b,c;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程笔记</title>
      <link href="2020/11/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="http://xxzy2020.com:4000/">http://xxzy2020.com:4000/</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
      <url>2020/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript程序设计项目</title>
      <link href="2020/11/21/JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/11/21/JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript快速入门"><a href="#JavaScript快速入门" class="headerlink" title="JavaScript快速入门"></a>JavaScript快速入门</h1><ul><li>网站推荐：<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">JavaSript教程</a>  || <a href="https://www.w3school.com.cn/">W3school</a></li><li>JavaScript是一种运行在浏览器中的解释型的编程语言。</li><li>在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互.</li><li>JavaScript内嵌于HTML网页中,通过浏览器内置的JavaScript引擎直接编译，使静态转变成支持用户交互的页面程序。</li></ul><table><thead><tr><th align="center">语言</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">HTML</td><td align="center">结构</td><td align="center">从语义的角度，描述页面结构</td></tr><tr><td align="center">CSS</td><td align="center">样式</td><td align="center">从审美的角度，美化页面</td></tr><tr><td align="center">JavaScript</td><td align="center">行为</td><td align="center">从交互的角度，提升用户体验</td></tr></tbody></table><ul><li>JavaScript是脚本语言<br><strong>脚本(Script)就是一条条的文本命令，按照程序流程执行</strong>。常见脚本语言有     JavaScript,VBScript,Perl,PHP,Python等,而C,C++,Java,C#属于非脚本语言。<br>非脚本语言需要编译、链接，生成独立的可执行文件后才能运行。<br>脚本语言依赖于解释器，只在被调用时自动进行解释或调用。</li><li>JavaScript可以跨平台<br>JavaScript语言不依赖操作系统，只需要浏览器的支持。</li><li>JavaScript支持面向对象</li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li>JavaScript开发工具主要包括浏览器和代码编译器两种软件。</li><li>浏览器用于执行、调试代码，代码编译器用于编写代码。</li><li>种类繁多的浏览器只需要了解其内核就能对其有一个清晰的归类。</li><li>浏览器内核分两部分：排版引擎和Javascript引擎。</li><li>sublime-text编译工具快捷键<ol><li>Ctrl + N，新建一个文档；</li><li>Ctrl + Shift + P，打开命令模式，再输入 sshtml 进行模糊匹配，将语法切换到html模式；</li><li>输入  !，再按下Tab键或者Ctrl + E ，就能快速打开HTML5的整体结构。</li></ol></li></ul><h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><ul><li><p>嵌入式<br>直接编写在HTML文件中</p><pre><code>  &lt;script type=&quot;text/javascript&quot;&gt;      JavaScript语句  &lt;/script&gt;</code></pre></li><li><p>外链式<br>保存在一个单独的文件中，用“js”作为文件扩展名,最好放在body标签的底部，可以减少对整个页面的下载影响</p><pre><code>  &lt;script src=&quot;js/test.js&quot;&gt;&lt;/script&gt;</code></pre></li></ul><ul><li><p>行内式<br>将Javascript代码作为HTML标签的属性值使用</p><pre><code>  &lt;a href=&quot;javascript:alert(&#39;Hello&#39;);&quot;&gt;test&lt;/a&gt;</code></pre></li></ul><blockquote><p>JavaScript异步加载<br>无论使用内嵌式还是外链式，页面的下载和渲染都会暂停，等待脚本执行完成后才会继续。为了降低阻塞问题对页面造成的影响，可以使用可选属性：async和defer,添加后，即使文件下载失败，也不会阻塞javascript代码的执行</p></blockquote><ul><li><p>async<br>async用于异步加载，即先下载文件，不阻塞其他代码执行，下载完成后再执行</p><pre><code>  &lt;script src=&quot;http://js.test/file.js&quot; async&gt;&lt;/script&gt;</code></pre></li><li><p>defer<br>defer用于延后执行，即先下载文件，直到网页加载完成后再执行</p><pre><code>  &lt;script src=&quot;http://js.test/file.js&quot; defer&gt;&lt;/script&gt;</code></pre></li></ul><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><ul><li><p>alert()<br>弹出一个警告框</p><pre><code>  alert(&quot;提示信息&quot;);</code></pre></li><li><p>console.log()<br>在浏览器的控制台中输出内容(按F12)</p><pre><code>  console.log(&#39;你好！&#39;);</code></pre></li><li><p>document.write()<br>在HTML文档页面输出内容，也可以输出标签</p><pre><code>  document.write(&#39;&lt;b&gt;加粗文本&lt;/b&gt;&#39;);</code></pre></li><li><p>prompt()<br>弹出一个输入框</p><pre><code>  var value=prompt(&quot;提示输入&quot;,&quot;默认值&quot;);</code></pre></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>布尔型</p><pre><code>  var flag=true;</code></pre></li><li><p>数值型(Number)<br>javaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p><pre><code>  123; // 整数123  0.456; // 浮点数0.456  1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5  -99; // 负数  NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示  Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</code></pre></li><li><p>字符型(String)<br>字符串是以单引号’或双引号”括起来的任意文本</p><pre><code>  var color=&#39;&quot;red&quot;blue&#39;;</code></pre></li><li><p>空型(Null)<br>空型只有一个特殊的null值，用于表示一个不存在的或无效的对象或地址。</p></li><li><p>未定义型(Undefined)<br>未定义型只有一个特殊的undefined值，用于声明的变量还未被初始化时，变量的默认值为undefined。</p></li></ul><blockquote><p>undefined表示没有为变量设置值，null表示变量（对象或地址）不存在或无效。</p></blockquote><ul><li>转布尔型<br>Boolean()函数将如何非空字符串和非零的数组转为true，将空字符串、0、NaN、undefined和null转换为false<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> con=prompt(); <span class="comment">//保存用户的输出内容</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">Boolean</span>(con)</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;已输入内容&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;未输入内容&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(con));</span><br></pre></td></tr></table></figure></li><li>转数值型<br>Number()、parseInt( )、parseFloat()，isNaN()表示不是一个数值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户的输入，完成自动求和</span></span><br><span class="line"><span class="keyword">var</span> num1=prompt(<span class="string">&#x27;输入求和的第1个数：&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num2=prompt(<span class="string">&#x27;输入求和的第1个数：&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isNaN</span>(num1)||<span class="built_in">isNaN</span>(num2))&#123;  <span class="comment">//判断出不是数值型 返回ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;非法数字&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num1+num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>转字符型<br>String()、toString()</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/cca461f12daf99245406348455b0c6c3.png"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li><p>选择结构</p><pre><code>  //单分支  if(判断条件)&#123;      代码段  &#125;  //双分支  if(判断条件)&#123;      代码段1  &#125;else&#123;      代码段2  &#125;  //多分支  if(条件1)&#123;      代码段1;  &#125;else if(条件2)&#123;      代码段2;  &#125;  switch(表达式)&#123;      case 值1:          代码段1;          break;      case 值1:          代码段1;          break;          ...      default:           代码段n;  &#125;</code></pre></li><li><p>循环结构</p><pre><code>  while(循环条件)&#123;      循环体  &#125;  do&#123;      循环体  &#125;while(循环条件);  for(初始条件;循环条件;迭代条件)&#123;      代码块  &#125;</code></pre></li></ul><blockquote><p>在ES6中，不仅可以使用var定义变量，还可以使用let声明一个块级作用域(可以理解为{}之间的代码)的本地变量，let关键字在快级作用域内不能重复定义同名的变量，该变量仅在块级作用范围内有效。</p></blockquote><ul><li>跳转语句<br>  break语句和continue语句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现九九乘法表</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;九九乘法表&lt;/h1&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;table border=1px&gt;&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"> <span class="keyword">var</span> j=<span class="number">1</span>;j&lt;i;j++</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;td&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li><p>创建数组</p><ul><li>使用Array创建数组<pre><code>  // 元素值类型为字符串  var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;);  // 元素值类型为数值型  var score = new Array(56, 68, 98, 44);  // 元素值类型为混合型  var mix = new Array(123, &#39;abc&#39;, null, true, undefined);  // 空数组  var arr1 = new Array();   或    var arr2 = new Array;</code></pre></li><li>使用“[]”创建数组<pre><code>  var weather = [&#39;wind&#39;, &#39;fine&#39;];   var empty = [];       </code></pre></li></ul></li><li><p>获取数组长度</p><pre><code> // 获取数组长度 var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;); console.log(area.length); // 修改数组长度 var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;); area.length = 5;     console.log(area); area.length = 1;      console.log(area);</code></pre></li><li><p>数组的遍历</p><pre><code> // 元素值类型为字符串 var area = new Array(&#39;Beijing&#39;, &#39;Shanghai&#39;, &#39;Shenzhen&#39;); // 遍历 for(var i=0;i&lt;area.length;i++)&#123;     console.log(area[i]); &#125; for(var  i  in area)&#123;     console.log(area[i]); &#125;</code></pre></li><li><p>数组元素的添加与删除</p><ul><li>添加数组元素<pre><code>  var arr = [&#39;Asa&#39;,&#39;Taylor&#39;];  arr[2] = &#39;Tom&#39;;  arr[3] =  &#39;Jack&#39;;  console.log(arr); </code></pre></li><li>修改数组元素<pre><code>  var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];  arr[2] = 123;  arr[3] = 456;  console.log(arr);</code></pre></li><li>元素的删除<pre><code>  var stu = [&#39;Tom&#39;, &#39;Jimmy&#39;, &#39;Lucy&#39;];  console.log(stu);      // 输出结果：(3) [&quot;Tom&quot;, &quot;Jimmy&quot;, &quot;Lucy&quot;]  delete stu[1];    // 删除数组中第2个元素  console.log(stu);      // 输出结果：(3) [&quot;Tom&quot;, empty, &quot;Lucy&quot;]</code></pre></li></ul></li><li><p>二维数组</p><ul><li>创建二维数组<pre><code>  // 使用Array对象创建数组  var info = new Array(new Array(&#39;Tom&#39;, 13, 155),new Array(&#39;Lucy&#39;, 11, 152)  );  // 使用“[]”创建数组  var num = [[1, 3], [2, 4]];</code></pre></li><li>遍历二维数组<pre><code>  // 使用“[]”创建数组  var num = [[1, 3], [2, 4]];  //遍历数组  for(var i  in num)&#123;       for(var  j  in   num[i])&#123;      console.log(num[i][j]));        &#125;&#125;</code></pre></li></ul></li><li><p>常见数组方法</p><ul><li>栈和队列方法</li></ul></li></ol><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td>push()</td><td>将一个或多个元素添加到数组的末尾，并返回数组的新长度。</td></tr><tr><td>unshift()</td><td>将一个或多个元素添加到数组的开头，并返回数组的新长度。</td></tr><tr><td>pop()</td><td>从数组的末尾移出并返回一个元素，若是空数组则返回undefined。</td></tr><tr><td>shift()</td><td>从数组的开头移出并返回一个元素，若是空数组则返回undefined。</td></tr></tbody></table><blockquote><p>push()和unshift()方法的返回值是新数组的长度。<br>pop()和shift()方法返回的是移出的数组元素。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;原数组：&quot;</span> + arr);</span><br><span class="line"><span class="keyword">var</span> last = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;末尾元素：&quot;</span> + last + <span class="string">&quot;,移除后数组：&quot;</span> + arr);</span><br><span class="line"><span class="keyword">var</span> first = arr.shift();</span><br><span class="line">arr.push(<span class="number">5</span>);</span><br><span class="line">arr.unshift(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>检索方法</li></ul><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td>includes()</td><td>用于确定数组中是否含有某个元素，含有返回true，否则返回false。</td></tr><tr><td>Array.isArray()</td><td>用于确定传递的值是否是一个 Array，是返回true，不是返回false。</td></tr><tr><td>indexOf()</td><td>返回在数组中可以找到给定值的第一个索引，如果不存在，则返回-1</td></tr><tr><td>lastIndexOf()</td><td>返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--首先：编写HTML页面，准备<span class="number">3</span>个下拉菜单--&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;sheng&quot;</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;-1&quot;</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;select id=<span class="string">&quot;shi&quot;</span>&gt;&lt;/select&gt;</span><br><span class="line">        &lt;select id=<span class="string">&quot;qu&quot;</span>&gt;&lt;/select&gt;        </span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">//省份数组</span></span><br><span class="line"><span class="keyword">var</span> shengArr=[<span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;河北&#x27;</span>];</span><br><span class="line"><span class="comment">//市数组</span></span><br><span class="line"><span class="keyword">var</span> shiArr = [</span><br><span class="line"> [<span class="string">&#x27;上海市&#x27;</span>],</span><br><span class="line"> [<span class="string">&#x27;苏州市&#x27;</span>, <span class="string">&#x27;南京市&#x27;</span>, <span class="string">&#x27;扬州市&#x27;</span>],</span><br><span class="line"> [<span class="string">&#x27;石家庄&#x27;</span>, <span class="string">&#x27;秦皇岛&#x27;</span>, <span class="string">&#x27;张家口&#x27;</span>]];</span><br><span class="line"> <span class="comment">//区数组 </span></span><br><span class="line"> <span class="keyword">var</span> quArr=[</span><br><span class="line">        [</span><br><span class="line">          [<span class="string">&#x27;黄浦区&#x27;</span>, <span class="string">&#x27;静安区&#x27;</span>, <span class="string">&#x27;长宁区&#x27;</span>, <span class="string">&#x27;浦东区&#x27;</span>]</span><br><span class="line">        ], [</span><br><span class="line">          [<span class="string">&#x27;虎丘区&#x27;</span>, <span class="string">&#x27;吴中区&#x27;</span>, <span class="string">&#x27;相城区&#x27;</span>, <span class="string">&#x27;姑苏区&#x27;</span>, <span class="string">&#x27;吴江区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;玄武区&#x27;</span>, <span class="string">&#x27;秦淮区&#x27;</span>, <span class="string">&#x27;建邺区&#x27;</span>, <span class="string">&#x27;鼓楼区&#x27;</span>, <span class="string">&#x27;浦口区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;邗江区&#x27;</span>, <span class="string">&#x27;广陵区&#x27;</span>, <span class="string">&#x27;江都区&#x27;</span>]</span><br><span class="line">        ], [</span><br><span class="line">          [<span class="string">&#x27;长安区&#x27;</span>, <span class="string">&#x27;桥西区&#x27;</span>, <span class="string">&#x27;新华区&#x27;</span>, <span class="string">&#x27;井陉矿区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;海港区&#x27;</span>, <span class="string">&#x27;山海关区&#x27;</span>, <span class="string">&#x27;北戴河区&#x27;</span>, <span class="string">&#x27;抚宁区&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;桥东区&#x27;</span>, <span class="string">&#x27;桥西区&#x27;</span>, <span class="string">&#x27;宣化区&#x27;</span>, <span class="string">&#x27;下花园区&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line"> ];</span><br><span class="line"> <span class="comment">//1. 定义函数，将data数组中的值，添加到obj这个select中</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createOption</span>(<span class="params">obj,data</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> data</span>)</span>&#123;  <span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">var</span> op = <span class="keyword">new</span> Option(data[i],i); <span class="comment">//创建Option，data[i]为显示的文本，i为value</span></span><br><span class="line">obj.options.add(op); <span class="comment">//将Option（op）添加到Select（obj）</span></span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//2.调用函数，设置省份下拉菜单的值</span></span><br><span class="line"> <span class="keyword">var</span> sheng = <span class="built_in">document</span>.getElementById(<span class="string">&quot;sheng&quot;</span>);</span><br><span class="line"> createOption(sheng,shengArr);</span><br><span class="line"> <span class="comment">//3.调用函数，设置市下拉菜单的值 -- 联动</span></span><br><span class="line"> <span class="keyword">var</span> shi = <span class="built_in">document</span>.getElementById(<span class="string">&quot;shi&quot;</span>);</span><br><span class="line"> sheng.onchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//清空市原有数据</span></span><br><span class="line">shi.options.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//调用函数，设置市下拉菜单，注意下标为当前省的value</span></span><br><span class="line">createOption(shi,shiArr[sheng.value]); </span><br><span class="line"><span class="comment">//5.省修改时，市修改（代码如上），区也应该随着修改，即需要调用第四步的函数</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">sheng.value!=-<span class="number">1</span></span>)</span>&#123;  <span class="comment">//编码严谨，考虑省选择的“请选择”，此时：区清空</span></span><br><span class="line">shi.onchange();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">qu.options.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//4.调用函数，设置区下拉菜单的值 -- 联动</span></span><br><span class="line"> <span class="keyword">var</span> qu = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;qu&#x27;</span>);</span><br><span class="line"> shi.onchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//清空区原有数据</span></span><br><span class="line">qu.options.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//调用函数，设置区下拉菜单，注意下标为：一维sheng.value，二维shi.value</span></span><br><span class="line">createOption(qu,quArr[sheng.value][shi.value]); </span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/f6cf616aa5f5f1adb55466e6efc8449c.png"></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数封装一段完成特定功能的代码。</p><pre><code>    function 函数名([参数1, 参数2, ……])    &#123;        函数体……    &#125;    function maxNum(a, b)     &#123;          a =  parseInt(a);         b =  parseInt(b);          return a &gt;= b ? a : b;    &#125;</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;大小写转换&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;大小写转换&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;原数据:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;old&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p&gt;操&amp;nbsp;&amp;nbsp;作&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;转大写&quot;</span> onClick=<span class="string">&quot;deal(&#x27;upper&#x27;)&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;转小写&quot;</span> onClick=<span class="string">&quot;deal(&#x27;lower&#x27;)&quot;</span>&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;新数据:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;new&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deal</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;old&#x27;</span>).value; <span class="comment">//取元数据的值</span></span><br><span class="line"><span class="function"><span class="title">switch</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;upper&#x27;</span>:</span><br><span class="line">str=str.toUpperCase();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;lower&#x27;</span>:</span><br><span class="line">str=str.toLowerCase();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;new&#x27;</span>).value=str;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/966bae02db2b5af925719320b9082bfd.png"></p><ul><li><p>参数<br>开发时若不能确定函数的形参个数，可以不设置形参；<br>之后通过arguments对象获取调用时传递的实参。</p><pre><code>  function sum()&#123;      console.log(arguments);      var sum=0;      for(var i in arguments)&#123;          sum+=arguments[i];      &#125;      return sum;  &#125;  document.write(sum(1,2,3,4,5));</code></pre></li><li><p>变量的作用域<br>全局变量：函数外声明，或者函数内省略var声明；<br>局部变量：函数体内用var声明。<br>块级变量：ES6提供的let关键字声明，仅在”{}”内有效。</p></li><li><p> 匿名函数<br>匿名函数指没有函数名称的函数，可以避免全局变量的污染以及函数名的冲突问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1：函数表达式中省略函数名</span></span><br><span class="line"><span class="keyword">var</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//方式2：自调用方式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;)(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//方式3：处理事件</span></span><br><span class="line"><span class="built_in">document</span>.body.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>回调函数<br>回调函数指一个函数A作为参数传递给一个函数B，然后在B的函数体内调用函数A，称A为回调函数。其中，匿名函数常作为函数的参数传递，实现回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params">num1,num2,fn</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> fn(num1,num2);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(cal(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> a+b;</span><br><span class="line">              &#125;</span><br><span class="line">           )</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(cal(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> a*b;</span><br><span class="line">              &#125;</span><br><span class="line">           )</span><br><span class="line">      );</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>闭包函数<br>JavaScript中内部函数可引用外部函数的变量，但是在函数外部则不能访问函数的内部变量和嵌套函数，此时就需要使用”闭包“。<br>”闭包“指有权访问另一函数作用域内变量(局部变量)的函数。它主要的用途是以下两点：</p></li></ul><ol><li>可以在函数外部读取函数内部的变量</li><li>可以让变量的值始终保持在内存中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> times=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> c=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ++times;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count=fn();  <span class="comment">//保存fn()返回的函数，此时count就是一个闭包</span></span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="built_in">console</span>.log(count());</span><br><span class="line"><span class="comment">//使用闭包函数实现了在全局作用域中访问局部变量times，并让其始终存储在内存中</span></span><br><span class="line"><span class="comment">//运行结果：1，2，3，4，5</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1>面向对象的特征主要可以概括为封装性、继承性、多态性。</li></ol><ul><li>自定义对象</li></ul><ol><li><p>字面量{}创建对象</p><pre><code> var o1=&#123;&#125;; var o2=&#123;name:&#39;Jim&#39;&#125;; var o3=&#123;name:&#39;Jim&#39;,age:19,gender:&#39;男&#39;&#125;; var o4 = &#123;            name: &#39;Jim&#39;,     age: 19,     gender: &#39;男&#39;,    sayHello: function() &#123;                  console.log(&#39;你好&#39;);                 &#125;&#125;;</code></pre></li><li><p>访问对象成员<br>对象名.属性;<br>对象名.方法名()</p><pre><code>o4.name;o4.sayHello();</code></pre></li><li><p>增加对象成员<br>引用不存在的成员，即增加成员</p><pre><code>o4.tall=181;o4.introduce=function()&#123;    console.log(o4.name+o4.tall);&#125;o4.introduce();</code></pre></li><li><p>可变成员名<br>如果对象的成员名不确定时，还可通过一个变量保存成员的名称，使用[]语法来实现可变成员名。<code>成员名：是字符串</code>。</p><pre><code>var key=&#39;id&#39;;o4[key]=123;</code></pre></li><li><p>对象成员遍历<br>typeof：判断成员类型，function表示方法<br>访问方法：o4<a href>i</a><br>访问属性：o4[i]</p><pre><code>for(var i in o4)&#123;    console.log(typeof(o4[i]));      if(typeof(o4[i])==&quot;function&quot;)&#123;        o4[i]();  //访问方法    &#125;else&#123;        console.log(o4[i]);  //访问属性    &#125;&#125;</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;动态增加对象成员&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;key&quot;</span> type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;val&quot;</span> type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;Jack&quot;</span>&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;btn&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;测试&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> k = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;val&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> o = &#123;&#125;;  <span class="comment">//创建空对象</span></span><br><span class="line">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//当点击btn时，调用匿名函数</span></span><br><span class="line">            o[k.value] = v.value;  <span class="comment">//增加属性，k的value为键、v的value为值</span></span><br><span class="line">            <span class="built_in">console</span>.log(o);  <span class="comment">//打印对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/6d0f7bf592c5985c9fce00bb75d2b2d7.png"></p></li></ol><ul><li>深拷贝与浅拷贝<ol><li>浅拷贝—复制快捷方式<pre><code> var o1 = &#123;name: &#39;Jim&#39;, age: 19, gender: &#39;男&#39;&#125;; var o2=o1;</code></pre></li><li>深拷贝—复制文件本身<pre><code> function deepCopy(obj)&#123;     var o = &#123;&#125;;       for(var k in obj)&#123;     //假设k是简单的成员（不是对象）         o[k] = obj[k];     &#125; &#125;</code></pre></li></ol></li><li>this指向<ol><li>使用new调用构造函数时，this指向新创建的对象<pre><code> function  Person(name,age)&#123;     this.name = name;     this.age = age; &#125; var o1 = new Person(“Jack”,18); var o2 = new Person(“Lily”,20);</code></pre></li><li>将函数作为对象的方法调用，this指向该对象<pre><code> var obj = &#123;     name:”Jack”,     age:19,     sayHello:function()&#123;         console.log( this.name + “,” + this.age);     &#125; &#125;; obj.sayHello();</code></pre></li><li>直接通过函数名调用函数，this指向全局对象window<pre><code> function foo()&#123;     return this; &#125; console.log(foo()===window); //true</code></pre></li></ol></li></ul><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><ul><li>String对象</li></ul><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">length</td><td align="center">获取字符串长度</td></tr><tr><td align="center">charAt(index)</td><td align="center">获取index位置的字符，位置从0开始</td></tr><tr><td align="center">indexOf(searchValue)</td><td align="center">获取seerchValue在字符串中首次出现的位置</td></tr><tr><td align="center">lastIndexOf(searchValue)</td><td align="center">获取seerchValue在字符串中最后出现的位置</td></tr><tr><td align="center">substring(start[,end])</td><td align="center">截取从start位置到end位置之间的一个子字符串</td></tr><tr><td align="center">substr(start[,length])</td><td align="center">截取从start位置开始到length长度的子字符串</td></tr><tr><td align="center">toLowerCase()</td><td align="center">获取字符串的小写形式</td></tr><tr><td align="center">toUpperCase()</td><td align="center">获取字符串的大写形式</td></tr><tr><td align="center">split([separator[,limit])</td><td align="center">使用separator分隔符将字符串分隔成数组，limit用于限制数量</td></tr><tr><td align="center">replace(str1,str2)</td><td align="center">使用str2替换字符串中的str1，返回替换结果</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;Administrator&#x27;</span>;</span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">name.length&lt;<span class="number">3</span>||name.length&gt;<span class="number">10</span></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;用户名必须在3~10之间&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(name.toLowerCase().indexOf(<span class="string">&#x27;admini&#x27;</span>)!== -<span class="number">1</span>)&#123; <span class="comment">//indexOf查找失败返回-1</span></span><br><span class="line">alert(<span class="string">&#x27;用户名中不能包含敏感词：admin&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Number对象</li></ul><p>Number对象用于处理整数、浮点数等数值，常用的属性和方法如下。</p><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">MAX_VALUE</td><td align="center">在JavaScript中所能表示的最大数值（静态成员）</td></tr><tr><td align="center">MIN_VALUE</td><td align="center">在JavaScript中所能表示的最小正值（静态成员）</td></tr><tr><td align="center">toFixed(digits)</td><td align="center">使用定点表示法来格式化一个数值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">12345.6789</span>;</span><br><span class="line">num.toFixed();  <span class="comment">//四舍五入，不包括小数部分，返回结果：12345</span></span><br><span class="line">num.toFixed(<span class="number">1</span>); <span class="comment">//四舍五入，保留1位小数，返回结果：12345.7</span></span><br><span class="line">num.toFixed(<span class="number">6</span>); <span class="comment">//用0填充不足的小数位，返回结果：12345.678900</span></span><br><span class="line">num.MAX_VALUE;</span><br><span class="line">num.MIN_VALUE;</span><br></pre></td></tr></table></figure><ul><li>Math对象</li></ul><p>Math对象用于对数值进行数学运算。</p><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">PI</td><td align="center">获取圆周率，结果为3.141592653589793</td></tr><tr><td align="center">abs(x)</td><td align="center">获取x的绝对值，可传入普通数值或是用字符串表示的数值</td></tr><tr><td align="center">pow(base,xponent)</td><td align="center">获取基数(base)的指数(exponent)次幂，即baseexponnet</td></tr><tr><td align="center">sqrt(x)</td><td align="center">获取x的平方根</td></tr><tr><td align="center">ceil(x)</td><td align="center">获取大于或等于x的最小整数，即向上取整</td></tr><tr><td align="center">floor(x)</td><td align="center">获取小于或等于x的最大整数，即向下取整</td></tr><tr><td align="center">round(x)</td><td align="center">获取x的四舍五入后的整数值</td></tr><tr><td align="center">random()</td><td align="center">获取大于或等于0.0且小于1.0的随机值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10.88</span>;</span><br><span class="line"><span class="built_in">Math</span>.ceil(num);</span><br><span class="line"><span class="built_in">Math</span>.random();</span><br><span class="line"><span class="comment">//Math.floor( Math.random() * (max-min+1) + min)，生成[min,max]的随机整数。</span></span><br><span class="line"><span class="built_in">Math</span>.random()*(<span class="number">3</span>-<span class="number">1</span>+<span class="number">1</span>)+<span class="number">1</span>; <span class="comment">//[1,3]  //Math.random()*(Max-Min+1)+Min</span></span><br><span class="line"><span class="built_in">Math</span>.random()*(<span class="number">99</span>-<span class="number">88</span>)+<span class="number">88</span>; <span class="comment">//[88,99) //Math.random()*(Max-Min)+Min</span></span><br></pre></td></tr></table></figure><ul><li> Date对象</li></ul><p>Date对象用于处理日期和时间。</p><table><thead><tr><th align="center">成员</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">getFullYear()</td><td align="center">获取表示年份的4位数字，如2020</td></tr><tr><td align="center">setFullYear(value)</td><td align="center">设置年份</td></tr><tr><td align="center">getMonth()</td><td align="center"><strong>获取月份，范围0~11（0表示一月，1表示二月，依次类推）</strong></td></tr><tr><td align="center">setMonth(value)</td><td align="center">设置月份</td></tr><tr><td align="center">getDate()</td><td align="center"><strong>获取月份中的某一天，范围1~31</strong></td></tr><tr><td align="center">setDate(value)</td><td align="center">设置月份中的某一天</td></tr><tr><td align="center">getDay()</td><td align="center"><strong>获取星期，范围0~6（0表示星期日，1表示星期一，依次类推</strong>）</td></tr><tr><td align="center">getHours()</td><td align="center">获取小时数，返回0~23</td></tr><tr><td align="center">setHours(value)</td><td align="center">设置小时数</td></tr><tr><td align="center">getMinutes()</td><td align="center">获取分钟数，范围0~59</td></tr><tr><td align="center">setMinutes(value)</td><td align="center">设置分钟数</td></tr><tr><td align="center">getSeconds()</td><td align="center">获取秒数，范围0~59</td></tr><tr><td align="center">setSeconds(value)</td><td align="center">设置秒数</td></tr><tr><td align="center">getMilliseconds()</td><td align="center">获取毫秒数，范围0~999</td></tr><tr><td align="center">getMilliseconds(value)</td><td align="center">设置毫秒数</td></tr><tr><td align="center">getTime()</td><td align="center">获取从1970-01-01 00:00:00 距离Date对象所代表时间</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var date=new Date();</span><br><span class="line">document.write(date+&quot;<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;);</span><br><span class="line">console.log(&quot;年：&quot;+date.getYear());  //年：120</span><br><span class="line">console.log(&quot;年：&quot;+date.getFullYear());  //年：2020</span><br><span class="line">console.log(&quot;月：&quot;+date.getMonth());  //月：9</span><br><span class="line">console.log(&quot;日：&quot;+date.getDate());  //日：15</span><br><span class="line">console.log(&quot;时：&quot;+date.getHours());  //时：8</span><br><span class="line">console.log(&quot;分：&quot;+date.getMinutes());  //分：52</span><br><span class="line">console.log(&quot;秒：&quot;+date.getSeconds());  //秒：54</span><br><span class="line">console.log(&quot;周几：&quot;+date.getDay());  //周几：4</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;制作年历&lt;/title&gt;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">body&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">margin:<span class="number">0</span> auto;</span><br><span class="line">width:<span class="number">880</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.title&#123;</span><br><span class="line">background:#ccc;</span><br><span class="line">&#125;</span><br><span class="line">table&#123;</span><br><span class="line">height:<span class="number">200</span>px;</span><br><span class="line">width:<span class="number">200</span>px;</span><br><span class="line">font-size:<span class="number">12</span>px;</span><br><span class="line">text-align:center;</span><br><span class="line">float:left;   <span class="comment">/*浮动属性，脱离文档流，向左移动，直至遇到父元素或另一个浮动元素的边缘*/</span></span><br><span class="line">margin:<span class="number">10</span>px;</span><br><span class="line">font-family:Arial;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">/*定义年历生成函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calendar</span>(<span class="params">y</span>)</span>&#123;  <span class="comment">//y：从网页获取到的年份</span></span><br><span class="line"><span class="comment">//获取指定年份1月1日的星期数值</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> <span class="built_in">Date</span>(y,<span class="number">0</span>).getDay();  </span><br><span class="line"><span class="comment">//Date创建方式1： var date1 = new Date(2017,9,1,11,53,4);年月日时分秒，至少给出年和月；另外月的范围是0~11，即参数为0，实际月份为1月；</span></span><br><span class="line"><span class="comment">//Date创建方式2： var date2 = new Date(&#x27;2017-10-01 11:53:04&#x27;);//getDay() 获取星期，范围0~6</span></span><br><span class="line"><span class="keyword">var</span> html=<span class="string">&#x27;&lt;div class=&quot;box&quot;&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接每个月份的表格</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> m=<span class="number">1</span>;m&lt;=<span class="number">12</span>;m++</span>)</span>&#123;</span><br><span class="line">html += <span class="string">&#x27;&lt;table&gt;&#x27;</span>;</span><br><span class="line">                html += <span class="string">&#x27;&lt;tr class=&quot;title&quot;&gt;&lt;th colspan=&quot;7&quot;&gt;&#x27;</span> + y + <span class="string">&#x27; 年 &#x27;</span> + m + <span class="string">&#x27; 月&lt;/th&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">                html += <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;日&lt;/td&gt;&lt;td&gt;一&lt;/td&gt;&lt;td&gt;二&lt;/td&gt;&lt;td&gt;三&lt;/td&gt;&lt;td&gt;四&lt;/td&gt;&lt;td&gt;五&lt;/td&gt;&lt;td&gt;六&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取月份m共有多少天？</span></span><br><span class="line"><span class="keyword">var</span> max = (<span class="keyword">new</span> <span class="built_in">Date</span>(y,m,<span class="number">0</span>)).getDate();   <span class="comment">//getDate获取月份中的某一天，范围1~31；当日为0时，可获得该月的天数。</span></span><br><span class="line"><span class="comment">//开始tr标签</span></span><br><span class="line">html = html+<span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> d=<span class="number">1</span>;d&lt;=max;d++</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((w!=<span class="number">0</span>) &amp;&amp; (d==<span class="number">1</span>))&#123;  <span class="comment">//如果该月的第一天不是星期日，则填充空白</span></span><br><span class="line">html = html+<span class="string">&#x27;&lt;td colspan=&quot;&#x27;</span> + w + <span class="string">&#x27;&quot;&gt;&lt;/td&gt;&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">html = html + <span class="string">&#x27;&lt;td&gt;&#x27;</span> + d + <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">w==<span class="number">6</span> &amp;&amp; d!=max</span>)</span>&#123;  <span class="comment">//如果星期六不是该月的最后一天，则换行 </span></span><br><span class="line">html = html + <span class="string">&#x27;&lt;/tr&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">d==max</span>)</span>&#123;   <span class="comment">//该月的最后一天，闭合&lt;tr&gt;标签</span></span><br><span class="line">html = html + <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">w = (w+<span class="number">1</span>&gt;<span class="number">6</span>)?<span class="number">0</span>:w+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">html = html + <span class="string">&#x27;&lt;/table&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">html = html + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">var</span> year = <span class="built_in">parseInt</span>(prompt(<span class="string">&#x27;输入年份:&#x27;</span>,<span class="string">&#x27;2019&#x27;</span>));</span><br><span class="line"><span class="built_in">document</span>.write(calendar(year));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/5a45bff2253fc06cc1a9d9c7ee84bfff.png"></p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li><p>JSON: <strong>JavaScript Object Notation</strong>(JavaScript 对象表示法)。</p></li><li><p>JSON 是<strong>轻量级的文本数据交换格式</strong>，类似 XML，但 比 XML 更小、更快，更易解析。</p></li><li><p>JSON 独立于语言和平台，目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p></li></ul><ol><li><p>JSON对象</p><pre><code> //JSON对象 var obj = &#123;“name”:“Jerry”，“age”:15&#125;  //JS对象 var obj = &#123;name:“Jerry”，age:15，              sayHello:function&#123;……&#125;          &#125;</code></pre><ul><li><p>JSON对象的属性名（key）必须被包含在双引号之中，而JavaScript对象除了有空格的属性名、中间有连字符-的属性名必须在双引号之中外，其它随意；</p></li><li><p>不能在JSON对象中定义方法，而在JavaScript对象中可以；</p></li><li><p>JSON对象可以被很多语言操作，而JavaScript对象只有JS自己可以识别。</p></li></ul></li><li><p>JSON数组</p><pre><code> var myJson =&#123;               &quot;country&quot;:&quot;China&quot;,         &quot;population&quot;:&quot;1.3billion&quot;,          &quot;bigCity&quot;:[&quot;Peking&quot;,&quot;Shanghai&quot;,&quot;ShenZhen&quot;,&quot;HongKong&quot;] &#125; myJson .bigCity[0] = &quot;GuangZhou&quot;;</code></pre></li></ol><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><ul><li>JS组成<ol><li>ECMAScript：JS基本语法、数组、函数和对象。</li><li>BOM：浏览器对象模型（Brower Object Model）。</li><li>DOM：文档对象模型（Document Object Model )。</li></ol></li><li>BOM作用及结构图<ol><li>浏览器对象：内置对象，实现JS操作浏览器窗口及窗口上的控件，实现用户和页面的动态交互。</li><li>BOM：浏览器对象模型。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/fde59ae943452104dec1eb6697a007dc.png"></li></ol></li></ul><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ul><li>window对象是BOM中所有对象的核心，同时也是BOM中所有对象的父对象。</li><li>全局变量、函数、内置对象均能被window对象调用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var area = &#x27;Beijing&#x27;;</span><br><span class="line">function getArea()&#123;</span><br><span class="line">  return this.area;</span><br><span class="line">&#125;</span><br><span class="line">console.log(window.area);        //访问变量，输出结果：Beijing</span><br><span class="line">console.log(window.area());//访问window对象的属性，输出结果为：Beijing</span><br><span class="line">console.log(getArea());  //调用自定义函数，输出结果：Beijing</span><br><span class="line">console.log(window.getArea());  //调用window对象的方法，输出结果：Beijing</span><br><span class="line">console.log(window.Number(area));  //调用内置函数，将变量area转换为数值型，输出结果：NaN</span><br></pre></td></tr></table></figure><ul><li><p>定义在全局作用域中的getArea()函数，函数体内的this关键字指向window对象。</p></li><li><p>对于window对象的属性和方法在调用时可以省略window，直接访问其属性和方法即可。</p></li><li><p>弹出对话框和窗口</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/f7c0de03573b5943357e4e28d54fe66a.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/a5afa659fcf7196d587d016fcac0b3bc.png"></p><ol><li><p>输入对话框</p><pre><code> var str=prompt(&#39;请输入测试的选项&#39;,&#39;用户名和密码&#39;);</code></pre></li><li><p>确认对话框</p><pre><code> &lt;input type=&quot;button&quot; value=&quot;删除&quot; onclick=&quot;del()&quot;&gt; &lt;script&gt;     function del()&#123;         if(confirm(&#39;确定要删除吗？&#39;))&#123;             //你按下了“确定”按钮         &#125;else&#123;             //你按下了“取消”按钮         &#125;     &#125; &lt;/script&gt;</code></pre></li><li><p>打开与关闭窗口</p><pre><code> open(URL,name,specs,replace); //name指定target属性或窗口的名称 //specs设置浏览器窗口的特征（如大小、位置） //replace设置为true，表示替换浏览器历史中的当前条目,设置为false(默认值)，表示在浏览历史中创建新的条目</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第一个页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test1 windowd对象的属性和方法_submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">accept-charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;openWin()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一组：对话框</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// window.alert(&quot;alert&quot;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&quot;confirm:&quot; + window.confirm(&quot;confirm&quot;));  //观察点击”确认“和”取消“两种情况的输出结果</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&quot;prompt:&quot; +  window.prompt(&quot;prompt&quot;,100));</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//第二组：窗口的打开与关闭</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">openWin</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.open(<span class="string">&quot;test1 第二个页面.html&quot;</span>,<span class="string">&quot;_blank&quot;</span>,<span class="string">&#x27;width=400,height=200,left=200&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>窗口位置和大小</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/b12c6d694892607202cbe6b6c8f4b4d2.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/e1c6f927ee07c68790ff6149ba98f6fd.png"></p><ul><li>定时器</li></ul><p>通过window对象提供的方法实现在指定时间后执行特定操作，也可以让程序代码每隔一段时间执行一次，实现间歇操作。</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setTimeout()</td><td align="center">在指定的毫秒数后调用函数或执行一段代码</td></tr><tr><td align="center">setInterval()</td><td align="center">按照指定的周期(以毫秒计)来调用函数或执行一段代码</td></tr><tr><td align="center">clearTimeout()</td><td align="center">取消由setTimeout()方法设置的定时器</td></tr><tr><td align="center">clearInterval()</td><td align="center">取消由setInterval()方法设置的定时器</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//一次性定时器</span><br><span class="line">var timer = window.setTimeout(echoStr,3000); //echoStr定时调用的函数,3000为时间，单位毫秒</span><br><span class="line">  function echoStr()&#123;</span><br><span class="line">            console.log(&quot;Hello JS!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> window.clearTimeout(timer);</span><br><span class="line"> //周期性定时器</span><br><span class="line"> var timer = window.setInterval(echoStr,3000);       </span><br><span class="line">  function echoStr()&#123;</span><br><span class="line">            console.log(&quot;Hello JS!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">window.clearInterval(timer);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">text-align</span>: center;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timeDiv&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span> = <span class="string">&quot;开始&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span> = <span class="string">&quot;暂停&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> start = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;start&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pause = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pause&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timeDiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;timeDiv&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        start.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            timer = <span class="built_in">window</span>.setInterval(startFun, <span class="number">1000</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        pause.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.clearInterval(timer);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">startFun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            time++;</span><br><span class="line">            timeDiv.innerHTML = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/3c71904f4ddcba4c36d76dcec829915a.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>限时秒杀<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">position</span>:relative;<span class="attribute">background</span>:<span class="built_in">url</span>(images/flash_sale.png);<span class="attribute">width</span>:<span class="number">702px</span>;<span class="attribute">height</span>:<span class="number">378px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">text-align</span>: center;<span class="attribute">color</span>:red;<span class="attribute">position</span>:relative;<span class="attribute">top</span>:<span class="number">260px</span>;<span class="attribute">left</span>:<span class="number">305px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;s&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="comment">&lt;!-- 剩余的秒数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> s = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> timer = <span class="built_in">window</span>.setInterval(myFun,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">document</span>.getElementById(<span class="string">&#x27;s&#x27;</span>).innerHTML = s + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line">           s--;</span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">if</span>(<span class="params">s&lt;<span class="number">0</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.clearInterval(timer);</span></span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/fc3bf46530e987d249f98c6db03ca728.png"></p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><ul><li>localtion对象可以更改当前用户中浏览器中访问的URL，实现新文档的载入、重载以及替换等功能。</li><li>每一个网页文件都有一个访问标记符，用于唯一标识它的访问位置，以便浏览器可以访问的，这个访问标记符称为URL(Uniform Resource Locator,统一资源定位符)。<pre><code>  URL中包含了网络协议、服务器的主机名、端口号、资源名称字符串、参数以及锚点  http://www.example.com:80/web/index.html?a=3&amp;b=4#res</code></pre></li></ul><ol><li>更改URL<table><thead><tr><th align="center">location对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">assign()</td><td align="center">载入一个新的文档</td></tr><tr><td align="center">reload()</td><td align="center">重新载入当前文档</td></tr><tr><td align="center">replace</td><td align="center">用新的文档替换当前文档</td></tr></tbody></table></li></ol><blockquote><p>reload() 参数为true时，它会绕过缓存，从服务器上重新下载该文档，类似于浏览器中的刷新页面按钮。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;载入新页面&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;newPage()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;刷新页面&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;freshPage()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;替换页面&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;replacePage()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取并显示当前页面载入的时间</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ds=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> d=ds.getDate();</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>).innerHTML=t;</span></span><br><span class="line"><span class="javascript"><span class="comment">//载入新的页面</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">newPage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.assign(<span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"> <span class="comment">//刷新页面        </span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">freshPage</span>(<span class="params"></span>)</span>&#123;          </span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.reload(<span class="literal">true</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//替换，不能后退</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.replace(‘http:<span class="comment">//www.baidu.com’);  </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取URL参数</li></ol><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">search</td><td align="center">返回URL地址中的参数</td></tr><tr><td align="center">hash</td><td align="center">返回一个URL的锚部分</td></tr><tr><td align="center">host</td><td align="center">返回一个URL的主机名和端口</td></tr><tr><td align="center">hostname</td><td align="center">返回URL的主机名</td></tr><tr><td align="center">href</td><td align="center">返回完整的主机名</td></tr><tr><td align="center">pathname</td><td align="center">返回URL的路径名</td></tr><tr><td align="center">port</td><td align="center">返回一个URL服务器使用的端口号</td></tr><tr><td align="center">protocol</td><td align="center">返回一个URL协议</td></tr></tbody></table><ul><li><p>获取URL的指定部分：location.属性名。</p></li><li><p>设置URL的指定部分：location.属性名 = 值。</p><pre><code>  //假设用户在地址栏中访问:http://localhost/search.html?goods=books&amp;price=40  location.search;  //获取:&quot;?goods=books&amp;price=40&quot;  //获取URL地址  location.href;  //设置URL地址  location.href=&quot;http://www.baidu.com&quot;;</code></pre></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>定时跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:gray;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">20px</span> auto;<span class="attribute">width</span>:<span class="number">350px</span>;<span class="attribute">height</span>:<span class="number">150px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;<span class="attribute">background</span>:white;<span class="attribute">padding</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">h2</span>&#123;<span class="attribute">text-align</span>:center;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">span</span>&#123;<span class="attribute">font-size</span>:<span class="number">150%</span>;<span class="attribute">color</span>:red;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交成功<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;seconds&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>秒后系统会自动跳转，也可单击此链接跳转</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="function"><span class="keyword">function</span> <span class="title">timing</span>(<span class="params">secs,url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> seconds=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;seconds&#x27;</span>);</span></span><br><span class="line">seconds.innerHTML=--secs;</span><br><span class="line"><span class="javascript"><span class="function"><span class="title">if</span>(<span class="params">secs&gt;<span class="number">0</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(<span class="string">&#x27;timing(&#x27;</span>+secs+<span class="string">&#x27;,\&#x27;&#x27;</span>+url+<span class="string">&#x27;\&#x27;)&#x27;</span>,<span class="number">1000</span>); </span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"> location.href=url;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript">timing(<span class="number">3</span>,<span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/6ce17e2ba00d43144f24cacf7fbb696a.png"></p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>history对象可以对用户在浏览器中访问过的URL历史记录进行操作。但history不能直接获取用户浏览过的URL。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/94c388f221c2b7c8d15a47bcd46fabd6.png"></p><ul><li>go()方法：当参数值是一个负整数时，表示“后退”指定的页数；当参数值是一个正整数时，表示“前进”指定的页数。</li><li>当go()方法的参数为1或-1时，与forward()和back()方法的作用相同。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/0563d51aaf7af1fa4858b0b3fef727fc.png"></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//第一个页面</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>定时跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是第一个页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;前进&quot;</span> <span class="attr">id</span>=<span class="string">&quot;qianjin&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开新页面&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dakai&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> qianjin = <span class="built_in">document</span>.getElementById(<span class="string">&quot;qianjin&quot;</span>);</span></span><br><span class="line"><span class="javascript">           qianjin.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.history.forward();  <span class="comment">//window.history.go(1);</span></span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> dakai = <span class="built_in">document</span>.getElementById(<span class="string">&quot;dakai&quot;</span>);</span></span><br><span class="line"><span class="javascript">           dakai.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location.assign(<span class="string">&quot;u6 前进和后退2.html&quot;</span>);</span></span><br><span class="line">           &#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//第二个页面</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>定时跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是第二个页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;houtui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> houtui = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;houtui&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           houtui.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.history.back();</span></span><br><span class="line">           &#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/cc6d3cf4bfe42d635f73f20bd8663e9f.png"></p><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>navigator对象提供了有关浏览器的信息。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/02f974b05a95d0f7da7eb30125bacd35.png"></p><h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>返回当前渲染窗口中与屏幕相关的属性信息，如屏幕的宽度和高度等。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/8aa35d76cbc9fc6e0eac08b9045ac9cd.png"></p><h2 id="红绿灯倒计时"><a href="#红绿灯倒计时" class="headerlink" title="红绿灯倒计时"></a>红绿灯倒计时</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/b6f3e06ee4682dfae9a3b4f8a1d57724.png"><br>分析红绿灯：<br>① 横向三色交通信号灯的亮灯的顺序一般为“绿-&gt;黄-&gt;红-&gt;绿”依次循环。<br>② 亮灯时长需根据路口的实际情况等因素来考虑设置，如红灯亮设置为3秒，绿灯亮设置为5秒，黄灯亮设置为3秒。<br>核心功能：  改变背景颜色 + 倒计时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>红绿灯倒计时<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">250px</span>;<span class="attribute">height</span>:<span class="number">52px</span>;<span class="attribute">padding</span>:<span class="number">15px</span> <span class="number">30px</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#ccc</span>;<span class="attribute">border-radius</span>:<span class="number">16px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-class">.count</span>&#123;<span class="attribute">width</span>:<span class="number">60px</span>;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">280%</span>;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">padding-left</span>:<span class="number">6px</span>;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">border-radius</span>:<span class="number">50px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#666</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.gray</span>&#123;<span class="attribute">background-color</span>:<span class="number">#eee</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span>&#123;<span class="attribute">background-color</span>:red;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.yellow</span>&#123;<span class="attribute">background-color</span>:yellow;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.green</span>&#123;<span class="attribute">background-color</span>:<span class="number">#26ff00</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  //编写HTML页面</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取红、黄、绿灯以及倒计时的元素对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//lamp：整个红绿灯对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> lamp = &#123;</span></span><br><span class="line"><span class="javascript">        red: &#123;  <span class="comment">//red:lamp的成员,红灯对象</span></span></span><br><span class="line"><span class="javascript">          obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;red&#x27;</span>), <span class="comment">//obj:存储信号灯的元素对象</span></span></span><br><span class="line"><span class="javascript">          timeout: <span class="number">3</span>,    <span class="comment">//信号灯剩余亮灯时间</span></span></span><br><span class="line"><span class="javascript">          style: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>],  <span class="comment">//当红灯亮起时，红、黄、绿信号灯的背景颜色</span></span></span><br><span class="line"><span class="javascript">          next: <span class="string">&#x27;green&#x27;</span> <span class="comment">//红灯之后亮起的信号灯</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        yellow: &#123;</span><br><span class="line"><span class="javascript">          obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;yellow&#x27;</span>),</span></span><br><span class="line">          timeout: 3,</span><br><span class="line"><span class="javascript">          style: [<span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>],</span></span><br><span class="line"><span class="javascript">          next: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        green: &#123;</span><br><span class="line"><span class="javascript">          obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;green&#x27;</span>),</span></span><br><span class="line">          timeout: 5,</span><br><span class="line"><span class="javascript">          style: [<span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;green&#x27;</span>],</span></span><br><span class="line"><span class="javascript">          next: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//创建红绿灯对象（增加设置信号灯背景颜色的函数）</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeStyle</span>(<span class="params">style</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.red.obj.className = style[<span class="number">0</span>];  <span class="comment">//根据参数，更改obj的样式名称，实现更改背景颜色</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.yellow.obj.className = style[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.green.obj.className = style[<span class="number">2</span>];</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> count = &#123;  <span class="comment">//根据参数，更改num的值，即更改倒计时时间</span></span></span><br><span class="line"><span class="javascript">        obj: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;count&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        change: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.obj.innerHTML = (num &lt; <span class="number">10</span>) ? (<span class="string">&#x27;0&#x27;</span> + num) : num;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      <span class="comment">//初始状态 -- 绿灯亮</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> now = lamp.green;   <span class="comment">//用变量now记录当前状态</span></span></span><br><span class="line"><span class="javascript">      lamp.changeStyle(now.style);  <span class="comment">//设置信号灯的背景颜色</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> timeout = now.timeout; <span class="comment">//记录信号灯亮起时的时间</span></span></span><br><span class="line"><span class="javascript">      count.change(timeout); <span class="comment">//设置倒计时时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//改变时间 -- 定时器</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.setInterval(myfun,<span class="number">1000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           timeout--;  <span class="comment">//倒计时</span></span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">if</span>(<span class="params">timeout&gt;<span class="number">0</span></span>)</span>&#123;  <span class="comment">//倒计时时间未结束</span></span></span><br><span class="line"><span class="javascript">                 count.change(timeout);   <span class="comment">//，刷新页面</span></span></span><br><span class="line"><span class="javascript">           &#125;<span class="keyword">else</span>&#123;  <span class="comment">//倒计时时间结束</span></span></span><br><span class="line"><span class="javascript">                now = lamp[now.next];   <span class="comment">//切换信号灯颜色  -- 注意：不能写为 now = now.next;  这样是将一个字符串如yellow赋值给now；</span></span></span><br><span class="line">                lamp.changeStyle(now.style);</span><br><span class="line">                timeout = now.timeout;</span><br><span class="line">                count.change(timeout);</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/22/21f270060615dc63bbc199e10fe57fd1.png"></p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ol><li><p>什么是DOM？</p><ul><li>文 档（Document）表示HTML文件。</li><li>节 点：文档中所有的内容，都称为节点。</li><li>节点类型：标签节点（元素）、文本节点、属性节点、注释节点。</li><li>DOM：Document Object Model，文档对象模型。</li><li>作 用：完成对HTML文档内所有元素的获取、访问、标签属性和样式的设置等操作。</li></ul></li><li><p>DOM HTML 节点树</p><pre><code> &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;     &lt;title&gt;DOM节点&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;img src=&quot;t1.png&quot;&gt;     &lt;h1&gt;喜欢的水果&lt;/h1&gt;     &lt;p&gt;DOM应用&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/97f95e864fdad767351f408505972143.png"></p></li></ol><h2 id="HTML元素操作"><a href="#HTML元素操作" class="headerlink" title="HTML元素操作"></a>HTML元素操作</h2><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><ol><li><strong><em>利用document对象的方法</em></strong></li></ol><table><thead><tr><th align="center">document对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">getElementById()</td><td align="center">返回对拥有指定id的第一个对象的引用</td></tr><tr><td align="center">getElementsByName()</td><td align="center">返回带有指定名称的对象集合</td></tr><tr><td align="center">getElementsByTagName()</td><td align="center">返回带有指定标签名的对象集合</td></tr><tr><td align="center">getElementsByClassName()</td><td align="center">返回带有指定类名的对象集合（不支持IE6~8）</td></tr><tr><td align="center">querySelector()</td><td align="center">返回文档中匹配到指定元素或CSS选择器的第1个对象的引用</td></tr><tr><td align="center">querySelectorAll()</td><td align="center">返回文档中匹配到指定元素或CSS选择器的第1个对象集合</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span>bar1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span>bar2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span>&gt;</span>main1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span>&gt;</span>main2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>));</span></span><br><span class="line"><span class="javascript"><span class="comment">//返回对象集合，可以通过下标获得指定项</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByName(<span class="string">&quot;main&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;bar&quot;</span>));</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//HTML5新增方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>)); <span class="comment">//获取匹配到的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;#box&quot;</span>)); <span class="comment">//获取id为box的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.bar&quot;</span>)); <span class="comment">//获取class为bar的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div[name]&quot;</span>)); <span class="comment">//获取含有name属性的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div.bar&quot;</span>)); <span class="comment">//获取文档中class为bar的第1个div</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&quot;div#box&quot;</span>)); <span class="comment">//获取文档中id为box的第1个div</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.<strong><em>利用documetn对象的属性</em></strong></p><table><thead><tr><th align="center">document对象的属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">document.body</td><td align="center">返回文档的body元素</td></tr><tr><td align="center">document.documentElement</td><td align="center">返回文档的html元素</td></tr><tr><td align="center">document.forms</td><td align="center">返回对文档中所有Form对象引用</td></tr><tr><td align="center">document.images</td><td align="center">返回对文档中所有Image对象引用</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> body=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>];  <span class="comment">//获取body元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span>html=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>];  <span class="comment">//获取html元素</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body === body);             <span class="comment">//返回比较结果 true</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement === html);   <span class="comment">//返回比较结果 true</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong><em>利用Element对象的方法</em></strong></p><table><thead><tr><th align="center">Element对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">getElementsByClassName</td><td align="center">返回某个元素内具有指定class的元素</td></tr><tr><td align="center">getElementsByTagName</td><td align="center">返回某个元素内具有指定tag的元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JQuery<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> var lis = document.getElementById(&#x27;ul&#x27;).getElementsByTagName(&#x27;li&#x27;);</span><br><span class="line"> console.log(lis);</span><br></pre></td></tr></table></figure><blockquote><p>通过document对象或者Element对象调用getElementsByClassName()方法、getElementsByTagName()方法、children属性等返回的对象集合，实际上是一个<strong>HTMLCollection对象</strong>;<br>document对象调用getElementsByName()方法在Chrom浏览器中返回的是<strong>NodeList对象</strong>，IE11返回的是HTMLCOllection对象。<br>HTMLCollection用于元素操作，NodeList用于节点操作</p></blockquote><h3 id="更改元素内容"><a href="#更改元素内容" class="headerlink" title="更改元素内容"></a>更改元素内容</h3><table><thead><tr><th align="center">Element对象的属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>innerHTML</strong></td><td align="center">设置或返回元素开始和结束标签之间的HTML</td></tr><tr><td align="center">innerText(不推荐)</td><td align="center">设置或返回元素中去除所有标签的内容</td></tr><tr><td align="center">textContent</td><td align="center">设置或者返回指定节点的文本内容</td></tr></tbody></table><table><thead><tr><th align="center">document对象的方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">document.write()</td><td align="center">向文档写入指定的内容</td></tr><tr><td align="center">document.writeln()</td><td align="center">向文档写入指定的内容后并换行</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//html代码</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//JS代码实现</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">var str=&#x27;<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;;</span></span></span><br><span class="line">div.innerHTML=str;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更改元素属性"><a href="#更改元素属性" class="headerlink" title="更改元素属性"></a>更改元素属性</h3><pre><code>    ele.setAttribute(&#39;属性名&#39;,&#39;属性值&#39;);</code></pre><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">setAttribute(name, value)</td><td align="center">设置或者改变指定属性的值</td></tr><tr><td align="center">getAttribute(name)</td><td align="center">返回指定元素的属性值</td></tr><tr><td align="center">removeAttribute(name)</td><td align="center">从元素中删除指定的属性</td></tr></tbody></table><blockquote><p>利用<strong>attributes属性</strong>可以获取一个HTML元素的所有属性，以及所有属性的个数length</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>php<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//获得节点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>)[<span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">      <span class="comment">//删除属性1</span></span></span><br><span class="line"><span class="javascript">      child.removeAttribute(<span class="string">&#x27;class&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//删除属性2</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> attr = child.getAttributeNode(<span class="string">&#x27;class&#x27;</span>);</span></span><br><span class="line">      child.removeAttributeNode(attr);</span><br><span class="line"><span class="javascript">      <span class="comment">//删除节点</span></span></span><br><span class="line">      child.parentNode.removeChild(child);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;gray&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;thick&#x27;</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span>test word.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;当前属性个数：&quot;</span>  + ele.attributes.length);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加属性 -- 实现和第12行同样的效果（二者留其一即可）</span></span></span><br><span class="line"><span class="javascript">        ele.setAttribute(<span class="string">&#x27;align&#x27;</span>, <span class="string">&#x27;center&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ele.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        ele.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;thick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//移除属性</span></span></span><br><span class="line"><span class="javascript">        ele.removeAttribute(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更改元素样式"><a href="#更改元素样式" class="headerlink" title="更改元素样式"></a>更改元素样式</h3><pre><code>    ele.style.样式名:值;</code></pre><table><thead><tr><th align="center">常见style属性操作样式名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">background</td><td align="center">设置或返回元素的背景属性</td></tr><tr><td align="center">backgroundColor</td><td align="center">设置或返回元素的背景色</td></tr><tr><td align="center">display</td><td align="center">设置或返回元素的显示类型</td></tr><tr><td align="center">height</td><td align="center">设置或返回元素的高度</td></tr><tr><td align="center">left</td><td align="center">设置或返回定位元素的左部位置</td></tr><tr><td align="center">textAlign</td><td align="center">设置或返回文本的水平对齐方式</td></tr><tr><td align="center">textDecoration</td><td align="center">设置或返回文本的修饰</td></tr><tr><td align="center">textIndent</td><td align="center">设置或返回文本第一行的缩进</td></tr></tbody></table><blockquote><p>在操作样式名称时，需要去掉CSS样式名里的中横线”-“,并将第二个英文首字母大写<br>例如background-color，需要修改为：backgroundColor</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.gray</span>&#123;<span class="attribute">background</span>:<span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="css">     <span class="selector-id">#thick</span>&#123;<span class="attribute">font-weight</span>:bolder;&#125;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>test word.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">&quot;当前属性个数：&quot;</span>  + ele.attributes.length);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">     ele.style.textAlign = <span class="string">&#x27;center&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     ele.style.background = <span class="string">&#x27;#ccc&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     ele.style.fontWeight = <span class="string">&#x27;bolder&#x27;</span>;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// //添加属性 -- 实现和第12行同样的效果（二者留其一即可）</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.setAttribute(&#x27;align&#x27;, &#x27;center&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.setAttribute(&#x27;class&#x27;, &#x27;gray&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.setAttribute(&#x27;id&#x27;, &#x27;thick&#x27;);</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// //移除属性</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// ele.removeAttribute(&#x27;id&#x27;);</span></span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><p>由于一个元素的类选择器可以有多个，可以利用“div元素对象.classList”的方式，获取类选择器列表。</p><table><thead><tr><th align="center">classList方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">add()</td><td align="center">可以给元素添加类名，一次只能添加一个</td></tr><tr><td align="center">remove()</td><td align="center">可以将元素的类名删除，一次只能删除一个</td></tr><tr><td align="center">toggle()</td><td align="center">切换元素的样式，若元素之前没有指定名称的样式则添加，如果有则移除</td></tr><tr><td align="center">item()</td><td align="center">根据接收的数字索引参数，获取元素的类名</td></tr><tr><td align="center">contains</td><td align="center">判断元素是否包含指定名称的样式，若包含则返回true，否则返回false</td></tr></tbody></table><blockquote><p>可以通过classList的属性length获取元素类名的个数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar bar1&quot;</span>&gt;</span>bar1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.ys</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mydiv=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(mydiv.classList.length);  <span class="comment">//获得元素的所有类名</span></span></span><br><span class="line"><span class="javascript">mydiv.classList.add(<span class="string">&quot;ys&quot;</span>);    <span class="comment">//添加样式</span></span></span><br><span class="line"><span class="javascript">mydiv.classList.remove(<span class="string">&quot;ys&quot;</span>); <span class="comment">//删除样式s</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标签栏切换效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-box</span>&#123;<span class="attribute">width</span>:<span class="number">383px</span>;<span class="attribute">margin</span>:<span class="number">10px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">border-top</span>:<span class="number">2px</span> solid <span class="number">#206F96</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head</span>&#123;<span class="attribute">height</span>:<span class="number">31px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head-div</span>&#123;<span class="attribute">width</span>:<span class="number">95px</span>;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">float</span>:left;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">border-right</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">background</span>:<span class="number">#206F96</span>;<span class="attribute">line-height</span>:<span class="number">30px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">cursor</span>:pointer;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head</span> <span class="selector-class">.current</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-head-r</span>&#123;<span class="attribute">border-right</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-body-div</span>&#123;<span class="attribute">display</span>:none;<span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tab-body</span> <span class="selector-class">.current</span>&#123;<span class="attribute">display</span>:block;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div current&quot;</span>&gt;</span>标签一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div&quot;</span>&gt;</span>标签二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div&quot;</span>&gt;</span>标签三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-head-div tab-head-r&quot;</span>&gt;</span>标签四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--jkdjfk?--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div current&quot;</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div&quot;</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div&quot;</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-body-div&quot;</span>&gt;</span> 4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取标签栏的所有标签元素对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tabs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;tab-head-div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取标签栏的所有内容对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;tab-body-div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 遍历标签的元素对象,为每个标签元素对象添加鼠标滑过事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> tabs</span>)</span>&#123;  <span class="comment">//遍历</span></span></span><br><span class="line"><span class="javascript">            tabs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//加事件</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j <span class="keyword">in</span> tabs</span>)</span>&#123;  <span class="comment">//再次遍历</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">if</span>(<span class="params">tabs[j]==<span class="built_in">this</span></span>)</span>&#123;  <span class="comment">//判断当前，加current</span></span></span><br><span class="line"><span class="javascript">                        tabs[j].classList.add(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        divs[j].classList.add(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//非当前，去current</span></span></span><br><span class="line"><span class="javascript">                        tabs[j].classList.remove(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        divs[j].classList.remove(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/0d8b8e41bf64e9a5cfa7745cceabac11.png"></p><h2 id="DOM节点操作"><a href="#DOM节点操作" class="headerlink" title="DOM节点操作"></a>DOM节点操作</h2><ul><li>文档中的所有内容，称为节点。</li><li>根据作用，划分为：标签节点、文本节点和属性节点。</li></ul><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><pre><code>    document.getElementById（）    element.firstChild()    element.lastChild()    element.parentNode()    element.childNodes()</code></pre><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>firstChild</td><td>访问当前节点的首个子节点</td></tr><tr><td>lastChild</td><td>访问当前节点的最后一个子节点</td></tr><tr><td>nodeName</td><td>访问当前节点名称</td></tr><tr><td>nodeValue</td><td>访问当前节点的值</td></tr><tr><td>nextSibiling</td><td>返回同ff一树层级中指定节点之后紧跟的节点（下一个兄弟）</td></tr><tr><td>previousSibling</td><td>返回同ff一树层级中指定节点的前一个节点（前一个兄弟）</td></tr><tr><td>parentNode</td><td>访问当前元素节点的父节点</td></tr><tr><td>childNodes</td><td>访问当前元素节点的所有子节点集合（含回车符，返回NodeList）</td></tr></tbody></table><blockquote><p>childNodes属性用于节点操作，返回NdeList对象的集合，包括回车符、文本节点等其他类型的节点</p><p>children属性用于元素操作，返回HTMLCollection对象的集合，不包括文本节点等其他类型的节点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>BOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ul1&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;1--nodeName--&quot;</span> + ul1.nodeName);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;2--nodeValue--&quot;</span> + ul1.nodeValue);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> txt1 = ul1.firstChild;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3--nodeName--&quot;</span> + txt1.nodeName);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;4--nodeValue--&quot;</span> + txt1.nodeValue);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li1 = txt1.nextSibling;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;5--nodeName--&quot;</span> + li1.nodeName);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;6--nodeValue--&quot;</span> + li1.nodeValue);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> txtJS = li1.firstChild.nodeValue;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;7--txtJS--&quot;</span> + txtJS);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;8--&quot;</span> + li1.nextSibling.nodeName);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;9--&quot;</span> + ul1.childNodes.length);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;10--&quot;</span> + ul1.children.length);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点追加"><a href="#节点追加" class="headerlink" title="节点追加"></a>节点追加</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">document.createElement()</td><td align="center">创建元素节点</td></tr><tr><td align="center">document.createTextNode()</td><td align="center">创建文本节点</td></tr><tr><td align="center">document.createAttribute()</td><td align="center">创建属性节点</td></tr><tr><td align="center">appendChild()</td><td align="center">在指定元素的子节点列表的末尾添加一个节点</td></tr><tr><td align="center">insertBefore()</td><td align="center">为当前节点增加一个子节点（插入到指定子节点之后）</td></tr><tr><td align="center">getAttributeNode()</td><td align="center">返回指定名称的属性节点</td></tr><tr><td align="center">setAttributeNode()</td><td align="center">设置或者改变名称的属性节点</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span>Hello JS!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//JS实现</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h2 = <span class="built_in">document</span>.createElement(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">&#x27;hello JS&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> attr = <span class="built_in">document</span>.createAttribute(<span class="string">&#x27;algin&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        attr.value = <span class="string">&#x27;center&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line">        h2.setAttributeNode(attr);</span><br><span class="line">        h2.appendChild(text);</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(h2);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul><li>删除节点使用<code>removeChild()</code>和<code>removeAttributeNode()</code>实现，它们的返回值是被移出的元素节点或属性节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.strong</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-weight</span><span class="selector-pseudo">:bolder</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;strong&quot;</span>&gt;</span>UI<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//删除第3个li的文本</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li3 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>)[<span class="number">2</span>];  <span class="comment">//获得元素 li</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> attr = li3.getAttributeNode(<span class="string">&#x27;class&#x27;</span>);  <span class="comment">//通过li获得其名称为class的属性节点</span></span></span><br><span class="line"><span class="javascript">        li3.removeAttributeNode(attr); <span class="comment">//删除li3的属性节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//删除第3个li</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line">        ul.removeChild(li3);</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折叠菜单"><a href="#折叠菜单" class="headerlink" title="折叠菜单"></a>折叠菜单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:14px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#nav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span><span class="selector-pseudo">:25px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#336699</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>:<span class="selector-id">#888</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#336699</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>:<span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;showmenu(&#x27;1&#x27;)&quot;</span>&gt;</span>Ajax下载<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 探究：文档末 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;showmenu(&#x27;2&#x27;)&quot;</span>&gt;</span>JQuery下载<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showmenu</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span> + id);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> menu = <span class="built_in">document</span>.getElementById(<span class="string">&quot;menu&quot;</span> + id);</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">list.style.display==<span class="string">&#x27;none&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                list.style.display=<span class="string">&#x27;block&#x27;</span>;  <span class="comment">//用元素操作：样式</span></span></span><br><span class="line"><span class="javascript">                menu.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;title1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                list.style.display=<span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                menu.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;title&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/91fd175a02f7b27dded211fe6cb07bf1.png"></p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><ul><li>事件：用户行为，如单击、鼠标移动等；</li><li>事件处理程序：对事件进行处理的代码；</li><li>事件驱动式：侦测到用户行为、执行事件处理程序的过程；</li><li>事件流：事件传播的过程（捕获+冒泡）<ol><li>事件捕获方式（网景）<br>事件流传播的顺序应该是从DOM树的根节点到发生事件的元素节点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/b315bc6e374e49e06599e3358da1c234.png"></li><li>事件冒泡方式（微软）<br>事件流传播的顺序应该是从发生事件的元素节点到DOM树的根节点。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/f8841c573e31a54e16e3e49579b65763.png"></li></ol></li></ul><h2 id="事件绑定方式"><a href="#事件绑定方式" class="headerlink" title="事件绑定方式"></a>事件绑定方式</h2><ol><li>行内绑定式<br> 事件处理程序中this关键字用于指向window对象<pre><code>     &lt;标签名 事件=&quot;事件的处理程序&quot;&gt;</code></pre></li><li>动态绑定式<br> 事件处理程序中this关键字用于指向当前正在操作的DOM元素对象<pre><code>     DOM元素对象.事件=事件的处理程序</code></pre></li><li>事件监听<br> 事件监听：可以为一个事件添加多个事件处理程序。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">DOM对象.addEventListener(type,callback,[capture]);</span><br><span class="line">type：事件类型 </span><br><span class="line">callback：表示事件的处理程序</span><br><span class="line">capture：</span><br><span class="line">默认false表示在冒泡阶段完成事件处理 </span><br><span class="line">true表示在捕获阶段完成事件的处理</span><br><span class="line">*/</span><br><span class="line">var div=document.getElementById(&#x27;div&#x27;);</span><br><span class="line">div.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">console.log(&quot;one&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">div.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">console.log(&quot;two&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2></li></ol><ul><li>在Javascript中，当发生事件时，都会产生一个<strong>事件对象event</strong>，这个对象中包含着所有与事件有关的信息。</li><li>获取事件对象<pre><code>  btn.onclick=function(e)&#123;      var event = e || window.event; //e为现版本 window.event为早期版本      console.log(event);  &#125;</code></pre></li></ul><p>补充：</p><ul><li>假false：undefined、null、NaN、0、空串</li><li>真true：其它都为真</li><li>真前：true||任何值，都返回前面的值</li><li>假后：false||任何值，都返回后面的值</li></ul><table><thead><tr><th align="center">事件对象常用属性/方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">返回当前事件的类型，如click</td></tr><tr><td align="center">target</td><td align="center">返回触发此事件的元素（事件的目标节点）</td></tr><tr><td align="center">stopPropagation()</td><td align="center">阻止事件冒泡</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">red</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;d1&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击我&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;div div div&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;btn btn btn&quot;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="comment">//type  类型    target目标   event.stopPropagation()阻止冒泡</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">//得到事件对象</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log( event.type );   <span class="comment">//--click</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           console.log( event.target );   //-- <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击我&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">           event.stopPropagation();  <span class="comment">//-- btn</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">load</td><td align="center">当页面载入完毕后触发</td></tr><tr><td align="center">unload</td><td align="center">当页面关闭时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--  &lt;script&gt;</span></span><br><span class="line"><span class="comment">        document.getElementById(&#x27;demo&#x27;).onclick = function()&#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;单击&#x27;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.getElementById(<span class="string">&#x27;demo&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;单击&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h2><p>焦点事件多用于表单验证功能</p><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">focus</td><td align="center">当获得焦点时触发（不会冒泡）</td></tr><tr><td align="center">blur</td><td align="center">当失去焦点时（不会冒泡）</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>验证用户名和密码是否为空<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#ddd</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">30px</span>;<span class="attribute">width</span>:<span class="number">400px</span>;<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="attribute">text-align</span>:center;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.btn</span>&#123;<span class="attribute">width</span>:<span class="number">180px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">background</span>:<span class="number">#3388ff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.ipt</span>&#123;<span class="attribute">width</span>:<span class="number">260px</span>;<span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">2px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.tips</span>&#123;<span class="attribute">width</span>:<span class="number">440px</span>;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">margin</span>:<span class="number">5px</span> auto;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">color</span>:red;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">display</span>:none;<span class="attribute">line-height</span>:<span class="number">30px</span>;<span class="attribute">padding-left</span>:<span class="number">20px</span>;<span class="attribute">font-size</span>:<span class="number">13px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tips&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;user&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pass = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pass&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tips = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tips&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        user.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">user.value===<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                tips.innerHTML = <span class="string">&#x27;用户名不能为空&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                tips.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        pass.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">user.value===<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                tips.innerHTML = <span class="string">&#x27;密码不能为空&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                tips.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--  &lt;script&gt;</span></span><br><span class="line"><span class="comment">      window.onload = function() &#123;</span></span><br><span class="line"><span class="comment">        addBlur(getElement(&#x27;user&#x27;));      // 检测id为user的元素失去焦点后，value值是否为空</span></span><br><span class="line"><span class="comment">        addBlur(getElement(&#x27;pass&#x27;));      // 检测id为pass的元素失去焦点后，value值是否为空</span></span><br><span class="line"><span class="comment">      &#125;;</span></span><br><span class="line"><span class="comment">      function getElement(obj) &#123;          // 根据id获取指定元素</span></span><br><span class="line"><span class="comment">        return document.getElementById(obj);</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      function addBlur(obj) &#123;    // 为指定元素添加失去焦点事件</span></span><br><span class="line"><span class="comment">        obj.onblur = function() &#123;</span></span><br><span class="line"><span class="comment">          isEmpty(this);</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      function isEmpty(obj) &#123;    // 检测表单是否为空</span></span><br><span class="line"><span class="comment">        if (obj.value === &#x27;&#x27;) &#123;</span></span><br><span class="line"><span class="comment">          getElement(&#x27;tips&#x27;).style.display = &#x27;block&#x27;;</span></span><br><span class="line"><span class="comment">          getElement(&#x27;tips&#x27;).innerHTML = &#x27;注意：输入内容不能为空! &#x27;;</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">          getElement(&#x27;tips&#x27;).style.display = &#x27;none&#x27;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/b1fc049c00843685e04a843150a47ea2.png"></p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">click</td><td align="center">单击(动态绑定用onclick)</td></tr><tr><td align="center">dblclick</td><td align="center">双击</td></tr><tr><td align="center">mouseover/mouseout</td><td align="center">鼠标进入/离开</td></tr><tr><td align="center">change</td><td align="center">当内容发生改变时触发，一般用于select对象</td></tr><tr><td align="center">mousedown/mouseup</td><td align="center">按下 / 松开 任意鼠标键</td></tr><tr><td align="center">mousemove</td><td align="center">在元素内当鼠标移动时持续触发</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/3893d35aef54b8c820472f5c8619fd76.png"></p><table><thead><tr><th align="center">位置属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">clientX/clinetY</td><td align="center">触发点相对浏览器可视区域左上角距离，不随页面滚动而变化（所有浏览器）</td></tr><tr><td align="center">pageX / pageY</td><td align="center">触发点相对文档区域左上角距离，随页面滚动而滚动（IE6~8不兼容）</td></tr><tr><td align="center">screenX / screenY</td><td align="center">触发点位于屏幕的距离，不随页面滚动而变化</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mouse</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">background</span>:<span class="number">#ffd965</span>;<span class="attribute">width</span>:<span class="number">40px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">border-radius</span>:<span class="number">20px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mouse&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mouse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取事件对象的兼容性</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//鼠标在页面上的位置</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageX = event.pageX ||</span></span><br><span class="line"><span class="javascript">                  event.clientX + <span class="built_in">document</span>.documentElement.scrollLeft;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageY = event.pageY ||</span></span><br><span class="line"><span class="javascript">                  event.clientY + <span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算div应该显示的位置</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> targetX = pageX - mouse.offsetWidth/<span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> targetY = pageY - mouse.offsetHeight / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//在鼠标位置显示div</span></span></span><br><span class="line"><span class="javascript">            mouse.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            mouse.style.left = targetX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            mouse.style.top = targetY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/8a51609ea5ea1dd95937bc2e0e1125b3.png"></p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发时机</th></tr></thead><tbody><tr><td align="center">keypress</td><td align="center">键盘非功能键按下时触发</td></tr><tr><td align="center">keydown</td><td align="center">键盘所有键键按下时触发</td></tr><tr><td align="center">keyup</td><td align="center">键盘按键弹起时触发</td></tr></tbody></table><blockquote><p>keypress事件保存的按键值是ASCII码，<br>keydown和keyup事件保存的按键值是虚拟键码keycode。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/ecac96b22b955aee35cf5b9814b25cbe.png"><br>常用的keycode</p><ul><li> 回车：13</li><li>左上右下：37、38、39、40</li><li>Tab：9</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">按下键盘的enter键，下一个文本框获得焦点。 </span><br><span class="line">第一步：查找页面元素</span><br><span class="line">第二步：为每一个input添加“键盘按下”事件</span><br><span class="line">第三步：判断按下的是否为Enter键</span><br><span class="line">第四步：如果是enter键，则寻找当前input框</span><br><span class="line">第五步：根据当前，计算下一个input框的index</span><br><span class="line">第六步：下一个input框获得焦点</span><br><span class="line">*/</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>按Enter键切换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>电子邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>个人描述：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为四个input添加键盘事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 查找页面元</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;inputs.length;i++</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            inputs[i].onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//                    处理：如果按下的是回车键，</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                    下一个输入框（当前—遍历，？==this）获得焦点（focus）</span></span></span><br><span class="line"><span class="javascript">                e = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">if</span>(<span class="params">e.keyCode==<span class="number">13</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j=<span class="number">0</span>;j&lt;inputs.length;j++</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="function"><span class="title">if</span>(<span class="params">inputs[j]==<span class="built_in">this</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> index = j+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 边界处理</span></span></span><br><span class="line"><span class="javascript">                            <span class="function"><span class="title">if</span>(<span class="params">index==inputs.length</span>)</span>&#123;</span></span><br><span class="line">                                index = 0;</span><br><span class="line">                            &#125;</span><br><span class="line">                            inputs[index].focus();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// //查找页面元素</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// var inputs = document.getElementsByTagName(&#x27;input&#x27;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// //为每一个input添加“键盘按下”事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// for(var i=0;i&lt;inputs.length;i++)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     inputs[i].onkeydown = function(e)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         //判断按下的是否为Enter键</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         var e = e || window.event;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         if(e.keyCode===13)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             //是enter键，则寻找当前input框</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             for(var j=0;j&lt;inputs.length;j++)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                 if(inputs[j]===this)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     //console.log(j);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     //下一个input框的index</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     var index = ++j;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     if(index==inputs.length)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                         index=0;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     console.log(index);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     //下一个input框获得焦点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     inputs[index].focus();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//                 &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/7d6946a12612945ad0b169c50d4f7de8.png"></p><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><table><thead><tr><th align="center">事件名称</th><th align="center">事件触发条件</th></tr></thead><tbody><tr><td align="center">submit</td><td align="center">当表单提交时触发</td></tr><tr><td align="center">reset</td><td align="center">当表单重置时触发</td></tr></tbody></table><p>这两个事件的返回值若是false则会取消默认操作，否则将执行默认操作</p><h2 id="图片放大特效"><a href="#图片放大特效" class="headerlink" title="图片放大特效"></a>图片放大特效</h2><p>素材：<br>    big.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/27526e27bf54e49ae8ca76b8aca0b014.png"><br>    small.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/7afa6108f3aefd19e34000981327ad18.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">（1）页面构成</span><br><span class="line">大div：包括左div+右div</span><br><span class="line">左div：包含图片+div(遮罩--移动、显示或隐藏)</span><br><span class="line">右div：包含 图片（显示或隐藏）</span><br><span class="line">（2）JS实现步骤</span><br><span class="line">第一步：鼠标经过与移出，遮罩和大图的显示与隐藏</span><br><span class="line">第二步：遮罩的移动，通过为小图添加鼠标移动事件来实现</span><br><span class="line">第三步：大图的显示区域</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">350px</span>;<span class="attribute">height</span>:<span class="number">350px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">position</span>:relative&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.big</span>&#123;<span class="attribute">width</span>:<span class="number">400px</span>;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">360px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">display</span>:none&#125; <span class="comment">/* overflow:hidden是当元素内的内容溢出的时候使它隐藏溢出的部分，即超出部分隐藏 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.mask</span>&#123;<span class="attribute">width</span>:<span class="number">175px</span>;<span class="attribute">height</span>:<span class="number">175px</span>;<span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>,.<span class="number">4</span>);<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">cursor</span>:move;<span class="attribute">display</span>:none&#125;<span class="comment">/*cursor:move 光标形状*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.small</span>&#123;<span class="attribute">position</span>:relative&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:top&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#bigBox</span> <span class="selector-tag">img</span>&#123;<span class="attribute">position</span>:absolute&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;smallBox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/small.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mask&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bigBox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;bigImg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/big.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一步：鼠标经过与移出，遮罩和大图的显示与隐藏 -- 遮罩默认在小图的左上角</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>)</span>&#123;  <span class="comment">//定义函数，根据id值获取元素对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;smallBox&#x27;</span>).onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;jirnu &quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;bigBox&#x27;</span>).style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;smallBox&#x27;</span>).onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;bigBox&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="comment">//第二步：遮罩的移动，通过为小图添加鼠标移动事件来实现</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;smallBox&#x27;</span>).onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算鼠标在页面中的坐标</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageX = event.pageX || event.clientX + dodument.documentElement.scroll;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageY = event.pageY || event.clientY + <span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算遮罩的位置:x = 鼠标位置的x - 遮罩宽度的一半， y类似</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> maskX = pageX - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> maskY = pageY - $(<span class="string">&#x27;mask&#x27;</span>).offsetHeight / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//遮罩边界处理 -- 遮罩不能移动到小图以外的位置</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">maskX&lt;<span class="number">0</span></span>)</span>&#123;  <span class="comment">//左边界</span></span></span><br><span class="line">                maskX = 0;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(maskX&gt;$(<span class="string">&#x27;smallBox&#x27;</span>).offsetWidth - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth)&#123;<span class="comment">//右边界</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//修改遮罩的显示位置 -- 移动</span></span></span><br><span class="line"><span class="javascript">                maskX = $(<span class="string">&#x27;smallBox&#x27;</span>).offsetWidth - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">maskY&lt;<span class="number">0</span></span>)</span>&#123;  <span class="comment">//上边界</span></span></span><br><span class="line">                maskY = 0;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(maskY&gt;$(<span class="string">&#x27;smallBox&#x27;</span>).offsetHeight - $(<span class="string">&#x27;mask&#x27;</span>).offsetHeight)&#123;  <span class="comment">//下边界</span></span></span><br><span class="line"><span class="javascript">                maskY=$(<span class="string">&#x27;smallBox&#x27;</span>).offsetHeight - $(<span class="string">&#x27;mask&#x27;</span>).offsetHeight;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.left = maskX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;mask&#x27;</span>).style.top = maskY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//第三步：大图的显示区域 -- 按照遮罩在小图中的区域，显示大图中相应区域 -- 比例计算</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 按照比例移动大图 大图片能够移动的总距离 = 大图的宽度 - 大盒子的宽度</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> bigImgToMove = $(<span class="string">&#x27;bigImg&#x27;</span>).offsetWidth - $(<span class="string">&#x27;bigBox&#x27;</span>).offsetWidth;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 遮罩能够移动的总距离 = 小盒子的宽度 - 遮罩的宽度</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> maskToMove = $(<span class="string">&#x27;smallBox&#x27;</span>).offsetWidth - $(<span class="string">&#x27;mask&#x27;</span>).offsetWidth;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 计算移动比例rate = 大图片能够移动的总距离/遮罩能够移动的总距离</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> rate = bigImgToMove / maskToMove;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// 设置大图片当前的位置 = rate * 遮罩当前的位置</span></span></span><br><span class="line"><span class="javascript">           $(<span class="string">&#x27;bigImg&#x27;</span>).style.left = - rate * maskX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">           $(<span class="string">&#x27;bigImg&#x27;</span>).style.top = - rate * maskY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/ecb6e3c873d1493ef7af732291722a28.png"></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://ihateregex.io/">正则表达式查询网站I Hate Regex</a></p><ol><li><p>什么是正则表达式<br>正则表达式（Regular Expression，简称regexp）</p><ul><li>概念：是一种描述字符串结构的语法规则（描述字符串特征）</li><li>作用：用于验证各种字符串是否匹配这个特征。</li><li>应用：在项目开发中，手机号码指定位数的隐藏、数据采集、敏感词的过滤以及表单的验证等功能，都可以利用正则表达式来实现。</li></ul></li><li><p>获取正则对象</p><ul><li>字面量方式<pre><code>  /pattern/flags  例如：/abc/gi</code></pre></li><li>RegExp对象构造函数方式<pre><code>  new RegExp(pattern[,flags])  RegExp(pattern[,flags])  //示例  var str=&#39;Abc123abc456abc&#39;;  var reg=new RegExp(&#39;abc&#39;,&#39;gi&#39;);  console.log(str.match(reg));</code></pre>pattern：模式文本，由元字符和文本字符（普通字符）组成。<br>flags：模式修饰符。<table><thead><tr><th align="center">模式符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">g</td><td align="center">用于在目标字符串中实现全局匹配（多次）</td></tr><tr><td align="center">i</td><td align="center">忽略大小写</td></tr><tr><td align="center">m</td><td align="center">实现多行匹配</td></tr><tr><td align="center">u</td><td align="center">以Unicode编码执行正则表达式</td></tr><tr><td align="center">y</td><td align="center">粘性匹配，仅匹配目标字符串中此正则表达式的lastindex属性指示的索引</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开始的位置</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结束的位置</td></tr></tbody></table></li></ul></li><li><p>使用正则对象</p><ul><li>RegExp对象提供的<code>exec()</code>方法，一次仅返回一个匹配结果，匹配成功返回数组，否则返回null<pre><code>  var str=&#39;Abc123abc456abc&#39;;  var reg=/abc/gi;  console.log(reg.exec(str)); //返回Abc</code></pre></li><li>String对象提供的<code>match()</code>方法，匹配出所有符合要求的内容，匹配成功返回数组，否则返回false<pre><code>  var str=&#39;Abc123abc456abc&#39;;  var reg=/abc/gi;  console.log(str.match(reg)); //返回Abc、abc、abc</code></pre></li></ul></li><li><p>转义字符的处理<br>使用反斜线对特殊字符进行转义</p><pre><code> var str=&#39;^abc\\1.23*edf$&#39;; var reg1=/\./; console.log(str.match(reg1)); var reg2=new RegExp(&#39;\\.&#39;); console.log(str.match(reg2));</code></pre></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;tips&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkname()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkname</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/admin/gi</span>;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">!(username.match(reg)==<span class="literal">null</span>)</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tips&#x27;</span>).innerHTML = <span class="string">&#x27;用户名不能包含admin&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tips&#x27;</span>).innerHTML = <span class="string">&#x27;注册成功&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/8dd395d313c59a501ded337ff5d2a43c.png"></p><h2 id="字符类别与集合"><a href="#字符类别与集合" class="headerlink" title="字符类别与集合"></a>字符类别与集合</h2><ul><li><strong>字符类别</strong><br>使正则表达式更加简洁，便于阅读。</li></ul><table><thead><tr><th align="center">字符</th><th align="center">含义</th><th align="center">字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配除“\n”外的任何单个字符</td><td align="center">\f</td><td align="center">匹配一个换页符（form-feed)</td></tr><tr><td align="center">\d</td><td align="center">匹配任意一个阿拉伯数字</td><td align="center">\D</td><td align="center">匹配任意一个非阿拉伯数字字符</td></tr><tr><td align="center">\s</td><td align="center">匹配一个空白符，包括空格、制表符、换页符、换行符等</td><td align="center">\S</td><td align="center">匹配一个非空白符</td></tr><tr><td align="center">\w</td><td align="center">匹配任意一个字母（大小写）、数字和下划线</td><td align="center">\W</td><td align="center">匹配任意一个非“字母（大小写）、数字和下划线”的字符</td></tr></tbody></table><ul><li><strong>字符集合</strong><br>正则表达式中的”[]”可以实现一个字符集合</li></ul><table><thead><tr><th align="center">pattern</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[cat]</td><td align="center">匹配字符集合中的任意一个字符c、a、t</td></tr><tr><td align="center">[^cat]</td><td align="center">匹配除c、a、t以外的字符</td></tr><tr><td align="center">[B-Z]</td><td align="center">匹配字母B~Z范围内的字符</td></tr><tr><td align="center">[^a-z]</td><td align="center">匹配字母a~z范围外的字符</td></tr><tr><td align="center">[a-zA-Z0-9]</td><td align="center">匹配大小写字母和0~9范围内的字符</td></tr><tr><td align="center">[\u4e00-\u9fa5]</td><td align="center">匹配任意一个中文字符</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>限定输入内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123;<span class="attribute">width</span>: <span class="number">40px</span>;<span class="attribute">border-color</span>: <span class="number">#bbb</span>;<span class="attribute">height</span>: <span class="number">25px</span>;<span class="attribute">font-size</span>: <span class="number">14px</span>;<span class="attribute">border-radius</span>: <span class="number">2px</span>;<span class="attribute">outline</span>: <span class="number">0</span>;<span class="attribute">border</span>: <span class="number">#ccc</span> <span class="number">1px</span> solid;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;<span class="attribute">margin-bottom</span>: <span class="number">15px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#56b4ef</span>; <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">05</span>),<span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>,<span class="number">168</span>,<span class="number">236</span>,.<span class="number">6</span>); <span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#999</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>,  <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#c2c2c2</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123;<span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">width</span>: <span class="number">80px</span>; <span class="attribute">background</span>: <span class="number">#4393C9</span>; <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">font</span>:<span class="number">14px</span> bolder; &#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">      年份 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span>&gt;</span></span><br><span class="line">      月份 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查询&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">checkYear</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!obj.value.match(<span class="regexp">/^\d&#123;4&#125;$/</span>)) &#123;</span></span><br><span class="line"><span class="javascript">          obj.style.borderColor = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          result.innerHTML = <span class="string">&#x27;输入错误，年份为4位数字表示&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        result.innerHTML = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">checkMonth</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!obj.value.match(<span class="regexp">/^((0?[1-9])|(1[012]))$/</span>)) &#123;</span></span><br><span class="line"><span class="javascript">          obj.style.borderColor = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          result.innerHTML = <span class="string">&#x27;输入错误，月份为1~12之间&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        result.innerHTML = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>);             <span class="comment">// &lt;form&gt;元素对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);         <span class="comment">// &lt;div&gt;元素对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);    <span class="comment">// &lt;input&gt;元素集合</span></span></span><br><span class="line"><span class="javascript">      form.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> checkYear(inputs.year) &amp;&amp; checkMonth(inputs.month);</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      inputs.year.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.style.borderColor = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      inputs.month.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.style.borderColor = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.trim) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      inputs.year.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.value.trim();</span></span><br><span class="line"><span class="javascript">        checkYear(<span class="built_in">this</span>);</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      inputs.month.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.value.trim();</span></span><br><span class="line"><span class="javascript">        checkMonth(<span class="built_in">this</span>);</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/9ea4277327e36652b380f6f9a39f5398.png"></p><h2 id="字符限定与分组"><a href="#字符限定与分组" class="headerlink" title="字符限定与分组"></a>字符限定与分组</h2><ul><li>限定符<pre><code>  var reg=/\d&#123;6&#125;/gi; //匹配6个连续出现的数字</code></pre></li></ul><table><thead><tr><th align="center">限定符</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">?</td><td align="center">匹配前面的字符零次或一次</td><td align="center">ht?t</td></tr><tr><td align="center">+</td><td align="center">匹配前面的字符一次或多次</td><td align="center">bre+ad</td></tr><tr><td align="center">*</td><td align="center">匹配前面的字符零次或多次</td><td align="center">ro*se</td></tr><tr><td align="center">{n}</td><td align="center">匹配前面的字符n次</td><td align="center">hit{2}er</td></tr><tr><td align="center">{n,}</td><td align="center">匹配前面的字符最少n次</td><td align="center">hit{2,}er</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配前面的字符最少n次，最多m次</td><td align="center">fe{0,2}</td></tr></tbody></table><ul><li><p>贪婪与懒惰匹配</p><ol><li><p>贪婪匹配表示匹配尽可能多的字符</p></li><li><p>懒惰匹配表示匹配尽可能少的字符</p></li><li><p>在默认情况下，是贪婪匹配，若想实现懒惰匹配，需在上一个限定符后面加上”?”符号</p><pre><code>  var str=&#39;webWEBWebwEb&#39;;  var reg1=/w.*b/gi;   //贪婪匹配  var reg2=/w.*?b/gi;     //懒惰匹配  console.log(reg1.exec(str));   //webWEBWebwEb 获得最先出现的w到最后出现的b  console.log(reg2.exec(str));   //web 获得最先出现的w到最先出现的b</code></pre></li></ol></li></ul><h2 id="括号字符"><a href="#括号字符" class="headerlink" title="括号字符"></a>括号字符</h2><p>被括号字符“()”括起来的内容，称之为”子表达式“</p><ol><li>改变限定符的作用范围<pre><code> //改变前 正则表达式：catch|er 可匹配的结果：catch、er //改变后 正则表达式：cat(ch|er) 可匹配的结果：catch、cater</code></pre></li><li>分组<pre><code> //分组前 正则表达式：abc&#123;2&#125; 可匹配的结果：abcc //分组后 正则表达式： a(bc)&#123;2&#125; 可匹配的结果：abcbc</code></pre></li><li>捕获<br>将子表达式匹配到的内容存储到系统的缓存区中。<pre><code> var res1 = &#39;1234&#39;.match(/\d\d\d\d/g); console.log(res1); //[&quot;1234&quot;] var res2 = &#39;1234&#39;.match(/(\d)(\d)(\d)(\d)/); console.log(res2); // [&quot;1234&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;] var res3 = &#39;1234&#39;.match(/(\d)(\d)(\d)(\d)/g); console.log(res3);  //[&quot;1234&quot;]</code></pre></li><li>反向引用<br>在正则表达式中，获取存放在缓存区内的子表达式的捕获内容，则可以使用”\n“(n&gt;0)的方式引用<pre><code> \1：第一个子表达式捕获的内容 \2：第二个子表达式捕获的内容 var reg1=/(\d)\1\1/gi; 连续三个相同的数字 var reg2=/(\s)(\s)\1\2/gi; ABAB格式</code></pre></li></ol><h2 id="正则相关方法"><a href="#正则相关方法" class="headerlink" title="正则相关方法"></a>正则相关方法</h2><ol><li>RegExp对象 的test()方法：<br>检测正则表达式与指定的字符串是否匹配，返回true或false。<pre><code> var reg = /([A-Z])([A-Z])\1\2/g; console.log(reg.test(&#39;1234&#39;));    //false     console.log(reg.test(&#39;abab&#39;));    //false console.log(reg.test(&#39;CDCD&#39;));    //true console.log(reg.test(&#39;EfEf&#39;));    //false</code></pre></li><li>String对象的search()方法：<br>可以返回指定模式的子串在字符串首次出现的位置，查找失败返回-1。<pre><code> var str = &#39;123*abc.456&#39;; console.log(str.search(&#39;.*&#39;));       //0     console.log(str.search(/[\.\*]/));   //3</code></pre><blockquote><p>search()方法如果传入一个非正则表达式对象，则会将其转换为正则表达式对象</p></blockquote></li><li>String对象的split()方法<br>用于根据指定的分隔符将一个字符串分割成字符串数组，其分割后的字符串数组中不包括分隔符。<br>当分隔符不只一个时，需要定义正则对象才能够完成字符串的分割操作。<pre><code> var str = &#39;test@123.com&#39;; var reg = /[@\.]/; var split_res = str.split(reg); console.log(split_res);    // 输出结果：(3) [&quot;test&quot;, &quot;123&quot;, &quot;com&quot;]</code></pre></li><li>String对象的replace()方法<br>用 newChar 字符替换字符串中出现的所有 searchChar 字符，并返回替换后的新字符串。<pre><code> var str = &#39;test@123.com&#39;; var str_new= str.replace(‘123’,’163’); console.log(str_new);    // 输出结果：test@163.com</code></pre></li></ol><blockquote><p>replace：获取捕获内容，并对捕获内容进行替换</p></blockquote><pre><code>    var str=&#39;12ab34&#39;;    var reg=/(\d)(\d)/gi;    console.log(str.match(reg));    console.log(str.replace(reg,&#39;*&#39;));  //[&quot;12&quot;,[&quot;34&quot;]]  *ab*</code></pre><blockquote><p>$n:获取第n个字表达式捕获的内容</p></blockquote><pre><code>    var str = &#39;Regular Capture&#39;;    var reg = /(\w+)\s(\w+)/gi;    var newStr = str.replace(reg,&#39;$2 $1&#39;);    console.log(newStr);</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内容查找与替换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">float</span>:left;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">20px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>过滤前内容:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;pre&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;过滤&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>过滤后内容:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;res&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义查找并需要替换的内容规则，[\u4e00-\u9fa5]表示匹配任意中文字符</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="regexp">/(bad)|[\u4e00-\u9fa5]/gi</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pre&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newstr = str.replace(reg, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;res&#x27;</span>).innerHTML = newstr;</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/fba47172672ed97909dab0842fe31f3a.png"></p><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单验证<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;case03.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-head&quot;</span>&gt;</span>填写注册信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span>  <span class="comment">&lt;!-- ----- --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span>&gt;</span>   <span class="comment">&lt;!-- ------- --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名称：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;长度4~12，英文大小写字母&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>密　　码：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;长度6~20，大小写字母、数字或下划线&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;repwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码进行确认&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号码：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;13、14、15、17、18开头的11位手机号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>电子邮箱：<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名@域名（域名后缀至少2个字符）&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;case03.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">margin-top</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">font-size</span>:<span class="number">13px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto; <span class="attribute">width</span>: <span class="number">80%</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-head</span>&#123;<span class="attribute">padding</span>:<span class="number">15px</span> <span class="number">20px</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">text-align</span>: center; <span class="attribute">font-size</span>:<span class="number">24px</span>; <span class="attribute">font</span>:bolder;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">th</span>&#123;<span class="attribute">font-weight</span>:normal;<span class="attribute">vertical-align</span>:top;<span class="attribute">padding-top</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:last-child</span>&#123; <span class="attribute">text-align</span>: center;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span>&#123;<span class="attribute">vertical-align</span>:middle;<span class="attribute">font-family</span>:Tahoma,simsun;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,<span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span>&#123;<span class="attribute">border-color</span>: <span class="number">#bbb</span>;<span class="attribute">height</span>: <span class="number">38px</span>;<span class="attribute">font-size</span>: <span class="number">14px</span>;<span class="attribute">border-radius</span>: <span class="number">2px</span>;<span class="attribute">outline</span>: <span class="number">0</span>;<span class="attribute">border</span>: <span class="number">#ccc</span> <span class="number">1px</span> solid;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">350px</span>;<span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;<span class="attribute">margin-bottom</span>: <span class="number">15px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.box-body</span>  <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>, <span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.box-body</span>  <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#56b4ef</span>; <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">05</span>),<span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>,<span class="number">168</span>,<span class="number">236</span>,.<span class="number">6</span>); <span class="attribute">-webkit-transition</span>: box-shadow .<span class="number">5s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#999</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>,  <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#c2c2c2</span>; <span class="attribute">-webkit-transition</span>: color .<span class="number">5s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123;<span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">15px</span>;<span class="attribute">cursor</span>:pointer; <span class="attribute">width</span>:<span class="number">120px</span>; <span class="attribute">height</span>:<span class="number">40px</span>; <span class="attribute">background</span>: <span class="number">#4393C9</span>; <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>; <span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">font</span>:<span class="number">16px</span> bolder;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-class">.error</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#FF3300</span>; <span class="attribute">background</span>: <span class="number">#FFF2E5</span>; <span class="attribute">font-size</span>:<span class="number">10px</span>; <span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">line-height</span>: <span class="number">30px</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>; <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> <span class="selector-class">.success</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#01BE00</span>; <span class="attribute">background</span>: <span class="number">#E6FEE4</span>; <span class="attribute">font-size</span>:<span class="number">10px</span>; <span class="attribute">height</span>: <span class="number">30px</span>; <span class="attribute">line-height</span>: <span class="number">30px</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>; <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">10px</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有input框</span></span><br><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">inputs[<span class="number">0</span>].focus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为每个input框添加失去焦点事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">  inputs[i].onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    inputBlur(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inputBlur</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = obj.name;           <span class="comment">// 获取输入框的name值</span></span><br><span class="line">  <span class="keyword">var</span> val = obj.value;           <span class="comment">// 获取输入框的value值</span></span><br><span class="line">  <span class="keyword">var</span> tips = obj.placeholder;    <span class="comment">// 获取输入框中的提示信息</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// var fu = obj.parentNode;</span></span><br><span class="line">  <span class="comment">// var xiongdi = fu.nextSibling.nextSibling;   //回车会被当成一个文本节点，所以要next两次</span></span><br><span class="line">  <span class="keyword">var</span> tips_obj = obj.parentNode.nextSibling.nextSibling.firstChild;  <span class="comment">// 获取提示信息显示的div元素对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 去掉两端的空白字符</span></span><br><span class="line">  val = val.trim();</span><br><span class="line">  <span class="comment">// 2. 文本框内容为空，给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">    error(tips_obj, <span class="string">&#x27;输入框不能为空&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 获取正则匹配规则和提示信息</span></span><br><span class="line">  <span class="keyword">var</span> reg_msg = getRegMsg(name, tips);</span><br><span class="line">  <span class="comment">// 4. 检测是否否he正则匹配</span></span><br><span class="line">  <span class="keyword">if</span> (reg_msg[<span class="string">&#x27;reg&#x27;</span>].test(val)) &#123;</span><br><span class="line">    <span class="comment">// 匹配成功，显示成功的提示信息</span></span><br><span class="line">    success(tips_obj, reg_msg[<span class="string">&#x27;msg&#x27;</span>][<span class="string">&#x27;success&#x27;</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 匹配失败，显示失败的提示信息</span></span><br><span class="line">    error(tips_obj, reg_msg[<span class="string">&#x27;msg&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据input的name值，设置正则规则及提示信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRegMsg</span>(<span class="params">name, tips</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;username&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^[a-zA-Z]&#123;4,12&#125;$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;用户名输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^\w&#123;6,20&#125;$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;密码输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;repwd&#x27;</span>:</span><br><span class="line">      <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>].value;</span><br><span class="line">      reg = <span class="built_in">RegExp</span>(<span class="string">&quot;^&quot;</span> + con + <span class="string">&quot;$&quot;</span>);</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;两次密码输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;两次输入的密码不一致&#x27;</span>&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;tel&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;手机号码输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;email&#x27;</span>:</span><br><span class="line">      reg = <span class="regexp">/^(\w+(\_|\-|\.)*)+@(\w+(\-)?)+(\.\w&#123;2,&#125;)+$/</span>;</span><br><span class="line">      msg = &#123;<span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;邮箱输入正确&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: tips&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;reg&#x27;</span>: reg, <span class="string">&#x27;msg&#x27;</span>: msg&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">obj, msg</span>) </span>&#123;</span><br><span class="line">  obj.className = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">  obj.innerHTML = msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">obj, msg</span>) </span>&#123;</span><br><span class="line">  obj.className = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">  obj.innerHTML = msg + <span class="string">&#x27;，请重新输入&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/4a94c38f802bec0a3ec225449773b4aa.png"></p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><ul><li>Ajax：Asynchronous JavaScript And XML，即<strong>异步JavaScript和XML技术</strong>。</li><li>描述：不是一门新的语言或技术，是由JavaScript、XML、DOM、CSS等多种已有技术组合而成的一种浏览器端技术。</li><li>功能：<strong>用于实现与服务器进行异步交互的功能</strong>。</li><li>传统Web工作流程<br>每当用户触发一个页面HTTP请求，就需要服务器返回一个新的页面<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/594e68fd5921f40c42a89634c094311c.png"></li><li>Ajax工作流程<br>页面通过Ajax对象与服务器进行通信，然后通过DOM操作将返回的结果更新到页面中，整个过程都是在同一个页面中进行的<br>Ajax技术的创新之处在于，改善了传统的“请求-等待-响应-刷新-返回数据”模式，在信息返回之前，用户可以继续自己的操作，当前页面不会因为请求而刷新。这样大大的提高了交互性。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/13af6098b6a7580165ed0f207fc830be.png"></p><ul><li>相较于传统页面，Ajax技术的优势具体有以下几个方面：<ol><li>减轻服务器的负担</li><li>节省带宽</li><li>用户体验更好</li></ol></li></ul><h2 id="PHP服务器"><a href="#PHP服务器" class="headerlink" title="PHP服务器"></a>PHP服务器</h2><ul><li>服务器：若需要网页能被互联网中的其它用户访问，就要将网页发布到服务器上，用户通过网址来访问。</li><li>常用服务器：PHP、Java、Node.js、ASP.NET等</li><li>PHP是一种运行于服务器端的嵌入式脚本编程语言，内置了一个Web服务器。</li><li>PHP开发环境搭建：<ol><li>下载PHP、vc运行库、补丁（可能）<br>进入官网<a href="http://php.net/">http://php.net</a>下载PHP7.3.11版本(可以下最新版本)，得到一个压缩包，并解压到指定目录<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/e9e630ef5310e3350faf7c040c6c23d1.png"></li><li>创建目录<br>创建”<code>D:\web\php7.3</code>“作为PHP的安装目录，创建”<code>D:\web\htdocs</code>“作为站点目录</li><li>启动内置服务器<br>压缩包解压到“D:\web\php7.1”目录下，启动cmd命令行工具，<strong>切换目录到该目录中</strong>，执行以下命令<pre><code>  php -S localhost:8081 -t &quot;D:\web\htdocs&quot;</code></pre>上述命令中，”-S”用于启动内置Web服务器（S为大写），后面接网络地址和端口号，”-t”用于指定站点目录，此处为”D:\web\htdocs”</li><li>常见错误<br>”php“不是内部或外部命令,也不是可运行的程序或批处理文件，这是因为没有配置php的path环境变量。找到php的安装路径(包括压缩包名称)复制新建到path中<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/5463e84058f29b072b863d4561c12f87.png"><br>在cmd命令中php安装目录下下执行<pre><code> php -version</code></pre>显示版本信息即成功，其他情况可能是8081端口号被占用所造成。</li></ol></li></ul><h2 id="Ajax向服务器发送请求"><a href="#Ajax向服务器发送请求" class="headerlink" title="Ajax向服务器发送请求"></a>Ajax向服务器发送请求</h2><p>使用Ajax需要通过XMLHttpRequest构造函数创建Ajax对象。</p><pre><code>    var xhr=new XMLHttpRequest();</code></pre><p>创建完成后就可以使用该对象提供的方法向服务器发送请求。</p><ol><li><p><strong>open()</strong><br>open()方法用于创建一个新的HTTP请求，并指定请求方式、请求URL等。</p><pre><code> open(&#39;method&#39;,&#39;URL&#39;[,asyncFlag[,&#39;username&#39;[,&#39;password&#39;]]]) method：用于指定请求方式，如GET、POST，不区分大小写。 URL：表示请求的地址。 asyncFlag：可选参数，用于指定请求方式，同步请求为false，默认为异步请求true。 userName和password：可选参数，表示HTTP认证的用户名和密码。</code></pre><blockquote><p>同步请求和异步请求的区别在于是否阻塞代码的执行，默认的异步方式是非阻塞的，浏览器端的JS程序不用等待Web服务器的响应，可以继续处理其他事情，而同步则等待Web服务器的响应。</p></blockquote></li><li><p><strong>send()</strong><br>send()方法用于发送请求到Web服务器并接收响应。</p><pre><code> send(content)</code></pre></li><li><p><strong>setRequestHeader()</strong><br>setRequestHeader()方法用于单独指定某个HTTP请求头。</p><pre><code> setRequestHeader(&#39;header&#39;,&#39;value&#39;);</code></pre></li></ol><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><ul><li><p>Get方式适合从服务器获取数据<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/1b14211b511540f6ef19a042cb403f8c.png"><br>在PHP服务器的Web站点目录<code>D:\web\htdocs</code>中，创建demo.html文件，编码实现Ajax请求，具体如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();        <span class="comment">//①创建Ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//onreadystatechange：监听Ajax状态变化（Ajax状态发生改变时触发此函数）</span></span></span><br><span class="line"><span class="javascript"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//④监听</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//readyState属性：表示Ajax状态，如为XMLHttpRequst.DONE表示此次已完成响应。</span></span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">if</span>(<span class="params">xhr.readyState==XMLHttpRequest.DONE</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">if</span>(<span class="params">xhr.status==<span class="number">200</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;test.php?a=1&amp;b=2&quot;</span>);  <span class="comment">//②打开，建立HTTP连接</span></span></span><br><span class="line"><span class="javascript">xhr.send();<span class="comment">//③发送请求</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和html文件同目录下创建<code>test.php</code>文件，写入以下信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> json_encode($_GET);  <span class="comment">//将URL参数转换为JSON输出</span></span><br></pre></td></tr></table></figure><p>然后启动PHP服务器后，在浏览器输入<a href="http://localhost:8081/demo.html">http://localhost:8081/demo.html</a>,<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/0523753cebb4c82cdb09cfa7eaff7436.png"></p></li><li><p>监听Ajax状态</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/27b7857f2e02fc707559e9fe9d126617.png"></p><p><strong>处理服务器返回的信息</strong></p><ul><li><strong>readyState属性</strong><br>readyState属性用于获取Ajax的当前状态，状态值有5种形式。</li></ul><table><thead><tr><th align="center">状态值</th><th align="center">XMLHttpRequest静态属性名</th><th align="center">说明</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">UNSET</td><td align="center">未发送</td><td align="center">对象已创建</td></tr><tr><td align="center">1</td><td align="center">OPENED</td><td align="center">已打开</td><td align="center">open()方法已调用</td></tr><tr><td align="center">2</td><td align="center">HEADERS_RECEIVED</td><td align="center">收到响应头</td><td align="center">send()方法已调用</td></tr><tr><td align="center">3</td><td align="center">LOADING</td><td align="center">数据传送中</td><td align="center">响应体部分正在被接收</td></tr><tr><td align="center">4</td><td align="center">DONE</td><td align="center">完成</td><td align="center">数据接收完</td></tr></tbody></table><ul><li><p><strong>onreadystatechange属性</strong></p><p>  onreadystatechange事件属性用于感知readyState属性状态的改变，当readyState状态发送改变时，就会调用此事件。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState);</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;test.php&#x27;</span>);</span><br><span class="line">xhr.send(); </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到readyState属性值初始值为0，当调用open()和send()方法后，readyState属性的值会发生变化，每次变化都会触发onreadystatechange事件。</p><ul><li><strong>status属性</strong><br>status属性用于返回当前请求的HTTP状态码，值为数值类型</li></ul><table><thead><tr><th align="center">状态码</th><th align="center">含义</th><th align="center">状态码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">正常</td><td align="center">403</td><td align="center">禁止</td></tr><tr><td align="center">301</td><td align="center">永久移动</td><td align="center">404</td><td align="center">找不到</td></tr><tr><td align="center">302</td><td align="center">临时移动</td><td align="center">500</td><td align="center">内部服务器错误</td></tr><tr><td align="center">304</td><td align="center">未修改</td><td align="center">502</td><td align="center">无效网关</td></tr><tr><td align="center">401</td><td align="center">未经授权</td><td align="center">504</td><td align="center">网关超时</td></tr></tbody></table><ul><li><p><strong>获取响应信息的相关属性</strong></p><table><thead><tr><th align="center">属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">responseText</td><td align="center">将响应信息作为字符串返回</td></tr><tr><td align="center">responseXML</td><td align="center">将响应信息格式为XML Document对象并返回(只读)</td></tr></tbody></table></li><li><p><strong>服务端代码简介</strong></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> json_encode($_GET);  <span class="comment">//将URL参数转换为JSON输出</span></span><br></pre></td></tr></table></figure><ol><li>$_GET：GET方式提交到服务器端的数据(必须大写)</li><li>json_encode：将参数转换为json格式</li><li>echo：输出，返回给客户端</li></ol><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><ul><li>Post方式适合向服务器发送数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/d29da1c5cf33939f7d3d2f50ef6f3e9f.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">       xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">if</span>(<span class="params">xhr.readyState==XMLHttpRequest.DONE</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="function"><span class="title">if</span>(<span class="params">xhr.status==<span class="number">200</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="javascript">       xhr.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;test.php&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//在HTTP请求头中指定实体内容的编码格式</span></span></span><br><span class="line"><span class="javascript">       xhr.setRequestHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript">       <span class="comment">// xhr.send(&#x27;name=Lily&amp;age=18&#x27;);</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> name = <span class="string">&#x27;Lily&#x27;</span>;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> age = <span class="number">18</span>;</span></span><br><span class="line"><span class="javascript">       xhr.send(<span class="string">&#x27;name=&#x27;</span> + name + <span class="string">&#x27;&amp;age=&#x27;</span> + age);</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> json_encode($_POST);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/4b86a86cd1d2681938bb6c9c9e575f8b.png"></p><ul><li><p>通过POST方式向服务器发送ajax请求须设置请求头字段，且在open方法后调用。</p><pre><code>  Content-Type：application/x-www-form-urlencoded</code></pre></li><li><p>拓展阅读<br><a href="https://www.cnblogs.com/qlhMeiMei/p/6846392.html">https://www.cnblogs.com/qlhMeiMei/p/6846392.html</a></p></li><li><p>如果需要传递特殊字符时，可以使用<code>encodeURIComponent()</code>进行URL编码</p><pre><code>  var url=&#39;http://xxx/test.php?name=&#39;+encodeURIComponent(&#39;A&amp;B C&#39;);;  console.log(url);//结果输出：http://xxx/test.php?name=A%26B%20C</code></pre></li></ul><p>在经过URL编码后，”&amp;”被转化为”%26”，空格被转换为”%20”，当服务器收到已编码的内容之后，会对其进行解码，从而正确识别。</p><pre><code>    var str=&#39;A%26B%20C&#39;;    console.log(encodeURIComponent(str)); //输出结果：A&amp;B C</code></pre><h2 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h2><ul><li>XML</li><li>JSON<br>JSON是一种轻量级的数据交换格式，它采用完全独立于语言的文本格式。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/7193183d914eb22d6ade0fab7baeda89.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//stringify：将对象转换为JSON字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(obj);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">if</span>(<span class="params">xhr.readyState==XMLHttpRequest.DONE</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">if</span>(<span class="params">xhr.status==<span class="number">200</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var json_res = xhr.responseText;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//JSON.parse：将JSON字符串转换成JS对象。</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var obj_res = JSON.parse(json_res);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//obj.name：JSON对象的成员。</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// document.write(obj_res.name);</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(xhr.responseText);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;test.php&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        xhr.send(<span class="string">&#x27;msg=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(json));</span></span><br><span class="line"><span class="javascript">        <span class="comment">//encodeURIComponet：对字符串进行URI编码</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> $_POST[<span class="string">&#x27;msg&#x27;</span>];</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/04d7091a2a8d37f98eb4611d5fcdc164.png"></p><h2 id="无刷新分页"><a href="#无刷新分页" class="headerlink" title="无刷新分页"></a>无刷新分页</h2><ul><li><p>代码思路</p><ol><li>首先读取第一页（客户端提交1，服务端返回第1页内容的json数据）；</li><li>根据点击的按钮，读取相应页。</li></ol></li><li><p>自调用函数<br>用（）包裹匿名函数，其后的（）表示给匿名函数传递参数并立即执行，完成函数的自调用。</p><pre><code>  自调用函数：  ( function  函数名()&#123;      代码;  &#125;) ( )； </code></pre></li><li><p>回调函数<br>若想要函数体中某部分功能由调用者决定，此时可以使用回调函数。<br>简单说，在一个函数执行完毕后，得到想要的特定数据后再去执行的函数，即为回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">f2,f3</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;11111&quot;</span>);</span><br><span class="line">f2();</span><br><span class="line">f3();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;22222&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">f1(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;33333&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;44444&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11111</span></span><br><span class="line"><span class="comment">33333</span></span><br><span class="line"><span class="comment">44444</span></span><br><span class="line"><span class="comment">22222</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p> 继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用原型对象实现继承</span></span><br><span class="line">Person.prototype.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好，我是&quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Person(<span class="string">&#x27;Jim&#x27;</span>);</span><br><span class="line">p1.sayHello();</span><br></pre></td></tr></table></figure></li><li><p>源码解析</p><ol><li>构造函数PageList：封装页面信息，并添加点击事件实现与用户的交互。</li><li>构造函数Comment：向服务器发送ajax请求，获取评论内容，并将服务器返回的JSON数据放入页面中显示出来。</li><li>源码解析–PageList：封装页面信息，并添加点击事件实现与用户的交互。</li><li>页面信息：<br>   页面元素：首页、尾页、上一页、下一页、页码<br>   数据（变量）：页码、总共页数</li><li>点击事件：<br>  为四个页面元素添加onclick事件，以更新页面内容。</li><li>函       数:<br> 根据页码更新页面内容。</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#eee</span>;<span class="attribute">margin</span>:<span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">800px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">background</span>:<span class="number">#fefefe</span>;<span class="attribute">border-radius</span>:<span class="number">8px</span>;<span class="attribute">padding</span>:<span class="number">20px</span>;<span class="attribute">box-sizing</span>:border-box;<span class="attribute">margin-top</span>:<span class="number">40px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.title</span>&#123;<span class="attribute">font-family</span>:<span class="string">&#x27;Microsoft YaHei&#x27;</span>;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">24px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.comment</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">list-style</span>:none;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.comment</span> <span class="selector-tag">li</span>&#123;<span class="attribute">line-height</span>:<span class="number">32px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span>&#123;<span class="attribute">margin-top</span>:<span class="number">20px</span>;<span class="attribute">text-align</span>:center&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span> <span class="selector-tag">span</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">2px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span> <span class="selector-tag">button</span>&#123;<span class="attribute">padding</span>:<span class="number">6px</span> <span class="number">10px</span>;<span class="attribute">cursor</span>:pointer&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.pagelist</span> <span class="selector-tag">button</span><span class="selector-pseudo">:disabled</span>&#123;<span class="attribute">cursor</span>:default&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.progress</span> <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">0%</span>;<span class="attribute">height</span>:<span class="number">1px</span>;<span class="attribute">position</span>:fixed;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">background-color</span>:<span class="number">#38f</span>;<span class="attribute">box-shadow</span>:<span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#6bf</span>;<span class="attribute">transition</span>: all <span class="number">0.8s</span>&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>查看商品评论<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagelist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前是第<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_first&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_prev&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_next&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;page_last&quot;</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">PageList</span>(<span class="params">options</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> options) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>[i] = options[i];</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> obj = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.first.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = 1;</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.prev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = (obj.page &gt; 1) ? (obj.page - 1) : 1;</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.next.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = (obj.page &gt;= obj.maxPage) ? obj.maxPage : (obj.page + 1);</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.last.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    obj.page = obj.maxPage;</span><br><span class="line">                    obj.onChange();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.obj = obj;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            Comment.prototype.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url, start, complete</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            if (xhr.readyState === 4) &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">              if (xhr.status <span class="tag">&lt; <span class="attr">200</span> || <span class="attr">xhr.status</span> &gt;</span>= 300 &amp;&amp; xhr.status !== 304) &#123;</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;服务器异常&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(xhr.responseText);</span></span><br><span class="line"><span class="javascript">              &#125; <span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;解析服务器返回信息失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">              complete(json);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;GET&#x27;</span>, url);</span></span><br><span class="line">          xhr.send();</span><br><span class="line">          start();</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">         Comment.prototype.create = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span></span><br><span class="line"><span class="javascript">            html += <span class="string">&#x27;&lt;ul&gt;&lt;li&gt;用户名：&#x27;</span> + data[i].user + <span class="string">&#x27;　发表时间：&#x27;</span> + data[i].time + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            html += &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#x27; + data[i].content + &#x27;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;;</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.obj.innerHTML = html;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> comment = <span class="keyword">new</span> Comment(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;comment&#x27;</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pageList =<span class="keyword">new</span> PageList(&#123;</span></span><br><span class="line">                page: 1,</span><br><span class="line">                maxPage: 1,</span><br><span class="line"><span class="javascript">                first: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_first&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                prev: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_prev&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                next: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_next&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                last: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_last&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                pageNum: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;page_num&#x27;</span>),</span></span><br><span class="line"><span class="javascript">                onChange:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    comment.ajax(<span class="string">&#x27;data.php?page=&#x27;</span> + <span class="built_in">this</span>.page,</span></span><br><span class="line"><span class="javascript">                        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//start回调函数</span></span></span><br><span class="line"></span><br><span class="line">                        &#125;,</span><br><span class="line"><span class="javascript">                        <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123; <span class="comment">//complete回调函数</span></span></span><br><span class="line">                            pageList.maxPage = json.maxPage;</span><br><span class="line">                            comment.create(json.data);</span><br><span class="line">                        &#125;</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            pageList.onChange();</span><br><span class="line">        &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义data数组，包含10个元素，每个元素表示1条评论</span></span><br><span class="line">$data = [</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论111&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论222&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论233&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">4</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论444&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论555&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">6</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论666&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">7</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论777&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">8</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论888&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">9</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论999&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;time&#x27;</span> =&gt; <span class="string">&#x27;2018-01-01&#x27;</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;评论1010&#x27;</span>],</span><br><span class="line">];</span><br><span class="line">$page = <span class="keyword">isset</span>($_GET[<span class="string">&#x27;page&#x27;</span>]) ? max((<span class="keyword">int</span>)$_GET[<span class="string">&#x27;page&#x27;</span>], <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">$size = <span class="number">2</span>;</span><br><span class="line">$maxPage = ceil(count($data) / $size);</span><br><span class="line"><span class="keyword">echo</span> json_encode([</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span> =&gt; array_slice($data, ($page - <span class="number">1</span>) * $size, $size),</span><br><span class="line">    <span class="string">&#x27;maxPage&#x27;</span> =&gt; $maxPage</span><br><span class="line">]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">page：获取用户端请求的页码值。</span></span><br><span class="line"><span class="comment">size：每页返回的记录数。</span></span><br><span class="line"><span class="comment">maxPage：计算总页数。</span></span><br><span class="line"><span class="comment">json_encode:返回“根据当前页码查询的记录”和“总页数”。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><ul><li>基本概念<ol><li>jQuery：一款优秀的JavaScript框架库，封装了很多的JavaScript函数。</li><li>作用：简化了HTML与JavaScript之间的操作，使得DOM对象、事件处理、动画效果、Ajax等操作的实现语法更加简洁，提高了程序的开发效率，消除很多跨浏览器的兼容问题。</li></ol></li><li>下载jQuery<ol><li>官方网址：<a href="http://jquery.com/">http://jquery.com</a></li><li>jQuery官网引用地址最近国内访问会经常出现打不开的情况，可以戳<a href="https://www.jq22.com/jquery-info122">jQuery插件库</a></li><li><a href="https://www.runoob.com/jquery/jquery-tutorial.html">jQuery|菜鸟教程</a></li></ol></li><li>引入jQuery<ol><li>下载：minified（压缩版，去掉注释和空白行，引入本地下载的jQuery。<pre><code> &lt;script src=&quot;jquery-1.12.4.min.js&quot;&gt;&lt;/scirpt&gt;</code></pre></li><li>CDN：内容分发网络，通过CDN的优势可以加快jQuery文件的访问速度<pre><code> &lt;script   src=&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot; &gt;&lt;/script&gt;</code></pre></li></ol></li><li>使用jQuery</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">在HTML页面中创建<span class="tag">&lt;<span class="name">h2</span>&gt;</span>元素，该元素含有文本“测试”和“居中”属性的。</span><br><span class="line">*/</span><br><span class="line">//html实现</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">‘center’</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//JS实现</span><br><span class="line">var h2 = document.createElement(&#x27;h2&#x27;); </span><br><span class="line">var text = document.createTextNode(‘测试’); </span><br><span class="line">var attr = document.createAttribute(&#x27;align&#x27;);</span><br><span class="line">attr.value = ‘center’; </span><br><span class="line">h2.setAttributeNode(attr);  </span><br><span class="line">h2.appendChild(text); </span><br><span class="line">document.querySelector(&#x27;body&#x27;).appendChild(h2);</span><br><span class="line">//jQuery实现</span><br><span class="line">//美元符号$表示jQuery类，也就是说&quot;$()&quot;等价于&quot;jQuery()&quot;,即jQuery的构造函数。</span><br><span class="line">$(&#x27;<span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#x27;).appendTo(&#x27;body&#x27;);</span><br></pre></td></tr></table></figure><h2 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h2><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><p><strong>语法：$(选择器)</strong></p><ul><li>基本选择器、层级选择器</li><li>基本过滤选择器、内容选择器</li><li>可见性选择器、属性选择器</li><li>子元素选择器、表单选择器</li></ul><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><p>基本选择器常用的有标签选择器、类选择器和ID选择器</p><table><thead><tr><th align="center">CSS选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">li{color:red}</td><td align="center">根据指定元素名匹配所有元素</td><td align="center">${“li”}</td></tr><tr><td align="center">.bar{color:red}</td><td align="center">根据指定类名匹配所有元素</td><td align="center">${“.bar”}</td></tr><tr><td align="center">#btn{color:red}</td><td align="center">根据指定id匹配一个元素</td><td align="center">${“#bar}”</td></tr><tr><td align="center">li,.bar,#btn{color:red}</td><td align="center">同时获取多个元素</td><td align="center">${“li,p,div”}</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/b0ece8129f371bfe621892437397d7a0.png"></p><h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">示例</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">selector selector1</td><td align="center">$(“div .test”)</td><td align="center">选取&lt;div&gt;下所有class名为test的元素（多级）</td></tr><tr><td align="center">parent &gt; child</td><td align="center">$(“.box &gt; .con”)</td><td align="center">选取class名为box下的所有class名为con的子元素（一级）</td></tr><tr><td align="center">prev + next</td><td align="center">$(“div + .title”)</td><td align="center">获取紧邻&lt;div&gt;的下一个class名为title的兄弟节点</td></tr><tr><td align="center">prev ~ siblings</td><td align="center">$(“.bar ~ li”)</td><td align="center">获取class名为bar的元素后的所有同级元素节点&lt;li&gt;</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/991e6bf8bb02ade1e9fb757b2dabbcc3.png"></p><h4 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">示例</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">:first</td><td align="center">$(“li : first”)</td><td align="center">获取第1个&lt;li&gt;元素</td></tr><tr><td align="center">:last</td><td align="center">$(“li : last”)</td><td align="center">获取最后1个&lt;li&gt;元素</td></tr><tr><td align="center">:even</td><td align="center">$(“li :even”)</td><td align="center">获取所有li元素中，索引为偶数的奇数行数据,从0开始</td></tr><tr><td align="center">:odd</td><td align="center">$(“li :odd”)</td><td align="center">获取所有li元素中，索引为奇数数的偶数行数据，从0开始</td></tr><tr><td align="center">:eq(index)</td><td align="center">$(“li:eq(3)”)</td><td align="center">获取索引为3的li元素</td></tr><tr><td align="center">:gt(index)</td><td align="center">$(“li :eq(3)”)</td><td align="center">获取索引大于3的li元素</td></tr><tr><td align="center">:It(index)</td><td align="center">$(“li :It(3)”)</td><td align="center">获取索引小于3的li元素</td></tr><tr><td align="center">:not(seletor)</td><td align="center">$(“li :not(li:qe(3))”)</td><td align="center">获取除指定选择器外的其他元素，获取除索引为3的li元素</td></tr><tr><td align="center">:focus</td><td align="center">$(“inputs:focus”)</td><td align="center">匹配当前获取焦点的input元素</td></tr><tr><td align="center">:animated</td><td align="center">#(“div:not(:animated)”)</td><td align="center">匹配当前没有执行动画的div元素</td></tr></tbody></table><h4 id="内容选择器"><a href="#内容选择器" class="headerlink" title="内容选择器"></a>内容选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">:contains(text)</td><td align="center">获取内容包含1text文本的元素</td><td align="center">&amp;(“li:contains(‘js’)”)获取内容中含’js’的li元素</td></tr><tr><td align="center">:empty</td><td align="center">获取内容为空的元素</td><td align="center">$(“li:empty”)获取内容为空的li元素</td></tr><tr><td align="center">:has(selector)</td><td align="center">获取内容包含指定选择器元素</td><td align="center">$(“li:has(‘a’)”)获取内容中含a元素的所有li元素</td></tr><tr><td align="center">:parent</td><td align="center">获取内容不为空的元素(特殊)</td><td align="center">$(“li:parent”)获取内容不为空的li元素</td></tr></tbody></table><h4 id="可见性选择器"><a href="#可见性选择器" class="headerlink" title="可见性选择器"></a>可见性选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">:hidden</td><td align="center">获取所有隐藏元素</td><td align="center">$(“li:hidden”)获取所有隐藏的li元素</td></tr><tr><td align="center">:visible</td><td align="center">获取所有可见元素</td><td align="center">$(“li:visible”)获取所有可见的li元素</td></tr></tbody></table><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">[attr]</td><td align="center">获取具体指定属性的元素</td><td align="center">$(“div[class]”)获取含有class属性的所有div元素</td></tr><tr><td align="center">[attr=value]</td><td align="center">获取属性值等于value的元素</td><td align="center">$(“div[class=current]”)获取class等于current的所有div元素</td></tr><tr><td align="center">[attr！=value]</td><td align="center">获取属性值不等于value的元素</td><td align="center">$(“div[class！=current]”)获取class不等于current的所有div元素</td></tr><tr><td align="center">[attr^=value]</td><td align="center">获取属性值以value开始的元素</td><td align="center">$(“div[class^box]”)获取class以box开始的所有div元素</td></tr><tr><td align="center">[attr$=value]</td><td align="center">获取属性值以value结尾的元素</td><td align="center">$(“div[class$box]”)获取class以box结尾的所有div元素</td></tr><tr><td align="center">[attr*=value]</td><td align="center">获取属性值包含value的元素</td><td align="center">$(“div[class*=’-‘]”)获取class含有’-‘的所有div元素</td></tr><tr><td align="center">[attr~=value]</td><td align="center">获取元素的属性值包含一个value，以空格隔开</td><td align="center">$(“div[class~=’box’]”)获取class属性值等于’box’或通过空格分隔并含有box的div元素，如”t box”</td></tr><tr><td align="center">[attr1][attr2]…[attrN]</td><td align="center">获取同时拥有多个属性的元素</td><td align="center">$(“input[id][name$=’usr’]”)获取同时含有id属性和属性值以usr结尾的name属性的input元素</td></tr></tbody></table><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">:nth-child(index/even/odd/公式)</td><td align="center">索引index默认从1开始，匹配指定index索引、偶数、奇书、或符合指定公式(如2n,n默认从0开始)的子元素</td></tr><tr><td align="center">:first-child</td><td align="center">获取第一个子元素</td></tr><tr><td align="center">:last-child</td><td align="center">获取最后一个子元素</td></tr><tr><td align="center">:only-child</td><td align="center">如果当前元素时唯一的子元素，则匹配</td></tr><tr><td align="center">:nth-last-child(index/even/odd/公式)</td><td align="center">选择所有它们父元素的第n个子元素，计数从最后一个元素开始到第一个</td></tr><tr><td align="center">:nth-of-type(index/even/odd/公式)</td><td align="center">选择同一个父元素之下，并且标签名相同的子元素中的第n个子元素</td></tr><tr><td align="center">:first-of-type</td><td align="center">选择所有相同的元素名称的第一个子元素</td></tr><tr><td align="center">:last-of-type</td><td align="center">选择所有相同的元素名称的最后一个子元素</td></tr><tr><td align="center">:only-of-type</td><td align="center">选择所有没有兄弟元素，且具有相同的元素名称的元素</td></tr><tr><td align="center">:nth-last-of-type(index/even/odd/公式)</td><td align="center">选择所有它们的父级元素的第n个子元素，计数从最后一个元素开始到第一个</td></tr></tbody></table><h4 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h4><table><thead><tr><th align="center">选择器</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">:input</td><td align="center">获取页面中的所有表单元素，包含select元素和textarea元素</td></tr><tr><td align="center">:text</td><td align="center">选取页面中的所有文本框</td></tr><tr><td align="center">:password</td><td align="center">选取所有的密码框</td></tr><tr><td align="center">:radio</td><td align="center">选取所有的单选按钮</td></tr><tr><td align="center">:checkbox</td><td align="center">选取所有的复选框</td></tr><tr><td align="center">:submit</td><td align="center">获取submit提交按钮</td></tr><tr><td align="center">:reset</td><td align="center">获取reset重置按钮</td></tr><tr><td align="center">:image</td><td align="center">获取type=”image”的图像域</td></tr><tr><td align="center">:button</td><td align="center">获取button按钮，包括button标签和type=”button”</td></tr><tr><td align="center">:file</td><td align="center">获取type=”file”的文件域</td></tr><tr><td align="center">:hidden</td><td align="center">获取隐藏表单项</td></tr><tr><td align="center">:enabled</td><td align="center">获取所有可用表单元素</td></tr><tr><td align="center">:disabled</td><td align="center">获取所有不可用表单元素</td></tr><tr><td align="center">:checked</td><td align="center">获取所有选中的表单元素，主要针对radio和checkbox</td></tr><tr><td align="center">:selected</td><td align="center">获取所有可用表单元素，主要针对select</td></tr></tbody></table><h4 id="元素筛选函数"><a href="#元素筛选函数" class="headerlink" title="元素筛选函数"></a>元素筛选函数</h4><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">$(“ul”).find(“span”)</td><td align="center">返回&lt;ul&gt; 后代中所有的&lt;span&gt; 元素</td></tr><tr><td align="center">$(“ul”).siblings(“span”))</td><td align="center">返回与&lt;ul&gt; 同级的所有的 &lt;span&gt; 元素</td></tr><tr><td align="center">$(“ul”).next(“span”))</td><td align="center">匹配&lt;ul&gt;紧邻的同级的下一个&lt;span&gt;元素</td></tr><tr><td align="center">$(“ul”). prev(“span”))</td><td align="center">匹配&lt;ul&gt;紧邻的同级的上一个&lt;span&gt;元素</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/ce1673e1b45dc9421d7a6c4652b96f37.png"></p><p>获取第三层的第一个li</p><pre><code>    $(&#39;#fold&gt;ul&gt;li:first&#39;)</code></pre><p>通过上面的li，获得其下class为wrap的元素</p><pre><code>    $(&#39;#fold&gt;ul&gt;li:first&#39;).find(&#39;.wrap&#39;);</code></pre><h4 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h4><p>each()方法可以对元素进行遍历</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>IOS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//each参数：回调函数</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.og(<span class="string">&quot;第&quot;</span>+(index+<span class="number">1</span>)+<span class="string">&#x27;个:&#x27;</span>+$(element).text());</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript"><span class="comment">//each：遍历选择器匹配到的所有&lt;li&gt;元素</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//index：当前元素的索引位置</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//element：当前元素</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//text():函数，元素的文本</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">第1个:PHP</span><br><span class="line">第2个:IOS</span><br><span class="line">第3个:JAVA</span><br><span class="line">第4个:JS</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h4><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">html()</td><td align="center">获取第一个匹配元素的HTML内容</td></tr><tr><td align="center">html(content)</td><td align="center">设置第一个匹配元素的HTML内容</td></tr><tr><td align="center">text()</td><td align="center">获取所有匹配元素包含的文本内容组合起来的文本</td></tr><tr><td align="center">text(content)</td><td align="center">设置所有匹配元素的文本内容</td></tr><tr><td align="center">val()</td><td align="center">获取表单元素的value值</td></tr><tr><td align="center">val(value)</td><td align="center">设置表单元素的value值</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>ios<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.min.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(element).text(<span class="string">&#x27;修改后的内容&#x27;</span> + index);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;第&quot;</span> + (index+<span class="number">1</span>) + <span class="string">&#x27;个:&#x27;</span></span></span><br><span class="line"><span class="javascript">                + $(element).text());</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/63efebe8bea84d084a689d34e0d14a17.png"></p><h4 id="元素样式"><a href="#元素样式" class="headerlink" title="元素样式"></a>元素样式</h4><pre><code>    var ele=$(&#39;div&#39;);    ele.css(&#123;border:&#39;2px solid black&#39;,backgroundColor:&#39;#ccc&#39;&#125;);    var w=ele.css(&#39;width&#39;);    var h=ele.css(&#39;height&#39;);    ele.css(&#39;width&#39;,&#39;200px&#39;);    ele.css(&#39;height&#39;,&#39;200px&#39;);</code></pre><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">css(name)</td><td align="center">name:样式名称，获得样式的值</td></tr><tr><td align="center">css(properties)</td><td align="center">properties：键值对形式的对象，设置样式值</td></tr><tr><td align="center">css(name,value)</td><td align="center">设置样式的值</td></tr><tr><td align="center">width()/width(value)</td><td align="center">获取/设置第一个匹配元素的当前宽度值</td></tr><tr><td align="center">height()/height(value)</td><td align="center">获取/设置第一个匹配元素的当前高度值</td></tr><tr><td align="center">offset()</td><td align="center">获取元素的位置，返回的是一个对象，包含left和top属性</td></tr><tr><td align="center">offset(properties)</td><td align="center">利用对象设置元素的位置，必须包含left和top属性</td></tr></tbody></table><h4 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h4><pre><code>    $(element).prop(&#39;checked&#39;,false);</code></pre><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">attr(name)</td><td align="center">取得第一个匹配元素的属性值，否则返回undefined</td></tr><tr><td align="center">attr(properties)</td><td align="center">将一个键值对形式的对象设置为所有匹配元素的属性</td></tr><tr><td align="center">attr(name,value)</td><td align="center">为所有匹配的元素设置一个属性值</td></tr><tr><td align="center">removeAtrre(name)</td><td align="center">从每一个匹配的元素中删除一个属性</td></tr><tr><td align="center">prop(name)</td><td align="center">取得第一个匹配元素的属性值，否则返回undefined</td></tr><tr><td align="center">prop(properties)</td><td align="center">将一个键值对形式的对象设置为所有匹配元素的属性</td></tr><tr><td align="center">prop(name,value)</td><td align="center">为所有匹配的元素设置一个属性值</td></tr></tbody></table><blockquote><p>attr（）和prop（）只能获取第一个匹配元素的属性值。<br>操作状态，如checked、selected、disabled时(有true/false)用prop；其它用attr。</p></blockquote><h4 id="元素基本属性"><a href="#元素基本属性" class="headerlink" title="元素基本属性"></a>元素基本属性</h4><table><thead><tr><th align="center">语法</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">addClass(class)</td><td align="center">追加样式</td><td align="center">为每个匹配的元素追加指定的类名</td></tr><tr><td align="center">removeClass(class)</td><td align="center">移除样式</td><td align="center">从所有匹配的元素中删除全部或者指定的类</td></tr><tr><td align="center">toggleClass(class)</td><td align="center">切换样式</td><td align="center">判断指定类是否存在，存在则删除，不存在则添加</td></tr><tr><td align="center">hasClass(class)</td><td align="center">判断样式</td><td align="center">判断元素是否具有class样式</td></tr></tbody></table><h4 id="折叠菜单-1"><a href="#折叠菜单-1" class="headerlink" title="折叠菜单"></a>折叠菜单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">150px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#515E7B</span>;<span class="attribute">margin</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span>&#123;<span class="attribute">background</span>:<span class="number">#515E7B</span>;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">line-height</span>:<span class="number">40px</span>;<span class="attribute">padding-left</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:underline;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.wrap</span> &#123;<span class="attribute">width</span>:<span class="number">150px</span>;<span class="attribute">display</span>:none;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.wrap</span> <span class="selector-tag">li</span>&#123;<span class="attribute">background</span>: <span class="number">#fff</span>;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.wrap</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#3B475F</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fold&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>信息管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>未读信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>已读信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>信息列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商品分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>权限设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 默认第一个显示：css--display:block</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.wrap:first&quot;</span>).css(<span class="string">&#x27;display&#x27;</span>,<span class="string">&#x27;block&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加点击事件，当前显示,其它隐藏</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#fold&gt;ul&gt;li&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//无需遍历，直接添加事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).siblings(<span class="string">&#x27;li&#x27;</span>).find(<span class="string">&#x27;.wrap&#x27;</span>).css(&#123;<span class="attr">display</span>:<span class="string">&#x27;none&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).find(<span class="string">&#x27;.wrap&#x27;</span>).css(&#123;<span class="attr">display</span>:<span class="string">&#x27;block&#x27;</span>&#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/91b2836348482ddd0439b8c1de7080b9.png"></p><h2 id="DOM节点操作-1"><a href="#DOM节点操作-1" class="headerlink" title="DOM节点操作"></a>DOM节点操作</h2><h3 id="节点追加-1"><a href="#节点追加-1" class="headerlink" title="节点追加"></a>节点追加</h3><p>content是一段字符串形式的HTML代码<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/608d27904a43f74dec06c6a54354296e.png"></p><blockquote><p>父子节点添加是在匹配到的元素内部进行，兄弟节点是在匹配的元素外部进行。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//父子节点</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$(&#x27;p&#x27;).append(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>append<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line">//添加在结束标签之前</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;<span class="name">b</span>&gt;</span>append<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">$(&#x27;p&#x27;).prepend(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>append<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line">//添加在开始标签之后</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">append</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">//兄弟节点</span><br><span class="line">$(&#x27;p&#x27;).after(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">$(&#x27;p&#x27;).before(&#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;);</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>didi<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/3f67b7eb565d49fc1270c7406fb57cb1.png"></p><h3 id="节点替换"><a href="#节点替换" class="headerlink" title="节点替换"></a>节点替换</h3><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">replaceWith(content)</td><td align="center">将所有匹配的元素替换成指定的HTML或DOM元素</td></tr><tr><td align="center">replaceAll(selector)</td><td align="center">用匹配的元素替换掉所有selector匹配到的元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        // $(&#x27;p:first&#x27;).replaceWith(&#x27;<span class="tag">&lt;<span class="name">p</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;);</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        // $(&#x27;p:eq(1)&#x27;).replaceWith(&#x27;<span class="tag">&lt;<span class="name">p</span>&gt;</span>世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;&lt;p&gt;你好&lt;/p&gt;&#x27;</span>).replaceAll($(<span class="string">&#x27;p:first&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;&lt;p&gt;世界&lt;/p&gt;&#x27;</span>).replaceAll($(<span class="string">&#x27;p:eq(1)&#x27;</span>));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h3><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">empty()</td><td align="center">清空元素的内容，但不删除元素本身</td></tr><tr><td align="center">remove()</td><td align="center">清空元素的内容，并删除元素本身</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>4444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       <span class="comment">//移除第一个节点的内容</span></span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;li:first&#x27;</span>).empty();</span></span><br><span class="line"><span class="javascript">       <span class="comment">//移除第二个元素的内容及元素本身</span></span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;li:eq(1)&#x27;</span>).remove();</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/be846db6a9a21c2aa000b70fc203b348.png"></p><h3 id="节点复制"><a href="#节点复制" class="headerlink" title="节点复制"></a>节点复制</h3><table><thead><tr><th align="center">语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">clone([false])</td><td align="center">复制匹配的元素，默认参数为false</td></tr><tr><td align="center">clone(true)</td><td align="center">参数设置为true时，复制元素的所有事件处理</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>4444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;ul&#x27;</span>).clone().appendTo($(<span class="string">&#x27;body&#x27;</span>));</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/089e1fb74bc937a7141481d94270ac65.png"></p><h3 id="左移与右移"><a href="#左移与右移" class="headerlink" title="左移与右移"></a>左移与右移</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>左移与右移<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">select</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">150px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[type=button]</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-id">#opt</span>&#123;<span class="attribute">margin</span>:<span class="number">90px</span> <span class="number">10px</span> <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>:<span class="number">80%</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">background-color</span>:<span class="number">#999999</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;<span class="attribute">float</span>:left&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>可选项<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>移动<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;opt&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toRight&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toLeft&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toAllRight&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&gt;&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toAllLeft&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;&lt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>已选项<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取按钮添加单击事件，获取第一个下拉框中被选中的option添加到第二个下拉框</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toRight&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;       <span class="comment">// 右移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#right&gt;select&#x27;</span>).append($(<span class="string">&#x27;#left&gt;select&gt;option:selected&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toLeft&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        <span class="comment">// 左移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#left&gt;select&#x27;</span>).append($(<span class="string">&#x27;#right&gt;select&gt;option:selected&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toAllRight&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    <span class="comment">// 全部右移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#right&gt;select&#x27;</span>).append($(<span class="string">&#x27;#left&gt;select&gt;option&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#toAllLeft&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;     <span class="comment">// 全部左移</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#left&gt;select&#x27;</span>).append($(<span class="string">&#x27;#right&gt;select&gt;option&#x27;</span>));</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/c8e2b69a10be668bdb5a127790ea6062.png"></p><h2 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h2><ul><li>标签中通过属性设置事件，每个属性都由一个on和事件名组成。例如，点击事件对应的属性为onclick。</li><li>在jQuery中则可直接使用其提供的与事件类型同名的方法。例如，点击事件对应的方法为click()。</li><li>这些事件方法允许重复绑定处理程序，按照绑定顺序依次执行。</li></ul><h3 id="表单事件-1"><a href="#表单事件-1" class="headerlink" title="表单事件"></a>表单事件</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">blur()</td><td align="center">当元素失去焦点时触发</td></tr><tr><td align="center">focus()</td><td align="center">当元素获得焦点时触发</td></tr><tr><td align="center">change()</td><td align="center">当元素的值发生改变时触发</td></tr><tr><td align="center">select()</td><td align="center">当文本框（包括&lt;input&gt;和&lt;textarea&gt;）中的文本被选中时触发</td></tr><tr><td align="center">submit()</td><td align="center">表单提交时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>电子邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;input[type=text]&#x27;</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tips = $(<span class="string">&#x27;&lt;span&gt;&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            tips.html(<span class="string">&#x27;请按要求输入&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;input:focus&#x27;</span>).after(tips);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;input[type=text]&#x27;</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).next().remove();</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/84ff5255a8425a2dd3860eb8d6f253cf.png"></p><h3 id="键盘事件-1"><a href="#键盘事件-1" class="headerlink" title="键盘事件"></a>键盘事件</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">keydown()</td><td align="center">键盘按键被按下时触发</td></tr><tr><td align="center">keyup()</td><td align="center">键盘按键弹起时触发</td></tr><tr><td align="center">keypress()</td><td align="center">键盘按键（Shift等非字符键除外）被按下时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>左移与右移<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.boxes</span>&#123;<span class="attribute">width</span>:<span class="number">10px</span>;<span class="attribute">height</span>:<span class="number">10px</span>;<span class="attribute">background-color</span>:red;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;boxes&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       $(<span class="built_in">document</span>).</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">       keydown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">//获取按键码(37、38、39、40)</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> opt = event.which;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> item = $(<span class="string">&#x27;.boxes&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           <span class="comment">//获取元素距离文档的位置</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> left = item.offset().left;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> top = item.offset().top;;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(opt);</span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">switch</span>(<span class="params">opt</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">37</span>:item.offset(&#123;<span class="attr">left</span>:left-<span class="number">1</span>,<span class="attr">top</span>:top&#125;);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">38</span>:item.offset(&#123;<span class="attr">left</span>:left,<span class="attr">top</span>:top-<span class="number">1</span>&#125;);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">39</span>:item.offset(&#123;<span class="attr">left</span>:left+<span class="number">1</span>,<span class="attr">top</span>:top&#125;);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">40</span>:item.offset(&#123;<span class="attr">left</span>:left,<span class="attr">top</span>:top+<span class="number">1</span>&#125;);<span class="keyword">break</span>;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/3355318cfc0459182e0575a1c5acd4c6.png"></p><h3 id="鼠标事件-1"><a href="#鼠标事件-1" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">mouseover()</td><td align="center">当鼠标移入对象时触发</td></tr><tr><td align="center">mouseout()</td><td align="center">鼠标从元素上离开时触发</td></tr><tr><td align="center">click()</td><td align="center">当单击元素时触发</td></tr><tr><td align="center">dbclick()</td><td align="center">当双击元素时触发</td></tr><tr><td align="center">mousedown()</td><td align="center">当鼠标指针移动到元素上方，并按下鼠标按键时触发</td></tr><tr><td align="center">mouseup()</td><td align="center">当在元素上放松鼠标按钮时，会被触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">鼠标移入时，为本文添加背景颜色；</span><br><span class="line">鼠标移出时，为文本移除背景颜色。</span><br><span class="line">鼠标单击时，打印单击位置。</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>左移与右移<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.boxes</span>&#123;<span class="attribute">width</span>:<span class="number">10px</span>;<span class="attribute">height</span>:<span class="number">10px</span>;<span class="attribute">background-color</span>:red;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hit&quot;</span>&gt;</span>jQuery介绍<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;.hit&#x27;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="built_in">this</span>).css(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;green&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;.hit&#x27;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="built_in">this</span>).css(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">       &#125;);</span><br><span class="line"><span class="javascript">       $(<span class="string">&#x27;.hit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(event.pageY);</span></span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><table><thead><tr><th align="center">类比选项</th><th align="center">window.onload</th><th align="center">$(document).ready()</th></tr></thead><tbody><tr><td align="center">执行时机</td><td align="center">必须等待网页中的所有内容加载完成后(包括外部元素，如图片)才能执行</td><td align="center">网页中的所有DOM结构绘制完成后就执行（可能关联内容并未加载完成）</td></tr><tr><td align="center">编写个数</td><td align="center">不能同时编写多个</td><td align="center">能够同时编写多个</td></tr><tr><td align="center">简化写法</td><td align="center">无</td><td align="center">$()</td></tr></tbody></table><p>jQuery中的页面加载事件方法有3种语法形式，具体如下。</p><pre><code>    $(document).ready(function() &#123;  &#125;);         // 语法方式1    $().ready(function() &#123;  &#125;);             // 语法方式2    $(function() &#123;  &#125;);                 // 语法方式3</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              alert(<span class="string">&quot;欢迎光临&quot;</span>);</span></span><br><span class="line">          &#125;)</span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/2776a6a8b120b78267a95c9aa433c8f5.png"></p><h3 id="事件绑定与切换"><a href="#事件绑定与切换" class="headerlink" title="事件绑定与切换"></a>事件绑定与切换</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">on(events,function)</td><td align="center">在匹配元素上绑定一个或多个事件处理函数</td></tr><tr><td align="center">off(events)</td><td align="center">在匹配元素上移除一个或多个事件处理函数</td></tr><tr><td align="center">one(events,function)</td><td align="center">为每个匹配元素的事件绑定一次性的处理函数</td></tr><tr><td align="center">hover([over,]out)</td><td align="center">元素鼠标移入与移出事件切换</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;div&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">&#x27;触发点击事件&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&#x27;div&#x27;</span>).off(<span class="string">&#x27;click&#x27;</span>);</span></span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          $(<span class="string">&#x27;div&#x27;</span>).on(&#123;</span></span><br><span class="line"><span class="javascript">              mouseover:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;鼠标移入&#x27;</span>);</span></span><br><span class="line">              &#125;,</span><br><span class="line"><span class="javascript">              mouseout:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;鼠标移出&#x27;</span>);</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/67f8db8f8d37d276874a7977b13105aa.png"></p><h2 id="手风琴效果"><a href="#手风琴效果" class="headerlink" title="手风琴效果"></a>手风琴效果</h2><ul><li><p>页面组成<br>  5张图片<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/b121fdc5918a1143cbcf60403f0c6bed.png"></p></li><li><p>动态效果：<br>  鼠标移入图片时，该图片完整显示；鼠标移出时，该图片回复默认大小。overflow:hidden多余隐藏。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/1cc77ff4965b51597b5e50718b693c10.png"></p></li><li><p>图片素材</p></li></ul><p>1.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/92f6b154568bc50a88a2bb755847c57f.png"><br>2.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/470f55c119b2c75fc21c898ee7fd470f.png"><br>3.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/744f096e12d235ff3feaaae3758cd653.png"><br>4.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/5547663bea41be8ae50f6bcd4e152e26.png"><br>5.jpg<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/046dc5f515f8200717a5f6062f617146.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>手风琴效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">1200px</span>;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">margin</span>:<span class="number">50px</span> auto;<span class="attribute">overflow</span>:hidden&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">li</span>&#123;<span class="attribute">width</span>:<span class="number">240px</span>;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">float</span>:left&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/4.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/5.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;div&gt;ul&gt;li&#x27;</span>).on(&#123;</span></span><br><span class="line"><span class="javascript">            mouseover:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="built_in">this</span>).siblings(<span class="string">&#x27;li&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;60.5px&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              $(<span class="built_in">this</span>).css(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;958px&#x27;</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            mouseout:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&#x27;#box&gt;ul&gt;li&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;240px&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/cf52d7fed1bb639bfa23b09f5dc42f26.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSctipt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb程序设计项目</title>
      <link href="2020/11/19/JavaWeb%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/11/19/JavaWeb%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb概述"><a href="#JavaWeb概述" class="headerlink" title="JavaWeb概述"></a>JavaWeb概述</h1><p>Java Web 其实就是一个技术的总和,把<code>Web</code>看成一个容器而已主要使用<code>JavaEE</code>技术来实现.再加上各种中间件。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/20/4c1f2fae25ee652b3d52c3bba84fa862.png"></p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><ul><li><p>XML是EXtensible Markup Language的缩写，它是一种类似于HTML的标记语言，称为<code>可扩展标记语言</code>。</p></li><li><p>XML是由W3C组织推出的，它是一种通用的<code>数据交换格式</code>，可以使数据在各种应用程序之间轻松地实现数据的交换。</p></li><li><p>使用XML可以实现不同操作系统间数据的交换。比如电脑、手机、平板等设备操作系统存储数据的格式不兼容，但它们可以实现数据的交换。</p></li><li><p>若用XML表示国家、省市间的关系，如下<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/cb4ed771870010b30048e39247020cdd.png"></p></li><li><p>XML和HTML的区别</p><ol><li>HTML不区分大小写，XML严格区分大小写</li><li>HTML标记用来显示数据，XML标记用来描述信息</li><li>HTML可以有多个根元素，格式良好的XML只能有一个根元素</li><li>HTML中是属性是可用可不用的，XML属性值必须放在引号中</li><li>HTML中的空格会自动过滤，XML中的空格不会自动删除</li><li>HTML中的标记是预定义的，XML中的标记是可以随便定义的</li></ol></li><li><p>XML约束</p><ol><li>DTD约束是早期出现的一种XML约束模式语言，根据它的语法创建的文件称为DTD文件</li><li>Schema约束也是一种用于定义和描述XML文档结构与内容的模式语言，它比DTD功能强大很多，但相应的语法也复杂很多。</li></ol></li></ul><p><a href="https://www.runoob.com/xml/xml-tutorial.html">XML|菜鸟教程请戳这里</a></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li><p>HTTP是Hyper Text Transfer Protocol的缩写，即<code>超文本传输协议</code>。它是一种<code>请求/响应式</code>的协议</p></li><li><p>HTTP协议<strong>专门用于定义浏览器与服务器之间交换数据的过程以及数据本身的格式</strong>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/a559f61f2b0418788e1f1dfdd7255e8f.png"></p></li><li><p>HTTP协议特点</p><ol><li><strong>支持客户端(浏览器就是一种Web客户端)/服务器模式。</strong></li><li><strong>简单快速</strong>：客户端向服务器请求服务时，只需传送请求方式和路径。常用的请求方式有GET、POST等，每种方式规定了客户端与服务器联系的类型不同。由于HTTP简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li><li><strong>灵活</strong>：HTTP允许传输任意类型的数据，正在传输的数据类型由<code>Content-Type</code>加以标记。</li><li><strong>无状态</strong>：HTTP是无状态协议。无状态是指协议对于事务处理没有记忆能力，如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。</li></ol></li><li><p>HTTP版本</p><ol><li>HTTP 1.0<br>基于HTTP1.0协议的客户端与服务器在交互过程中需要经过<strong>建立连接、发送请求信息、回送响应信息、关闭连接</strong>四个步骤，并且每次请求都需要与服务器重新建立连接。</li><li>HTTP 1.1<br>客户端可以向服务器端发送多个请求，并且在发送下个请求时，无需等待上次请求的返回结果。必须按照接受客户端请求的先后顺序依次返回响应 结果，以保证客户端能够区分出每次请求的响应内容。</li></ol></li></ul><h3 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h3><ul><li><p>HTTP消息分为<strong>HTTP请求消息</strong>和<strong>HTTP响应消息</strong>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/709de51d4891feaeb1d6cef5b9d3d112.png"></p></li><li><p>HTTP请求行位于请求消息的第一行<br>它包括<strong>请求方式</strong>、<strong>资源路径及协议版本</strong>三个部分</p><pre><code>  GET/index.html HTTP/1.1</code></pre></li><li><p>常见的HTTP请求方式是<code>GET</code>和<code>POST</code>请求方式<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/0687224dff6fc5538dbcdabf26c42334.png"></p></li><li><p>请求消息头</p><ol><li>每个请求消息头都是由一个头字段名称和一个值构成;</li><li>头字段名称和值之间用冒号(:)和空格( )分隔；</li><li>每个请求消息头之后使用一个回车换行符标志结束<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/ab470b7b33b94e9dbcb41b0cc48e8409.png"></li></ol></li></ul><h3 id="HTTP响应信息"><a href="#HTTP响应信息" class="headerlink" title="HTTP响应信息"></a>HTTP响应信息</h3><ul><li><p>HTTP响应消息分为<strong>响应状态行、响应消息头和实体内容</strong>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/aac7a853cddf4f8834a6dec27bdb050c.png"></p></li><li><p>HTTP响应状态行位于响应消息的第一行<br>它包括<strong>HTTP协议版本、状态码及状态码描述</strong></p><pre><code>  HTTP/1.1 200 OK</code></pre></li><li><p>HTTP状态码由3位数字组成，它的第一个数字有5种可能的取值。</p><ol><li>1xx：表示请求已接收，需要继续处理</li><li>2xx：表示请求已成功被服务器接收、理解并接受</li><li>3xx：为完成请求，客户端需进一步细化请求</li><li>4xx：客户端请求有错误</li><li>5xx：服务器端出现错误</li></ol></li></ul><table><thead><tr><th align="center">状态码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">表示服务器成功处理了客户端的请求</td></tr><tr><td align="center">302</td><td align="center">表示请求的资源临时从不同的URI响应请求</td></tr><tr><td align="center">404</td><td align="center">表示服务器找不到请求的资源</td></tr><tr><td align="center">500</td><td align="center">表示服务器发生错误，无法处理客户端的请求</td></tr></tbody></table><ul><li>响应消息头<ol><li>每个请求消息头都是由一个头字段名称和一个值构成;</li><li>头字段名称和值之间用冒号(:)和空格( )分隔；</li><li>每个请求消息头之后使用一个回车换行符标志结束<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/c8ef3a38a4eb042f1adf3016d0d28395.png"></li></ol></li></ul><h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><p>1、<code>Web服务器</code>是指驻留于因特网上某种类型计算机的<code>程序</code>，是可以向发出请求的浏览器提供文档的程序。当Web浏览器（客户端）连到服务器上并请求文件时，服务器将处理该请求并将文件反馈到该浏览器上，附带的信息会告诉浏览器如何查看该文件（即文件类型）。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/5514c816b54a022ae6dc13f8e179d40e.png"><br>2、服务器是一种<code>被动程序</code>：只有当Internet上运行在其他计算机中的浏览器发出请求时，服务器才会响应。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/56e0a7ee29c9e3b138360427eed39a82.png"></p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ul><li><p>一个动态Web资源开发完毕后需要发布在Web服务器才能被外界访问。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/9e29de0f70b60055ceea4f8ad1f00b4c.png"></p></li><li><p>Tomcat是Apache组织推荐的运行Servlet和JSP的容器</p></li><li><p>它不仅具有Web服务器的基本功能，还提供了数据库连接池等许多通用组件功能。</p></li></ul><p>Tomcat下载请戳这里——<a href="http://tomcat.apache.org/">Tomcat官网</a></p><ul><li>下载后直接解压到指定目录:<ol><li>找到Tomcat目录<code>\bin\startup.bat</code>文件双击</li><li>或者DOS命令:<code>catalina  run</code></li><li>浏览器窗口输入”<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a></li><li>关闭Tomcat：<code>bin\shutdown.bat</code></li></ol></li><li>Tomcat安装常见问题:<ol><li>Tomcat依赖Java环境，需要在<code>JAVA_HOME</code>配好<code>JDK</code>的路径。（如出现窗口一闪而过）</li><li>Tomcat默认端口8080，当出现端口被占用时(<code>netstat -ano</code>命令查看)，去Tomcat目录找到<code>conf\server.xml</code>文件里找到<code>port</code>修改</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">&quot;tomcatThreadPool&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure><h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><ul><li>所谓Web应用就是多个Web资源的集合，它也称为Web应用程序或Web工程。</li><li>一个web应用由多个<code>静态web资源</code>和<code>动态web资源</code>组成，如:html、css、js文件，Jsp文件、java程序、支持jar包、配置文件等等。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/a2f5cc290ad63c73e84007ba9cead3bb.png"></p><ul><li>Web应用开发好后，若想供外界访问，需要把web应用所在目录交给web服务器管理，这个过程称之为<code>虚似目录的映射</code>。配置有两种方式：<ol><li>在server.xml文件中配置虚拟目录</li><li>在自定义xml文件配置虚拟目录</li></ol></li></ul><h2 id="Web默认页面"><a href="#Web默认页面" class="headerlink" title="Web默认页面"></a>Web默认页面</h2><p>当访问一个Web应用程序时，通常需要指定访问的资源名称，如果没有指定资源名称，则会访问默认页面。例如，访问<a href="http://www.w3school.com.cn/index.htm">http://www.w3school.com.cn/index.htm</a> ,如果想输入<a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a> 就能访问，需要配置WEB-INF目录下的web.xml文件，即虚拟目录的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">welcome-file-list&gt; </span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>资源名.后缀<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-flie-list</span>&gt;</span></span><br><span class="line"> 上述代码中，<span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span>用于配置默认页面列表，它包含多个<span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>子元素，</span><br><span class="line"> 每个<span class="tag">&lt;<span class="name">welcome-flie</span>&gt;</span>都指定一个页面文件。当用户没有指定具体要访问的页面资源时，Tomcat会</span><br><span class="line"> 依次查找这些默认列表，如果找到，则返回给用户，停止查找。如果找不到，则返回错误信息。</span><br></pre></td></tr></table></figure><h2 id="Elicpse配置Tomcat"><a href="#Elicpse配置Tomcat" class="headerlink" title="Elicpse配置Tomcat"></a>Elicpse配置Tomcat</h2><ol><li><p>启动Eclipse开发工具，点击工具栏的【Window】—&gt;【Preferences】选项，此时会弹出一个【Preferences】窗口，在该窗口中点击左边菜单中的【Server】选项，在展开的菜单中选择最后一项【Runtime Environments】，这时窗口右侧会出现【Server Runtime Environments】选项卡</p></li><li><p>在Preferences窗口中点击【Add】按钮，弹出一个【New Server Runtime Environment】窗口，该窗口显示出了可在Eclipse中配置的各种服务器及其版本。由于我们需要配置的服务器版本是apache-tomcat-7.0.55，所以选择【Apache】，在展开的版本中选择【Apache Tomcat v7.0】选项</p></li><li><p>在【New Server Runtime Environment】窗口中点击【Next】按钮执行下一步，在弹出的窗口中点击【Browser】按钮，选择安装Tomcat服务器的目录（Tomcat服务器安装在D:\Tomcat\apache-tomcat-7.0.55目录下），最后依次点击【Finish】—&gt;【OK】按钮关闭窗口，并完成Eclipse和Tomcat服务器的关联</p></li><li><p>在Eclipse中创建Tomcat服务器。点击Eclipse下侧窗口的【Servers】选项卡（如果没有这个选项卡，则可以通过【Windows】【Show View】打开），在该选项卡中可以看到一个“No servers available.Define a new server from the new server wizard…”的链接，点击这个链接，会弹出一个【New Server】的窗口</p></li><li><p>Tomcat服务器创建完毕后，还需要进行配置。双击图2-32中创建好的Tomcat服务器，在打开的【Overview】页面中，选择【Server Locations】选项中的“Use Tomcat installation”，并将【Deploy path】文本框内容修改为webapps</p></li></ol><h1 id="Servlet基础"><a href="#Servlet基础" class="headerlink" title="Servlet基础"></a>Servlet基础</h1><ul><li>Servlet由Servlet容器提供，所谓的Servlet容器是指提供了Servlet 功能的服务器（指Tomcat），Servlet容器将Servlet动态的加载到服务器上。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/d8d5297706bd994c04e66e7af09eac98.png"></p><ol><li>Servlet的请求首先会被HTTP服务器接收，HTTP服务器只负责静态HTML页面的解析。</li><li>Servlet的请求转交给Servlet容器，Servlet容器会根据web.xml文件中的映射关系，调用相应的Servlet。</li><li>Servlet将处理的结果返回给Servlet容器，并通过HTTP服务器将响应传输给客户端。</li></ol><ul><li>Servlet的特点<ol><li>方便：Servlet提供了大量的实用工具例程，如处理很难完成的HTML表单数据、读取和设置HTTP头，以及处理Cookie和跟踪会话等。</li><li>跨平台：Servlet用Java类编写，可以在不同操作系统平台和不同应用服务器平台下运行。</li><li>灵活性和可扩展性：采用Servlet开发的Web应用程序，由于Java类的继承性及构造函数等特点，使得应用灵活，可随意扩展。</li></ol></li></ul><h2 id="Servlet接口及其实现类"><a href="#Servlet接口及其实现类" class="headerlink" title="Servlet接口及其实现类"></a>Servlet接口及其实现类</h2><ul><li><p>在Servlet接口中定义了5个抽象方法</p><ol><li> void init(ServletConfig config)</li><li> ServletConfig getServletConfig()</li><li> String getServletInfo()</li><li> void service(ServletRequest req，ServletResponse res)</li><li> void destroy()</li></ol></li><li><p>HttpServlet类的常用方法</p><ol><li>protected void doGet(HttpServletRequest req, HttpServletResponse resp)</li><li>protected void doPost(HttpServletRequest req, HttpServletResponse resp)</li><li>protected void doPut(HttpServletRequest req, HttpServletResponse resp)</li></ol></li></ul><h2 id="第一个Servlet程序"><a href="#第一个Servlet程序" class="headerlink" title="第一个Servlet程序"></a>第一个Servlet程序</h2><ul><li>创建web工程<br>【FIle】-&gt;【new】-&gt;【Dynamic Web Project】-&gt;<img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/6aaa5d2395e4ca603e1baf7d88475a2b.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/6ee4c399dc4d9fe61a13a39cb02e3332.png"><blockquote><p>继承GenericServlet后，除了service()方法，其他方法都已经实现。可见，继承GenericServlet类比实现Servlet接口更加简便。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request,ServletResponse response)</span><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">       <span class="comment">//得到输出流PrinterWriter对象,Servlet使用输出流来产生响应</span></span><br><span class="line">       PrintWriter out=response.getWriter();</span><br><span class="line">       <span class="comment">//使用输出流对象向客户端发送字符数据</span></span><br><span class="line">       out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>配置web.xml文件,虚拟路径的映射</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet标签给Tomcat配置Servlet程序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet-name标签给Servlet程序起一个别名(一般是类名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet-class是Servlet程序的全类名(一般为包名.类名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- servlet-mapping标签给Tomcat配置访问地址，用于映射一个对外访问的路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet-name标签告诉服务器，我当前配置的地址给哪个Servlet程序使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- url-pattern标签配置访问地址</span></span><br><span class="line"><span class="comment">    / 斜杠在服务器解析时，表示地址为:http://ip:port/工程路径</span></span><br><span class="line"><span class="comment">    /HelloServlet表示http://ip:port/工程路径/HelloServlet)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 运行结果<img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/418f2a4cabf96e3d271477b5ecf41bb9.png"></p><hr><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/ce0927404631979902fbfd0cdc2226b7.png"></p><ul><li>init()初始化阶段</li><li>service()处理客户端请求阶段</li><li>destroy()终止阶段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span><span class="keyword">throws</span> ServletException</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;----init()----&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;----service()----&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;----destroy()----&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/992f2d62dc60a007cb5afd5cf04d7d69.png"></p><h2 id="自动加载Servlet程序"><a href="#自动加载Servlet程序" class="headerlink" title="自动加载Servlet程序"></a>自动加载Servlet程序</h2><p>当希望某些Servlet程序可以在Tomcat启动时<strong>随即启动</strong>，可以使用&lt;load-on-startup&gt;元素,最常使用在<strong>配置数据库</strong>时。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>chapter04.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>load-on-startup用于指定Servlet被加载的时机和顺序，所设置的值必须为一个<strong>整数</strong>,如果为<strong>负数或者没有设</strong>，Servlet容器将在客户端首次请求这个Servlet时加载它。如果为<strong>整数或0</strong>，Servlet容器将在Web应用<strong>启动时加载并初始化Servlet其值越小，对应Servlet就越先被加载</strong>。</p><h2 id="ServletConfig接口"><a href="#ServletConfig接口" class="headerlink" title="ServletConfig接口"></a>ServletConfig接口</h2><p>Servlet的配置信息封装到一个ServletConfig对象中，ServletConfig定义了一系列获取配置信息的方法，有三大作用:</p><ul><li>可以区号Servlet程序的别名<code>servlet-name</code>的值</li><li>获取初始化参数<code>ini-param</code></li><li>获取<code>ServletContext对象</code></li></ul><p>常用方法:</p><ul><li>获取servlet的初始化参数的值：String  <code>getInitParameter</code>（String name）</li><li> 获取servlet的初始化参数的名称：Enumeratrion <code> getInitParameterNames</code>（）</li><li>得到当前Web应用的ServletContext对象：ServletContext <code>getServletContext</code>（）</li><li>获取servlet的名称,即web.xml中servlet-name元素的值：String <code>getServletName</code>（）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletConfig</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.首先得到servletconfig对象</span></span><br><span class="line">ServletConfig config=<span class="keyword">this</span>.getServletConfig();</span><br><span class="line"><span class="comment">//2.获取servlet的名称，对应web.xml里面</span></span><br><span class="line">String servletName=config.getServletName();</span><br><span class="line">System.out.println(<span class="string">&quot;servlet的名称&quot;</span>+servletName);</span><br><span class="line"><span class="comment">//3.获取servlet的初始化参数</span></span><br><span class="line">String value=config.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数值：&quot;</span>+value);</span><br><span class="line"><span class="comment">//4.获取servlet的初始化参数的名称</span></span><br><span class="line">Enumeration&lt;String&gt; er=config.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(er.hasMoreElements()) &#123;</span><br><span class="line"><span class="comment">//获取初始化参数的名称</span></span><br><span class="line">String name=er.nextElement();</span><br><span class="line"><span class="comment">//根据初始化参数的名称，获取对应的值</span></span><br><span class="line">String value2=config.getInitParameter(name);</span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数的名称：&quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;该名称的值:&quot;</span>+value2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletConfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletConfig<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet的初始化参数的配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>lizhenye<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletConfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletConfig<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/2ee772c543a40806ff1d5c0d080acd91.png"></p><h2 id="ServletContext接口"><a href="#ServletContext接口" class="headerlink" title="ServletContext接口"></a>ServletContext接口</h2><p>当Servlet容器启动时，会为每个Web应用创建一个唯一的<code>ServletContext对象</code>代表当前Web应用，该对象不仅封装了当前Web应用的所有信息，而且实现了多个Servlet之间数据的共享。</p><ul><li>ServletContext接口的作用:<ol><li> 获取Web应用程序的<strong>初始化参数:</strong></li><li>实现多个Servlet对象共享数据</li><li>读取Web应用下的资源文件</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletContext</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//1.首先得到ServletContext对象</span></span><br><span class="line">ServletContext context=<span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//2.得到包含所有初始化参数名的Enumberation对象</span></span><br><span class="line">Enumeration&lt;String&gt; er=context.getInitParameterNames();</span><br><span class="line">out.println(<span class="string">&quot;所有的参数名和参数值:&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(er.hasMoreElements()) &#123;</span><br><span class="line"><span class="comment">//获取初始化参数的名称</span></span><br><span class="line">String name=er.nextElement();</span><br><span class="line"><span class="comment">//根据初始化参数的名称，获取对应的值</span></span><br><span class="line">String value=context.getInitParameter(name);</span><br><span class="line">out.println(name+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">out.println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>CompanyName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>address<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>beijing<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletContext<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletContext<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/5fd0719196f0f9afb1dfd9dc4d3c7fb2.png"></p><ul><li>ServletContext接口的方法:<ol><li> Enumberation getAttributeNames() ： 返回一个Enumberation对象，该对象包含了所有存放在ServletContext中的·所有域属性名·。</li><li> Object <code>getAttribute(String name)</code>：根据指定的参数名返回一个与之匹配的域属性值。</li><li> void removeAttribute(String name)：根据参数指定的域属性名，从ServletContext中·删除·匹配的域属性。</li><li> void <code>setAttribute(String name,Object obj)</code>：设置ServletContext的域属性，其中name是域属性名，obj是域属性值。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletContext1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">ServletContext context=<span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//通过setAttribute()方法设置属性值</span></span><br><span class="line">context.setAttribute(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;this servlet save data&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;运行一下，将数据存入ServletContext对象&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletContext2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">ServletContext context=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//通过getAttribute()方法获得属性值</span></span><br><span class="line">String data=(String) context.getAttribute(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletContext1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletContext1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Review.TestServletContext2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServletContext2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TestServletContext2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/21/64f4dd4820124509c04f9d8ae19d54a2.png"></p><h1 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h1><ul><li>Servlet最主要的作用就是处理客户端请求，并向客户端做出响应。为此，针对Servlet的每次请求，Web服务器在调用service()之前，都会创建两个对象，分别是HttpServletRequest和HttpServletResponse。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/cafcfa6ea0bc21091d736408ef921bdd.png"></p><h2 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h2><p>HttpServletResponse接口中定义了向客户端发送<strong>响应状态码、响应消息头、响应消息体</strong> 的方法。</p><h3 id="发送状态码"><a href="#发送状态码" class="headerlink" title="发送状态码"></a>发送状态码</h3><ol><li><p><code>setStatus(int status)</code>方法<br>该方法用于<strong>设置HTTP响应消息的状态码</strong>，并生成响应状态行。正常情况下，Web服务器默认产生一个状态码为200的状态行。</p></li><li><p><code>sendError(int sc)</code>方法<br>该方法用于<strong>发送错误信息的状态码</strong>,例如，404状态码表示找不到客户端请求的资源。在response对象中，提供了两个重载sendError(int sc)的方法。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> code)</span> <span class="keyword">throws</span> java.io.IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> code,String message)</span> <span class="keyword">throws</span> java.io.IOException</span></span><br></pre></td></tr></table></figure><h3 id="发送响应消息头"><a href="#发送响应消息头" class="headerlink" title="发送响应消息头"></a>发送响应消息头</h3><ul><li>设置各种头字段</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/de58e02f6b40bd02f82eec44d0bcfb1d.png"></p><ul><li>设置字符编码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/208b32de0996f4acd4c67a9310568a88.png"></p><h3 id="发送响应消息体"><a href="#发送响应消息体" class="headerlink" title="发送响应消息体"></a>发送响应消息体</h3><ol><li><code>getOutputStream()</code>方法<br>该方法所获取的<strong>字节输出流</strong>对象为ServletOutputStream类型。用于ServletOutputStream是OutputStream的子类,它可以直接输出字节数组中的二进制数据。因此，要想输出二进制格式的响应正文，就需要使用getOutputStream()方法。</li><li><code>getWriter()</code>方法<br>该方法所获取的<strong>字符输出流</strong>对象为PrintWriter类型。由于PrintWriter类型的对象可以直接输出字符文本内容，因此，要想输出内容全为字符文本的网页文档，需要使用getWriter()方法。</li></ol><blockquote><p>注意：两种方法不能同时写，不然会报错出500，并且谁在前报谁错。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String data=<span class="string">&quot;itcast&quot;</span>;</span><br><span class="line"><span class="comment">//获取字节输出流对象</span></span><br><span class="line">OutputStream out=response.getOutputStream();</span><br><span class="line">out.write(data.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Review;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String data=<span class="string">&quot;itcast&quot;</span>;</span><br><span class="line"><span class="comment">//获取字符输出流对象</span></span><br><span class="line">PrintWriter print=response.getWriter();</span><br><span class="line">print.write(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttServletResponse应用"><a href="#HttServletResponse应用" class="headerlink" title="HttServletResponse应用"></a>HttServletResponse应用</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/09c2797cfa990bcf4965749d153e2f27.png"></p><h4 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h4><p>由于计算机中的数据都是以二进制形式存储的，因此，当传输文本时，就会发生字符和字节之间的转换。字符与字节之间是通过查<code>码表</code>完成的，字符转换成字节的过程为<code>编码</code>，字节转换成字符的过程为<code>解码</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//response.setCharacterEncoding(&quot;utf-8&quot;);</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">String data=<span class="string">&quot;中国&quot;</span>;</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response对象的字符输出流在编码时，采用的是<code>ISO-8859-1</code>的字符码表，不兼容中文，会将”中国”编码为“63 63”，当浏览器接收解码时，会采用默认的码表<code>GB2312</code>，将”63”解码为”?”。</p><blockquote><p>综上分析，需要设置HttpServletResponse和浏览器都设置为”UTF-8”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置HttpServletResponse使用utf-8</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//设置浏览器使用utf-8</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//包含以上两种方式的写法:</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="定时刷新跳转"><a href="#定时刷新跳转" class="headerlink" title="定时刷新跳转"></a>定时刷新跳转</h4><p>在HTTP协议中，定义了一个Refresh头字段，可以通知浏览器在指定的时间内自动刷新并跳转到其他页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2秒后跳转到我的博客</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Refresh&quot;</span>, <span class="string">&quot;2;URL=http://www.lzyblog.github.io&quot;</span>);</span><br><span class="line"><span class="comment">//每隔3秒定时刷新当前页面</span></span><br><span class="line"><span class="comment">//reponse.setHeader(&quot;Refresh&quot;,&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//response.getWriter().println(new java.util.Date());//输出当前时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h4><p>Web服务器接受到客户端的请求后，由于某些条件限制，不能访问当前请求URL所指向的Web资源，而是指定了一个新的资源路径，让客户端重新发送请求。</p><p>为了实现请求重定向，在HttpServletResponse接口中，定义了一个<code>sendRedirect()</code>方法，该方法用于生成<code>302响应码和Location响应头</code>，从而通知客户端重新访问Location响应头中指定的URL，sendRedirect()方法的完整语法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(java.lang.String  Location)</span> <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">            <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/5889a54e1e0e33c81ca7d439bfb19b6c.png"><br>以下模拟用户登录来帮助理解，创建login.html登录表单和welcome.html欢迎界面(在WebContent下建立)，再创一个LoginServlet的类用于处理用户登录请求。<code>Servlet_Project</code>为包名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/Servlet_Poject/LoginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎您,登陆成功！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//用HttpServletRequest对象的getParameter()方法获取用户名和密码;</span></span><br><span class="line">String username=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password=request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="comment">//假设用户名和密码分别为：itcase和123</span></span><br><span class="line"><span class="keyword">if</span>((<span class="string">&quot;itcast&quot;</span>).equals(username)&amp;&amp;(<span class="string">&quot;123&quot;</span>).equals(password)) &#123;</span><br><span class="line"><span class="comment">//如果用户名和密码正确，重定位到welcome.html</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/Servlet_Poject/welcome.html&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//如果用户名和密码错误，重定位到login.html</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/Servlet_Poject/login.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a>HttpServletRequest对象</h2><p>HttpServletRequest接口中定义了获取<strong>请求行、请求头、请求消息体</strong>的相关方法。</p><h3 id="获取请求行信息"><a href="#获取请求行信息" class="headerlink" title="获取请求行信息"></a>获取请求行信息</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/19681439b47ff60b1a35f37da958ce18.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/c2b3460a19bd56c8006abb30cf5051b9.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/ba445a66f9370c08650b2f4f06dbe272.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLineServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取请求行的相关信息</span></span><br><span class="line">out.println(<span class="string">&quot;getMethod:&quot;</span>+request.getMethod()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRequestURI:&quot;</span>+request.getRequestURI()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getQueryString:&quot;</span>+request.getQueryString()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getProtocol:&quot;</span>+request.getProtocol()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getContextPath:&quot;</span>+request.getContextPath()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getPathInfo:&quot;</span>+request.getPathInfo()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getPathTranslated:&quot;</span>+request.getPathTranslated()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getServletPath:&quot;</span>+request.getServletPath()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRemoteAddr:&quot;</span>+request.getRemoteAddr()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRemoteHost:&quot;</span>+request.getRemoteHost()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getLocalAddr:&quot;</span>+request.getLocalAddr()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getLocalName:&quot;</span>+request.getLocalName()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getServerName:&quot;</span>+request.getServerName()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getServerPort:&quot;</span>+request.getServerPort()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getScheme:&quot;</span>+request.getScheme()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;getRequestURL:&quot;</span>+request.getRequestURL()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/6293072a469cd6c13bafc1d6c9000866.png"></p><h3 id="获取请求消息头"><a href="#获取请求消息头" class="headerlink" title="获取请求消息头"></a>获取请求消息头</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/181df91ab8785ed50a5d9b74129e3765.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHeadersServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取请求消息中所有头字段</span></span><br><span class="line">Enumeration headerNames =request.getHeaderNames();</span><br><span class="line"><span class="comment">//循环遍历所有请求头，并通过getHeader()方法获取一个指定名称的头字段</span></span><br><span class="line"><span class="keyword">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class="line">String headerName=(String)headerNames.nextElement();</span><br><span class="line">out.print(headerName+<span class="string">&quot;:&quot;</span>+request.getHeader(headerName)+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/fc58899708146068305991f61da59086.png"></p><h3 id="Referer防”盗链”"><a href="#Referer防”盗链”" class="headerlink" title="Referer防”盗链”"></a>Referer防”盗链”</h3><p>Referer头字段可以用于网站的<strong>防盗链</strong>。什么是盗链呢？假如A网站并没有某些资源，而是通过HTMl文件中使用&lt;a&gt;&lt;/a&gt;标签链接到B网站的资源，将其展示给浏览者。A网站提高了自己网站的访问量，却加重了B网站服务器的负担，损害了合法利益。而当你单击一个网页上的超链接时，浏览器会使用<strong>Referer头字段标识发出请求的超链接所在网页的URL</strong>，从而阻止访问或者跳转到指定的页面。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/db0ed410b8b886db61e9fbcda9d33239.png"><br><strong>实例描述</strong>：在Servlet_Project项目下Myproject包中，编写一个<code>DownManagertServlet</code>的类负责提供下载内容，要求下载请求的链接必须是通过本网站进入的，否则会将请求转发给下载说明的HTML页面（<code>download.html</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownManagertServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取Referer头的值</span></span><br><span class="line">String referer=request.getHeader(<span class="string">&quot;referer&quot;</span>);</span><br><span class="line"><span class="comment">//获取访问地址</span></span><br><span class="line">String sitePart=<span class="string">&quot;http://&quot;</span>+request.getServerName();</span><br><span class="line"><span class="comment">//判断referer头是否为空,这个头的地址是否以sitePart开始</span></span><br><span class="line"><span class="keyword">if</span>(referer !=<span class="keyword">null</span> &amp;&amp; referer.startsWith(sitePart)) &#123;</span><br><span class="line"><span class="comment">//处理正在下载的请求</span></span><br><span class="line">out.println(<span class="string">&quot;dealing download....&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//非法下载请求跳转到download.html页面</span></span><br><span class="line">RequestDispatcher rd=request.getRequestDispatcher(<span class="string">&quot;/download.html&quot;</span>);</span><br><span class="line">rd.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/Servlet_Project/DownManagertServlet&quot;</span>&gt;</span>download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>当<code>第一次</code>请求DownManagerServlet时，请求消息中<code>不含Referer请求头</code>，所以DownMagaerServlet将下载请求转发给了download.html页面。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/4e288eccd3fc3a86463ea81a1fbf7685.png"></p></li><li><p>单击”download”链接后，请求信息中<code>包含了Referer头字段</code>，并且其值与DownManagerServlet位于<code>同一个Web站点</code>，因此接受下载请求。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/1680ba3174d45170c1b4a72387f7aa88.png"></p></li></ul><h2 id="HttpServletRequest应用"><a href="#HttpServletRequest应用" class="headerlink" title="HttpServletRequest应用"></a>HttpServletRequest应用</h2><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><p>在实际开发中，经常需要获取用户提交的表单数据，例如，用户名、密码、电子邮件等<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/d96ea8f5c81d0442c979d75c827a7fe8.png"><br>在HttpServletRequest接口中，定义了一系列获取请求参数的方法<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/e2d15bbe2e2458b4b39efafef4886be5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyProject;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResquestParamsServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">  String name=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">  String password=request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;用户名:&quot;</span>+name);</span><br><span class="line">  System.out.println(<span class="string">&quot;密码:&quot;</span>+password);</span><br><span class="line">  <span class="comment">//获取参数名为&quot;hobby&quot;的值</span></span><br><span class="line">  String hobby[]=request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;爱好:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hobby.length;i++) &#123;</span><br><span class="line">  System.out.println(hobby[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/Servlet_Project/ResquestParamsServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">爱好:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sing&quot;</span>&gt;</span>唱歌</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dance&quot;</span>&gt;</span>跳舞</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>&gt;</span>足球<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/3fc118d7cf3c48afc36577cfdda7adac.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/22/9e3fbc05610ff87a24b3c1b19c077b15.png"><br> 由于HTML设置了浏览器在传递参数是采用utf-8编码，但在解码是采用默认的ISO-8859-1，会发生乱码问题。</p><ul><li>解决方案：<ol><li>POST: request.setCharacterEncoding(“utf-8”); （只对POST有效）</li><li>GET: name=new String(<code>name.getBytes(&quot;iso8859-1&quot;)</code>,”<code>utf-8</code>“); （先使用错误码表ISO-8859-1将用户名重新编码，再使用UTF-8进行解码）</li></ol></li></ul><h3 id="Request对象传递数据"><a href="#Request对象传递数据" class="headerlink" title="Request对象传递数据"></a>Request对象传递数据</h3><p>1.<code>setAttriute()</code>方法<br>用于将一个对象与一个名称关联后存储进ServletRequest对象中<br>如果ServletRequest对象中已经存在指定名称的属性，会先删除原来的属性，再添加新的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(java.lang.String name,java.lang.Object o)</span></span>;</span><br></pre></td></tr></table></figure><p>2.<code>getAttribute()</code>方法<br>从ServletRequest对象中返回指定名称的属性对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.lang.<span class="function">Object <span class="title">getAttribute</span><span class="params">(java.lang.String name)</span></span>;</span><br></pre></td></tr></table></figure><p>3.<code>removeAttribute()</code>方法<br>从ServletRequest对象中删除指定名称的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(java.lang.String name)</span></span>;</span><br></pre></td></tr></table></figure><p>4.<code>getAttributeNames()</code>方法<br>返回一个包含ServletRequest对象中所有属性名的Enumeration对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.util.<span class="function">Enumeration <span class="title">getAttributeNames</span><span class="params">(java.lang.String name)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="RequestDispatcher对象"><a href="#RequestDispatcher对象" class="headerlink" title="RequestDispatcher对象"></a>RequestDispatcher对象</h2><p>当一个Web资源收到客户端的请求后，如果希望服务器通知另外一个资源去处理请求，除了使用sendRedirect()请求重定向外，还可以通过<strong>RequestDispatcher接口的实例对象</strong>来实现。</p><ul><li>ServletRequest接口中获取RequestDispatcher对象的方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/2da870415f0037d6da628f69e0f24a3d.png"></p><ul><li>RequestDispatcher对象中的相关方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/472946e0119d0927ce640ef55d8c3eeb.png"></p><h3 id="请求转发forward"><a href="#请求转发forward" class="headerlink" title="请求转发forward()"></a>请求转发forward()</h3><p>在Servlet中，如果当前Web资源不想处理请求时，可以通过<code>forward()</code>方法将当前请求<code>传递给其他Web资源</code>进行处理。如图所示，当客户端访问Servlet1时，可以通过foward()方法将请求转发给其他Web资源(如Servlet2)，处理完后，返回客户端。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/b23c812ce032d50008017410fb8901b4.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//将数据存储到request对象中</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;company&quot;</span>, <span class="string">&quot;北京传智播客有限公司&quot;</span>);</span><br><span class="line">RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">&quot;/ResultServlet&quot;</span>);</span><br><span class="line"><span class="comment">//用forward()方法将当前Servlet的请求转发到ResultServlet页面。</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//获取PrintWriter对象用于输出信息</span></span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line"><span class="comment">//获取request请求对象中保存的数据</span></span><br><span class="line">String company=(String) request.getAttribute(<span class="string">&quot;company&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(company!=<span class="keyword">null</span>) &#123;</span><br><span class="line">out.println(<span class="string">&quot;公司名称:&quot;</span>+company+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/23/889ff7ef685e07393bb0ce23c2ae8171.png"></p><blockquote><p>可以看出地址栏是RequestForwardServlet的请求路径，却显示了另一个页面的内容，这是因为请求转发是发生在服务内部的行为，在一次请求中可以使用request进行数据共享。</p></blockquote><h3 id="请求包含incude"><a href="#请求包含incude" class="headerlink" title="请求包含incude()"></a>请求包含incude()</h3><p>指使用include()方法将Servlet请求转发给其他Web资源进行处理，在请求包含返回的响应消息中，即包含了<code>当前Servlet的响应消息</code>，也包含了<code>其他Web资源所作出的响应消息</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/eb96075d37370c30167f6167987c079d.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncludingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">RequestDispatcher rd=request.getRequestDispatcher(<span class="string">&quot;/IncludedServlet?p1=abc&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;before including&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">rd.include(request, response);</span><br><span class="line">out.println(<span class="string">&quot;after including&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncludedServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//设置响应时使用的字符编码</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">out.println(<span class="string">&quot;中国&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;URI:&quot;</span>+request.getRequestURI()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;QueryString:&quot;</span>+request.getQueryString()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;parameter p1:&quot;</span>+request.getParameter(<span class="string">&quot;p1&quot;</span>)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/23/91910f1c29dc8020b1ee5b92e1b55d70.png"></p><h1 id="会话及其会话技术"><a href="#会话及其会话技术" class="headerlink" title="会话及其会话技术"></a>会话及其会话技术</h1><p>两个人你问我答的过程就是一个会话，在Web开发中，服务器跟踪用户信息的技术称为<strong>会话技术</strong>。</p><ul><li>Web应用中的会话过程类似于生活中的打电话过程，它指的是一个客户端（浏览器）与Web服务器之间连续发生的一系列请求和响应过程。</li><li>在Servlet技术中，提供了两个用于保存会话数据的对象，分别是Cookie和Session。</li></ul><h2 id="Cookie对象"><a href="#Cookie对象" class="headerlink" title="Cookie对象"></a>Cookie对象</h2><p>Cookie是一种会话技术，它用于将会话过程中的数据保存到用户的浏览器中，从而使浏览器和服务器可以更好地进行数据交互。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/07dd99cc031964e999ffd142d8a911f1.png"></p><ul><li>Cookie在浏览器和服务器之间的传输<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/fc8b31e06f87ee022c52102e76314e68.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/f555f0f756132aa1aab9c6869ade163a.png"></li></ul><ol><li>第一次访问服务器，服务器会增加<code>Set-Cookie</code>头字段，将Cookie信息发送给浏览器，并保存在客户端。<pre><code> Set-Cookie: user=lzy; Path=/;</code></pre> user表示Cookie的名称，lzy表示Cookie的值，Path表示Cookie的属性。需要注意的是，Cookie必须以<code>键值对</code>的形式出现，其属性可以有多个，属性之间<code>必须用分号和空格隔开</code>。</li><li>当后续访问服务器时，会在请求消息中将用户信息以Cookie的形式发送给服务器，从而使服务器端分辨出当前请求是由哪个用户发出的。</li></ol><h3 id="Cookie-API"><a href="#Cookie-API" class="headerlink" title="Cookie API"></a>Cookie API</h3><ul><li>在Servlet API中提供了javax.servlet.http.Cookie类，它包含了生成Cookie信息和提取Cookie信息各个属性的方法。</li><li>构造方法<pre><code>  public Cookie(java.lang.String name,java.lang.String value)</code></pre></li></ul><blockquote><p>注意 ：Cookie一旦被创建，它的名称就不能更改，值可以为任何值，创建后允许被修改。</p></blockquote><ul><li>Cookie类的常用方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/5e6b90d03c322e0eaf4e8516580b25a6.png"></p><ul><li><p><strong>setMaxAge(int expiry)和getMaxAge()方法</strong><br>这两个方法用于<strong>设置和返回Cookie在浏览器上保持有效的秒数</strong>。如果设置的值为一个<strong>正整数</strong>时，浏览器会将Cookie信息保存在本地硬盘中。如果设置值为<strong>负整数</strong>时，浏览器会将Cookie信息保存在的缓存中，当浏览器关闭时，Cookie信息会被删除。如果设置值为0时，则表示通知浏览器立即删除这个Cookie信息。默认情况下，Max-Age属性的值是-1。</p></li><li><p><strong>setPath(String uri)和getPath()方法</strong><br>这两个方法是针对Cookie的Path属性。如果创建的某个Cookie对象没有设置Path属性，那么该Cookie只对当前访问路径所属的目录及其子目录有效。如果想让某个Cookie项对站点的所有目录下的访问路径都有效，应调用Cookie对象的setPath()方法将其Path属性设置为“/”。</p></li><li><p><strong>setDomain(String pattern)和getDomain()方法</strong><br>这两个方法是针对Cookie的Domain属性的。Domain属性是用来指定浏览器访问的域。例如，传智播客的域为“itcast.cn”。那么，当设置Domain属性时，其值必须以“.”开头，如Domain=.itcast.cn。默认情况下，Domain属性的值为当前主机名，浏览器在访问当前主机下的资源时，都会将Cookie信息回送给服务器。需要注意的是，Domain属性的值是不区分大小写的。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示用户上次访问时间</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastAccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//输出服务器输出内容的编码方式UTF-8，防止发送乱码</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">String lastAccessTime=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//获取所有的cookie，并将这些cookie存放在数组中</span></span><br><span class="line">Cookie[] cookies=request.getCookies();</span><br><span class="line"><span class="comment">//遍历cookies数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;cookies!=<span class="keyword">null</span>&amp;&amp;i&lt;cookies.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;lastAccess&quot;</span>.equals(cookies[i].getName())) &#123;</span><br><span class="line"><span class="comment">//如果cookie的名称为lastAccess,则获取该cookie的值</span></span><br><span class="line">lastAccessTime=cookies[i].getValue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否存在名称为lastAccess的cookie</span></span><br><span class="line"><span class="keyword">if</span>(lastAccessTime==<span class="keyword">null</span>) &#123;</span><br><span class="line">response.getWriter().print(<span class="string">&quot;您是首次访问本站!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().print(<span class="string">&quot;您上次的访问时间是:&quot;</span>+lastAccessTime);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建cookie,将当前时间作为cookie的值发给客户端</span></span><br><span class="line">String currentTime=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-hh:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;lastAccess&quot;</span>,currentTime);</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"><span class="comment">//发送cookie</span></span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">servlet&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LastAccessServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>chapter04.LastAccessServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LastAccessServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/LastAccessServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/069c45945c6d6bf099567248c0c96eac.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/bb38e98c7d2362d59c05b749e1aff14b.png"></p><h2 id="Session对象"><a href="#Session对象" class="headerlink" title="Session对象"></a>Session对象</h2><p>Cookie可以将用户信息保存在各自的浏览器中，<strong>但Cookie传递的数据量很小</strong>，通常只有4KB，如果数据量过大，会加大服务器端的处理难度。所有引入Session技术，<strong>Session是一种将会话数据保存到服务器端的技术</strong>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/a4c8cc1a3ee85c4a7fe601931b8473b0.png"></p><ul><li><p>当浏览器访问Web服务器时，Servlet容器就会创建一个Session对象和<strong>ID属性</strong>，其中，Session对象就相当于病历档案，ID就相当于就医卡号。Session对象的ID属性以以下这种形式存在</p><pre><code>  Cookie(Set-Cookie:JSESSIONID=111)</code></pre></li><li><p>当客户端后续访问服务器时，只要将<strong>标识号</strong>传递给服务器，服务器就能判断出该请求是哪个客户端发送的，从而选择与之对应的Session对象为其服务。</p></li><li><p>通常情况下，<strong>Session是借助Cookie技术来传递ID属性的。</strong></p></li></ul><h3 id="Session-API"><a href="#Session-API" class="headerlink" title="Session API"></a>Session API</h3><p>HttpServletRequest定义了用于获取Session对象的getSession()方法<br>        public HttpSession  getSession(boolean create)<br>        public HttpSession  getSession()</p><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/42277573bd73c9a314987459f2d7d310.png"></p><h3 id="Session超时管理"><a href="#Session超时管理" class="headerlink" title="Session超时管理"></a>Session超时管理</h3><p>在程序中，Web服务器无法判断当前客户端是否已经离开或关闭，还会保留与之对应的Session对象。But，Session对象还会占用内存，导致Web服务器崩溃怎么办？<br>Web服务器采用了<strong>超时管理来判断客户端是否存在！</strong><br>在一定时间内，如果某个客户端一直没有请求访问，那么，Web服务器会认为客户端已经结束请求，将对应的Session对象变成垃圾对象，并进行清除。反之，Web服务器会创建一个新的Session对象，并分配一个新的ID属性。</p><ul><li><p>在会话过程中，会话的有效时间可以在web.xml文件中设置，其默认值由Servlet容器定义。在&lt;tomcat安装目录&gt;\conf\web.xml文件中，可以找到如下一段配置信息：</p><pre><code>  &lt;session-config&gt;  //超时的时间值，单位为分钟，Tomcat的默认超时间隔为30分种      &lt;session-timeout&gt;30&lt;/session-timeout&gt;  &lt;/session-config&gt;</code></pre></li></ul><blockquote><p>注意：如果将&lt;session-timeout&gt;元素中的时间值设置成0或负数，则表示会话永不超时！</p></blockquote><h3 id="实现购物车"><a href="#实现购物车" class="headerlink" title="实现购物车"></a>实现购物车</h3><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/e4f2e7fadbe121cbd66989c4be42cf04.png"></p><ol><li>创建封装图书信息类</li><li>创建数据库模拟类</li><li>创建Servlet程序</li><li>运行项目，查看结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Cart;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Cart;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDB</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Book&gt; books = <span class="keyword">new</span> LinkedHashMap&lt;String, Book&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    books.put(<span class="string">&quot;1&quot;</span>, <span class="keyword">new</span> Book(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;javaweb开发&quot;</span>));</span><br><span class="line">    books.put(<span class="string">&quot;2&quot;</span>, <span class="keyword">new</span> Book(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;jdbc开发&quot;</span>));</span><br><span class="line">books.put(<span class="string">&quot;3&quot;</span>, <span class="keyword">new</span> Book(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;java基础&quot;</span>));</span><br><span class="line">books.put(<span class="string">&quot;4&quot;</span>, <span class="keyword">new</span> Book(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;struts开发&quot;</span>));</span><br><span class="line">books.put(<span class="string">&quot;5&quot;</span>, <span class="keyword">new</span> Book(<span class="string">&quot;5&quot;</span>, <span class="string">&quot;spring开发&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获得所有的图书</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Book&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> books.values();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据指定的id获得图书</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Book <span class="title">getBook</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> books.get(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Cart;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out = resp.getWriter();</span><br><span class="line"><span class="comment">// 变量cart引用用户的购物车</span></span><br><span class="line">List&lt;Book&gt; cart = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 变量pruFlag标记用户是否买过商品</span></span><br><span class="line"><span class="keyword">boolean</span> purFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 获得用户的session</span></span><br><span class="line">HttpSession session = req.getSession(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 如果session为null，purFlag置为false</span></span><br><span class="line"><span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</span><br><span class="line">purFlag = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 获得用户购物车</span></span><br><span class="line">cart = (List) session.getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line"><span class="comment">// 如果用的购物车为null，purFlag置为false</span></span><br><span class="line"><span class="keyword">if</span> (cart == <span class="keyword">null</span>) &#123;</span><br><span class="line">purFlag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果purFlag为false，表明用户没有购买图书 重定向到ListServlet页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!purFlag) &#123;</span><br><span class="line">out.write(<span class="string">&quot;对不起！您还没有购买任何商品！&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 否则显示用户购买图书的信息</span></span><br><span class="line">out.write(<span class="string">&quot;您购买的图书有：&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Book book : cart) &#123;</span><br><span class="line">out.write(book.getName() + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Cart;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListBookServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">PrintWriter out = resp.getWriter();</span><br><span class="line">Collection&lt;Book&gt; books = BookDB.getAll();</span><br><span class="line">out.write(<span class="string">&quot;本站提供的图书有：&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line"><span class="comment">//String url = &quot;/Session_Car/PurchaseServlet?id=&quot; + book.getId();</span></span><br><span class="line"><span class="comment">//out.write(book.getName() + &quot;&lt;a href=&#x27;&quot; + url </span></span><br><span class="line"><span class="comment">//+ &quot;&#x27;&gt;点击购买&lt;/a&gt;&lt;br&gt;&quot;);</span></span><br><span class="line">String url = <span class="string">&quot;/Session_Car/PurchaseServlet?id=&quot;</span> + book.getId();</span><br><span class="line">HttpSession s=req.getSession();</span><br><span class="line">String newUrl=resp.encodeRedirectURL(url);</span><br><span class="line">out.write(book.getName() + <span class="string">&quot;&lt;a href=&#x27;&quot;</span> + newUrl + <span class="string">&quot;&#x27;&gt;点击购买&lt;/a&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> Cart;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> <span class="keyword">import</span> java.util.*;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PurchaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"> <span class="comment">// 获得用户购买的商品</span></span><br><span class="line"> String id = req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"> <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="comment">// 如果id为null，重定向到ListBookServlet页面</span></span><br><span class="line"> String url = <span class="string">&quot;/Session_Car/ListBookServlet&quot;</span>;</span><br><span class="line"> resp.sendRedirect(url);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> Book book = BookDB.getBook(id);</span><br><span class="line"> <span class="comment">// 创建或者获得用户的Session对象</span></span><br><span class="line"> HttpSession session = req.getSession();</span><br><span class="line"> <span class="comment">// 从Session对象中获得用户的购物车</span></span><br><span class="line"> List&lt;Book&gt; cart = (List) session.getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line"> <span class="keyword">if</span> (cart == <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="comment">// 首次购买，为用户创建一个购物车(List集合模拟购物车)</span></span><br><span class="line"> cart = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line"> <span class="comment">// 将购物城存入Session对象</span></span><br><span class="line"> session.setAttribute(<span class="string">&quot;cart&quot;</span>, cart);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 将商品放入购物车</span></span><br><span class="line"> cart.add(book);</span><br><span class="line"> <span class="comment">// 创建Cookie存放Session的标识号</span></span><br><span class="line"> Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;JSESSIONID&quot;</span>, session.getId());</span><br><span class="line"> cookie.setMaxAge(<span class="number">60</span> * <span class="number">30</span>);</span><br><span class="line"> cookie.setPath(<span class="string">&quot;/Session_Car&quot;</span>);</span><br><span class="line"> resp.addCookie(cookie);</span><br><span class="line"> <span class="comment">// 重定向到购物车页面</span></span><br><span class="line"> String url = <span class="string">&quot;/Session_Car/CartServlet&quot;</span>;</span><br><span class="line"><span class="comment">// resp.sendRedirect(url);</span></span><br><span class="line"> String newurl=resp.encodeRedirectURL(url);</span><br><span class="line"> resp.sendRedirect(newurl);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CartServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Cart.CartServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CartServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/CartServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListBookServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Cart.ListBookServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListBookServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ListBookServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PurchaseServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Cart.PurchaseServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PurchaseServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/PurchaseServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/e9d616950b7dd7a0f5a580734353d660.png"></p><h3 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h3><p>服务器在传递Session对象的ID属性时，是以Cookie的形式传递给浏览器的。但是，如果浏览器的Cookie功能被禁止，那么服务器端是无法通过Session保存用户会话信息的。考虑到浏览器可能不支持Cookie的情况，Servlet规范中引入了URL重写机制来保存用户的会话信息。当浏览器不支持Cookie或者关闭了Cookie功能，这时，在会话过程中，如果想让Web服务器可以保存用户的信息，必须对所有可能被客户端访问的请求路径进行URL重写。</p><ul><li>所谓URL重写，<strong>指的是将Session的会话标识号以参数的形式附加在超链接的URL地址后面。</strong></li><li>对于Tomcat来说，就是将JSESSIONID关键字作为参数名以及会话标识号的值作为参数值附加到URL地址后面。</li><li>HttpServletResponse接口中，定义了两个用于完成URL重写的方法<ol><li>encodeURL(String url)<br>用于对超链接和Form表单的action属性中设置的URL进行重写</li><li>encodeRedirectURL(String url)<br>用于对要传递给HttpServletResponse.sendRedirect方法dURL进行重写</li></ol></li><li>以以上购物车为实例<br>  1.对ListBookServlet类中for循环内的代码进行修改<pre><code>      String url = &quot;/Session_Car/PurchaseServlet?id=&quot; + book.getId();      HttpSession s=req.getSession();      String newUrl=resp.encodeRedirectURL(url);      out.write(book.getName()+&quot;&lt;a href=&#39;&quot;+newUrl+&quot;&#39;&gt;点击购买&lt;/a&gt;&lt;br/&gt;&quot;);</code></pre><ol start="2"><li>需要修改PurchaseServlet类的第38行代码<pre><code> String newurl=resp.encodeRedirectURL(url); resp.sendRedirect(newurl);</code></pre></li></ol></li></ul><h3 id="一次性验证码"><a href="#一次性验证码" class="headerlink" title="一次性验证码"></a>一次性验证码</h3><ul><li>在实际开发中，为了保证用户信息的安全，都会在网站登录的界面中添加一次性验证码，从而限制人们使用软件来暴力猜测密码。一次性验证码的功能同样可以使用Session来实现。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/3579a94014595c7307a78f4a7108f061.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/0828c1220021175acef9745c21d89c6b.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CheckCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CheckCode;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                      HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">// 将Session对象中的User对象移除</span></span><br><span class="line">request.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">response.sendRedirect(<span class="string">&quot;/CheckCode/IndexServlet&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">       HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CheckCode;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未添加验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//public void doGet(HttpServletRequest request, </span></span><br><span class="line"><span class="comment">//                          HttpServletResponse response)</span></span><br><span class="line"><span class="comment">//throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="comment">//response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line"><span class="comment">//String username = request.getParameter(&quot;username&quot;);</span></span><br><span class="line"><span class="comment">//String password = request.getParameter(&quot;password&quot;);</span></span><br><span class="line"><span class="comment">//PrintWriter pw = response.getWriter();</span></span><br><span class="line"><span class="comment">//          //假设正确的用户名 是itcast 密码是123</span></span><br><span class="line"><span class="comment">//if ((&quot;itcast&quot;).equals(username) &amp;&amp; (&quot;123&quot;).equals(password)) &#123;</span></span><br><span class="line"><span class="comment">//User user = new User();</span></span><br><span class="line"><span class="comment">//user.setUsername(username);</span></span><br><span class="line"><span class="comment">//user.setPassword(password);</span></span><br><span class="line"><span class="comment">//request.getSession().setAttribute(&quot;user&quot;, user);</span></span><br><span class="line"><span class="comment">//response.sendRedirect(&quot;/Servlet_Project/IndexServlet&quot;);</span></span><br><span class="line"><span class="comment">//&#125; else &#123;</span></span><br><span class="line"><span class="comment">//pw.write(&quot;用户名或密码错误，登录失败&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加了验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">String checkCode = request.getParameter(<span class="string">&quot;check_code&quot;</span>);</span><br><span class="line">String savedCode = (String) request.getSession().getAttribute(</span><br><span class="line"><span class="string">&quot;check_code&quot;</span>);</span><br><span class="line">PrintWriter pw = response.getWriter();</span><br><span class="line"><span class="keyword">if</span> ((<span class="string">&quot;lzy&quot;</span>).equals(username) &amp;&amp; (<span class="string">&quot;123&quot;</span>).equals(password)</span><br><span class="line">&amp;&amp; checkCode.equals(savedCode)) &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(username);</span><br><span class="line">user.setPassword(password);</span><br><span class="line">request.getSession().setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">response.sendRedirect(<span class="string">&quot;/CheckCode/IndexServlet&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkCode.equals(savedCode)) &#123;</span><br><span class="line">pw.write(<span class="string">&quot;用户名或密码错误，登录失败&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pw.write(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CheckCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">          <span class="comment">// 解决乱码问题</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">         <span class="comment">// 创建或者获取保存用户信息的Session对象</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">response.getWriter().print(</span><br><span class="line"><span class="string">&quot;您还没有登录，请&lt;a href=&#x27;/CheckCode/login.html&#x27;&gt;登录&lt;/a&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;您已登录，欢迎你，&quot;</span> + user.getUsername() + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">response.getWriter().print(</span><br><span class="line"><span class="string">&quot;&lt;a href=&#x27;/CheckCode/LogoutServlet&#x27;&gt;退出&lt;/a&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// 创建Cookie存放Session的标识号</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;JSESSIONID&quot;</span>, session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">30</span>);</span><br><span class="line">cookie.setPath(<span class="string">&quot;/CheckCode&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CheckCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">          <span class="comment">// 解决乱码问题</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">         <span class="comment">// 创建或者获取保存用户信息的Session对象</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">response.getWriter().print(</span><br><span class="line"><span class="string">&quot;您还没有登录，请&lt;a href=&#x27;/CheckCode/login.html&#x27;&gt;登录&lt;/a&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;您已登录，欢迎你，&quot;</span> + user.getUsername() + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">response.getWriter().print(</span><br><span class="line"><span class="string">&quot;&lt;a href=&#x27;/CheckCode/LogoutServlet&#x27;&gt;退出&lt;/a&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// 创建Cookie存放Session的标识号</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;JSESSIONID&quot;</span>, session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">30</span>);</span><br><span class="line">cookie.setPath(<span class="string">&quot;/CheckCode&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta">                           <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;reg&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/CheckCode/LoginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">验证码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;check_code&quot;</span>&gt;</span> </span><br><span class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/CheckCode/CheckServlet&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bt&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CheckServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">CheckCode.CheckServlet</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CheckServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/CheckServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>IndexServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">CheckCode.IndexServlet</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>IndexServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/IndexServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">CheckCode.LogoutServlet</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/LogoutServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">CheckCode.LoginServlet</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/LoginServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/f2b336ae75e6bb9b46ac3c824df13f0c.png"><h1 id="JSP技术"><a href="#JSP技术" class="headerlink" title="JSP技术"></a>JSP技术</h1></li><li>JSP全名是Java Server Pages，它是建立在Servlet规范之上的动态网页开发技术。在JSP文件中，HTML代码与Java代码共同存在，其中，HTML代码用来实现网页中静态内容的显示，Java代码用来实现网页中动态内容的显示。</li><li>JSP特征<ol><li><strong>跨平台</strong>：当从一个平台移植到另一个平台时，JSP和JavaBean的代码并不需要重新编译，这是因为Java的字节码是与平台无关的。</li><li><strong>业务代码相分离</strong>：在使用JSP技术开发Web应用时，可以将界面的开发与应用程序的开发分离开。</li><li><strong>预编译</strong>：预编译就是在用户第一次通过浏览器访问JSP页面时，服务器将对JSP页面代码进行编译，并且仅执行一次编译。编译好的代码将被保存，在用户下一次访问时，会直接执行编译好的代码。</li><li><strong>组件重用</strong>：JSP中可以使用JavaBean编写业务组件，也就是使用一个JavaBean类封装业务处理代码或者作为一个数据存储模型。</li></ol></li></ul><h2 id="JSP运行原理"><a href="#JSP运行原理" class="headerlink" title="JSP运行原理"></a>JSP运行原理</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/fcff5a3c072c415dab9b5351da9d067d.png"></p><h2 id="JSP基本语法"><a href="#JSP基本语法" class="headerlink" title="JSP基本语法"></a>JSP基本语法</h2><p>JSP脚本元素是指嵌套在&lt;%和%&gt;之中的一条或多条Java程序代码。通过JSP脚本元素可以将Java代码嵌入HTML页面中，所有可执行的Java代码，都可以通过JSP脚本来执行。<br>JSP脚本元素主要包含如下3中类型：</p><ol><li>JSP Scriptlets<br>JSP Scriptlets 是一段代码段。当需要使用Java实现一些复杂操作或控制时，可以使用它。JSP Scriptlets的语法格式如下所示：<pre><code>&lt;% java 代码（变量、方法、表达式等）%&gt;</code></pre>在 JSP Scriptlets中声明的变量是JSP页面的局部变量，调用 JSP Scriptlets时，会为局部变量分配内存空间，调用结束后，释放局部变量占用的内存空间</li><li>JSP声明语句<br>JSP的声明语句用于声明变量和方法，它以“&lt;%!”开始，以“%&gt;”结束，其语法格式如下所示：<pre><code>&lt;%!   定义的变量或方法等%&gt;</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta">                        <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSP声明语句<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%!</span></span></span><br><span class="line"><span class="tag"><span class="attr">int</span> <span class="attr">a</span> = <span class="string">1,</span> <span class="attr">b</span> = <span class="string">2;</span> //定义两个变量<span class="attr">a</span>,<span class="attr">b</span></span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%!</span></span></span><br><span class="line"><span class="tag">   <span class="attr">public</span> <span class="attr">String</span> <span class="attr">print</span>() &#123; //定义<span class="attr">print</span>方法</span></span><br><span class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">str</span> = <span class="string">&quot;itcast&quot;</span>; //方法内定义的变量<span class="attr">str</span></span></span><br><span class="line"><span class="tag"><span class="attr">return</span> <span class="attr">str</span>;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"> <span class="attr">out.println</span>(<span class="attr">a</span> + <span class="attr">b</span>); //输出两个变量的和 <span class="attr">--</span>&gt;</span></span><br><span class="line">%&gt; </span><br><span class="line"> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">out.println</span>(<span class="attr">print</span>());//调用<span class="attr">print</span>()方法，输出其返回值 </span></span><br><span class="line"><span class="tag">%&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">%=a+b</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=print()</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">3</span><br><span class="line">itcast</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li>JSP表达式<br>JSP表达式（expression）用于将程序数据输出到客户端，它将要输出的变量或者表达式直接封装在“&lt;%” 开头和以“%&gt;”结尾的标记中，其基本的语法格式如下所示： <pre><code>&lt;%= expression %&gt;</code></pre></li></ol><h2 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h2><pre><code>    &lt;%-- 注释信息 --%&gt;</code></pre><blockquote><p>注意：Tomcat在将JSP页面编译成Servlet程序时，会忽略JSP页面中被注释的内容，不会将注释信息发送到客户端。</p></blockquote><h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h2><p>为了设置JSP页面中的一些信息，SUN公司提供了JSP指令。 JSP 2.0中共定义了page、include和taglib三种指令，每种指令都定义了各自的属性。接下来，本节将针对page和include指令进行详细地讲解。</p><h3 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h3><p>page指令用于对页面的某些特性进行描述，例如，页面的编码方式，JSP页面采用的语言等。其语法为：</p><pre><code>    &lt;%@ page 属性名= &quot;属性值&quot;%&gt;</code></pre><p>在page指令的语法格式中，page用于声明指令名称，属性用来指定JSP页面的某些特性。page指令提供了一系列与JSP页面相关的属性。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/9bae8c8caaf6e233dcb5ec4f2cdc8f24.png"></p><blockquote><p>注意：page指令对整个页面都有效，而与其书写的位置无关，但是习惯上把page指令写在JSP页面的最前面。<strong>其中import属性可以多次使用，其他属性只能出现一次</strong>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">&quot;java.awt.*&quot;</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">&quot;java.util.*&quot;</span>,&quot;<span class="attr">java.awt.</span>*&quot;%&gt;</span></span><br></pre></td></tr></table></figure><h3 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h3><p>include指令用于在JSP页面静态包含一个文件，例如HTML文件，文本文件等。其语法为：</p><pre><code>    &lt;%@ include file=&quot;被包含的文件地址&quot;%&gt;</code></pre><p>include指令只有一个file属性，该属性用来指定插入到JSP页面目标位置的文件资源。需要注意的是，插入文件的路径一般不以“/”开头，而是使用相对路径。</p><ul><li>需要注意的问题<ol><li>被引入的文件必须遵循JSP语法，其中的内容可以包含静态HTML、JSP脚本元素和JSP指令等普通JSP页面所具有的一切内容。</li><li>除了指令元素之外，被引入的文件中的其他元素都被转换成相应的Java源代码，然后插入进当前JSP页面所翻译成的Servlet源文件中，插入位置与include指令在当前JSP页面中的位置保持一致。</li><li>file属性的设置值必须使用相对路径，如果以“/”开头，表示相对于当前Web应用程序的根目录（注意不是站点根目录），否则，表示相对于当前文件。需要注意的是，这里的file属性指定的相对路径是相对于文件（file），而不是相对于页面（page）。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">out.println</span>(<span class="attr">new</span> <span class="attr">java.util.Date</span>()<span class="attr">.toLocaleString</span>());</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎你<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎你，现在的时间是：</span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">include</span> <span class="attr">file</span>=<span class="string">&quot;date.jsp&quot;</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="JSP隐式对象"><a href="#JSP隐式对象" class="headerlink" title="JSP隐式对象"></a>JSP隐式对象</h2><p>为了简化Web应用程序的开发，JSP 2.0规范中提供了<code>9个隐式（内置）对象</code>，它们是JSP默认创建的，可以直接在JSP页面中使用。</p><ul><li>隐式对象的名称、类型和描述信息如下所示：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/2a951c795d2c9e5fc5f0832209d1c9bf.png"></p><h3 id="out对象"><a href="#out对象" class="headerlink" title="out对象"></a>out对象</h3><ul><li>out对象是java.servlet.jsp.JspWriter类的实例对象，其作用是用来向客户端发送文本形式的实体内容。out对象的类型为JspWriter，它相当于一种带缓存功能的PrintWriter。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/813615da3d4215e4895733d00d131efb.png"><br>从图中可以看出，在JSP页面中，通过out隐式对象写入数据相当于将数据插入到JspWriter对象的缓冲区中，只有调用了ServletResponse.getWriter()方法，缓冲区的数据才能真正写入到Servlet引擎所提供的缓冲区中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> <span class="attr">buffer</span>=<span class="string">&quot;0kb&quot;</span>%&gt;</span></span><br><span class="line"><span class="comment">&lt;!--buffer属性用于设置out对象的缓冲区大小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line">out.println(&quot;first line&lt;br /&gt;&quot;);</span><br><span class="line">response.getWriter().println(&quot;second line<span class="tag">&lt;<span class="name">br</span> /&gt;</span>&quot;);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h3><p>pageContext对象是javax.servlet.jsp.PageContext类的实例对象，它代表当前JSP页面的运行环境，并提供了一系列用于获取其他隐式对象的方法。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/d021d90f09b95073b24589c4bc585a23.png"><br>pageContext对象不仅提供了获取隐式对象的方法，还提供了存储数据的功能。pageContext对象存储数据是通过操作属性来实现的，其操作属性的一系列方法如下。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/25/bf9b1fa0790c5fe95877feec750d086d.png"><br>参数scope指定的是属性的作用范围。它有四个值：</p><ul><li>pageContext.PAGE_SCOPE：表示页面范围</li><li>pageContext.REQUEST_SCOPE：表示请求范围</li><li>pageContext.SESSION_SCOPE：表示会话范围</li><li>pageContext.APPLICATION_SCOPE：表示Web应用程序范围</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>pageContext<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">//获取<span class="attr">request</span>对象</span></span><br><span class="line"><span class="tag"><span class="attr">HttpServletRequest</span> <span class="attr">req</span> = <span class="string">(HttpServletRequest)</span> <span class="attr">pageContext.getRequest</span>();</span></span><br><span class="line"><span class="tag">//设置<span class="attr">page</span>范围内属性</span></span><br><span class="line"><span class="tag"><span class="attr">pageContext.setAttribute</span>(&quot;<span class="attr">str</span>&quot;, &quot;<span class="attr">Java</span>&quot;,<span class="attr">pageContext.PAGE_SCOPE</span>);</span></span><br><span class="line"><span class="tag">//设置<span class="attr">request</span>范围内属性</span></span><br><span class="line"><span class="tag"><span class="attr">req.setAttribute</span>(&quot;<span class="attr">str</span>&quot;, &quot;<span class="attr">Java</span> <span class="attr">Web</span>&quot;);</span></span><br><span class="line"><span class="tag">//获得的<span class="attr">page</span>范围属性</span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">str1</span> = <span class="string">(String)pageContext.getAttribute(</span>&quot;<span class="attr">str</span>&quot;,<span class="attr">pageContext.PAGE_SCOPE</span>);</span></span><br><span class="line"><span class="tag">//获得的<span class="attr">request</span>范围属性</span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">str2</span> = <span class="string">(String)pageContext.getAttribute(</span>&quot;<span class="attr">str</span>&quot;,<span class="attr">pageContext.REQUEST_SCOPE</span>);</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=&quot;page范围：&quot;+str1</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=&quot;request范围：&quot;+str2</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">page范围:Java</span></span><br><span class="line"><span class="comment">request范围:Java Web</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="exception对象"><a href="#exception对象" class="headerlink" title="exception对象"></a>exception对象</h3><p>在JSP页面中，经常需要处理一些异常信息，这时，可以通过exception对象来实现。exception对象是java.lang.Exception类的实例对象，用于封装JSP中抛出的异常信息。需要注意的是，exception对象只有在错误处理页面才可以使用，即page指令中指定了属性&lt;%@ page isErrorPage=”true”%&gt;的页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--exception.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">errorPage</span>=<span class="string">&quot;error.jsp&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta">                        <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>exception object test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">int</span> <span class="attr">a</span> = <span class="string">3;</span></span></span><br><span class="line"><span class="tag"><span class="attr">int</span> <span class="attr">b</span> = <span class="string">0;</span></span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line">输出结果为：<span class="tag">&lt;<span class="name">%=(a</span> / <span class="attr">b</span>)%&gt;</span><span class="comment">&lt;!--此处会产生异常  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--error.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">isErrorPage</span>=<span class="string">&quot;true&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta">                       <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>error page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       显示异常信息 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">%=exception.getMessage()</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行exception.jsp页面，浏览器将错误显示了出来，说明当exception.jsp页面发生错误时，会自动调用error.jsp页面进行错误处理</p><h2 id="JSP动作元素"><a href="#JSP动作元素" class="headerlink" title="JSP动作元素"></a>JSP动作元素</h2><p>JSP动作元素用来控制JSP的行为，执行一些常用的JSP页面动作</p><h3 id="lt-jsp-include-gt-动作元素"><a href="#lt-jsp-include-gt-动作元素" class="headerlink" title="&lt;jsp:include&gt;动作元素"></a>&lt;jsp:include&gt;动作元素</h3><p>在JSP页面中，为了把其他资源的输出内容插入到当前JSP页面的输出内容中，JSP技术提供了&lt;jsp:include&gt;动作元素<br>其语法格式为：</p><pre><code>    &lt;jsp:include page=&quot;relativeURL&quot; flush=&quot;true|false&quot; /&gt;</code></pre><p>page指定被引入的相对路径，flush指定是否将当前页面的输出内容刷新到客户端，默认false<br>&lt;jsp:include&gt;包含的原理是将被包含的页面编译处理后将结果包含在页面中。当浏览器第一次请求一个使用&lt;jsp:include&gt;包含其他页面的页面时，Web容器首先会编译被包含的页面，然后将编译处理后的返回结果包含在页面中，之后编译包含页面，最后将两个页面组合的结果回应给浏览器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--included.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta">                        <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>include<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%Thread.sleep(5000);%</span>&gt;</span></span><br><span class="line"> included.jsp内的中文<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dynamicInclude.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta">                          <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>dynamicInclude page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">dynamicInclude.jsp内的中文</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;included.jsp&quot;</span> <span class="attr">flush</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">dynamicInclude.jsp内的中文</span></span><br><span class="line"><span class="comment">included.jsp内的中文</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器首先显示dynamicInclude.jsp页面的输出内容，等待5秒后，才会显示include.jsp页面的输出内容。说明被引用的资源included.jsp在当前JSP页面输出内容后才被调用。</p><h3 id="lt-jsp-forward-gt-动作元素"><a href="#lt-jsp-forward-gt-动作元素" class="headerlink" title="&lt;jsp:forward&gt;动作元素"></a>&lt;jsp:forward&gt;动作元素</h3><p>&lt;jsp:forward&gt;动作元素将当前请求转发到其他Web资源（HTML页面、JSP页面和Servlet等），在执行请求转发之后的当前页面将不再执行，而是执行该元素指定的目标页面。<br>其语法格式为：</p><pre><code>    &lt;jsp:forward page=&quot;relativeURL&quot; /&gt;</code></pre><p>page指定请求转发到的资源的相对路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jspforward.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta">                        <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>forword page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">&quot;welcome.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--welcome.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span></span><br><span class="line"><span class="meta">                         <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>welcome page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">你好，欢迎进入首页，当前访问时间是：</span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">out.print</span>(<span class="attr">new</span> <span class="attr">java.util.Date</span>());</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行后，地址栏中显示的是jspforward.jsp，但浏览器显示出welcome.jsp的输出内容。由于请求转发是服务器端的操作，浏览器并不知道请求的页面，所以地址栏不会发生改变</p><h1 id="EL表达式和JSTL"><a href="#EL表达式和JSTL" class="headerlink" title="EL表达式和JSTL"></a>EL表达式和JSTL</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE程序设计项目</title>
      <link href="2020/11/16/JavaSE%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/11/16/JavaSE%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744">Java基础回顾</a><br><a href="https://www.runoob.com/java/java-tutorial.html">Java教程|菜鸟教程</a><br><a href="https://blog.csdn.net/Tianc666/article/details/109239195?utm_source=app">小名的《Java编程思想》学习笔记</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java最早是由SUN公司（已被Oracle收购）的<code>詹姆斯·高斯林</code>（高司令，人称Java之父）在上个世纪90年代初开发的一种编程语言。<br>Java 主要分为三个版本：</p><ul><li>Java<code>SE</code>(J2SE)(Java2 Platform Standard Edition，java平台标准版)</li><li>Java<code>EE</code>(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>Java<code>ME</code>(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li></ul><p><a href="https://www.java.com/zh-CN/download/help/index_installing.html">Java技术帮助</a></p><h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><p>  1.<code>跨平台性</code>:跨平台性是指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行。 Java自带的虚拟机很好地实现了跨平台性。 Java源程序代码经过编译后生成二进制的字节码是与平台无关的，是可被Java虚拟机识别的一种机器码指令，Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。</p><p>2.<code>简单</code>:Java语言是一种相当简洁的“面向对象”程序设计语言。Java语言省略了C++语言中所有的难以理解、容易混淆的特性，例如头文件、指针、结构、单元、运算符重载、虚拟基础类等。它更加严谨、简洁。</p><p>3.<code>面向对象</code>:面向对象(Objiect Oriented)是一种软件开发思想。它是对现实世界的一种抽象，面向对象会把相关的数据和方法组织为一个整体看待。不用像面向过程那样严格按照顺序来执行每个动作。</p><p>4.<code>健壮性</code>:Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。</p><p>5.<code>多线程</code>:是一种轻量级进程，是现代程序设计中必不可少的一种特性。多线程处理能力使得程序能够具有更好的交互性、实时性。</p><h2 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h2><p>Java语言编写的程序既是编译型的，又是解释型。运行期环境代表着Java平台，开发人员编写Java代码(<code>.java文件</code>)，然后用Java编译器将之编译成字节码(<code>.class文件</code>)，JVM才能识别并运行它（<code>编译只进行一次，而解释在每次运行程序时都会进行</code>），JVM针对每个操作系统开发其对应的解释器，所以只要其操作系统有对应版本的JVM，那么这份Java编译后的代码就能够运行起来，这就是Java能<code>一次编译，到处运行</code>的原因,编译后的字节码采用一种针对JVM优化过的机器码形式保存，虚拟机将<code>字节码</code>解释为<code>机器码</code>，然后在计算机上运行。<br><code>*.java</code>-&gt;<code>*.class</code>-&gt;<code>字节码</code>-&gt;<code>机器码</code><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@d3a99ed6e3318056b293e2a87abbb4ed698fd9b0/2020/11/16/ea50b091a4253c41449ca87dd53389ed.png"></p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/23/1db25e96ee4e5eebd0302ce9d07eee1a.png"><br>  1.<code>JVM</code>(Java Virtual Machine)：虚拟机,使软件在不同操作系统中，模拟相同的环境。<br>  2.<code>JRE</code>(Java Runtime Environment)：Java运行环境,包含<code>JVM和解释器</code>，完整的运行环境.<br>  3.<code>JDK</code>(Java Development Kit)：Java开发工具包，包含<code>JRE+类+开发工具包</code><br>  4.<code>API</code>(Application Programming Interface)：<code>程序编程接口</code>，JavaAPI文档是Java程序员开发不可缺少的编程辞典。<br>  5.<code>编译型</code>语言：使用编译器将高级语言源代码<code>一次性</code>“翻译成”可被平台硬件执行的<code>机器码</code>，程序运行效率高。编译生成的可执行文件可以<code>脱离开发环境</code>，在特定的平台上独立运行。但编译型语言被编译成特定平台上的机器码，生成的可执行性程序<code>无法移植</code>到其他平台上运行。例如C，C++等。<br>  6.<code>解释型</code>语言：指使用专门的解释器对源程序<code>逐行解释成</code>特定平台的机器码并立即执行的语言。每次执行解释型语言的程序都需要进行一次编译，运行效率较低，而且不能脱离解释器独立运行。解释型语言<code>跨平台</code>比较容易，只需要特定平台的解释器即可。例如Ruby，Python<br><a href="https://www.oracle.com/index.html">JDK下载:Oracle公司官方网站</a><br><a href="https://www.eclipse.org/">Eclipse开发工具下载</a></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><blockquote><p>配置环境变量的原因：系统不知道去哪找JDK</p></blockquote><p>我的电脑-&gt;属性-&gt;高级系统设置-&gt;<code>环境变量</code></p><p>第一步：新建<code>JAVA_HOME</code>变量名，并找到<code>JDK路径</code>作为变量值<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/2124f1b8f6982d2e60f0ced503822a88.png"></p><p>第二步：新建<code>CLASSPATH</code>变量名，并把(<code>.</code>)作为变量值，指代当前路径。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/dd87ad9aec208a6c9dad713b102c903e.png"></p><blockquote><p>根据CLASSPATH环境变量定位类，在JDK1.4版本以前需要设置CLASSPATH变量值为(.)，用以告诉JRE需要在当前路径下搜索Java类。</p></blockquote><p>第三步：找到Path目录，把JDK下bin目录作为新建值，bin目录下有Java命令工具，此Path路径告诉计算机所用Java指令去哪找。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/42c44687d3f4a60648175e2b6ca55a82.png"></p><blockquote><p>Windows操作系统是根据Path环境变量来查找命令，Path环境变量的值是一系列路径，根据路径查找。</p></blockquote><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java的API结构"><a href="#Java的API结构" class="headerlink" title="Java的API结构"></a>Java的API结构</h2><p>Java的类库包括<code>核心Java包</code>、<code>Javax扩展包</code>和<code>Org包</code>。<br> <code>Java.lang</code>包：封装所有编程应用的<code>基本类</code>，如Object、Class、System、String、Integer、Thread等。</p><ul><li><p><code>Object</code>是所有类的根，它所包含的属性和方法被所有类继承。</p></li><li><p><code>Class类</code>是由编译器自动生成对象的一个特殊类，它伴随每个类。Class对象包含所属类的所有信息，可以通过Class类的方法来访问这些信息。</p></li><li><p><code>System类</code>是一个特殊类，它是一个final类，所有的方法都用类变量来调用，即对System类<code>不能实例化</code>，主要提供标准输入/输出和系统环境信息的访问、设置。例：System.out。</p></li></ul><hr><table><thead><tr><th align="center">Java核心包</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">java.awt</td><td align="center">封装抽象窗口工具包，提供构建和管理用户图形界面的功能</td></tr><tr><td align="center">java.applet</td><td align="center">为Applet提供执行需要的所有类</td></tr><tr><td align="center">java.io</td><td align="center">提供程序输入/输出文件操作的类</td></tr><tr><td align="center">java.net</td><td align="center">提供程序执行网络通信应用及URL处理的类</td></tr><tr><td align="center">java.rmi</td><td align="center">提供程序远程方法调用所需的类</td></tr><tr><td align="center">java.math</td><td align="center">提供程序常用的整数算术以及十进制算术的基本方法类</td></tr><tr><td align="center">java.util</td><td align="center">提供实用程序类和集合类，如日期方法类、集合、数组类</td></tr><tr><td align="center">java.sql</td><td align="center">提供访问和处理标准数据源数据的类</td></tr><tr><td align="center">java.security</td><td align="center">提供网络安全操作类</td></tr><tr><td align="center">java.text</td><td align="center">提供所有处理文本、日期、数字以及非自然语言的消息操作类</td></tr><tr><td align="center">java.bean</td><td align="center">提供开发编写java bean所需的类</td></tr></tbody></table><table><thead><tr><th align="center">扩展包Javax</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">javax.naming</td><td align="center">提供命名服务所需的类和接口</td></tr><tr><td align="center">javax.swing</td><td align="center">提供构建和管理应用程序的图形界面的轻量级的构件</td></tr><tr><td align="center">javax.rmi</td><td align="center">提供远程方法调用的应用程序接口</td></tr><tr><td align="center">javax.transaction</td><td align="center">供事务处理所需的类</td></tr><tr><td align="center">javax.sound</td><td align="center">提供多媒体声音要求的MIDI输入/输出以及合成操作的基本类</td></tr><tr><td align="center">javax.accessibility</td><td align="center">提供用户界面构件之间相互访问机制的基本类</td></tr></tbody></table><p><code>Org</code>包：Org包是一些有关<code>国际组织的标准</code>。</p><h2 id="Java编写及运行"><a href="#Java编写及运行" class="headerlink" title="Java编写及运行"></a>Java编写及运行</h2><p>Java程序包括<code>源代码，由编译器生成的类文件</code>，有归档工具jar生成的<code>.jar</code>文件、对象状态序列化<code>.ser</code>文件。其中源代码的结构如下：<br>（1）package语句。0或多个，用于使文件存入指定包中，这条语句必须置于文件之首。<br>（2）import语句。0或多个。必须在所有类定义之前引入标准类。<br>（3）public class Definition（公共类定义），0或1个，指定应用程序类名，需与源文件名一致。<br>（4）class Definition，0或多个，类定义。<br>（5）interface Definition，0或多个，接口定义。<br>Java是区分字母大小写的。<code>源文件与程序类（即公共类）名字相同</code>。其扩展名为.java。源文件中最多只能有一个public类，其他类的个数不限。</p><p>用编译器<code>javac</code>.exe对Java程序(源代码)进行<code>编译</code>。<br>用解释器<code>java</code>.exe<code>解释</code>执行所生成的.class文件（就是类文件）。</p><hr><p>   JDK工具：</p><ul><li>javac.exe。Java编译器。</li><li>java.exe。Java解释器，执行字节码程序。</li><li>javadoc.exe。Java文档生成器，对Java源文件和包以MML格式产生AP文档。制作源文件类结构的HTML格式文档。 </li><li>Javap.exe。Java类分解器，对.class文件提供字节代码的反汇编并打印。查看源码类中的public方法名字和public成员变量名字。</li><li>jdb.exe。Java调试器。  </li><li>javaprof.exe。Java剖析工具，提供解释器剖析信息。  </li><li>appletviewer.exe。Java Applet浏览器。  </li></ul><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p><code>变量</code>是在程序的运行过程中<code>其值可以被改变的量</code>。<br>Java中的变量遵循<code>先声明、后赋值、再使用</code>的原则。声明的作用有两点：</p><ul><li>确定该变量的标识符(即名称)，以便系统为它指定<code>存储地址</code>和识别它，这便是“<code>按名访问</code>”原则；</li><li>为该变量指定数据类型，以便系统为它分配足够的存储单元。</li></ul><pre><code>    int x=45;   //实例变量    static int y=90;  //静态变量，有效范围可以跨类。    //静态成员属于类所有，可以使用&quot;类名.静态变量&quot;在其他类中使用。</code></pre><p><code>常量</code>是指在程序的整个运行过程中<code>其值始终保持不变的量</code>。<br>Java语言用<code>final </code>关键字来定义常量。</p><pre><code>    final static double PI=3.1415;</code></pre><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p><code>局部变量</code>是在类的<code>方法体中</code>定义的变量和方法的参数，作用域是<code>方法代码段</code>。<br><code>成员变量</code>在<code>类中</code>声明而不是在类的方法中声明，作用域是<code>整个类</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test23</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> member; <span class="comment">//成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">                  <span class="keyword">int</span> a=<span class="number">50</span>;  <span class="comment">//局部变量a</span></span><br><span class="line">                  member=a; <span class="comment">//member在整个类内有效</span></span><br><span class="line">              <span class="keyword">return</span> member;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">                   <span class="keyword">int</span> x;</span><br><span class="line">               x=a; <span class="comment">//a在方法h中失效</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员变量分为<code>实例变量</code>和<code>静态变量</code>（类变量）。在成员变量的前面加上<code>static</code>，这样的变量称为静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;    <span class="comment">//x为实例变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y;  <span class="comment">//y为静态变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当局部变量的名字与成员变量的名字相同时，则成员变量被<code>隐藏</code>，即这个成员变量在这个方法内暂时无效,这时如果想在该方法内使用成员变量，必须使用关键字<code>this</code>。 </p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>整型常量</p></blockquote><pre><code>整数型常量有3种表示形式：  (1) 十进制整数。如：56，-24，0。  (2) 八进制整数。以`零`开头的数是八进制整数。如：017，0，0123。  (3) 十六进制整数。以`0x`开头的数是十六进制整数。如：0x17，ox0，0xf，0xD。十六进制整数可以包含数字0～9、字母a～f或A～F。</code></pre><p>整型常量在计算机中默认值占32位，分byte,short,int和long 4类，分别占8，16，32，64位，对于long类型整型常量书写表示时，要在数字后面加<code>l或L</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/97c00b1161661c3011756b181c990675.png"></p><blockquote><p>浮点型</p></blockquote><p>浮点型数据属于<code>实型数据</code>，分<code>float</code>和<code>double</code>两种。浮点型数据有数字和小数组成，必须有小数点，<code>小数位数越多，表示越精确</code>。<br>(1)<code>实型常量</code><br>十进制书写格式：<br>             如0.256、1.83、256.0等；<br>科学计算格式：<br>           256e3或256E3.<br>           要求e/E之前必须有数字， e/E必须是整数。<br>实型常量在计算机中存储分<code>float和double</code>型，</p><p>如1.33568E2<code>f</code>或1.33568E2<code>F</code>表示float浮点数，在计算机内存储占<code>32位</code>；</p><p>如1.33568E2D或1.33568E2d或1.33568E2表示double双精度浮点数，在计算机内存储占<code>64位</code>。</p><blockquote><p>提示：如数字后没有任何字母，计算机默认为<code>double</code>型。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/f1ab0525c4c3ce0ea25f6c00b8746c73.png"></p><blockquote><p>布尔类型</p></blockquote><p>布尔型数据只有两个值：<code>true</code>(真)和<code>false</code>(假)。<br>一般用于逻辑判断，在计算机内存占<code>一个字节</code>。<br>默认值为<code>false</code>。</p><blockquote><p>字符型</p></blockquote><p>用<code>单引号</code>括起的单个字符。这个字符可以是Unicode字符集中的任何字符。  例如：‘s’，‘F’，‘@’，‘*’。<br>用单引号括起的转义字符。用反斜线“＼”开头，后面跟一个字母来表示<code>某个特定的控制符</code>，这便是转义字符。<br>字符串常量是用双引号括起的0个或多个字符串序列。字符串中可以包括转义字符。如：“he”，”two＼n”，”124\n”，” “。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/787794caa50fff7a4035275ecadd0333.png"></p><blockquote><p>类型转换</p></blockquote><p>Java语言的各种数据之间转换有两种：<code>自动转换</code>和<code>强制转换</code>。<br>（1）自动转换只能将<code>位数少</code>的数据类型向<code>位数多</code>的数据类型转换。自动转换的优先级次序如下：<br>       byte,short,char—&gt;int—&gt;long—&gt;float—&gt;double<br>（2）将较长的数据类型转换成较短的数据类型时，只能使用强制转换，通常用赋值语句来实现，在要施加强制转换的变量名前用“<code>（）</code>”括上所要强制转换的类型符。<br>    例如：   short s;<br>                   byte b=(byte)s;</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>1.按运算符所涉及的操作数的数目划分：<br>（1）一元运算符：++，–，+，- 。如++a<br>（2）二元运算符：+，-，&gt;。如a+b; a&gt;b;<br>（3）三元运算符：？：。如 a&gt;b?1:0;<br>2.按运算符的功能划分：<br>（1）<code>赋值运算符</code>:<br>使用操作符<code>=</code>表示，意思是把右边的值复制给左边，右边的值可以是任何常数、变量或者表达式，但左边的值必须是明确的，以及定义的变量。<br>但对于对象来说，复制的表示对象的值，而是对象的引用，实际上是将<code>一个对象的引用赋值给另一个对象</code>。<br>（2）<code>算术运算符</code>：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/90aab6dfec498f979f276843151337c7.png"><br>（3）<code>自增、自减运算符</code></p><pre><code>     // 设a=4                  b=a++; //先将a的值加1，然后赋值给b，此时a=5,b=5                  b=++a; //先将a的值赋给b，再将a的值变为5，此时a=5,b=4</code></pre><p>（4）<code>关系运算符</code>：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/ef04e4febc938b0081001828c4090a1f.png"><br>（5）<code>逻辑运算符</code>：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/5950f21c75380ffb7eed7bdf9731fba6.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/71f694e4f81cef411e9ce16abf1918de.png"><br>  (6）<code>位运算符</code>：<br>按位运算符用来操作整数基本类型中的每个<code>比特</code>位，也就是二进制位。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/189f09f590958449ab3443c78deb162d.png"><br>如果进行比较的双方是数字的话，那么进行比较就会变为<code>按位运算</code>。</p><p>按位<code>与</code>：按位进行与运算（AND），如果操作数中位都为1，结果才为1，否则结果为0.需要首先把比较双方转换成二进制再按每个位进行比较。</p><p>按位<code>或</code>：按位进行或运行（OR），两个位只要有一个为1，那么结果就是1，否则为0。</p><p>按位<code>非</code>：按位进行异或运算（XOR），如果位为0，结果是1，如果位为1，结果是0。</p><p>按位<code>异或</code>：按位进行取反运算（NOT），两个操作数的位中，相同则结果为0，不同则结果为1。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/ca9273553b2068270c274c024ba004cd.png"></p><blockquote></blockquote><p>   例题：<br>   a=<code>1</code>0011101；<br>   b=00111001;    有如下结果：(&gt;&gt;&gt;)为无符号右移，忽略符号位，空位都以0补齐。<br>   a&lt;&lt;3=11101<code>000</code>;       a&gt;&gt;3=<code>111</code>10011;<br>   a&gt;&gt;&gt;3=<code>000</code>10011;     a&amp;b=0001101;<br>   a|b=10111101;          ~a=01100010;<br>   a^b=10100100;</p><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><p>1.<code>equals()</code> :判断两个字符串是否相等，<code>内容是否一致</code>。要判断引用类型的变量内容是否相等，必须使用equals()方法<br>2. <code>==</code> ：判断两个字符串在内存中的<code>首地址</code>，即是否为同一字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//输入要导包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">String name=s.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> password=s.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入工资&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> money=s.nextDouble();</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">&quot;Tom&quot;</span>)&amp;&amp;password==<span class="number">123</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>Java流程控制包括<code>分支语句</code>、<code>循环语句</code>、<code>跳转语句</code>、<code>异常处理语句</code>等。</p><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h3 id="if…else条件语句"><a href="#if…else条件语句" class="headerlink" title="if…else条件语句"></a>if…else条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test16</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year=(<span class="keyword">int</span>)(Math.random()*<span class="number">2000</span>)+<span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;The year is:&quot;</span>+year);</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> ||year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">       System.out.println(year+<span class="string">&quot;年是闰年!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">       System.out.println(year+<span class="string">&quot;年不是闰年!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if…else-if-多分支语句"><a href="#if…else-if-多分支语句" class="headerlink" title="if…else if 多分支语句"></a>if…else if 多分支语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多条件判断</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于60&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于30但小于60&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值大于0但小于30&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x的值小于等于0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="switch分支语句"><a href="#switch分支语句" class="headerlink" title="switch分支语句"></a>switch分支语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断整数类型</span></span><br><span class="line"><span class="comment">//表达式option只能返回几个数据类型的值：int、short、byte、char。</span></span><br><span class="line"><span class="comment">//case子句中的值必须是常量，而且所有case子句中的值是不同的。</span></span><br><span class="line"><span class="comment">//break语句用来在执行完某一case分支后，使程序跳出switch语句。</span></span><br><span class="line"><span class="keyword">switch</span> (option) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断字符串类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String fruit = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Selected apple&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;pear&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Selected pear&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;mango&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;Selected mango&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;No fruit selected&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h3><p>while循环通常用于<code>循环次数不确定</code>的情况，也可以用于循环次数确定的情况。<br>利用一个条件来判断<code>是否反复</code>执行这个语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;   <span class="comment">//条件为true，执行循环语句，条件为false退出循环。</span></span><br><span class="line">   循环语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续执行后续代码</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(a &gt; <span class="number">5</span>)&#123;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;                    <span class="comment">//先执行循环，再判断条件</span></span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nt b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// do···while循环语句</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;b == &quot;</span> + b);</span><br><span class="line">b--;</span><br><span class="line">&#125; <span class="keyword">while</span>(b == <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环执行时，首先执行<code>初始化操作</code>，然后<code>判断终止条件</code>是否被满足，如果满足<code>执行循环体</code>，最后<code>执行迭代运算</code>。完成一次循环后，重新判断终止条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 循环检测条件; 迭代运算) &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//九九乘法表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test16</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">         System.out.print(i+<span class="string">&quot;×&quot;</span>+j+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">     System.out.println();</span><br><span class="line">&#125;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>逗号操作符</code><br>通过逗号操作符，可以在for语句内<code>定义多个变量</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;j = i + <span class="number">10</span>;i &lt; <span class="number">5</span>;i++, j = j * <span class="number">2</span>)&#123;&#125; </span><br></pre></td></tr></table></figure><h3 id="for-each循环（增强for）"><a href="#for-each循环（增强for）" class="headerlink" title="for each循环（增强for）"></a>for each循环（增强for）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array[] = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr : array) &#123;</span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>用于<code>强行退出</code>当前循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span>)&#123;  <span class="comment">//i=5跳出循环</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>用于执行<code>下一次循环</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">  System.out.printl(<span class="string">&quot; i = &quot;</span> + i );</span><br><span class="line"> <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;  <span class="comment">//执行下一次循环</span></span><br><span class="line">System.out.printl(<span class="string">&quot;continue ... &quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;I Love China&quot;</span>;</span><br><span class="line">str.length():返回字符串`长度`。</span><br><span class="line">str.indexOf(substr):返回指定字符串`首次出现`的索引位置。没有找到返回-<span class="number">1</span>,字符串下标<span class="number">0</span>~length()-<span class="number">1</span>。</span><br><span class="line">str.lastIndexOf(String str):返回指定字符串`最后一次出现`的索引位置，没有找到返回-<span class="number">1</span>。</span><br><span class="line">str.charAt(<span class="keyword">int</span> index):返回`指定索引处`的字符。</span><br><span class="line">str.substring(<span class="keyword">int</span> beginIndex):获取从`指定位置开始`截取到该字符串`结尾`的子串。</span><br><span class="line">str.substring(<span class="keyword">int</span> beginIndex,<span class="keyword">int</span> endIndex):获取从`指定位置开始截取到某一位置`的子串。</span><br><span class="line">str.trim()：返回字符串的副本，`忽略`前后空格。</span><br><span class="line">str.replace(<span class="keyword">char</span> old,<span class="keyword">char</span> <span class="keyword">new</span>)：将指定字符串或字符`替换`为新字符串或字符。</span><br><span class="line">str.startsWith(String s)：判断是否以s`开头`。</span><br><span class="line">str.endsWith(String s)：判断是否以s`结尾`。</span><br><span class="line">str1.equals(str2)：比较是否有`相同`的字符和长度。</span><br><span class="line">str1.equalsIgnoreCase(str2)：`不区分`大小写比较。</span><br><span class="line">str.toLowerCase()：转为小写。</span><br><span class="line">str.toUpperCase()：转为大写。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>键盘读取字符串的对话框</span><br><span class="line">      javax.swing.JOptionPane用于从控制台键盘读入字符串</span><br><span class="line">      String input=JOptionPane.showInputDialog(“How are you?”);</span><br><span class="line"><span class="number">2.</span> 将字符串对象转换为基本数据类型</span><br><span class="line">       <span class="keyword">int</span> age=Integer.parseInt(input);  </span><br><span class="line"><span class="comment">//演示</span></span><br><span class="line">     String name=JOptionPane.showInputDialog(<span class="string">&quot;What is your name?&quot;</span>);</span><br><span class="line">     String input=JOptionPane.showInputDialog(<span class="string">&quot;How old are you?&quot;</span>);</span><br><span class="line">     String input2=JOptionPane.showInputDialog(<span class="string">&quot;请输入一个float数&quot;</span>);</span><br><span class="line">     <span class="keyword">int</span> age=Integer.parseInt(input);</span><br><span class="line">     <span class="keyword">float</span> aa=Float.parseFloat(input2);</span><br><span class="line">     System.out.println(<span class="string">&quot;Hello  &quot;</span>+name+<span class="string">&quot;. Next year,you will be &quot;</span>+(age+<span class="number">1</span>));</span><br><span class="line">     System.out.println(<span class="string">&quot;输入的float数是：&quot;</span>+aa);</span><br><span class="line">     System.exit(<span class="number">0</span>);     <span class="comment">//一定要加上这一句，要不然程序不会自动退出 </span></span><br></pre></td></tr></table></figure><h3 id="日期和时间格式化"><a href="#日期和时间格式化" class="headerlink" title="日期和时间格式化"></a>日期和时间格式化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//日期格式化</span></span><br><span class="line">String year=String.format(<span class="string">&quot;%tY&quot;</span>, date); </span><br><span class="line">String month =String.format(<span class="string">&quot;%tB&quot;</span>, date); </span><br><span class="line">String day=String.format(<span class="string">&quot;%td&quot;</span>, date); </span><br><span class="line">System.out.println(<span class="string">&quot;今年是:&quot;</span>+year+<span class="string">&quot;年&quot;</span>); <span class="comment">//今年是:2020年</span></span><br><span class="line">System.out.println(<span class="string">&quot;现在是:&quot;</span>+month);  <span class="comment">//现在是:十一月</span></span><br><span class="line">System.out.println(<span class="string">&quot;今天是:&quot;</span>+day+<span class="string">&quot;号&quot;</span>);  <span class="comment">//今天是:24号</span></span><br><span class="line"><span class="comment">//时间格式化</span></span><br><span class="line">String hour=String.format(<span class="string">&quot;%tH&quot;</span>, date);</span><br><span class="line">String minute=String.format(<span class="string">&quot;%tM&quot;</span>, date);</span><br><span class="line">String second=String.format(<span class="string">&quot;%tS&quot;</span>, date);</span><br><span class="line">System.out.println(<span class="string">&quot;现在是:&quot;</span>+hour+<span class="string">&quot;时&quot;</span>+minute+<span class="string">&quot;分&quot;</span>+second+<span class="string">&quot;秒&quot;</span>);<span class="comment">//现在是:14时03分07秒</span></span><br><span class="line"><span class="comment">//日期时间组合</span></span><br><span class="line">String time=String.format(<span class="string">&quot;%tc&quot;</span>, date);</span><br><span class="line">String form=String.format(<span class="string">&quot;%tF&quot;</span>, date);</span><br><span class="line">System.out.println(<span class="string">&quot;全部的时间信息是:&quot;</span>+time);<span class="comment">//全部的时间信息是:星期二 十一月 24 14:03:07 CST 2020</span></span><br><span class="line">System.out.println(<span class="string">&quot;年-月-日格式:&quot;</span>+form); <span class="comment">//年-月-日格式:2020-11-24</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ul><li><p>Java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。</p></li><li><p>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p></li><li><p>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。<br>例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。</p></li><li><p>StringBuffer的内部实现方式和字符串不同，StringBuffer的在进行字符串处理时，不生成新的对象，在内存使用上要优于串类。所以在实际使用时，如果经常需要对一个字符串进行修改，例如插入，删除等操作，使用StringBuffer要更加适合一些。</p></li><li><p>在String类中没有用来改变已有字符串中的某个字符的方法，由于不能改变一个Java 字符串中的某个单独字符，所以在JDK文档中称String类的对象是不可改变的然而，不可改变的字符串具有一个很大的优点：编译器可以把字符串设为共享的。  </p></li><li><p>StringBuffer 字符串变量（线程安全）</p></li><li><p>StringBuilder 字符串变量（非线程安全）</p></li><li><p>String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。</p></li><li><p>而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span>;arr[<span class="number">1</span>]=<span class="number">2</span>;arr[<span class="number">2</span>]=<span class="number">3</span>;arr[<span class="number">3</span>]=<span class="number">4</span>;arr[<span class="number">4</span>]=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> arr1[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组排序算法"><a href="#数组排序算法" class="headerlink" title="数组排序算法"></a>数组排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><code>冒泡排序</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外层循环控制排序轮数，一般要为排序的数组长度减1次，因为最后一次循环只剩一个数组元素，不需要对比，</span></span><br><span class="line"><span class="comment"> * 内层循环主要对比数组中每个相邻元素的大小，是否交换位置。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_06</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]= &#123;<span class="number">63</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;  <span class="comment">//循环5轮比较</span></span><br><span class="line"><span class="comment">//比较相邻两个元素，较大的数往后冒泡</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> t=arr[j];   <span class="comment">//把第一个元素值保存在临时变量中</span></span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];  <span class="comment">//把第二个元素值保存在第一个元素中</span></span><br><span class="line">arr[j+<span class="number">1</span>]=t;   <span class="comment">//把临时变量（第一个元素的值）保存到第二个元素中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k : arr) &#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a><code>直接选择排序</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接选择排序</span></span><br><span class="line"><span class="comment"> * 指定排序位置与其他数组元素分别对比，如果满足条件就交换元素，区别于冒泡排序的相邻交换</span></span><br><span class="line"><span class="comment"> * 从每一趟中取出最小(或最大)的一个元素，顺序地放在已排序好的数列后面。</span></span><br><span class="line"><span class="comment"> * 初始数组:[63，4，24，1，3，15]</span></span><br><span class="line"><span class="comment"> * 第一趟排序:[15,4,24,1,3] 63</span></span><br><span class="line"><span class="comment"> * 第二趟排序:[15,4,3,1]24 ,63</span></span><br><span class="line"><span class="comment"> * 第三趟排序:]1,4,3]15,24,63</span></span><br><span class="line"><span class="comment"> *第四趟排序:[1,3]4,15,24,63</span></span><br><span class="line"><span class="comment"> *第五趟排序:[1],3,4,15,24,63</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_07</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">63</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=arr.length-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[index]) &#123;</span><br><span class="line">index=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换在位置array.length-1和index(最大值)上的两个数</span></span><br><span class="line"><span class="keyword">int</span> t=arr[arr.length-i];</span><br><span class="line">arr[arr.length-i]=arr[index];</span><br><span class="line">arr[index]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k : arr) &#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a><code>反转排序</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转排序</span></span><br><span class="line"><span class="comment"> * 把数组最后一个元素与第一个元素替换，倒数第二个元素与第一个元素替换，以此类推</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_08</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> len=arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++) &#123;</span><br><span class="line">t=arr[i];</span><br><span class="line">arr[i]=arr[len-<span class="number">1</span>-i];</span><br><span class="line">arr[len-<span class="number">1</span>-i]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k : arr) &#123;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><code>类</code>实质上是封装对象<code>属性</code>和<code>行为</code>的载体，<code>对象</code>则是类抽象出来的一个<code>实例</code>,类是静态的概念，而对象则是一个动态的概念，因为只有运行时才给对象分配空间，对象才真正存在。</p><ul><li>面向对象：是一种通过对象的方式，把现实世界<code>映射到计算机模型</code>的一种编程方法。</li><li>面向过程：是把模型<code>分解成一步一步</code>的过程。</li></ul><p>面向对象程序设计具有以下特点：<br>1.<code>封装性</code>：解决了数据的安全性问题。<br>2.<code>继承性</code>：解决了代码的重用问题。<br>3.<code>多态性</code>：解决了程序的扩展问题。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li><code>类是一系列对象的抽象</code>。</li><li>类是<code>变量和方法的集合体</code>。类是Java中基本的<code>结构单元</code>。所有的Java语句均出现在类中，所有的方法均在类中定义。</li><li>类的成员变量可以是基本数据类型的数据、数组或类的实例。</li><li>成员方法只在类中定义，用来处理此类的数据。</li><li>通常，类成员数据都是私有的，而方法都是公有的，外界只可能访问成员方法。</li></ul><hr><p><strong><em>(1) <code>类声明的格式</code></em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[修饰符] class 类名 [extends 父类名][implements 接口名]&#123;…&#125;</span></span><br><span class="line"><span class="comment">//修饰符指明类的访问控制符和类型说明符；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">成员变量;</span><br><span class="line">成员方法;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line"><span class="comment">//body</span></span><br><span class="line">&#125;</span><br><span class="line">ClassName classname=<span class="keyword">new</span> ClassName();</span><br></pre></td></tr></table></figure><p><strong><em>(2) <code>类修饰符</code></em></strong></p><ul><li>public访问控制符指明此类为公共类，可以由其他类访问或引用其成员变量和成员方法。并且Java规定包含main()方法的主类必须是公共类。</li><li>默认friendly表示此类只能被同一个包的类所访问和引用，也不用import语句引入。在一个.java文件中只能有一个public公共类，其他类就只能是friendly了。</li><li>abstract抽象类指明此类不能被实例化。常常为改变其子类而定义。</li><li>final最终类指明此类不能有子类。不能被实例化。<br>如System类<pre><code> System.out.println(“hello”);</code></pre></li></ul><p><strong><em>(3) <code>成员变量声明的格式</code></em></strong></p><p><code>[修饰符]    类型    变量名</code>；</p><table><thead><tr><th>修饰符</th><th>功能</th></tr></thead><tbody><tr><td>public</td><td>指明变量为公有，即程序中的其他类均可访问此类中的变量</td></tr><tr><td>protected</td><td>指明变量为受保护访问。可被同一个包中的其他类、不同包中此类的子类以及此类自身所访问和引用。</td></tr><tr><td>private</td><td>指明变量为私有访问。只能被此类自己访问或调用，是对成员变量的最高级保护</td></tr><tr><td>static</td><td>指明变量为静态变量，否则为实例变量。静态变量不需要类的实例化就可以被类直接调用。</td></tr><tr><td>final</td><td>指明变量为常量。常量名要全部大写</td></tr><tr><td>transient</td><td>明变量为暂时性变量，用于实现不同对象的存档功能</td></tr><tr><td>volatile</td><td>指明多个线程所共享的变量。保证各线程对此变量访问的一致性</td></tr></tbody></table><p><strong><em>(4) <code>成员方法</code></em></strong></p><p><code>[修饰符]  返回类型  方法名( [参数列表] ) [throws exception] &#123;…&#125;</code></p><ul><li>修饰符public, protected, private, static, final与成员变量声明意义相同，都是定义方法访问权限。</li><li>abstract指明方法是否可以重写；native指明代码是由各种语言集成；synchronized指明多线程可并发共享访问。</li><li>Java方法中的参数传递是传值调用而非地址调用，因此方法不可以改变参数的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;  <span class="comment">//String类型的成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;  <span class="comment">//定义了一个方法</span></span><br><span class="line"><span class="keyword">int</span> id=<span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">setName(<span class="string">&quot;Java&quot;</span>); <span class="comment">//调用类中的其他方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;  <span class="comment">//将参数赋给成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法:"></a><code>构造方法</code>:</h3><ul><li>构造方法<code>没有</code>返回值,不需要写void,只用public声明。</li><li>构造方法名称要与<code>本类的名称相同</code>。</li><li>一旦为类编写构造方法,默认的构造方法将会被<code>覆盖</code>。</li><li>编写构造方法的目的是向对象<code>传递参数</code>(一般有参),以及对成员变量进行<code>初始化</code>(一般无参)。</li><li>构造方法同样支持方法<code>重载</code>。</li><li>构造方法不能被static,final,abstract,synchronized,native等修饰符修饰。</li><li>构造方法中只能使用成员变量，而且当参数与成员变量同名时，只能用关键字this指明当前对象。</li><li>构造方法不能<code>被程序直接调用</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">String color;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> sum)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> sum,String color)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">createApple</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Apple apple1 = <span class="keyword">new</span> Apple();</span><br><span class="line">Apple apple2 = <span class="keyword">new</span> Apple(<span class="number">1</span>);</span><br><span class="line">Apple apple3 = <span class="keyword">new</span> Apple(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">Apple apple4 = <span class="keyword">new</span> Apple(<span class="number">2</span>,<span class="string">&quot;color&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h3><p>类中的方法可以分为<code>实例方法</code>和<code>静态方法（类方法）</code>。</p><ul><li>方法声明时，方法类型前面不加关键字static的是实例方法，加关键字static的是静态方法。</li><li>实例方法既能对实例变量操作也能对静态变量操作，而静态方法<code>只能对静态变量</code>进行操作。</li><li>一个类中的方法可以相互调用，实例方法可以调用该类中的其他方法；类中的静态方法<code>只能调用该类的静态方法</code>，不能调用实例方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a=<span class="number">12</span>; <span class="comment">//成员变量</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span>  <span class="comment">//实例方法</span></span></span><br><span class="line"><span class="function">   </span>&#123;……&#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span>  <span class="comment">//静态方法</span></span></span><br><span class="line"><span class="function">   </span>&#123;……&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>Java为了能将基本数据类型视为对象处理，并能连接相关的方法，为每个数据类型都提供了包装类。</p><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><p>java.lang包中的Integer类、Long类和Short类，分别将int、long和short封装成一个类。</p><p><strong><em>(1).<code>构造方法</code></em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer(<span class="keyword">int</span> number)</span><br><span class="line">Integer number=<span class="keyword">new</span> Integer(<span class="number">7</span>); <span class="comment">//以一个int型变量作为参数来获取Integer对象</span></span><br><span class="line">Integer(String str)</span><br><span class="line">Integer number=<span class="keyword">new</span> Integer(<span class="string">&quot;45&quot;</span>);<span class="comment">//以一个String型变量作为参数来获取Integer对象</span></span><br></pre></td></tr></table></figure><p><strong><em>(2).<code>Integer</code>类常用方法</em></strong><br>① <code>parseInt(String s)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String year = <span class="string">&quot;2018&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(year); <span class="comment">//字符串转为int类型</span></span><br><span class="line">System.out.println(i/<span class="number">2</span>);<span class="comment">//1009</span></span><br></pre></td></tr></table></figure><p>② <code>parseInt(String s,int radix)</code>方法<br>解释：将字符串s按照radix进行转换相应的进制数，然后运行的结果都是以<code>十进制</code>的形式打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String year = <span class="string">&quot;1110&quot;</span>;</span><br><span class="line">String age = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="comment">//指定year的进制为2进制</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(year,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//指定age的进制为16进制</span></span><br><span class="line"><span class="keyword">int</span> i2 = Integer.parseInt(age,<span class="number">16</span>);    </span><br><span class="line">System.out.println(i);<span class="comment">//14</span></span><br><span class="line">System.out.println(i2);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>③<code> toString()</code>方法<br>解释：Integer类中的静态方法toString()转换成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> src = <span class="number">50</span>;</span><br><span class="line">String dest = Integer.toString(src);</span><br><span class="line">System.out.println(dest+<span class="number">1</span>);<span class="comment">//501</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_10</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String str=Integer.toString(<span class="number">456</span>);  <span class="comment">//获取十进制</span></span><br><span class="line">String str1=Integer.toBinaryString(<span class="number">456</span>); <span class="comment">//获取二进制</span></span><br><span class="line">String str2=Integer.toHexString(<span class="number">456</span>);  <span class="comment">//获取十六进制</span></span><br><span class="line">String str3=Integer.toOctalString(<span class="number">456</span>); <span class="comment">//获取八进制</span></span><br><span class="line">System.out.println(<span class="string">&quot;456的十进制表示:&quot;</span>+str);</span><br><span class="line">System.out.println(<span class="string">&quot;456的二进制表示:&quot;</span>+str1);</span><br><span class="line">System.out.println(<span class="string">&quot;456的十六进制表示:&quot;</span>+str2);</span><br><span class="line">System.out.println(<span class="string">&quot;456的八进制表示:&quot;</span>+str3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;<span class="comment">//引入随机数包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//求随机数方法1</span></span><br><span class="line">Random C=<span class="keyword">new</span> Random();<span class="comment">//声明随机数random</span></span><br><span class="line"><span class="keyword">int</span> number=C.nextInt(<span class="number">100</span>);<span class="comment">//()内为随机数范围</span></span><br><span class="line">System.out.println(<span class="string">&quot;随机数为&quot;</span>+number);</span><br><span class="line"><span class="comment">//求随机数2</span></span><br><span class="line"><span class="keyword">int</span> num=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;随机数&quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="接口、继承、封装与多态"><a href="#接口、继承、封装与多态" class="headerlink" title="接口、继承、封装与多态"></a>接口、继承、封装与多态</h1><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><ul><li>子类可以继承父类的属性和方法，也可以增加原来父类所不具备的属性和方法。</li><li>子类可以从父类继承所有<code>非private</code>的属性和方法作为自己的成员。</li><li>在java中用<code>extends</code>关键字来标识两个类的继承关系。</li><li>若子类成员变量和父类成员变量名字相同，则子类成员隐藏父类成员。</li><li>若子类成员方法与父类成员方法名字、参数列表和返回值类型都相同，则子类方法是父类方法的<code>重写</code>。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>继承双方拥有某种共性的特征</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feature</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父亲的特性&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果Son没有实现自己的方法的化，那么默认就是用父类的feature方法。</span></span><br><span class="line"><span class="comment">//如果子类实现了自己的feature方法，则为重写父类方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Object类</code>是所有类的父类，java每个类都源于java.lang.Object类。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this表示<code>当前对象</code>，this可以调用方法、调用属性和指向对象本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function">Apple <span class="title">eatApple</span><span class="params">()</span></span>&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;  <span class="comment">//返回对象自身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">apple.eatApple().eatApple();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Apple(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(num,<span class="string">&quot;??&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="number">1</span>,color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num, String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = num;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码使用的不是this，而是<code>this(参数)</code>。它相当于调用了其他构造方法，然后传递参数进去，this()必须放在构造方法的第一行，否则编译不通过。</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>super用来引用当前对象的父类，有3种情况。<br>（1）用于访问被隐藏的父类成员变量<br>       <code>super.变量名</code>；<br>（2）用于调用被重写的父类方法<br>       <code>super.方法名</code>；<br>（3）用于调用父类的构造方法<br>      <code>super([参数列表])</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">String color;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;eat Fruit&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.num = <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;eat &quot;</span> + num + <span class="string">&quot; Apple&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未使用封装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobilePhoneTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MobilePhone phone = <span class="keyword">new</span> MobilePhone();</span><br><span class="line">phone.voltage = <span class="number">3.7</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;手机电压 = &quot;</span> + phone.voltage);</span><br><span class="line">phone.voltage = <span class="number">100</span>;  <span class="comment">//手机电压很容易被修改，很不安全</span></span><br><span class="line">System.out.println(<span class="string">&quot;手机电压 = &quot;</span> + phone.voltage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用封装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobilePhone</span> </span>&#123;</span><br><span class="line"><span class="comment">//电压：手机正常电压在3~5V</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> voltage;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MobilePhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVoltage</span><span class="params">(<span class="keyword">double</span> _voltage)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_voltage &lt; <span class="number">3</span> || _voltage &gt; <span class="number">5</span>)&#123;</span><br><span class="line"><span class="comment">//当电压低于3V或者高于5V时抛出异常，程序则终止</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;电压非法，请爱护手机！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序如果能执行到此处说明以上并没有发生异常，电压值合法</span></span><br><span class="line">voltage = _voltage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVoltage</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> voltage;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，使用封装后可以看出MobilePhone的voltage属性不能在外部程序中随意访问了，调用setVoltage()方法来修改电压，调用getVoltage()方法来读取电压，在setVoltage()方法中编写了安全控制代码，不允许随意修改电压值。<br>Java语言中的封装步骤：</p><ul><li>需要保护的属性用<code>private</code>进行修饰。</li><li>给这个私有属性提供公开的<code>get</code>和<code>set</code>方法。</li><li>在set方法中设置<code>安全控制程序</code>。</li></ul><h2 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h2><p>访问控制符又称为<code>封装</code>，是面对对象三大特性之一。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/30/be34001ec3ea1c793131239a2be7b132.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private封装</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test20</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">         K k=<span class="keyword">new</span> K();   <span class="comment">//创建一个类K的实例，赋给变量k，其类型为K</span></span><br><span class="line">         k.setK(<span class="number">8</span>);        <span class="comment">//通过k调用该对象方法setK</span></span><br><span class="line">         <span class="keyword">int</span> y=k.getK();   <span class="comment">//通过k调用该对象方法getK</span></span><br><span class="line">         System.out.println(<span class="string">&quot;y=&quot;</span>+y);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span></span>&#123;                       <span class="comment">//创建一个新类</span></span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">int</span> k;     <span class="comment">//k是私有变量</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setK</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123;      <span class="comment">//公有方法setK</span></span><br><span class="line">k=x;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span>  </span>&#123;       <span class="comment">//公有方法getK</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>方法的重载是指多个方法可以共享相同的名字，但参数的<code>个数</code>或<code>数据类型</code>、参数<code>顺序</code>等不完全相同，它实现了Java编译时的<code>多态</code>。在<code>构造方法</code>调用时最多。<br>`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(int,int)方法:&quot;</span>+add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(double,double)方法:&quot;</span>+add(<span class="number">1.3</span>,<span class="number">2.2</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;调用add(int)方法:&quot;</span>+add(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>方法 的重写是<code>子类对父类</code>方法的重写。<br>重写的方法必须要和父类保持一致，包括<code>返回值类型，方法名，参数列表</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.printl(<span class="string">&#x27;eat fruit&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.printl(<span class="string">&#x27;eat apple&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是<code>同一个行为具有多个不同表现形式或形态</code>的能力。比如同一个接口，使用不同的实例而执行不同操作。<br>多态存在的三个必要条件</p><ul><li><code>继承</code></li><li><code>重写父类方法</code></li><li><code>父类引用指向子类对象：Parent p = new Child();</code></li></ul><p>多态分方法<code>重载</code>和方法<code>重写</code>。</p><ul><li>方法重写：需要有<code>继承关系</code>，父类和子类中的方法必须<code>同原型</code>（名称，参数，返回值相同）。</li><li>方法重载：方法名称相同，<code>参数不同</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;eat Fruit&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.num = <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;eat &quot;</span> + num + <span class="string">&quot; Apple&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fruit fruit = <span class="keyword">new</span> Apple(); <span class="comment">//多态中父类引用指向子类对象.</span></span><br><span class="line">fruit.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>组合就是将对象引用置于新类中。组合也是提高类的复用性的一种方式。<br>如果你像让类具有更多的扩展功能，<code>多用组合，少用继承</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoccerPlayer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Soccer soccer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soccer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String soccerName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中SoccerPlayer引用了Soccer类，通过引用来达到调用soccer中的属性和方法。</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>A需要调用B类的方法，A不直接调用，A会在自己的类中创建一个B对象的代理，再由代理调用B的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">todo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;control...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Destination destination;</span><br><span class="line"><span class="keyword">private</span> DeviceController deviceController;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">control</span><span class="params">(Destination destination)</span></span>&#123;</span><br><span class="line">destination.todo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Device name;</span><br><span class="line"><span class="keyword">private</span> Destination destination;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">control</span><span class="params">(Destination destination)</span></span>&#123;</span><br><span class="line">destination.todo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向上-下转型"><a href="#向上-下转型" class="headerlink" title="向上/下转型"></a>向上/下转型</h2><p>向上/下转型代表了<code>父类与子类</code>之间的关系。</p><ul><li>向上转型：通过子类对象（小范围）转化为父类对象（大范围），这种转换是自动完成的，不用强制。</li><li>向下转型：通过父类对象（大范围）转化为子类对象（小范围），这种转换不是自动完成的，需要强制指定。</li></ul><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p><code>static</code>可以用来修饰成员变量和方法。<br>静态变量<code>不需要类的实例化</code>就可以被类直接调用。</p><ul><li>静态变量，也成为类变量。静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String name=<span class="string">&quot;zhangsan&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>静态方法，就是没有this的方法，可以直接使用<code>类名.方法名</code>进行调用。静态方法不依赖任何对象直接访问，在静态方法中不能访问类的非静态成员变量和非静态方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cxuan is writing the article&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态<code>代码块</code>,可用于类的初始化操作。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaicBlock</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I&#x27;m A static code block&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p><code>final</code>可以修饰类、属性和方法。</p><ul><li>final修饰类，表明此类不能被继承。</li><li>final修饰方法，表明此方法不能被任何子类重写。</li><li>final修饰变量分两种，一种是修饰基本数据类型，表明数据类型的值不能被修改；一种是修饰引用类型，表示对其初始化之和便不能再让其指向另一个对象。</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/24/5ae1207065af3cdf0ff1fcdb2cf521f4.png"></p><p>java中用<code>abstract</code>关键字定义抽象类和抽象方法。<br>抽象类的特点：</p><ul><li><code>只要类中有一个抽象方法，此类就被标记为抽象类</code>。</li><li>抽象类<code>不可以创建对象(实例化)</code>，只能用来继承。</li><li>抽象类的子类必须重写抽象类中的<code>所有抽象方法</code>。</li><li>相对于在父类中定义了方法名和参数，在子类中对方法进行实例化。</li><li>抽象类中包含<code>抽象</code>的方法，也可以<code>不包含</code>抽象方法。</li><li>不允许使用<code>final</code>修饰abstract方法。</li><li>抽象方法<code>没有方法体</code>，方法本身没有任何意义，除非被<code>重写</code>，实际上抽象类除了<code>被继承</code>之外没有任何意义。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">testAbstract</span><span class="params">()</span></span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>某个类中所有方法<code>都为抽象方法</code>，此类可定义为接口。关键字<code>interface</code>。</li><li>注意，定义为接口类后，无需在每个方法前加abstract关键字，接口中所有变量不需要用<code>final</code>和<code>static</code>。</li><li>接口不可以实例化，只能用关键字<code>implements</code>实现。某个类可以实现<code>多个接口</code>。</li><li>如果父类使用了某个接口，则子类也就自然使用了该接口，子类不必再使用implements声明自己使用这个接口。</li><li>接口可以被<code>继承</code>，可以通过关键字extends声明一个接口是另一个接口的子接口。子接口将继承父接口中的全部方法和常量。</li><li>如果一个类声明实现一个接口，但没有实现接口中的所有方法，那么这个类必须是抽象类。</li><li> 类在实现接口方法时必须给出方法体，一定要用<code>public</code>修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//实现接口中的方法。</span></span><br><span class="line"> <span class="keyword">return</span> x+y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>可以将一个类的定义放在<code>另一个类的内部</code>。<br>定义在类内部的类，持有外部类的引用，但却对其他外部类不可见，看起来就像是一种<code>隐藏代码</code>的机制。<br><code>内部类拥有外部类的访问权</code>。</p><ul><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号 。</li><li>内部类不能用普通的方式访问。内部类是外部类的一个成员，因此内部类可以自由地访问外部类的成员变量，无论是否是private的 。</li><li>内部类声明成静态的，就不能随便的访问外部类的成员变量了，此时内部类只能访问外部类的静态成员变量 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">                <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;  <span class="comment">//内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">name = <span class="string">&quot;cxuan&quot;</span>;</span><br><span class="line">age = <span class="number">25</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/8ec20f8a592cee84b26398d314586fee.png"></p><ul><li><p><strong>Collection 接口存储一组不唯一，无序的对象</strong></p></li><li><p><strong>List 接口存储一组不唯一，有序（插入顺序）的对象</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/bb7b44b2784a09c4fef0b8b89f3fc0c0.png"></p><ul><li><strong>Set 接口存储一组唯一，无序的对象</strong> </li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/6fe9c916ad5b57d512cc4cdcc8d17307.png"></p><ul><li><strong>Map接口存储一组键值对象，提供key到value的映射</strong> </li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/0cb3e440bc7189df0bc20973962c9a91.png"></p><ul><li><strong>ArrayList实现了长度可变的数组，在内存中分配连续的空间。遍历元素和随机访问元素的效率比较高</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/bb7b44b2784a09c4fef0b8b89f3fc0c0.png"></li><li><strong>LinkedList采用链表存储方式。插入、删除元素时效率比较高</strong><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/9242255d8fce6c483180dda254b1b25b.png"></li></ul><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection父接口方法：<br>iterator()：对集合的遍历实现。<br>removeAll()：移除此集合中那些也包含在另一集合中的元素。(去掉交集)<br>retainAll()：保留此集合中那些也包含在另一集合中的元素。（保留交集）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Collection c=<span class="keyword">new</span> ArrayList();<span class="comment">//创建集合</span></span><br><span class="line">c.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">c.size();<span class="comment">//元素个数</span></span><br><span class="line">c.remove(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">c.clear();<span class="comment">//清空</span></span><br><span class="line"><span class="comment">// 集合的遍历</span></span><br><span class="line"><span class="comment">//1.使用增强for</span></span><br><span class="line"><span class="comment">//for(数据类型  变量名:遍历的目标)</span></span><br><span class="line"><span class="keyword">for</span>(Object obj: c)&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用iterator()迭代器</span></span><br><span class="line">Iterator it=c.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;  <span class="comment">//判断是否有元素</span></span><br><span class="line">String str=(String)it.next(); <span class="comment">//返回迭代的下一个元素</span></span><br><span class="line">System.out.println(str); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List子接口"><a href="#List子接口" class="headerlink" title="List子接口"></a>List子接口</h2><p>包含Collection父接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">&quot;香蕉&quot;</span>);<span class="comment">//在0位置添加</span></span><br><span class="line">list.size();<span class="comment">//元素个数</span></span><br><span class="line">list.remove(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">list.remove(<span class="number">0</span>);<span class="comment">//删除0下标元素</span></span><br><span class="line">list.clear();<span class="comment">//清空</span></span><br><span class="line"><span class="comment">// 集合的遍历</span></span><br><span class="line"><span class="comment">//1.使用增强for</span></span><br><span class="line"><span class="comment">//for(数据类型  变量名:遍历的目标)</span></span><br><span class="line"><span class="keyword">for</span>(Object obj: list)&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用iterator()迭代器</span></span><br><span class="line">Iterator it=list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;  <span class="comment">//判断是否有元素</span></span><br><span class="line">System.out.println(it.next()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">List接口常用方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean add(Object o)</td><td align="center">在列表的末尾顺序添加元素，起始索引位置从0开始</td></tr><tr><td align="center">void add(int index,Object o)</td><td align="center">在指定的索引位置添加元素。索引位置必须介于0和列表中元素个数之间</td></tr><tr><td align="center">int size()</td><td align="center">返回列表中的元素个数</td></tr><tr><td align="center">Object get(int index)</td><td align="center">返回指定索引位置处的元素。取出的元素是Object类型，使用前需要进行强制类型转换</td></tr><tr><td align="center">boolean contains(Object o)</td><td align="center">判断列表中是否存在指定元素</td></tr><tr><td align="center">boolean remove(Object o)</td><td align="center">从列表中删除元素</td></tr><tr><td align="center">Object remove(int index)</td><td align="center">从列表中删除指定位置元素，起始索引位置从0开始</td></tr></tbody></table><h2 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h2><ul><li>Array和ArrayList的不同点：<ol><li>Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。</li><li>Array大小是固定的，ArrayList的大小是动态变化的。</li><li>ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等</li><li>对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。ArrayList可以算是Array的加强版，（对array有所取舍的加强）。</li></ol></li></ul><ul><li><p>ArrayList和LinkedList有什么区别？</p><ol><li>ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。</li><li>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。</li><li>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</li></ol></li><li><p>什么场景下更适宜使用 LinkedList，而不用ArrayList</p><ol><li>你的应用不会随机访问数据 。因为如果你需要LinkedList中的第n个元素的时候，你需要从第一个元素顺序数到第n个数据，然后读取数据。</li><li> 你的应用更多的插入和删除元素，更少的读取数据 。因为插入和删除元素不涉及重排数据，所以它要比ArrayList要快。</li></ol></li></ul><p>换句话说，ArrayList的实现用的是数组，LinkedList是基于链表，ArrayList适合查找，LinkedList适合增删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建ArrayList对象并存储狗狗</span></span><br><span class="line">List dogs=<span class="keyword">new</span> ArrayList();</span><br><span class="line">dogs.add(dog1);</span><br><span class="line">dogs.add(dog2);</span><br><span class="line">dogs.add(dog3);</span><br><span class="line">dogs.add(<span class="number">2</span>,dog4); <span class="comment">//添加到指定位置</span></span><br><span class="line">System.out.println(<span class="string">&quot;共计有&quot;</span>+dogs.size()+<span class="string">&quot;条狗狗&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;分别是：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dogs.size(); i++) &#123;</span><br><span class="line">Dog dog = (Dog) dogs.get(i);</span><br><span class="line">&#125;</span><br><span class="line">dogs.remove(<span class="number">0</span>);</span><br><span class="line"> dogs.remove(dog1);</span><br><span class="line">  … …</span><br><span class="line"> <span class="keyword">if</span>(dogs.contains(dog3))</span><br><span class="line">System.out.println(<span class="string">&quot;\n集合中包含dog3的信息&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;\n集合中不包含dog3的信息&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li>插入、删除操作频繁时，可使用LinkedList来提高效率</li><li>LinkedList提供对头部和尾部元素进行添加和删除操作的方法 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建LinkedList集合对象并存储狗狗对象</span></span><br><span class="line">LinkedList dogs=<span class="keyword">new</span> LinkedList();</span><br><span class="line">dogs.add(dog2);</span><br><span class="line">dogs.add(dog3);</span><br><span class="line">dogs.addLats(dog4);</span><br><span class="line">dogs.addFirst(dog1);</span><br><span class="line">Dog dogFirst=(Dog)dogs.getFirst();  <span class="comment">//获取第一条狗狗信息</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一条狗狗昵称是&quot;</span>+dogFirst.getName() );</span><br><span class="line">Dog dogLast= (Dog)dogs.getLast();</span><br><span class="line">System.out.println(<span class="string">&quot;最后一条狗狗昵称是&quot;</span>+dogLast.getName());<span class="comment">//获取最后一条狗狗信息</span></span><br><span class="line"><span class="comment">//删除第一个和最后一个狗狗</span></span><br><span class="line">dogs.removeFirst();  </span><br><span class="line">dogs.removeLast();</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">LinkedList特殊方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void addFirst(Object o)</td><td align="center">在列表的首部添加元素</td></tr><tr><td align="center">void addLast(Object o)</td><td align="center">在列表的末尾添加元素</td></tr><tr><td align="center">Object getFirst()</td><td align="center">返回列表中的第一个元素</td></tr><tr><td align="center">Object getLast()</td><td align="center">返回列表中的最后一个元素</td></tr><tr><td align="center">Object removeFirst()</td><td align="center">删除并返回列表中的第一个元素</td></tr><tr><td align="center">Object removeLast()</td><td align="center">删除并返回列表中的最后一个元素</td></tr></tbody></table><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>Map接口专门处理键值映射数据的存储，可以根据键实现对值的操作</p><p>首先介绍一下什么是Map。在数组中我们是通过数组下标来对其内容索引的，而在Map中我们通过<code>对象</code>来对对象进行索引，用来<code>索引的对象叫做key</code>，其对应的对象叫做<code>value</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Map countries = <span class="keyword">new</span> HashMap();  <span class="comment">//使用HashMap存储多组键值对</span></span><br><span class="line"> countries.put(<span class="string">&quot;CN&quot;</span>, <span class="string">&quot;中华人民共和国&quot;</span>);</span><br><span class="line"> countries.put(<span class="string">&quot;RU&quot;</span>, <span class="string">&quot;俄罗斯联邦&quot;</span>);</span><br><span class="line"> countries.put(<span class="string">&quot;FR&quot;</span>, <span class="string">&quot;法兰西共和国&quot;</span>);</span><br><span class="line"> countries.put(<span class="string">&quot;US&quot;</span>, <span class="string">&quot;美利坚合众国&quot;</span>);</span><br><span class="line">  </span><br><span class="line"> String country = (String) countries.get(<span class="string">&quot;CN&quot;</span>); <span class="comment">//获取指定元素的值</span></span><br><span class="line"> … …</span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">&quot;Map中共有&quot;</span>+countries.size() +<span class="string">&quot;组数据&quot;</span>); <span class="comment">//获取Map元素个数</span></span><br><span class="line"> </span><br><span class="line"> countries.remove(<span class="string">&quot;FR&quot;</span>);</span><br><span class="line"><span class="comment">//删除指定元素，判断是否包含指定元素</span></span><br><span class="line"> System.out.println(<span class="string">&quot;Map中包含FR的key吗？&quot;</span> + countries.containsKey(<span class="string">&quot;FR&quot;</span>));</span><br><span class="line"><span class="comment">//显示键集、值集和键值对集</span></span><br><span class="line"> System.out.println( countries.keySet() ) ;</span><br><span class="line"> System.out.println( countries.values() );</span><br><span class="line"> System.out.println( countries );</span><br></pre></td></tr></table></figure><ol><li><p>什么是哈希表？<br>哈希表（HashTable）又叫做散列表，是根据<code>关键码值（即键值对）</code>而直接访问的数据结构。也就是说，它通过把关键码映射到表中一个位置来访问记录，以加快查找速度。看到这里你可能比较疑惑，它是怎么加快查找速度的？下一节就有说明！这个映射函数就叫做散列（哈希）函数，存放记录的数组叫做散列表。</p></li><li><p>为什么哈希表的速度快？<br>在数据结构中，我们对两种数据结构应该会非常熟悉：数组与链表。数组的特点就是查找容易，插入删除困难；而链表的特点就是查找困难，但是插入删除容易。既然两者各有优缺点，那么我们就将两者的有点结合起来，让它查找容易，插入删除也会快起来。哈希表就是讲两者结合起来的产物。</p></li><li><p>哈希如何查找？<br>&lt;1&gt;<strong>使用哈希函数将被查找的键转化为数组的索引</strong>。在理想的状态下，不同的键会被转化成不同的索引值。但是那是理想状态，我们实践当中是不可能一直是理想状态的。当不同的键生成了相同的索引的时候，也就是我们所说的冲突，我们这个时候就要处理冲突。<br>&lt;2&gt; <strong>处理冲突的方法很多，后面我们介绍拉链法和线性探索法。</strong><br>哈希表是一个时间和空间上平衡的例子。如果没有空间的限制，我们可以直接用键来作为数组的索引，这样可以将查找时间做到最快（O(1)）。如果没有时间的限制，我们可以使用无序链表进行顺序查找，这样只需要很少的内存。</p></li><li><p>什么是哈希函数？<br>哈希函数其实就是我们常说的哈希算法，主要应用在以下这几个方面：文件校验、数字签名、鉴权协议。常用的哈希算法有以下这些。<br>&lt;1&gt;MD5：MD5即Message-Digest Algorithm 5(信息-摘要算法5)，用于确保信息传输完整一致。MD5是输入不定长度信息，输出固定长度128bits的算法。<br>&lt;2&gt;SHA-1：常用于HTTPS传输和软件签名。<br>&lt;3&gt;SHA-2:SHA-224/SHA-256/SHA-384/SHA-512并成为SHA-2<br>&lt;4&gt;SHA-3:之前名为Keccak算法，是一个加密杂凑算法。</p></li><li><p>如何避免哈希冲突？<br>通过哈希函数，我们可以将键转化为数组的索引（0至M-1），但是对于两个或者多个键具有相同的索引值得情况，我们需要一种处理这种情况的方法。<br>&lt;1&gt;拉链法<br>如下图所示，将大小为M的数组的每一个元素指向一个链表，链表中的每一个节点都存储散列值为该索引的键值对，这个就是拉链法。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/41aa395d2f4df17f43a9aeea2bf106f7.png"><br>john Smith”和”Sandra Dee”通过哈希函数指向152这个索引，该索引又指向了一个链表，在链表中依次存储了这两个字符串。<br>该方法的基本思想就是选择足够大的M，使得所有的链表都尽可能的短小，以保证查找的效率。对采用拉链法的哈希表实现的查找分为两步，首先是根据散列值找到对应的链表，然后沿着链表的顺序找到相应的键。<br>&lt;2&gt;线性探索法<br>线性探测法是开放寻址法解决哈希冲突的一种方法，基本原理为，使用大小为M的数组来保存N个键值对，其中M&gt;N，我们需要使用数组中的空位来解决碰撞冲突。如下图所示。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/a5b83a4bd1145bdad3d13401c12f63e9.png"><br>对照前面的拉链法，在该图中，”Ted Baker”有唯一哈希值153的，但是由于153被”Sandra Dee”占用了。而原先”Sandra Dee”和”John Smith”的哈希值都是152的，但是在对”Sandra Dee”进行哈希的是偶发现152已经被占用了，所以往下找发现153没有被占用，就将其存放在153。后面”Ted Baker”哈希到153上，发现被占用了，就会往下找，发现154没有被占用，所以将其存放到154上面。<br>开放寻址法中最简单的是线性探测法：当碰撞发生时即一个键的散列值被另外一个键占用时，直接检查散列表中下一个位置，即将索引值加1，这样的线性探测有三种结果：<br>&lt;1&gt;命中，该位置的键个被查找的键相同；<br>&lt;2&gt;未命中，键为空；<br>&lt;3&gt;继续查找，该位置的键和被查找的键不同。<br>那个这两种方法的性能上面有什么区别？对于拉链法，查找的效率在于链表的长度，一般我们应该保证长度的M/8至M/2之间，如果链表的长度大于M/2，我们可以扩充数组长度。如果长度在0~M/8时，我们可以缩短数组的长度。对于线性探索法，动态调整数组的大小需要对所有的值重新进行散列并插入新的表中。<br>不管是拉链法还是散列法，这种动态调整链表或者数组的大小以提高查询效率的同时，还应该考虑动态改变链表或者数组大小的成本。散列表长度加倍的插入需要进行大量的探索，这种均摊成本很多时候需要考虑。</p></li></ol><table><thead><tr><th align="center">Map接口常用方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Object put(Object key,Object val)</td><td align="center">以“键-值对”的方式进行存储</td></tr><tr><td align="center">Object get(Object key)</td><td align="center">根据键返回相关联的值，如果不存在指定的键，返回null</td></tr><tr><td align="center">Object remove(Object key)</td><td align="center">删除由指定的键映射的“键-值对”</td></tr><tr><td align="center">int size()</td><td align="center">返回元素个数</td></tr><tr><td align="center">Set keySet()</td><td align="center">返回键的集合</td></tr><tr><td align="center">Collection values()</td><td align="center">返回值的集合</td></tr><tr><td align="center">boolean containsKey(Object key)</td><td align="center">如果存在由指定的键映射的“键-值对”，返回true</td></tr></tbody></table><ul><li>遍历Map集合<ol><li>通过迭代器Iterator实训遍历<br>获取Iterator：Collection接口的iterator()方法<br>Iterator的方法：<br> boolean hasNext():判断是否存在另一个可访问的元素<br> Object next(): 返回要访问的下一个元素</li><li>增强for循环<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">Set keys=dogMap.keySet();    <span class="comment">//取出所有key的集合</span></span><br><span class="line">Iterator it=keys.iterator();       <span class="comment">//获取Iterator对象</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">String key=(String)it.next();      <span class="comment">//取出key</span></span><br><span class="line">Dog dog=(Dog)dogMap.get(key);    <span class="comment">//根据key取出对应的值</span></span><br><span class="line">System.out.println(key+<span class="string">&quot;\t&quot;</span>+dog.getStrain());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span>(元素类型t  元素变量x : 数组或集合对象)&#123;</span><br><span class="line">        引用了x的java语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/21/3de2171bd187dd71bee36ba842b1f05c.png"></li></ol></li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>本质是<code>参数化类型</code>，<code>把类型作为参数传递</code>。可以提高代码的重用性，防止类型转化异常，提高代码的安全性。<br>常见形式有泛型类、泛型接口、泛型方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">&lt;T,...&gt;T称为类型占位符，表示一种引用类型，用逗号隔开。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处T 可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//value 这个成员变量的类型为T，T的类型有外部指定</span></span><br><span class="line"><span class="keyword">private</span> T value;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericDemo</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span></span>&#123; <span class="comment">//泛型方法getKey的返回值类型为T、T的类型由外部指定</span></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用泛型类</span></span><br><span class="line">GenericDemo&lt;String&gt; gd=<span class="keyword">new</span> GenericDemo&lt;String&gt;(<span class="string">&quot;大家好&quot;</span>);</span><br><span class="line">GenericDemo&lt;Integer&gt; gd=<span class="keyword">new</span> GenericDemo&lt;Integer&gt;(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p><code>泛型接口</code><br>语法：接口名<code>&lt;T&gt;</code>,不能创建泛型静态常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">server</span><span class="params">(T t)</span></span>;<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="comment">//1.第一种方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myIt</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">server</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myIt it=<span class="keyword">new</span> myIt();</span><br><span class="line">it.server(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"><span class="comment">//2.第二种方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myIt</span>&lt;<span class="title">T</span>&gt;  <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">server</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myIt&lt;Integer&gt; it=<span class="keyword">new</span> myIt&lt;Integer&gt;();</span><br><span class="line">it.server(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p><code>List</code>是泛型类，为了表示各种泛型List的父类，可以使用类型通配符，类型通配符使用<code>问号(?)</code>表示，它的元素类型可以匹配任何类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">name.add(<span class="string">&quot;cxuan&quot;</span>);</span><br><span class="line">age.add(<span class="number">18</span>);</span><br><span class="line">number.add(<span class="number">314</span>);</span><br><span class="line">generic(name);</span><br><span class="line">generic(age);</span><br><span class="line">generic(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generic</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Test cxuan :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>上界通配符</code>：&lt;? extends ClassType&gt;该通配符为ClassType的所有子类型。它表示的是任何类都是ClassType类型的子类。</p><p><code>下届通配符</code>：&lt;? super ClassType&gt;该通配符为ClassType的所有超类型。它表示的是任何类型的父类都是ClassType。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是Java中非常重要的一个高级特性，基本上Spring等一系列框架都是基于反射的思想写成的。<br>Java反射机制是在程序的运行过程中，对于<code>任何一个类</code>，都能够知道它的<code>所有属性和方法</code>；对于<code>任意一个对象</code>，都能够知道调用它的<code>任意属性和方法</code>，这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。<br>Java反射机制主要提供了以下几个功能：</p><ul><li>在运行时判断任意一个对象所属的<code>类</code></li><li>在运行时构造任意一个类的<code>对象</code></li><li>在运行时判断任意一个类所有的<code>成员变量和方法</code></li><li>在运行时调用任意一个对象的<code>方法</code></li></ul><p>反射就像一个掌控全局的角色，不管你程序怎么运行，我都能够知道你这个类有哪些属性和方法。<br>在Java中，使用<code>Java.lang.reflect</code>包实现反射机制。</p><blockquote><p>一个父类People，一个接口LoginMapper，一个子类User，一个反射测试类ReflexTest</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ReflexTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ReflexTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String cod,String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ReflexTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">LoginMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value(&quot;admin&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value(&quot;123456&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String code,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(code.equals(<span class="string">&quot;admin&quot;</span>)&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;code = &quot;</span> + code + <span class="string">&quot;password = &quot;</span> + password + <span class="string">&quot;登入成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;code = &quot;</span> + code + <span class="string">&quot;password = &quot;</span> + password + <span class="string">&quot;登入失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ReflexTest;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflexTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 方式一 类获取</span></span><br><span class="line">        Class userClass = User.class;</span><br><span class="line">        <span class="comment">// 方式二 对象获取</span></span><br><span class="line">        Class userClass2 = user.getClass();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 类完整路径</span></span><br><span class="line">        String className = userClass.getName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        <span class="comment">// 包路径</span></span><br><span class="line">        String packagePath = userClass.getPackage().getName();</span><br><span class="line">        System.out.println(packagePath);</span><br><span class="line">        <span class="comment">// 类名</span></span><br><span class="line">        String simpleClassName = userClass.getSimpleName();</span><br><span class="line">        System.out.println(simpleClassName);</span><br><span class="line">        <span class="comment">// 获取父类</span></span><br><span class="line">        String fatherClassName = userClass.getSuperclass().getSimpleName();</span><br><span class="line">        System.out.println(fatherClassName);</span><br><span class="line">        <span class="comment">// 获取接口</span></span><br><span class="line">        Class[] interfaces = userClass.getInterfaces();</span><br><span class="line">        <span class="comment">// 根据class创建对象</span></span><br><span class="line">        User user1 = (User) userClass.getDeclaredConstructor().newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取单个属性</span></span><br><span class="line">        Field oneField = userClass.getDeclaredField(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取单个公有属性</span></span><br><span class="line">        Field onePublicField = userClass.getField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取全部属性</span></span><br><span class="line">        Field[] fields = userClass.getDeclaredFields();</span><br><span class="line">        <span class="comment">// 获取全部公有属性</span></span><br><span class="line">        Field[] publicFields = userClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="comment">//让我们在用反射时访问私有变量</span></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 属性名</span></span><br><span class="line">            field.getName();</span><br><span class="line">            <span class="comment">// 变量类型</span></span><br><span class="line">            field.getType().getName();</span><br><span class="line">            <span class="comment">// 获取对象中该属性的值</span></span><br><span class="line">            field.get(user1);</span><br><span class="line">            <span class="comment">// set 对象中该属性的值</span></span><br><span class="line">            field.set(user1,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类中单个公有方法</span></span><br><span class="line">        Method publicMethod = userClass.getMethod(<span class="string">&quot;login&quot;</span>, String.class, String.class);</span><br><span class="line">        <span class="comment">// 获取类中单个方法</span></span><br><span class="line">        Method method =  userClass.getDeclaredMethod(<span class="string">&quot;login&quot;</span>, String.class, String.class);</span><br><span class="line">        <span class="comment">// 获取类所有公有方法</span></span><br><span class="line">        Method[] methods = userClass.getMethods();</span><br><span class="line">        <span class="comment">// 获取类所有方法</span></span><br><span class="line">        Method[] publicMethods = userClass.getDeclaredMethods();</span><br><span class="line">        <span class="comment">// 运行方法</span></span><br><span class="line">        method.invoke(<span class="keyword">new</span> User(),<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取公有构造器</span></span><br><span class="line">        Constructor[] publicConstructors = userClass.getDeclaredConstructors();</span><br><span class="line">        <span class="comment">// 获取所有构造器</span></span><br><span class="line">        Constructor[] constructors = userClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            <span class="comment">// 构造器名称 等同类名</span></span><br><span class="line">            String name = constructor.getName();</span><br><span class="line">            <span class="comment">// 构造器参数</span></span><br><span class="line">            Parameter[] parameters = constructor.getParameters();</span><br><span class="line">        &#125;</span><br><span class="line">        User user2 = (User) constructors[<span class="number">1</span>].newInstance(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;95.8&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类的注解</span></span><br><span class="line">        Annotation[] annotations = userClass.getDeclaredAnnotations();</span><br><span class="line">        <span class="comment">// 获取字段的所有注解</span></span><br><span class="line">        Annotation[] anns = userClass.getDeclaredField(<span class="string">&quot;code&quot;</span>).getAnnotations();</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举类型可以取代以往常量的定义方式，即将<code>常量</code>封装在<code>类或接口</code>中，此外，它还提供了<code>安全检查</code>功能。<br>枚举使用<code>enum</code>关键字来表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Family</span> </span>&#123;  <span class="comment">//创建枚举类，有4个常量</span></span><br><span class="line">FATHER,</span><br><span class="line">MOTHER,</span><br><span class="line">SON,</span><br><span class="line">Daughter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumUse</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Family s = Family.FATHER;   <span class="comment">//引用枚举</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常是一个在程序执行期间发生的事件，它中断了正在执行的程序的正常指令流。<br>Exceptiontype是try代码块传递给catch代码块的变量类型，e是变量名。</p><ul><li><code>e.getMessage()</code>：用于输出错误性质。</li><li><code>e.toString()</code>：给出异常的类型和性质。</li><li><code>e.printStackTrace()</code>; //输出异常的类型、性质、栈层次及出现在程序中的位置。</li><li><code>finally语句块</code>无论有无异常<code>都会执行</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//程序代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exceptiontype1 e)&#123;</span><br><span class="line"><span class="comment">//对Exceptiontype1的处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exceptiontype2 e)&#123;</span><br><span class="line"><span class="comment">//对Exceptiontype2的处理</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//程序块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;    <span class="comment">//try语句中包含可能出现异常的代码</span></span><br><span class="line">String str=<span class="string">&quot;lili&quot;</span>;  <span class="comment">//定义字符变量</span></span><br><span class="line">System.out.println(str+<span class="string">&quot;年龄是:&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> age=Integer.parseInt(<span class="string">&quot;20L&quot;</span>); <span class="comment">//数据类型转换</span></span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;   <span class="comment">//catch语句用来获取异常信息</span></span><br><span class="line">e.printStackTrace(); <span class="comment">//输出异常性质</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;program over&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*lili年龄是：</span></span><br><span class="line"><span class="comment">java.lang.NumberFormatException: For input string: &quot;20L&quot;</span></span><br><span class="line"><span class="comment">program over</span></span><br><span class="line"><span class="comment">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span></span><br><span class="line"><span class="comment">at java.lang.Integer.parseInt(Integer.java:580)</span></span><br><span class="line"><span class="comment">at java.lang.Integer.parseInt(Integer.java:615)</span></span><br><span class="line"><span class="comment">at Blog_02.blog_02_01.main(blog_02_01.java:10)*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>继承<code>Exception</code>类即可自定义异常:</p><ul><li>创建自定义异常类</li><li>在方法中通过<code>throw</code>关键字抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用<code>try-catch</code>语句块捕获并处理，否则在方法的声明处通过<code>throws</code>关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li><li>在出现异常方法的调用者中捕获并处理异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_02</span> </span>&#123;   <span class="comment">//创建类</span></span><br><span class="line"> <span class="comment">//定义方法，抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">avg</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span><span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num1&lt;<span class="number">0</span> || num2&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;不可以使用负数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num1&gt;<span class="number">100</span> || num2&gt;<span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;数值太大了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (num1+num2)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> result=avg(<span class="number">102</span>,<span class="number">150</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyException e) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;  <span class="comment">//创建自定义异常，继承Exception类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String ErrorMessage)</span> </span>&#123; <span class="comment">//构造方法</span></span><br><span class="line"><span class="keyword">super</span>(ErrorMessage);  <span class="comment">//父类构造方法 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Blog_02.MyException: 数值太大了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Throws在方法中抛出异常"><a href="#Throws在方法中抛出异常" class="headerlink" title="Throws在方法中抛出异常"></a>Throws在方法中抛出异常</h2><p><code>throws</code>关键字被应用在声明方法时，用来指定<code>方法</code>可能抛出的异常。<br>使用throws关键字将异常抛给上一级后，如果不想处理该异常，可以继续向上抛出，但最终要有能够处理该异常的代码。<br>语法：<code>[(修饰符)](返回值类型)(方法名)([参数列表])[throws(异常类)]&#123;......&#125; </code>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如： <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;......&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_03</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> NegativeArraySizeException</span>&#123;</span><br><span class="line"><span class="comment">//定义方法并抛出NegativeArraySizeException异常</span></span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[-<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pop();</span><br><span class="line">&#125;<span class="keyword">catch</span>(NegativeArraySizeException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;pop()方法抛出的异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="throw关键字抛出异常"><a href="#throw关键字抛出异常" class="headerlink" title="throw关键字抛出异常"></a>throw关键字抛出异常</h2><ul><li><code>throw</code>关键字通常用于<code>方法体</code>中，并且抛出一个<code>异常对象</code>,用于语句抛出异常。</li><li>程序在执行到throw语句时<code>立即终止</code>，它后面的语句不在执行。</li><li>通过throw抛出异常后，如果想在上一级代码中捕获并处理异常，则需要在抛出异常的方法中使用<code>throws</code>关键字在方法的声明中指明要抛出的异常；如果要捕捉throw抛出的异常，则必须使用<code>try-catch</code>语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//throw是语句抛出一个异常</span></span><br><span class="line"><span class="comment">//   语法：throw（异常对象）；</span></span><br><span class="line"><span class="comment">//throw e；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_04</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String s = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">&quot;abc&quot;</span>)) &#123; </span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      System.out.println(s); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Exception in thread &quot;main&quot; java.lang.NumberFormatException</span></span><br><span class="line"><span class="comment">at Blog_02.blog_02_04.main(blog_02_04.java:8)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="throw与throws的区别"><a href="#throw与throws的区别" class="headerlink" title="throw与throws的区别"></a>throw与throws的区别</h2><p><strong><em>Throw:</em></strong></p><ul><li>作用在<code>方法内</code>,是<code>语句</code>抛出一个异常，并且表示抛出<code>具体异常</code>，由方法体内的语句处理。</li><li>具体向外抛出的动作，所有它抛出的是一个<code>异常实例</code>。若执行了Throw一定是抛出了某种异常。</li><li>Throw不能单独使用，不是和try-catch-finally配套使用，就是和Throws配套使用，但Throws可以单独使用，然后由异常处理的方法捕获。</li></ul><p><strong><em>Throws:</em></strong></p><ul><li>作用在<code>方法声明</code>上，表示如果抛出异常，则由该方法的调用者来进行异常处理。</li><li>主要声明这个方法会抛出某种<code>类型</code>的异常，让它的使用者知道捕获异常的类型。</li><li>出现异常是一种<code>可能性</code>，不一定会发生异常。</li><li>同时出现的时候，throws出现在函数头、throw出现在函数体，两种不会由函数去处理，真正的处理由函数的上层调用处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testException</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> IOExcetion</span>&#123;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">     &#125;cacth(Exception1 e)&#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">     &#125; <span class="keyword">catch</span>(Exception2 e)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;出错了!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">if</span>(a!=b)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Eception3(<span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;   <span class="comment">//创建自定义异常类</span></span><br><span class="line">String message;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String ErrorMessage)</span> </span>&#123; <span class="comment">//父类方法</span></span><br><span class="line">message=ErrorMessage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;  <span class="comment">//覆盖getMessage()方法</span></span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_05</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quotient</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="keyword">throws</span> MyException</span>&#123; <span class="comment">//定义方法抛出异常</span></span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>) &#123;             <span class="comment">//判断参数是否小于0</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;除数不能为负数&quot;</span>); <span class="comment">//异常信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x/y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//try语句包含肯发生异常的语句</span></span><br><span class="line"><span class="keyword">int</span> result=quotient(<span class="number">3</span>,-<span class="number">1</span>);  <span class="comment">//调用方法</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(MyException e) &#123;   <span class="comment">//处理自定义异常</span></span><br><span class="line">System.out.println(e.getMessage()); <span class="comment">//输出异常信息</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ArithmeticException e) &#123;  <span class="comment">//处理ArithmeticException异常</span></span><br><span class="line">System.out.println(<span class="string">&quot;除数不能为0&quot;</span>); <span class="comment">//输出提示信息</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;        <span class="comment">//处理其他异常</span></span><br><span class="line">System.out.println(<span class="string">&quot;程序发生了其他的异常&quot;</span>); <span class="comment">//输出提示信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/f932c67833ff3ed587a88897855fc49f.png"></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="相关概念-1"><a href="#相关概念-1" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><strong><em>程序（<code>Program</code>）</em></strong><br>是为实现特定目标或解决特定问题而用计算机语言编写的命令序列的集合。</li><li><strong><em>进程（<code>Process</code>）</em></strong><br>是程序关于某个数据集合上的一次运行活动（对应一个exe），是独立运行的程序(正在运行的程序)；<br>对应了从代码加载、执行至执行完毕的一个完整过程；<br>是系统进行<code>资源分配和调度的一个独立单位</code>。</li><li><strong><em>线程（<code>Thread</code>）</em></strong><br>是进程的一个<code>实体</code>，<code>CPU调度和分派的基本单位</code>，是比进程更小的、能独立运行的基本单位。<br>一个应用程序中有多条并发执行的线索，每条线索都被称为一个线程。各线程交替执行，彼此间可以通信。</li><li><strong><em>并发执行</em></strong>：多个程序块宏观上<code>同时运行</code>的现象。</li><li><strong><em>单线程程序</em></strong><br>程序未派生出多线程，只有一个线程；<br>程序代码按照调用顺序依次往下执行，没有程序代码交替运行的现象。</li><li><strong><em>多线程程序</em></strong><br>程序派生出了多线程；<br>多段程序代码交替运行的现象，每段程序对应一个线程，各线程相互独立，并发执行。</li><li><strong><em>主线程</em></strong></li></ul><ol><li>Java程序启动时，自动产生一个进程，默认创建一个线程，该线程通常称为程序的主线程，应用来运行main()方法中的代码。</li><li>每个java程序都至少有一个线程：主线程；</li><li>重要性<br>①主线程用来产生其他子线程；<br>②主线程执行各种关闭动作，通常最后完成执行。</li></ol><hr><p><strong><em>线程与进程的关系</em></strong></p><ul><li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</li><li>操作系统把资源分配给进程，而同一进程的所有线程共享该进程的所有资源。</li><li>进程是拥有资源的基本单位，而线程是作为CPU调度和分配的基本单位。</li></ul><h2 id="Thread类方法"><a href="#Thread类方法" class="headerlink" title="Thread类方法"></a>Thread类方法</h2><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>pubilc Thread()</td><td>创建新的Thread对象</td></tr><tr><td>public Thread(String)</td><td>创建指定名称的线程</td></tr><tr><td>public Thread(Runnable)</td><td>创建以Runnable接口子类对象为参数的线程</td></tr><tr><td>public Thread(Runnable,String)</td><td>创建以Runnable接口子类对象为参数的线程，并给线程命名</td></tr></tbody></table><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>static Thread currentThread()</td><td>返回正在执行的线程</td></tr><tr><td>final String getName()</td><td>返回线程的名称</td></tr><tr><td>final void setName(String)</td><td>设置线程的名称</td></tr><tr><td>final int getPriority()</td><td>设置名称的优先级</td></tr><tr><td>void setPriority(int)</td><td>设置线程的优先级</td></tr><tr><td>static void <code>sleep</code>(long millis)</td><td>将线程挂起一段时间</td></tr><tr><td>void <code>start</code>()</td><td>启动线程，开始执行线程</td></tr><tr><td>void <code>run</code>()</td><td>运行线程</td></tr><tr><td>static void <code>yield</code>()</td><td>自动放弃CPU，以便其他线程能够运行，自己到队列的最后等待</td></tr><tr><td>final void <code>join</code>()</td><td>等待被join的线程执行完毕</td></tr><tr><td>final void <code>wait</code>()</td><td>等待其他的线程的notify，获得notify信号后继续执行后面的代码</td></tr><tr><td>final void <code>notify</code>()</td><td>当前线程被阻塞，直到被另一个线程唤醒，然后当前线程继续执行上次未完成操作</td></tr><tr><td>boolean isInterrupted()</td><td>返回线程是否被中断</td></tr><tr><td>static int activeCount()</td><td>返回激活的线程数</td></tr></tbody></table><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>线程运行的代码由<code>run()</code>方法实现。</p><ul><li>方法一：继承<code>Thread</code>类，重写run()方法。</li><li>方法二：实现<code>Runnable</code>接口，重写run()方法</li></ul><blockquote><p>说明：实现Runnable接口方式更优。java类只参单一继承，但能实现多个接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法一：继承Thread类，复写run方法</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>)   定义线程最简单的办法：定义类继承Thread。</span><br><span class="line">例：<span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">……. <span class="comment">//要在线程中执行的代码;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">2</span>)   启动新线程：调用start()方法</span><br><span class="line">例：Mythread t=<span class="keyword">new</span> Mythread();</span><br><span class="line">t.start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法二：实现Runnable接口，复写run方法</span><br><span class="line">(<span class="number">1</span>) 定义实现Runnable接口的类，实现run()方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">/*实现该方法*/</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">2</span>) 以Runnable对象为参数创建线程。</span><br><span class="line">① 以Runnable对象传给Thread的构造函数，创建独立的Thread对象；</span><br><span class="line">② 调用线程的start( )方法启动线程。</span><br><span class="line">例：Thread t=<span class="keyword">new</span> Thread(<span class="keyword">new</span> myThread());</span><br><span class="line">t.start(); </span><br></pre></td></tr></table></figure><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><ul><li><p><strong><em><code>新建</code></em></strong>：<code>新创建</code>的线程对象处于新建 状态，不能运行。</p></li><li><p><strong><em><code> 就绪(可运行)</code></em></strong><br>线程对象调用<code>start()</code>方法进入<code>就绪状态</code>，进入<code>线程队列</code>排队，此时具备了<code>运行条件</code>，一旦轮到CPU，就可脱离创建它的主线程独立开始自己的生命周期。</p></li><li><p><strong><em><code>运行</code></em></strong><br>就绪线程<code>获得CPU使用权</code>，进入<code>运行状态</code>，自动调用<code>run()</code>方法，从第一句代码开始运行。</p><blockquote><p>一旦线程进入可执行状态，它就会在就绪与运行状态下转换，同时也有可能进入等待、休眠、阻塞、或死亡状态：</p></blockquote></li><li><p><strong><em><code>等待</code></em></strong><br>当处于运行状态的线程调用Thread类中的<code>wait</code>方法时，该线程便进入<code>等待状态</code>。<br>进入等待状态的线程必须调用Thread类中的<code>notify</code>方法才能被<code>唤醒</code>，而<code>notifyAll</code>方法是将所有处于等待状态的线程唤醒。</p></li><li><p><strong><em><code>休眠</code></em></strong><br>当线程调用Thread类中的<code>sleep</code>方法时，则会进入<code>休眠状态</code>。</p></li><li><p><strong><em><code>阻塞(中断)</code></em></strong><br>正在执行的线程如果发出输入输出请求，则不能继续执行，则进入<code>阻塞状态</code>。<br>只有引起阻塞的原因消失（如，输入输出结束），线程才可以继续进入就绪状态等待CPU处理。</p></li><li><p> <strong><em><code>死亡</code></em></strong><br>线程完成了全部工作（即执行完了run()方法）、或提前被强制终止了，就进入死亡状态。<br>处于死亡状态的线程<code>不具有继续执行的能力</code>。</p></li></ul><h2 id="线程的调度及优先级"><a href="#线程的调度及优先级" class="headerlink" title="线程的调度及优先级"></a>线程的调度及优先级</h2><p><code>线程的调度</code>：<br>Java<code>虚拟机</code>为程序中的每个线程<code>分配CPU使用权</code>的特定机制。</p><hr><p><code>线程的调度模型</code>:</p><ul><li>分时调度模型</li></ul><p>所有线程<code>轮流获得CPU使用权</code>，<code>平均分配</code>每个线程占用的CPU时间片。</p><ul><li>抢占式调度模型</li></ul><p>让<code>可运行队列</code>中<code>优先级高</code>的线程<code>优先占用CPU</code>，<code>优先级相同</code>的线程<code>随机选择</code>一个线程占用CPU。</p><hr><p>线程优先级(priority)：</p><ul><li><p>作用<br>将<code>线程的重要程度</code>告诉<code>线程调度机制</code>。</p></li><li><p>Thread类中用常量定义了java线程的优先级<br>① <code>NORM</code>_PRIORITY：值为5<br>② <code>MAX</code>_PRIORITY：值为10<br>③ <code>MIN</code>_PRIORITY：值为1 。</p></li><li><p>与优先级相关的方法：<br>① final void <code>setPriority</code> ( int newp)<br><code>修改</code>线程的<code>当前优先级</code><br>②final int <code>getPriority</code> ()<br><code>返回</code>线程的<code>优先级</code></p></li></ul><h2 id="线程的操作"><a href="#线程的操作" class="headerlink" title="线程的操作"></a>线程的操作</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><ul><li>格式：sleep(  long )<br>说明：参数为<code>毫秒</code>。</li><li>功能：<br><code>暂停</code>正在执行的<code>线程</code>，将CPU让给其他线程。</li><li>注意事项：<br>抛出<code>InterruptedException</code>异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"></span><br><span class="line"><span class="comment">//程序的睡眠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xc</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   <span class="comment">//不可以用Throws 抛出异常  继承和实现接口都不能抛</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);<span class="comment">//1000毫秒=1s  睡眠过程中</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 多线程1 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">xc c=<span class="keyword">new</span> xc();</span><br><span class="line"></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(c);</span><br><span class="line">t.setName(<span class="string">&quot;倒计时&quot;</span>);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h3><ul><li>格式：yield(  )</li><li>功能：<br><code>暂停</code>正在执行的线程，执行<code>其他线程</code>。</li><li>yield()与sleep() ：<br>① 共同点：暂停正在运行的线程；<br>② 不同点：<br>yield()<code>不阻塞线程</code>，只将线程转换到就绪状态，让系统重新调度一次；<br>sleep() 线程会进入休眠状态，休眠一段时间。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程的让步</span></span><br><span class="line"><span class="comment">//应用遇到某些条件时，这件事暂时不做，先其他的做</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xc4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>) &#123;</span><br><span class="line">Thread.yield(); <span class="comment">//线程不执行 当i=5 线程分给其他线程   其他线程执行到满足条件 在让步 让步</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 多线程2 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">Xc4 xc=<span class="keyword">new</span> Xc4();</span><br><span class="line"></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(xc);</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(xc);</span><br><span class="line"></span><br><span class="line">t.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">    t1.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    t.start();</span><br><span class="line">    t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><ul><li>格式：<br>① join( )<br>② join( long millis )<br>③ join( long millis, int nanos) </li><li>功能：<br><code>等待</code>线程终止，<code>时间最长为</code>millis毫秒+nanos纳秒。</li></ul><blockquote><p>当在<code>某个线程中</code>调用<code>其他线程的join()方法时</code>，调用的线程将被<code>阻塞</code>，直到<code>被join()方法加入的线程执行完成后</code>才会继续运行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*在项目中创建JoinTest类，该类继承了Jframe类。该实例包括两个进度条，进度条的进度由线程来控制，通过使用join方法使上面的进度条必须等待下面的进度条完成后才可以继续。*/</span></span><br><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Thread t1;<span class="comment">//定义两个线程</span></span><br><span class="line"><span class="keyword">private</span> Thread t2;</span><br><span class="line">JFrame f;</span><br><span class="line">JProgressBar pb1; <span class="comment">//进度条1</span></span><br><span class="line">JProgressBar pb2; <span class="comment">//进度条2</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JoinTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">pb1=<span class="keyword">new</span> JProgressBar();</span><br><span class="line">pb2=<span class="keyword">new</span> JProgressBar();</span><br><span class="line">f.add(pb1,BorderLayout.NORTH);</span><br><span class="line">f.add(pb2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">pb1.setStringPainted(<span class="keyword">true</span>);  <span class="comment">//显示数字字符</span></span><br><span class="line">pb2.setStringPainted(<span class="keyword">true</span>);</span><br><span class="line">f.setSize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用匿名内部类形式初始化Thread实例</span></span><br><span class="line">t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  <span class="comment">//重写run方法</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">pb1.setValue(++count);  <span class="comment">//设置进度条的当前值</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);  <span class="comment">//使线程1休眠</span></span><br><span class="line"></span><br><span class="line">t2.join();         <span class="comment">//线程2插队</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start(); <span class="comment">//启动线程1 调用 run方法</span></span><br><span class="line"></span><br><span class="line">t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">pb2.setValue(++count);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">100</span>)  <span class="comment">//当增长为100时跳出</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t2.start();  <span class="comment">//启动线程2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">JoinTest br=<span class="keyword">new</span> JoinTest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/a0be3fd709f15b64ba04926c3daf7aa4.png"></p><h2 id="多线程的同步"><a href="#多线程的同步" class="headerlink" title="多线程的同步"></a>多线程的同步</h2><p>线程的同步：<code>用以解决多个线程同时访问同一个资源！</code></p><h3 id="资源共享冲突"><a href="#资源共享冲突" class="headerlink" title="资源共享冲突"></a>资源共享冲突</h3><p><strong><em><code>资源共享的冲突</code></em></strong>:</p><ul><li>资源冲突：多个线程<code>同时访问</code>一个资源所导致<br>例：同时访问一个变量；<br>例：同时入往一台打印机上输出。</li><li>并发程序要处理的核心问题：<code>资源共享问题</code>。</li><li> 在多线程环境下，必须<code>防止</code>两个线程<code>同时访问</code>同一个资源。</li></ul><p><strong><em><code>资源共享冲突的解决思路</code></em></strong>:</p><ul><li>在线程运行时给<code>资源上锁</code><br><code>第一个</code>访问这个资源的线程给它上锁，在解锁之前，其它线程不能访问这个资源；<code>第二个</code>线程给这个资源上锁，……，如此循环。</li><li>采用<code>串行访问方式</code><br>保证同一时刻<code>只有一个线程</code>能够访问这个共享资源。</li></ul><hr><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>java同步机制： <code>synchronized</code></p><ul><li>每个对象都有一个<code>锁</code>，在执行对象的<code>同步代码（需要共享资源的代码）</code>时，该对象会被<code>锁住</code>。</li><li>所有线程的<code>同步代码</code>都会<code>共享同一个锁</code>，该锁会<code>防止</code>多个线程<code>同时读写</code>共用的内存。</li><li>只要有一个线程还在<code>调用synchronized</code>方法，其他线程就<code>不允许访问</code>所有的synchronized方法，当线程<code>离开synchronized</code>方法，对象就被<code>解锁</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**********同步代码块格式*******</span><br><span class="line"><span class="keyword">synchronized</span> ( lock )&#123;</span><br><span class="line">     共享资源代码块</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code> lock</code>：锁对象(可为<code>任意对象</code>)。<br>① 未锁值：1 (<code>默认</code>)；<br>②  锁定值 :  0。</li><li>线程执行同步代码块时，先检查<code>锁对象标志位</code>：<br>①<code>未锁</code>时执行同步代码块，同时<code>锁定</code>标志位；<br>② <code>锁定</code>时其它的同步线程发生<code>阻塞</code>，<code>等待</code>同步代码解锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**********同步方法格式********</span><br><span class="line"><span class="keyword">synchronized</span>  返回值类型  方法名( 参数列表  ) &#123; </span><br><span class="line">共享资源代码块</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line">返回值类型  方法名( 参数列表  )&#123;</span><br><span class="line">   <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; …… &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Che</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  chepiao=<span class="number">100</span>;  <span class="comment">//static 使多个线程共享100张车票</span></span><br><span class="line"><span class="comment">//static的主要作用在于创建独立于具体对象的域变量或者方法</span></span><br><span class="line"><span class="comment">//被static修饰的变量或者方法是独立于该类的任何对象，也就是说，这些变量和方法不属于任何一个实例对象，而是被类的实例对象所共享。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String a=<span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);<span class="comment">//字符串随意定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//synchronized的作用是让他所管辖的代码部分，要么全部执行完要么全部不执行</span></span><br><span class="line"><span class="keyword">synchronized</span>(a) &#123;<span class="comment">//既可修饰代码块，又可以修饰函数,修饰函数不需要字符串  public synchronized void run() 让函数执行完</span></span><br><span class="line"><span class="comment">//两个线程的a是线程自己的，并不是共有的  加public static变成公共的</span></span><br><span class="line"><span class="comment">//一次执行完</span></span><br><span class="line"><span class="keyword">if</span>(chepiao&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;个车站正在卖第&quot;</span>+(<span class="number">101</span>-chepiao)+<span class="string">&quot;张车票&quot;</span>);</span><br><span class="line">--chepiao;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">50</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 车票售票实例 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Che());</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Che());</span><br><span class="line"><span class="comment">//t.setName(&quot;上海1&quot;);</span></span><br><span class="line">t.start();</span><br><span class="line"><span class="comment">//t1.setName(&quot;长沙2&quot;);</span></span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/61b952d791d16151ac59dbcb54692fd5.png"></p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><ul><li><code>死锁</code>——两个线程彼此占据着对方需要的资源，并且等待着对方释放资源。</li><li>死锁是由于线程间相互<code>竞争资源</code>或<code>彼此通信</code>而产生的一种阻塞现象，若没有外力作用，都将无法推进下去。</li><li><code>死锁线程</code>：永远在<code>相互等待</code>的线程。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/185cad336950888b8cc2d5db0a87d625.png"></p><h2 id="多线程通信"><a href="#多线程通信" class="headerlink" title="多线程通信"></a>多线程通信</h2><p>线程通信：<code>解决线程间的协同工作问题(彼此配合)</code><br><code>Object类</code>提供线程通信的方法</p><ul><li>void <code>wait</code>()<br>使当前线程<code>放弃</code>同步锁并进入等待，直到其他线程进入此同步锁，并调用<code>notify()</code>或<code>notifyAll()</code>方法<code>唤醒</code>该线程为止。</li><li>void <code>notify</code>()<br><code>唤醒</code>此同步锁上等待的<code>第一个调用wait()</code>方法的线程。</li><li>void <code>notifyAll</code>()<br><code>唤醒</code>此同步锁上等待的<code>调用wait()方法的所有线程</code>。</li></ul><hr><p>两个线程，假设分别为A和B，A线程用于“放入苹果”，而B线程用于“拿走苹果”；一次只能放一个；A线程放好后，就通知线程拿走；B拿到后，就通知A接着放；如果A线程没有放，则B线程不能拿。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/64ad35084e4274644237a8c986ed257b.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/9b2f85a1c095e428ad5b61ba07c38698.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/12920a0d89af7aed84eda0356667547c.png"></p><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/8a4039605c0e57c609f0d217f0bc9582.png"></p><h2 id="文件、File类、java-io包"><a href="#文件、File类、java-io包" class="headerlink" title="文件、File类、java.io包"></a>文件、File类、java.io包</h2><p><code>文件</code>可以认为是相关记录或存放在一起的数据的集合；<br>文件一般是存放在<code>磁盘上</code>的，例如：硬盘、光盘和软盘等。</p><p> <code>File文件类</code>提供了文件和目录管理的功能，主要包括：</p><ul><li>文件及目录的创建；</li><li>文件名、文件大小、最后修改日期等文件属性的查询；</li><li>文件目录管理、文件夹创建等操作。</li><li>File类位于<code>java.io</code>包中。 </li></ul><blockquote><p>注意，File类并<code>不能直接</code>对文件内容进行读/写操作，只能查看文件的<code>属性</code>。</p></blockquote><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>文件对象（即，File类对象）不但可以表示文件，还可以表示目录，在程序中一个File类对象可以代表一个文件或目录。<img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/af5d5b286e435e5e67d969bb564a808e.png"></p><ul><li>文件路径的几种<code>表达形式</code>：<br>File f1 = new File( “c:/ java123/abc.txt”  );<br>File f1 = new File( “c:// java123// abc.txt”  );</li><li>创建文件对象<code>并非创建文件本身</code>，而是创建一个File类的对象所具有的<code>存储空间</code>，为后续文件的管理、文件的读写做好<code>准备</code>。<br>File f1 = new File( “<code>c:/ java123/abc.txt</code>“  );</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建文件:</span><br><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/input.txt&quot;</span>); <span class="comment">//开辟存储空间</span></span><br><span class="line">f.createNewFile(); <span class="comment">//创建文件</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/fbfecaa09d430d7d914449d031a5a1ec.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/03b69db45e9355b0e740b6dcc6c003c6.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/4b576515f1602659c7062b7f3765bcbc.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/10aa88f9d02264d0bc46688121443ea5.png"></p><blockquote><p><code>FilenameFilter </code>： 是一个接口，该接口有唯一方法 boolean  accept(File dir, String name) 用于判断dir、name指定文件是否为需要类型。<br><code>只要创建一个类，实现此接口即可实现文件过滤功能</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">File newwj=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/a.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(newwj.exists()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">newwj.createNewFile();<span class="comment">//创建文件</span></span><br><span class="line">System.out.println(<span class="string">&quot;文件已创建&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;名称:&quot;</span>+newwj.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;绝对路径:&quot;</span>+newwj.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件父路径:&quot;</span>+newwj.getParent());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FilePath=<span class="string">&quot;c:/java123/媒体文件夹/图片.jpg&quot;</span>;</span><br><span class="line"><span class="comment">//private static final String FilePath=&quot;c:&quot;+File.pathSeparator+&quot;java123&quot;+File.pathSeparator+&quot;abc.txt&quot;;</span></span><br><span class="line"><span class="comment">//pathseparator 文件路径分隔符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//当前工程所在的根目录 new File(&quot;.&quot;)</span></span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">File wj=<span class="keyword">new</span> File(FilePath);</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="comment">//File wj=new File(&quot;c:/java123&quot;,&quot;abc.txt&quot;);</span></span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line"><span class="comment">//File dir=new File(&quot;c:/java123&quot;);</span></span><br><span class="line"><span class="comment">//File wj=new File(dir,&quot;abc.txt&quot;);</span></span><br><span class="line">System.out.println(<span class="string">&quot;文件或目录是否存在：&quot;</span>+wj.exists());</span><br><span class="line">System.out.println(<span class="string">&quot;是文件吗:&quot;</span>+wj.isFile());</span><br><span class="line">System.out.println(<span class="string">&quot;是目录吗:&quot;</span>+wj.isDirectory());</span><br><span class="line">System.out.println(<span class="string">&quot;名称:&quot;</span>+wj.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;绝对路径:&quot;</span>+wj.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件大小:&quot;</span>+wj.length());   <span class="comment">//文件的长度，以字节为单位</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否为可读:&quot;</span>+wj.canRead());</span><br><span class="line">System.out.println(<span class="string">&quot;是否被写入:&quot;</span>+wj.canWrite());</span><br><span class="line">System.out.println(<span class="string">&quot;文件名字:&quot;</span>+wj.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件父路径:&quot;</span>+wj.getParent());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sj=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">Date a=<span class="keyword">new</span> Date(wj.lastModified());</span><br><span class="line">System.out.println(<span class="string">&quot;最后修改日期:&quot;</span>+wj.lastModified()+<span class="string">&quot;  &quot;</span>+sj.format(a));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用createNewFile类创建文件</span></span><br><span class="line">File f1=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/新建文件.txt&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b= f1.createNewFile();</span><br><span class="line">System.out.println(<span class="string">&quot;创建文件成功:&quot;</span>+ b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用mkdir创建单级空文件夹     mkdir可以创建多级空文件夹，单级也行</span></span><br><span class="line">File f2=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/新建文件夹&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b1=f2.mkdir();</span><br><span class="line">System.out.println(<span class="string">&quot;创建文件夹成功:&quot;</span>+b1);</span><br><span class="line"><span class="comment">//多级</span></span><br><span class="line">File f3=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/新建多级文件夹/1/2/3&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b3=f3.mkdirs();</span><br><span class="line">System.out.println(<span class="string">&quot;创建多级文件夹成功:&quot;</span>+b3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//list 返回文件下所以文件 及名称  隐藏文件也可以查看</span></span><br><span class="line">File f4=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123&quot;</span>);</span><br><span class="line">String arr[]=f4.list();</span><br><span class="line"><span class="keyword">for</span>(String fileName:arr) &#123;</span><br><span class="line">System.out.println(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//listFiles</span></span><br><span class="line">File f5=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123&quot;</span>);</span><br><span class="line">File []  files=f5.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File f:files) &#123;</span><br><span class="line">System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用delete删除文件或文件夹</span></span><br><span class="line"><span class="comment">//文件夹中有内容 不会删除返回false    从硬盘中删除 不走回收站，谨慎</span></span><br><span class="line"><span class="comment">/*if(f1.exists()&amp;&amp;f1.isFile()) &#123;</span></span><br><span class="line"><span class="comment"> boolean b4=f1.delete();//文件删除</span></span><br><span class="line"><span class="comment">System.out.println(&quot;删除成功&quot;+b4);</span></span><br><span class="line"><span class="comment">&#125;  */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//列出指定目录下的所有java源文件和满足条件的文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileAccept</span> <span class="keyword">implements</span> <span class="title">FilenameFilter</span></span>&#123;</span><br><span class="line">String extName=<span class="string">&quot;&quot;</span>;</span><br><span class="line">FileAccept(String extName)&#123;  <span class="comment">//构造方法赋值过滤条件</span></span><br><span class="line"><span class="keyword">this</span>.extName=extName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(java.io.File file,String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fileName.endsWith(extName);<span class="comment">//过滤条件w</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">File dir=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123&quot;</span>);</span><br><span class="line">String[] fileNames=dir.list();<span class="comment">//返回目录dir中的文件和目录的名称所组成的字符串数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;所有文件数:&quot;</span>+fileNames.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileNames.length;i++) &#123;</span><br><span class="line">System.out.println(fileNames[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">FileAccept con=<span class="keyword">new</span> FileAccept(<span class="string">&quot;mp3&quot;</span>);<span class="comment">//过滤条件</span></span><br><span class="line">fileNames=dir.list(con);</span><br><span class="line">System.out.println(<span class="string">&quot;所有mp3文件:&quot;</span>+fileNames.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileNames.length;i++) &#123;</span><br><span class="line">System.out.println(fileNames[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">FileAccept con1=<span class="keyword">new</span> FileAccept(<span class="string">&quot;txt&quot;</span>);</span><br><span class="line">fileNames=dir.list(con1);</span><br><span class="line">System.out.println(<span class="string">&quot;所有txt文件:&quot;</span>+fileNames.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileNames.length;i++) &#123;</span><br><span class="line">System.out.println(fileNames[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h2><ul><li>File类不负责文件的读写。Java中文件读写是通过“<code>流</code>”的形式完成的。</li><li>流是一组<code>有序的数据序列</code>，也称“数据流”。</li><li>流是以<code>先进先出</code>的方式完成数据的<code>发送</code>和<code>接收</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/b68fbb79829d99edfafae2150fbb7ab9.png"></li><li>根据数据的流向不同，分为<code>输入流</code>和<code>输出流</code>，如果数据的流向是从<code>外设</code>读取到<code>内存</code>中的程序称为“<code>输入流</code>”（Input Stream） ，反之称为<code>输出流</code>（ Output Stream ）。输入流类名以<code>In</code>开始，输出流类名以<code>Out</code>开始。</li><li>输入流： 只能从中读取数据，而不能向其写入数据。</li><li>输出流：只能向其写入数据，而不能向其读取数据。</li></ul><blockquote><p>输入输出是相对于计算机而言的，输入in就是进来，进入CPU中，所以是读取，而输出out，是计算机往外输出，就是写。</p></blockquote><blockquote><p>注：如果从硬盘的角度来考虑，图15.1所示的数据流应该是输入流才对；但划分输入/输出流时是从程序运行所在的内存的角度来考虑的，因此如图15.1所在的流时输出流。而不是输入流。</p></blockquote><p>    对于如图15.2所示的数据流向，数据从服务器通过网络流向客户端，在这种情况下,Server端的内存负责将数据输出到网络里，因此Server端的程序使用输出流；Client端的内存负责从网络中读取数据，因此Client端的程序应该使用输入流。<br> <img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/02/32cfcf78a226c8b046f648aec39fdeb6.png"></p><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><ul><li><p>按照数据处理的方式不同，流又可分为<code>字节流</code>、<code>字符流</code>。字节流类名以Stream结尾，字符流类名以Reader或Writer结尾。</p></li><li><p><code>字节流</code>是指8位的通用字节流，<code>以字节为基本单位处理</code>，适合处理二进制文件（音频文件、图片、歌曲等），对于字节流进行操作的类大部分继承于<code>InputStream</code>（输入字节流）类和<code>OutputStream</code>（输出字节流）类；</p></li><li><p><code>字符流</code>是指16位的Unicode字符流，<code>以字符（两个字节）为基本单位处理</code>，非常适合处理字符串和文本，对于字符流进行操作的类大部分继承于<code>Reader</code>（读取流）类和<code>Writer</code>（写入流）类。</p></li><li><p>字节流可用于任何类型的对象，包括二进制对象，而字符流<code>只能处理字符或者字符串</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/c9f3c95a98f01df15b9f7431ac4b02ec.png"></p></li></ul><table><thead><tr><th>分类</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td>抽象基类</td><td><em>InputStream</em></td><td><em>OutputStream</em></td><td><em>Reader</em></td><td><em>Writer</em></td></tr><tr><td>访问文件</td><td><strong>FileInputStream</strong></td><td><strong>FileOutputStream</strong></td><td><strong>FileReader</strong></td><td><strong>FileWriter</strong></td></tr><tr><td>访问数组</td><td><strong>ByteArrayInputStream</strong></td><td><strong>ByteArrayOutputStream</strong></td><td><strong>CharArrayReader</strong></td><td><strong>CharArrayWriter</strong></td></tr><tr><td>访问管道</td><td><strong>PipedInputStream</strong></td><td><strong>PipedOutputStream</strong></td><td><strong>PipedReader</strong></td><td><strong>PipedWriter</strong></td></tr><tr><td>访问字符串</td><td></td><td></td><td><strong>StringReader</strong></td><td><strong>StringWriter</strong></td></tr><tr><td>缓冲流</td><td>BufferedInputStream</td><td>BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr><tr><td>转换流</td><td></td><td></td><td>InputStreamReader</td><td>OutputStreamWriter</td></tr><tr><td>对象流</td><td>ObjectInputStream</td><td>ObjectOutputStream</td><td></td><td></td></tr><tr><td>抽象基类</td><td><em>FilterInputStream</em></td><td><em>FilterOutputStream</em></td><td><em>FilterReader</em></td><td><em>FilterWriter</em></td></tr><tr><td>打印流</td><td></td><td>PrintStream</td><td></td><td>PrintWriter</td></tr><tr><td>推回输入流</td><td>PushbackInputStream</td><td></td><td>PushbackReader</td><td></td></tr><tr><td>特殊流</td><td>DataInputStream</td><td>DataOutputStream</td><td></td><td></td></tr></tbody></table><blockquote><p> 注：表中粗体字所标出的类代表节点流，必须直接与指定的物理节点关联：斜体字标出的类代表抽象基类，无法直接创建实例。</p></blockquote><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>字节流——适于读写<code>二进制文件</code>.<br><code>InputStream（字节输入流）</code>和<code>OutputStream（字节输出流）</code>是字节流的两个顶层父类，提供了输入流类与输出流类的通用API。 </p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p> InputStream是抽象类，所有字节输入流类都直接或间接继承此类。<br>字节输入流类很多，使用较多有3个：<code>FileInputStream</code>、<code>BufferedInputStream</code>和<code>DataInputStream </code><br>(1)<code>FileInputStream</code>（字节文件输入流）：此类用于<code>从本地文件</code>中<code>读取</code>内容。<br>(2)<code>BufferedInputStream</code>：此类本身带有一个<code>缓冲区</code>，在读取数据时，先放到缓冲区中，可以<code>减少对数据源的访问</code>，提高运行的效率。<br>(3)<code>DataInputStream</code>：此类提供一些基于<code>多字节读取方法</code>，从而可以读取基本数据类型的数据，如，readDouble()、readInt()<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/571782ec2fee591393127f2378722da2.png"></p><p>在InputStream里面包含如下3个方法：</p><ul><li><code> int read()</code>; 从输入流中读取<code>单个字节</code>（相当于从图15.5所示的水管中取出一滴水），返回所读取的字节数据（字节数据可直接转换为int类型）。</li><li><code>int read(byte[] b)</code>从输入流中最多读取b.length个字节的数据，并将其存储在字节数组b中，返回实际读取的字节数。</li><li><code>int read(byte[] b,int off,int len)</code>; 从输入流中最多读取len个字节的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字节数。</li></ul><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p>OutputStream是抽象类，所有字节输出流类都直接或间接继承此类。<br>字节输出流类很多，使用较多有3个：<code>FileOutputStream</code>、<code>BufferedOutputStream</code>和<code>DataOutputStream </code><br>(1)<code>FileOutputStream</code>（字节文件输出流）：此类用于向<code>本地文件</code>中<code>写入</code>数据。<br>(2)<code>BufferedOutputStream</code>：此类本身带有一个缓冲区，在写取数据时，先放到缓冲区中，实现缓冲的数据流。<br>(3)<code>DataOutputStream(OutputStream out) </code>：创建一个新的数据输出流，将数据<code>写入指定的基础输出流</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/fad4c5c25c26799ebe9817ac3e5db6c0.png"><br>提供如下三个方法:</p><ul><li>void write(int c); 将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。</li><li>void write(byte[]/char[] buf); 将字节数组/字符数组中的数据输出到指定输出流中。</li><li>void write(byte[]/char[] buf, int off,int len ); 将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。</li></ul><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流——适于读写<code>文本文件</code><br>Reader和Writer是java.io包中的两个字符流类的顶层抽象父类，定义了在I/O流中读写字符数据的通用API。<br>在Java中，字符采用是16位的Unicode字符编码。常见字符输入/输出流是由<code>Reader和Writer</code>抽象类派生出来的。处理数据时是以<code>字符</code>为基本单位的。</p><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p><code>字符输入流</code><br><code>FileReader</code>：用来读取字符文件的便捷类。<br><code>BufferedReader</code>类：是Reader类的子类，为Reader 对象添加<code>字符缓冲器</code>，为数据输入分配内存存储空间，存取数据更为有效。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/3deb370c77aca4d3b2451a6743bc91a0.png"><br>在Reader中包含如下3个方法：</p><ul><li><code>int read()</code>; 从输入流中读取单个字符（相当于从图15.5所示的水管中取出一滴水），返回所读取的字符数据（字节数据可直接转换为int类型）。</li><li><code>int read(char[] b)</code>从输入流中最多读取b.length个字符的数据，并将其存储在字节数组b中，返回实际读取的字符数。</li><li><code>int read(char[] b,int off,int len);</code> 从输入流中最多读取len个字符的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字符数。</li></ul><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><p><code>字符输出流</code><br>Writer写入字符类型<br>字符输出流类很多，使用较多的有：FileWriter、BufferedWriter<br>（1）<code>FileWriter</code>：用来写入<code>字符文件</code>的便捷类。FileWriter 用于写入字符流。要写入原始字节流。<br>（2）<code>BufferedWriter</code>：将文本写入<code>字符输出流</code>，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。除非要求提示输出，否则建议用 BufferedWriter 包装所有其 write() 操作可能开销很高的 Writer。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/d972f7dfe72a073d33c17d34c2728002.png"><br>提供如下方法:</p><ul><li><code>void write(int c)</code>; 将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。</li><li><code>void write(byte[]/char[] buf)</code>; 将字节数组/字符数组中的数据输出到指定输出流中。</li><li><code>void write(byte[]/char[] buf, int off,int len )</code>; 将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。</li><li><code>void write(String str)</code>; 将str字符串里包含的字符输出到指定输出流中。</li><li><code>void write (String str, int off, int len)</code>; 将str字符串里面从off位置开始，长度为len的字符输出到指定输出流中。</li></ul><h2 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>使用FileInputStream类 读文件<br><code>FileInputStream</code>类称为<code>文件输入流</code>，继承于InputStream类，是进行文件读操作的最基本类；<br>它的作用是将<code>文件中的数据输入到内存</code>中，我们可以利用它来<code>读文件</code>；<br>由于它属于<code>字节流</code>，因此在读取Unicode字符（如中文）的文件时可能会出现问题。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/1a625dc3173a56c68d4b9c0c8298a581.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/e0f08cba2758d309112110e6e40e5ae3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream读取文件“c:\java123\test.txt”的内容，并输出到控制台。一次读1个字节。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/test.txt&quot;</span>);<span class="comment">//创建文件对象</span></span><br><span class="line">FileInputStream fis=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="comment">//使用文件对象创建文件输入流对象，相对于打开文件</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;file.length();i++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch=(<span class="keyword">char</span>)(fis.read()); <span class="comment">//循环读取字符</span></span><br><span class="line">System.out.println(ch);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">fis.close();<span class="comment">//关闭流</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件打开失败&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动创建C:/java123/test.txt文件，test.txt文件里内容为123；<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/7144ece395f8c7795269ab44245c9d2f.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream读取文件“c:\java123\test.txt”的内容，并输出到控制台。读到的数据存放到byte型数组中*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile1</span> </span>&#123;</span><br><span class="line">  <span class="comment">///文件读取 FileInputStream  read 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File wj=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/abc.txt&quot;</span>); <span class="comment">//创建文件对象</span></span><br><span class="line">FileInputStream f=<span class="keyword">new</span> FileInputStream(wj);</span><br><span class="line"><span class="comment">/*//单个字节的读取/*</span></span><br><span class="line"><span class="comment">for(int i=0;i&lt;wj.length();i++) &#123;</span></span><br><span class="line"><span class="comment">char ch=(char)f.read();</span></span><br><span class="line"><span class="comment">System.out.print(ch);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//多个字节读取 字节数组</span></span><br><span class="line"><span class="keyword">byte</span> buy[]=<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)(wj.length())];  <span class="comment">//根据文件字节长度创建字节数组</span></span><br><span class="line">f.read(buy); <span class="comment">//读取文件中的数据放入字节数组中 </span></span><br><span class="line">String str=<span class="keyword">new</span> String(buy);  <span class="comment">//字节转换成字符</span></span><br><span class="line">System.out.println(str);</span><br><span class="line">f.close();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException fnfe) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件打开失败&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>使用<code>FileOutputStream类</code> 写文件<br>FileOutputStream类称为<code>文件输出流</code>，继承于OutputStream类，是进行文件写操作的最基本类；<br>它的作用是将<code>内存中的数据输出到文件</code>中，我们可以利用它来写文件。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/df394541f9f115357ed9c4e700a538f7.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/9846114d1b058195361ff7883d1f4ee9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream写文件“c:\java123\test.txt”。一次写一个字节。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String str=<span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/test.txt&quot;</span>);<span class="comment">//创建文件对象</span></span><br><span class="line"><span class="comment">//通过文件对象创建文件输出流对象</span></span><br><span class="line"><span class="comment">//附加第二个参数true，指定进行文件追加，默认为不追加</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将逐个字符写入文件中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">fos.write(str.charAt(i)); <span class="comment">//charAt返回指定索引位置的char值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/384faf5dfbeeb82d396ff445ffc8908a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写Java程序，使用FileInputStream写文件“c:\java123\test.txt”。一次写一个字节数组。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo2</span> </span>&#123;</span><br><span class="line">   <span class="comment">//在函数内部不进行异常处理，将异常抛出函数外部</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String str=<span class="string">&quot;I Love Java&quot;</span>;</span><br><span class="line"><span class="comment">//通过文件名创建文件输出流对象</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:/java123/test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span> buffer[]=str.getBytes(); <span class="comment">//将字符串转换为字节数组</span></span><br><span class="line"><span class="comment">//将字节数组中包含的数据一次性写入到文件中</span></span><br><span class="line">fos.write(buffer);</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/83356024587dea48c7a9098ef624855d.png"></p><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>FileInputStream类和FileOutputStream类是成对出现的，一个进行<code>输入（读文件</code>）操作，一个进行<code>输出（写文件）</code>操作；<br>由于采用<code>字节</code>方式进行数据传输，不必考虑数据的格式问题，这两个类对文件操作的效率较高；<br>可以使用这两个类完成复制文件的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//文件的复制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile7</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   File f=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/abc.txt&quot;</span>);</span><br><span class="line">       File destination =<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/abccopy.txt&quot;</span>);</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.创建文件 输入流从系统文件获取字节</span></span><br><span class="line">          FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">           <span class="comment">//2.创建文件输出流将数据写入系统文件</span></span><br><span class="line">          FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">           <span class="comment">///3.保存字节数g</span></span><br><span class="line">          System.out.println(<span class="string">&quot;文件长度:&quot;</span>+fis.available()); <span class="comment">//返回文件的大小2</span></span><br><span class="line">           <span class="comment">//4.输入流读取字节数，并保存到字节数组中</span></span><br><span class="line">          <span class="keyword">byte</span> []buy=<span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">           <span class="comment">//5.将字节数组写入目标文件中</span></span><br><span class="line">          fis.read(buy);</span><br><span class="line">          fos.write(buy);</span><br><span class="line">           System.out.println(<span class="string">&quot;成功复制文本&quot;</span>);</span><br><span class="line">           <span class="comment">//6.最后关闭输入输出流，释放连接资源</span></span><br><span class="line">           fis.close();</span><br><span class="line">           fos.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;FileNotFoundException&quot;</span>); </span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;IOException &quot;</span>); </span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="comment">//*****************图片的复制*****************</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/媒体文件夹/图片.jpg&quot;</span>);</span><br><span class="line">        File destination =<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/图片copy.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建文件 输入流从系统文件获取字节</span></span><br><span class="line">            FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//2.创建文件输出流将数据写入系统文件</span></span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小&quot;</span>+fis.available());</span><br><span class="line">            <span class="comment">///3.保存字节数</span></span><br><span class="line">            <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">            <span class="comment">//4.输入流读取字节数，并保存到字节数组中</span></span><br><span class="line">            fis.read(b);</span><br><span class="line">            <span class="comment">//5.将字节数组写入目标文件中</span></span><br><span class="line">            fos.write(b);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功复制图片&quot;</span>);</span><br><span class="line">            <span class="comment">//6.最后关闭输入输出流，释放连接资源</span></span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;FileNotFoundException&quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException &quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="comment">//*****************歌曲的复制*****************</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile9</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/媒体文件夹/歌曲.mp3&quot;</span>);</span><br><span class="line">        File destination =<span class="keyword">new</span> File(<span class="string">&quot;c:/java123/歌曲copy.mp3&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建文件 输入流从系统文件获取字节</span></span><br><span class="line">            FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//2.创建文件输出流将数据写入系统文件</span></span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小&quot;</span>+fis.available());</span><br><span class="line">            <span class="comment">///3.保存字节数</span></span><br><span class="line">            <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">            <span class="comment">//4.输入流读取字节数，并保存到字节数组中</span></span><br><span class="line">            fis.read(b);</span><br><span class="line">            <span class="comment">//5.将字节数组写入目标文件中</span></span><br><span class="line">            fos.write(b);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功复制音频&quot;</span>);</span><br><span class="line">            <span class="comment">//6.最后关闭输入输出流，释放连接资源</span></span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;FileNotFoundException&quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException &quot;</span>); </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ul><li><p>FileReader类称为<code>文件读取流</code>，允许以<code>字符流</code>的形式对文件进行读操作，其构造方法有3种重载方式，以下是常用的几种：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/e8353174a28576610e7c0c3c2a0f8515.png"></p></li><li><p>该类将从文件中逐个地读取字符，效率比较低下，因此一般将该类对象包装到缓冲流中进行操作。</p></li></ul><h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/63e32d99f9c91991e82f55ecc535a792.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**FileReader配合BufferedReader读文件“c:\java123\test.txt”。逐行读取数据，并在控制台显示。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile10</span> </span>&#123;</span><br><span class="line">   <span class="comment">//字符流读取 FileReader  中文</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/abc.txt&quot;</span>);</span><br><span class="line"><span class="comment">//通过文件对象创建文件读取流对象</span></span><br><span class="line">FileReader fr=<span class="keyword">new</span> FileReader(f);</span><br><span class="line"><span class="comment">//将文件读取流包装成缓冲读取流</span></span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">String str;</span><br><span class="line"><span class="keyword">while</span>((str=br.readLine())!=<span class="keyword">null</span>) &#123; <span class="comment">//逐行读取数据</span></span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">br.close();  <span class="comment">//关流要要反着关</span></span><br><span class="line">fr.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/8f995851dec92d11aa2d97e7be8fd18c.png"></p><blockquote><p>与FileReader类相似，FileWriter类同样需要使用缓冲流进行包装。</p></blockquote><h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/00a50ecad200819921dd90dbdf54f007.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*FileWriter配合BufferedWriter写文件“c:\java123\test3.txt”。逐行写数据。*/</span></span><br><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;C:/java123/test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//通过文件对象创建文件输出字符流对象</span></span><br><span class="line">FileWriter fw=<span class="keyword">new</span> FileWriter(f);</span><br><span class="line"><span class="comment">//将文件输出字符流包装成缓冲流</span></span><br><span class="line">BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">bw.write(<span class="string">&quot;大家好！&quot;</span>);</span><br><span class="line">bw.write(<span class="string">&quot;我正在学习java&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;请多多指教！&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;Luckybug@21cn.com&quot;</span>);</span><br><span class="line">bw.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/ce1f22b99abeffd321a8b4100f97ef38.png"></p><h2 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h2><p>控制台输入<code>System.in</code>实际上是一个<code>InputStream类</code>的对象；<br>System.in 的<code>read</code>方法可以从控制台接受输入，它只能以<code>字节</code>形式接收数据，并且一次只能接受一个字节，这使输入操作很不便；<br>必须将System.in进行处理，才可以顺利地从控制台接受输入，这将使用到:<br><code>InputStreamReader</code>类<br><code>BufferedReader</code>类.<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/ba8085bae22cac393f5d6245a0eb035a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsoleInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//将System.in转化为字符流对象</span></span><br><span class="line">InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line"><span class="comment">//用缓冲流包装</span></span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的姓名:&quot;</span>);</span><br><span class="line">String name=br.readLine();<span class="comment">//接受输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的年龄:&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> age=Integer.parseInt(br.readLine());<span class="comment">//接受输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;你的姓名:&quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;你的年龄:&quot;</span>+name);</span><br><span class="line">br.close();</span><br><span class="line">isr.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io流;</span><br><span class="line"> <span class="comment">/*                    通过控制台输入内容写入文件**/</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFile6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner sca=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//写文件</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入文件名：&quot;</span>);</span><br><span class="line">        String name=sca.next();</span><br><span class="line">        File file=<span class="keyword">new</span> File(name+<span class="string">&quot;.txt&quot;</span>);<span class="comment">//文件名        相对路径（项目名根目录下）</span></span><br><span class="line"><span class="comment">//      FileOutputStream fs=new FileOutputStream(file);                //如果文件存在 覆盖</span></span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);<span class="comment">//true表示追加，如果文件存在 向里面继续添加内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入写入的内容:&quot;</span>);</span><br><span class="line">        String str=sca.next();</span><br><span class="line">        <span class="keyword">byte</span> bytes[]=str.getBytes();         <span class="comment">//FileOutputStream 是基于字节流  把要写入的信息 保存到字节数组中</span></span><br><span class="line">        fos.write(bytes,<span class="number">0</span>,bytes.length);<span class="comment">//将字节数组中全部内容写到文件中   从0—数组的长度</span></span><br><span class="line">        fos.close();<span class="comment">//关闭流</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件写入成功！&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读文件</span></span><br><span class="line">        FileInputStream fis=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">byte</span> bt[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//1KB       每次最多读取的1KB  根据文件大小而定</span></span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((temp=fis.read(bt))!=-<span class="number">1</span>)&#123;    <span class="comment">//将数据保存到数组（缓冲区）中 并返回读取的字节数  -1表示读完了</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bt,<span class="number">0</span>,temp));<span class="comment">//输出数组中保存内容 按照每次读取的字节数</span></span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h1><h2 id="相关概念-2"><a href="#相关概念-2" class="headerlink" title="相关概念"></a>相关概念</h2><p>网络<br>(1) 概念：连接终端系统(主机)的<code>通信系统</code>。<br>(2) 功能：实现<code>资源共享、通信</code>。</p><ul><li>局域网（Local Area Network，LAN），就是同一区域内通过一定形式连接起来的计算机。</li><li>广域网（Wide Area Network，WAN），由LAN延伸到更大的范围。</li><li>因特网（Internet），由无数的LAN和WAN组成。</li><li><code>服务器</code>是指<code>提供信息的计算机或程序</code>，<code>客户机</code>是指<code>请求信息的计算机或程序</code>，而网络用于连接服务器与客户机，实现两者相互通信。</li><li><code>IP地址</code>：IP地址是计算机在互联网中<code>唯一标识</code>。</li><li><code>端口</code>：区分<code>应用程序</code>，实现程序间的通信</li><li> 假如一台计算机提供了HTTP、FTP等多种服务，那么客户机通过<code>不同的端口</code>来确定连接到服务器的哪项服务上。</li></ul><blockquote><p>说明： 0～1023端口用于知名网络服务和应用，1024以上的端口用于用户的普通应用程序。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/c95323c23793364f9a35a8ef863e6d6c.png"></p><h2 id="套接字-Socket"><a href="#套接字-Socket" class="headerlink" title="套接字(Socket)"></a>套接字(Socket)</h2><p>(1)功能：连接<code>应用程序</code>和<code>端口（Port）</code>。<br>(2) 客户端与服务器通过<code>套接字</code>建立<code>连接</code>和<code>通信</code>：<br>① <code>UDP套接字</code>：不可靠。<br>② <code>TCP/IP套接字</code>：</p><ul><li>可靠的双向流协议；</li><li>可发送任意数量的数据；</li><li>提供消息确认、错误检测、错误恢复等服务。</li></ul><blockquote><p>Java将套接字抽象化为类，程序设计者只需创建Socket类对象，即可使用套接字。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/3b28b3c6e98b251b01a4ebc87c4356df.png"></p><h2 id="C-S模式"><a href="#C-S模式" class="headerlink" title="C/S模式"></a>C/S模式</h2><p>客户端/服务器模式(c/s)<br>①客户端：<code>请求服务</code>的计算机。<br>②服务器：<code>提供服务</code>的计算机。</p><ul><li>多个客户端可<code>同时访问</code>服务器。</li><li> 一台服务器可以<code>同时</code>为数千台客户端<code>服务</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/8377fafe28d6b3224886623096f5a007.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/94375e1ff43c101be8a7d9a6dae4f173.png"></p><h2 id="java-net包"><a href="#java-net包" class="headerlink" title="java.net包"></a>java.net包</h2><p>(1) <code>InetAddress类</code></p><ul><li> <code>封装IP地址</code>，提供与IP地址相关的方法。</li><li> InetAddress方法会抛出<code>UnknownHostException</code>异常，在主机<code>不存在</code>或网络<code>连接错误</code>时发生。</li></ul><table><thead><tr><th>InetAddress类常用方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>InetAddress</strong> <strong>getLocalHost</strong>( )</td><td><strong>创建本地主机的</strong>InetAddress对象（含主机名+IP地址）</td></tr><tr><td><strong>String</strong> <strong>getHostName</strong>( )</td><td><strong>如果是</strong>本机则返回计算机名，不是本机则返回主机名，没有域名则是IP地址。</td></tr><tr><td><strong>String</strong> <strong>getHostAddress</strong>( )</td><td><strong>返回</strong>IP地址</td></tr><tr><td><strong>InetAddress</strong> <strong>getByName(</strong> <strong>String</strong> <strong>host)</strong></td><td><strong>已知主机名，返回主机的<em>InetAddress</em></strong>对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaclIPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">InetAddress ip;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//创建本地主机的InetAddress对象(含主机名+IP地址)</span></span><br><span class="line">ip=InetAddress.getLocalHost();</span><br><span class="line">String localname=ip.getHostName(); <span class="comment">//获取本机名</span></span><br><span class="line">String localip=ip.getHostAddress(); <span class="comment">//获取IP地址</span></span><br><span class="line"><span class="comment">//已知主机名，返回主机的InetAddress对象</span></span><br><span class="line"><span class="comment">//InetAddress aa=InetAddress.getByName(&quot;SC-201611191816&quot;);</span></span><br><span class="line">System.out.println(<span class="string">&quot;本机名：&quot;</span> + localname);</span><br><span class="line">    System.out.println(<span class="string">&quot;本机IP地址：&quot;</span> + localip); </span><br><span class="line">    System.out.println(<span class="string">&quot;本机InetAddress对象：&quot;</span> + ip);</span><br><span class="line">  <span class="comment">//  System.out.println(&quot;aa：&quot; + aa);</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(UnknownHostException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) <code>ServerSocket</code></p><ul><li>用于创建TCP<code>服务器端</code>Socket，使服务器绑定一个端口，等待客户的连接请求。</li></ul><table><thead><tr><th>ServerSocket常用方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>构造方法：ServerSocket(int port)</strong></td><td><strong>创建绑定到特定端口的服务器套接字</strong></td></tr><tr><td><strong>Socket</strong> <strong>accept()</strong></td><td><strong>等待</strong>客户端的<strong>连接</strong>，有客户端<strong>连接</strong>会<strong>返回</strong>一个对应的<strong>Socket</strong></td></tr><tr><td><strong>InetAddress getInetAddress()</strong></td><td>返回封装了<strong>ServerSocket</strong>绑定的IP地址的<strong>InetAddress对象</strong></td></tr><tr><td><strong>boolean isClosed()</strong></td><td>判断<strong>ServerSocket</strong>是否关闭</td></tr><tr><td><strong>void bind(SocketAddress endpoint)</strong></td><td>将<strong>ServerSocket对象</strong>绑定到指定的<strong>IP地址和端口号</strong></td></tr><tr><td><strong>int getInetAddress()</strong></td><td>返回服务器套接字等待的端口号</td></tr><tr><td><strong>void close()</strong></td><td>关闭套接字</td></tr><tr><td><strong>boolean isBound()</strong></td><td>判断ServerSocket的绑定状态</td></tr></tbody></table><p>(3) <code>Socket</code></p><ul><li>创建TCP<strong>客户端</strong>Socket</li></ul><table><thead><tr><th align="center">Socket常用方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>Socket(String hostName,int port)</strong></td><td align="center"><strong>根据主机名和端口创建Socket</strong></td></tr><tr><td align="center"><strong>Socket(InetAddress a,int port)</strong></td><td align="center"><strong>根据InetAddress和端口创建Socket</strong></td></tr><tr><td align="center"><strong>InputStream getInputStream()</strong></td><td align="center"><strong>返回InputStream类型的输入流对象</strong></td></tr><tr><td align="center"><strong>OutputStream getOutputStream()</strong></td><td align="center"><strong>返回OutputStream类型的输出流对象</strong></td></tr><tr><td align="center"><strong>int getPort()</strong></td><td align="center"><strong>返回Socket对象与服务器端连接端口号</strong></td></tr><tr><td align="center"><strong>InetAddress getLocalAddress()</strong></td><td align="center"><strong>获取Socket对象绑定的本地IP地址</strong></td></tr><tr><td align="center"><strong>void close()</strong></td><td align="center"><strong>关闭Socket连接，结束本次通信</strong></td></tr></tbody></table><h2 id="编写C-S程序"><a href="#编写C-S程序" class="headerlink" title="编写C/S程序"></a>编写C/S程序</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><ul><li><code>创建</code>一个<code>服务器套接字</code>(ServerSocket)，绑定到指定的<code>端口</code>。</li><li>调用<code>accept()</code>方法，<code>侦听</code>来自客户端的<code>请求</code>，如果客户发出请求，则<code>接受</code>连接，<code>返回</code>通信套接字(Socket)。</li><li>调用Socket的<code>getInputStream</code>和<code>getOutpuStream</code>方法，获得<code>I/O流</code>，开始网络数据的<code>接收</code>和<code>发送</code>。</li><li>关闭<code>通信套接字</code>，关闭<code>服务器套接字</code>。</li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li><code>创建</code>一个<code>套接字</code>(Socket)，向服务器的侦听端口发出请求。</li><li>与服务器正确连接后，调用<code>Socket类</code>的<code>getInputStream()</code>和<code>getOutputStream()</code>方法，获得I/O流，开始网络数据的接收和发送。</li><li>关闭<code>通信套接字</code>。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/42e1562d9cc2c9c5022b2a8d710226aa.png"></li></ul><h3 id="Socket通信方式"><a href="#Socket通信方式" class="headerlink" title="Socket通信方式"></a>Socket通信方式</h3><p>利用Socket方式进行数据通信与传输的整个过程如图所示：<code>Socket</code>对象代表<code>主叫方</code>，<code>ServerSocket</code>对象代表<code>被叫方</code>，执行<code>accept()</code>方法表示<code>同意建立连接</code>。连接一旦建立，会自动创建一个输入流和一个输出流，通过这两个流可以实现数据的发送。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/7c9e2d255aa2b25520f44bf82107f969.png"></p><h3 id="Socket编程思路"><a href="#Socket编程思路" class="headerlink" title="Socket编程思路"></a>Socket编程思路</h3><p>(1)<code>I/O流</code></p><ul><li>计算机系统将除<code>CPU</code>、<code>内存以外</code>的<code>其他设备</code>都当作<code>文件</code>处理，包括网络终端（网卡）也不例外。</li><li>两台主机之间通过Socket建立握手连接之后，主要通过<code>I/O流</code>来<code>接收</code>和<code>发送</code>数据，实际上，绝大部分网络操作是在操作<code>I/O流</code>。</li><li>操作<code>网络端口流</code>与操作<code>磁盘文件流</code>原理相似。</li><li>出于效率的考虑，<code>Socket</code>使用的是<code>字节流</code>，但是在实际操作中，字节往往会带来不便，所以我们一般会把<code>字节流</code>改造成<code>字符流</code>后进行操作。</li></ul><p>(2)<code>输入</code></p><ul><li>先利用<code>InputStreamReader</code>将<code>InputStream</code>转化成字符流</li><li>然后再使用<code>BufferedReader</code>建立缓冲区，以提高效率。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStream is=socket.getInputStream();</span><br><span class="line">InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">BufferedReader in=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">in.readLine(); <span class="comment">//从流中读出信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>(3)<code>输出</code></p><ul><li>利用<code>PrintWriter</code>类对<code>OutputStream</code>进行包装</li><li><code>PrintWriter</code>称为打印输出流，包装类，它可以直接输出各种类型的数据。<br>如：void println( String ) ;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OutputStream os=socket.getOutputStream();</span><br><span class="line">PrintWriter pw=<span class="keyword">new</span> PrintWriter(os, <span class="keyword">true</span>);</span><br><span class="line">pw.println(“待写信息”);  <span class="comment">//将信息写入流</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="C-S实例"><a href="#C-S实例" class="headerlink" title="C/S实例"></a>C/S实例</h3><p><code>Client客户端</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 网络通信;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">JTextArea jt; <span class="comment">//多行文本域</span></span><br><span class="line">JTextField t;  <span class="comment">//单行文本域</span></span><br><span class="line">JButton b;</span><br><span class="line">JScrollPane jsp;<span class="comment">//滚动条</span></span><br><span class="line">PrintWriter pw; <span class="comment">//防止局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;客户端窗口&quot;</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">jt=<span class="keyword">new</span> JTextArea();</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;发送&quot;</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">f.add(p);</span><br><span class="line">p.add(jt);</span><br><span class="line">p.add(t);</span><br><span class="line">p.add(b);</span><br><span class="line">jsp=<span class="keyword">new</span> JScrollPane(jt); <span class="comment">//文本域加滚动条</span></span><br><span class="line">f.add(jsp);</span><br><span class="line">f.setSize(<span class="number">350</span>,<span class="number">250</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">f.add(p,BorderLayout.SOUTH);</span><br><span class="line">f.setIconImage((<span class="keyword">new</span> ImageIcon(<span class="string">&quot;MyImage/qq图标.jpg&quot;</span>)).getImage());</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">/*System.exit(0)是退出整个程序，如果有多个窗口，全部都销毁退出。</span></span><br><span class="line"><span class="comment">frame.setDefaultCloseOperation()是设置用户在此窗体上发起&quot;close&quot;时默认执行的操作。必须指定以下选项之一： </span></span><br><span class="line"><span class="comment">  (1)DO_NOTHING_ON_CLOSE（在WindowConstants中定义）：不执行任何操作，要求程序在已注册的 WindowListener 对象的 windowClosing 方法中处理该操作。 </span></span><br><span class="line"><span class="comment">  (2)HIDE_ON_CLOSE（在WindowConstants中定义）：调用任意已注册的WindowListener对象后自动隐藏该窗体。 </span></span><br><span class="line"><span class="comment">  (3)DISPOSE_ON_CLOSE（在WindowConstants中定义）：调用任意已注册WindowListener的对象后自动隐藏并释放该窗体。 </span></span><br><span class="line"><span class="comment">  (4)EXIT_ON_CLOSE（在JFrame中定义）：使用System exit方法退出应用程序。仅在应用程序中使用。 </span></span><br><span class="line"><span class="comment">默认情况下，该值被设置为 HIDE_ON_CLOSE</span></span><br><span class="line"><span class="comment">也就是说没有设置的话,默认点关闭时只是隐藏窗体,在后台进程中还可以看到，如果有多个窗口，只是销毁调用dispose的窗口，其他窗口仍然存在，整个应用程序还是处于运行状态。*/</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端程序思路</span></span><br><span class="line"><span class="comment">//创建一个套接字(Socket)，向服务器的侦听端口发出请求。</span></span><br><span class="line"><span class="comment">//与服务器正确连接后，调用Socket类的getInputStream()（接受）和getOutputStream()（发送）方法，获得I/O流，开始网络数据的接收和发送。</span></span><br><span class="line"><span class="comment">//关闭通信套接字。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Socket s=<span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8998</span>); <span class="comment">//进入端口，参数为服务器IP地址和端口 可通过cmd命令查找 ping和netstat -an </span></span><br><span class="line"><span class="comment">//尝试建立与服务器的连接。如果成功，则返回Socket对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//向服务器发送信息</span></span><br><span class="line"> pw=<span class="keyword">new</span> PrintWriter(s.getOutputStream(),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取键盘控制台的内容</span></span><br><span class="line">InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收服务器的内容</span></span><br><span class="line">InputStreamReader isr1=<span class="keyword">new</span> InputStreamReader(s.getInputStream());</span><br><span class="line">BufferedReader br1=<span class="keyword">new</span> BufferedReader(isr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//死循环 多次交流</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">/*System.out.println(&quot;客户端说:&quot;);</span></span><br><span class="line"><span class="comment">String str=br.readLine(); //接受控制台</span></span><br><span class="line"><span class="comment">pw.println(str);//向服务器发送信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">String str1=br1.readLine();<span class="comment">//接受服务器的信息</span></span><br><span class="line">jt.append(<span class="string">&quot;服务器对我说说:&quot;</span>+str1+<span class="string">&quot;\r\n&quot;</span>);  <span class="comment">//在多行文本域显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//s.close();//关闭头接字流</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">Client c=<span class="keyword">new</span> Client();</span><br><span class="line"><span class="keyword">new</span> Client();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">if</span>(e.getSource()==b) &#123;</span><br><span class="line">String str=t.getText();</span><br><span class="line">jt.append(<span class="string">&quot;我对服务器说:&quot;</span>+str+<span class="string">&quot;\r\n&quot;</span>);  <span class="comment">//append追加  不覆盖前面的内容</span></span><br><span class="line"><span class="comment">//setText与append区别 在于不会覆盖之前的信息</span></span><br><span class="line">pw.println(str);<span class="comment">//发送给客户端</span></span><br><span class="line">t.setText(<span class="string">&quot;&quot;</span>);<span class="comment">//每次发完单行文本框清空</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Server服务端</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 网络通信;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="comment">//尝试写好窗口 继承实现</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">JTextArea jt; <span class="comment">//多行文本域</span></span><br><span class="line">JTextField t;  <span class="comment">//单行</span></span><br><span class="line">JButton b;</span><br><span class="line">JScrollPane jsp;<span class="comment">//滚动条</span></span><br><span class="line">PrintWriter pw;  <span class="comment">//消除局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">()</span></span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;服务器窗口&quot;</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">jt=<span class="keyword">new</span> JTextArea();</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;发送&quot;</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">f.add(p);</span><br><span class="line"></span><br><span class="line">p.add(jt);</span><br><span class="line">p.add(t);</span><br><span class="line">p.add(b);</span><br><span class="line">jsp=<span class="keyword">new</span> JScrollPane(jt); <span class="comment">//文本域加滚动条</span></span><br><span class="line">f.add(jsp);</span><br><span class="line">f.setSize(<span class="number">350</span>,<span class="number">250</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>, <span class="number">600</span>);</span><br><span class="line">f.add(p,BorderLayout.SOUTH);</span><br><span class="line">f.setIconImage(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;MyImage/qq图标.jpg&quot;</span>).getImage());</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">/*System.exit(0)是退出整个程序，如果有多个窗口，全部都销毁退出。</span></span><br><span class="line"><span class="comment">frame.setDefaultCloseOperation()是设置用户在此窗体上发起&quot;close&quot;时默认执行的操作。必须指定以下选项之一： </span></span><br><span class="line"><span class="comment">  (1)DO_NOTHING_ON_CLOSE（在WindowConstants中定义）：不执行任何操作，要求程序在已注册的 WindowListener 对象的 windowClosing 方法中处理该操作。 </span></span><br><span class="line"><span class="comment">  (2)HIDE_ON_CLOSE（在WindowConstants中定义）：调用任意已注册的WindowListener对象后自动隐藏该窗体。 </span></span><br><span class="line"><span class="comment">  (3)DISPOSE_ON_CLOSE（在WindowConstants中定义）：调用任意已注册WindowListener的对象后自动隐藏并释放该窗体。 </span></span><br><span class="line"><span class="comment">  (4)EXIT_ON_CLOSE（在JFrame中定义）：使用System exit方法退出应用程序。仅在应用程序中使用。 </span></span><br><span class="line"><span class="comment">默认情况下，该值被设置为 HIDE_ON_CLOSE</span></span><br><span class="line"><span class="comment">也就是说没有设置的话,默认点关闭时只是隐藏窗体,在后台进程中还可以看到，如果有多个窗口，只是销毁调用dispose的窗口，其他窗口仍然存在，整个应用程序还是处于运行状态。*/</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  查找IP地址方法</span></span><br><span class="line"><span class="comment">InetAddress ip;</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">ip = InetAddress.getLocalHost();</span></span><br><span class="line"><span class="comment"> //创建本地主机的InetAddress对象(含主机名+IP地址)   </span></span><br><span class="line"><span class="comment">String localname = ip.getHostName(); // 获取本机名</span></span><br><span class="line"><span class="comment">  String localip = ip.getHostAddress(); // 获取IP地址</span></span><br><span class="line"><span class="comment">  InetAddress  aa=  InetAddress.getByName(&quot;SC-201611191816&quot;);</span></span><br><span class="line"><span class="comment">//已知主机名，返回主机的InetAddress对象</span></span><br><span class="line"><span class="comment">  System.out.println(&quot;本机名：&quot; + localname);</span></span><br><span class="line"><span class="comment">  System.out.println(&quot;本机IP地址：&quot; + localip); </span></span><br><span class="line"><span class="comment">  System.out.println(&quot;本机InetAddress对象：&quot; + ip);</span></span><br><span class="line"><span class="comment">  System.out.println(&quot;aa：&quot; + aa);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125; catch (UnknownHostException e1) &#123;</span></span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line"><span class="comment">e1.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">       </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//服务端程序思路</span></span><br><span class="line"><span class="comment">//创建一个服务器套接字(ServerSocket)，绑定到指定的端口。</span></span><br><span class="line"><span class="comment">//调用accept()方法，侦听来自客户端的请求，如果客户发出请求，则接受连接，返回通信套接字(Socket)。</span></span><br><span class="line"><span class="comment">//InputStreamReader getInputStream BufferedReader 读取客户端和控制台</span></span><br><span class="line"><span class="comment">//调用Socket的getInputStream（读取）和getOutpuStream（发送）方法，获得I/O流，开始网络数据的接收和发送</span></span><br><span class="line"><span class="comment">//PrintWriter  getOutputStream方法发送</span></span><br><span class="line"><span class="comment">//关闭通信套接字，关闭服务器套接字。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ServerSocket ss=<span class="keyword">new</span> ServerSocket(<span class="number">8998</span>);</span><br><span class="line"><span class="comment">//ServerSocket在服务器上定义一个接口  方便客户端连接</span></span><br><span class="line">System.out.println(<span class="string">&quot;服务器正在监听&quot;</span>);</span><br><span class="line">Socket so=ss.accept();</span><br><span class="line"><span class="comment">//等待客户机的链接，若链接，则创建一个Socket类型的套接字</span></span><br><span class="line"><span class="comment">//套接字：连接应用程序和端口 客户端与服务器通过套接字建立连接和通信</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取客户端发来的信息</span></span><br><span class="line"><span class="comment">//先利用InputStreamReader将InputStream转化成字符流。</span></span><br><span class="line"><span class="comment">//然后再使用BufferedReader建立缓冲区，以提高效率。</span></span><br><span class="line"><span class="comment">//readLine()方法读取</span></span><br><span class="line">InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(so.getInputStream());</span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给客户端发信息</span></span><br><span class="line"><span class="comment">//利用PrintWriter类对OutputStream进行包装</span></span><br><span class="line"><span class="comment">//PrintWriter称为打印输出流，包装类，它可以直接输出各种类型的数据。</span></span><br><span class="line"><span class="comment">//如：void println( String ) ;</span></span><br><span class="line">         pw = <span class="keyword">new</span> PrintWriter(so.getOutputStream(),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取服务器控制台发来的信息</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         InputStreamReader isr1=new InputStreamReader(System.in);</span></span><br><span class="line"><span class="comment">BufferedReader br1=new BufferedReader(isr1);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String str=br.readLine();  <span class="comment">//接受客户端的信息</span></span><br><span class="line">jt.append(<span class="string">&quot;客户端对我说说:&quot;</span>+str+<span class="string">&quot;\r\n&quot;</span>);  <span class="comment">//在多行文本域显示</span></span><br><span class="line"><span class="comment">/*System.out.println(&quot;服务器说:&quot;);</span></span><br><span class="line"><span class="comment">String str1=br1.readLine();</span></span><br><span class="line"><span class="comment">pw.println(str1);   //输出服务器发送的信息  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//so.close();//关闭套接字流    结束点红点 再点双叉防止下次运行 端口被占用</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">Server s=<span class="keyword">new</span> Server();</span><br><span class="line"><span class="keyword">new</span> Server();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">if</span>(e.getSource()==b) &#123;  <span class="comment">//是否点击按钮发送</span></span><br><span class="line">String str=t.getText();   <span class="comment">//从单行文本域中取出1来</span></span><br><span class="line">jt.append(<span class="string">&quot;我对客户端说:&quot;</span>+str+<span class="string">&quot;\r\n&quot;</span>);  <span class="comment">//append追加  不覆盖前面的内容  发送到多行文本域</span></span><br><span class="line"><span class="comment">//setText与append区别 在于不会覆盖之前的信息</span></span><br><span class="line">pw.println(str); <span class="comment">//发送给客户端</span></span><br><span class="line">t.setText(<span class="string">&quot;&quot;</span>); <span class="comment">//每次发完单行文本框清空</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/bf4f1d6a414f9a4ddf2f0e62b0234107.png"></p><h1 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h1><h2 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h2><blockquote><p> <strong><em>数据库(DataBase,DB)</em></strong>:指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。<br> <strong><em>数据库管理系统(DataBase Management System，DBMS)</em></strong> :指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。</p></blockquote><p>常见数据库管理系统</p><ul><li>MySQL<br>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件。</li><li>Orcale<br>Oracle数据库被认为是业界目前比较成功的关系型数据库管理系统。Oracle数据库可以运行在UNIX、Windows等主流操作系统平台，完全支持所有的工业标准，并获得最高级别的ISO标准安全性认证。</li><li>DB2<br>DB2是IBM公司的产品，DB2数据库系统采用多进程多线索体系结构，其功能足以满足大中公司的需要，并可灵活地服务于中小型电子商务解决方案。</li><li>Microsoft SQL Server<br>SQL Server 是Microsoft 公司推出的关系型数据库管理系统。具有使用方便可伸缩性好与相关软件集成程度高等优点。</li></ul><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><p>Data Definition Language 数据定义语言</p><ul><li>作用:用来定义数据库对象：库、表、列等</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 操作数据库 */</span></span><br><span class="line"><span class="comment">--增 create</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名; <span class="comment">--创建新的数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> GBK;<span class="comment">--创建新的字符集为GBK的数据库</span></span><br><span class="line"><span class="comment">--查 show</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;<span class="comment">--查看DBMS中所有的数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名;<span class="comment">--查看数据库的定义信息</span></span><br><span class="line"><span class="comment">--改 alter</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> utf8;<span class="comment">--把数据库改成utf8字符集</span></span><br><span class="line"><span class="comment">--删 drop</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;<span class="comment">--删除数据库</span></span><br><span class="line"><span class="comment">--其他</span></span><br><span class="line"><span class="keyword">use</span> 数据库名;<span class="comment">--使用数据库</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();<span class="comment">--查看当前正在使用的数据库</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;<span class="comment">--刷新数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作表 */</span></span><br><span class="line"><span class="comment">--增 create</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(<span class="comment">--创建新表</span></span><br><span class="line">字段名<span class="number">1</span> 字段类型(长度) [约束],</span><br><span class="line">字段名<span class="number">2</span> 字段类型(长度) [约束],</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line"><span class="comment">--查 show</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">--查询数据库中有的表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;<span class="comment">--查看表格的创建细节</span></span><br><span class="line">desc 表名;<span class="comment">--查看表的字段信息</span></span><br><span class="line"><span class="comment">--改 alter</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型[约束];<span class="comment">--添加一个列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧列名 新列名 新数据类型[约束];<span class="comment">--修改列的列名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 新数据类型[约束];<span class="comment">--修改列的数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;<span class="comment">--删除表的列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 AUTO_INCREMENT=<span class="number">5</span>;<span class="comment">--重新设置自增id</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 旧表名 <span class="keyword">to</span> 新表名;<span class="comment">--修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集;<span class="comment">--修改表的字符集</span></span><br><span class="line"><span class="comment">--删 drop</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> 表名;<span class="comment">--如果表存在,则删除;如果不存在,也不会报错.这种语句是MySql特有的语句,其他的数据库都是不支持这种语法的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><p>Data Manipulation Language 数据操作语言</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--增 insert</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(字段值<span class="number">1</span>,字段值<span class="number">2</span>, ...);<span class="comment">--全字段插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>) <span class="keyword">values</span>(字段值<span class="number">1</span>);<span class="comment">--部分字段插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(记录<span class="number">1</span>的所有字段),(记录<span class="number">2</span>的所有字段)...;<span class="comment">--一次性插入多条 数据</span></span><br><span class="line"><span class="comment">--改 update</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span>=列值<span class="number">1</span>,列名<span class="number">2</span>=列值<span class="number">2</span> ... <span class="keyword">where</span> 列名=值;<span class="comment">--修改操作</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span>=列值<span class="number">1</span>;<span class="comment">--没有where条件的,会直接修改所有列名的值</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span> = <span class="keyword">replace</span>(列名<span class="number">1</span>,<span class="string">&#x27;原内容&#x27;</span>,<span class="string">&#x27;要替换的内容&#x27;</span>);<span class="comment">--批量替换字段里的字符串</span></span><br><span class="line"><span class="comment">--删 delete</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名=值;<span class="comment">--删除表中条件是where的</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;<span class="comment">--删除表中所有数据，表结构还在，删除后的数据可以找回</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;<span class="comment">--删除表中所有数据,把表直接drop掉，然后再创建一个同样的新表-删除的数据不能找回。该命令会让id重新从1开始自动递增</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>Data Query Language 数据查询语言</p><ul><li>作用:用来查询记录（数据）<br>查询语句的顺序<br>书写顺序:select → from →join on → where → group by → having → order by → limit<br>执行顺序:from → join on → where → group by → having → select → order by → limit</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 简单查询 */</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;<span class="comment">--查询所有列</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,job <span class="keyword">from</span> emp;<span class="comment">--查询指定的列</span></span><br><span class="line"><span class="keyword">select</span> empno <span class="keyword">as</span> <span class="string">&#x27;编号&#x27;</span>,ename <span class="keyword">as</span> <span class="string">&#x27;别名&#x27;</span> <span class="keyword">from</span> emp;<span class="comment">--给列起别名(as可以省略可以使用&quot;&quot;,&#x27;&#x27;或者不使用引号)</span></span><br><span class="line"><span class="keyword">select</span> e.empno,e.ename <span class="keyword">from</span> emp <span class="keyword">as</span> e;<span class="comment">--给表起别名,表中的字段也能通过表的别名来调用</span></span><br><span class="line"><span class="comment">/* 条件查询 */</span></span><br><span class="line"><span class="comment">--条件语句 &gt;  &lt;  &gt;=  &lt;=  !=(&lt;&gt;)  =</span></span><br><span class="line"><span class="comment">--and(&amp;&amp;)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span> <span class="keyword">and</span> sal&gt;<span class="number">2000</span>;<span class="comment">--可以使用&amp;&amp;带代替</span></span><br><span class="line"><span class="comment">--or(||)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">&#x27;smith&#x27;</span> <span class="keyword">or</span> sal=<span class="number">5000</span>;<span class="comment">--可以使用||来代替</span></span><br><span class="line"><span class="comment">--between...and</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">between</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;F&#x27;</span>;<span class="comment">--BETWEEN AND作用于字符型的数据的时候,包含第一个边界值,但是不包含第二个边界值</span></span><br><span class="line"><span class="comment">--in(set)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span>(<span class="number">800</span>,<span class="number">1600</span>);<span class="comment">--in表示包含的意思</span></span><br><span class="line"><span class="comment">--is null  (尽量不要使用,会导致索引失效)</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="literal">null</span>;<span class="comment">--对于null的判断不能使用=号</span></span><br><span class="line"><span class="comment">--not</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno !=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno &lt;&gt;<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">not</span> deptno =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">not</span> comm <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">--注意</span></span><br><span class="line"><span class="comment">--对于字符型的数据,是严格区分大小写的</span></span><br><span class="line"><span class="comment">--Oracle在任何的平台上都是严格区分字符型数据大小写的</span></span><br><span class="line"><span class="comment">--MySql在Liunx/Unix平台上严格区分字符型数据大小写,但是在window平台上不区分字符型数据大小写</span></span><br><span class="line"><span class="comment">--可以使用BINARY关键字,让MySql在window平台上也严格字符字符型数据的大小写</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="built_in">binary</span> ename=<span class="string">&#x27;smith&#x27;</span>;</span><br><span class="line"><span class="comment">/* 模糊查询 */</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;_M%&#x27;</span>;<span class="comment">-- _ ：任意一个字母 查询第二个字母是m的人</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%m%&#x27;</span>;<span class="comment">-- %：任意0~n个字母 查询名字包含m的人</span></span><br><span class="line"><span class="comment">/* 字段控制查询 */</span></span><br><span class="line"><span class="keyword">select</span> salary*<span class="number">12</span> <span class="keyword">as</span> <span class="string">&#x27;年薪&#x27;</span> <span class="keyword">from</span> emp;<span class="comment">--可以使用算术表达式将月薪以年薪的形式显示</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;<span class="comment">--去掉重复值查询</span></span><br><span class="line"><span class="keyword">select</span> *,sal+<span class="keyword">ifnull</span>(comm,<span class="number">0</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">/* 排序 */</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>;<span class="comment">--升序排序,可默认不写</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;<span class="comment">--降序排序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>,empno <span class="keyword">asc</span>;<span class="comment">--按月薪降序排序，如果月薪相同，按编号升序排序</span></span><br><span class="line"><span class="comment">/* 单行函数 */</span></span><br><span class="line"><span class="comment">--year(日期字段) 将日期格式化为年(月日时分秒同理)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="keyword">now</span>())<span class="comment">--输出今年</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">&#x27;2018-01-01&#x27;</span>);<span class="comment">--2018</span></span><br><span class="line"><span class="comment">--substr(被截取字段名称,起启下标,截取长度) 截取字符串的函数</span></span><br><span class="line"><span class="keyword">select</span> ename,<span class="keyword">substr</span>(ename,<span class="number">2</span>,<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">--length(str) 返回字符型数据的长度</span></span><br><span class="line"><span class="keyword">select</span> ename,<span class="keyword">length</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">length</span>(ename)=<span class="number">5</span>;<span class="comment">--查询名字的长是5的员工</span></span><br><span class="line"><span class="comment">--lower(str) 把字符型数据转换为小写的字符</span></span><br><span class="line"><span class="keyword">select</span> ename,<span class="keyword">lower</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">--upper(str) 把字符型数据转换为大写的字符</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="built_in">binary</span> ename=<span class="keyword">upper</span>(<span class="string">&#x27;smith&#x27;</span>);</span><br><span class="line"><span class="comment">/* 聚合函数 */</span></span><br><span class="line"><span class="comment">--count() 统计指定列不为NULL的记录行数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">where</span> sal+<span class="keyword">ifnull</span>(comm,<span class="number">0</span>)&gt;<span class="number">2500</span></span><br><span class="line"><span class="comment">--max() 计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">--min() 计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">--sum() 计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">--avg() 计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">/* 分组查询 */</span></span><br><span class="line"><span class="comment">--分组查询</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="comment">--HAVING子句</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="keyword">sum</span>(sal)&gt;<span class="number">9000</span>;</span><br><span class="line"><span class="comment">--having与where的区别:where是先筛选后分组;having是先分组后筛选</span></span><br><span class="line"><span class="comment">/* LIMIT */</span></span><br><span class="line"><span class="comment">--分页查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">5</span>;<span class="comment">--查询5行记录，默认从0开始</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;<span class="comment">--查询5行记录，起始行从0开始</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">3</span>,<span class="number">10</span>;<span class="comment">--查询10行记录，起始行从3开始</span></span><br><span class="line"><span class="comment">--注意:LIMIT只能在MySql和SqlServer中有效</span></span><br><span class="line"><span class="comment">/* 多表查询(跨表查询) */</span></span><br><span class="line"><span class="comment">--联合查询</span></span><br><span class="line">  <span class="comment">--说明:合并结果集就是把两个select语句的查询结果合并到一起,被合并的两个结果：列数、列类型必须相同</span></span><br><span class="line">  <span class="comment">--union 去除重复记录</span></span><br><span class="line">  <span class="comment">--union all 不去除重复记录</span></span><br><span class="line"><span class="comment">--连接查询</span></span><br><span class="line">  <span class="comment">--内连接</span></span><br><span class="line">    <span class="comment">--等值连接:建立在父子表关系上,用等号来连接两个表</span></span><br><span class="line"><span class="keyword">select</span> e.empno,e.ename,e.job,e.sal,d.deptno,d.dname</span><br><span class="line">  <span class="keyword">from</span> emp e,dept d</span><br><span class="line">  <span class="keyword">where</span> e.deptno=d.deptno;<span class="comment">--SQL1992语法</span></span><br><span class="line">  <span class="keyword">select</span> e.empno,e.ename,e.job,e.sal,d.deptno,d.dname</span><br><span class="line">  <span class="keyword">from</span> emp e</span><br><span class="line">  <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span>(e.deptno=d.deptno);<span class="comment">--SQL1999语法</span></span><br><span class="line">  <span class="comment">--使用内连接的时候,inner可以忽略</span></span><br><span class="line"><span class="comment">--非等值连接:两个表之间没有父子关系,用非等号来连接两个表</span></span><br><span class="line"><span class="keyword">select</span> e.empno,e.ename,e.sal,s.grade,s.losal,s.hisal</span><br><span class="line">  <span class="keyword">from</span> emp e,salgrade s</span><br><span class="line">  <span class="keyword">where</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;<span class="comment">--SQL1992语法</span></span><br><span class="line">  <span class="keyword">select</span> e.empno,e.ename,e.sal,s.grade,s.losal,s.hisal</span><br><span class="line">  <span class="keyword">from</span> emp e</span><br><span class="line">  <span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal<span class="comment">--SQL1999语法</span></span><br><span class="line">  <span class="comment">--自连接:使用别名将一个表虚拟成两个表(父子表),然后再这两个表上面做等值连接</span></span><br><span class="line">  <span class="keyword">select</span> e.empno <span class="string">&#x27;员工编号&#x27;</span>,e.ename <span class="string">&#x27;员工姓名&#x27;</span>,m.empno <span class="string">&#x27;经理编号&#x27;</span>,m.ename <span class="string">&#x27;经理姓名&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> emp e,emp m</span><br><span class="line">  <span class="keyword">where</span> e.mgr=m.empno &amp;&amp; m.empno=<span class="number">7698</span><span class="comment">--SQL1992语法</span></span><br><span class="line">  <span class="keyword">select</span> e.empno <span class="string">&#x27;员工编号&#x27;</span>,e.ename <span class="string">&#x27;员工姓名&#x27;</span>,m.empno <span class="string">&#x27;经理编号&#x27;</span>,m.ename <span class="string">&#x27;经理姓名&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> emp e</span><br><span class="line">  <span class="keyword">join</span> emp m <span class="keyword">on</span>(e.mgr=m.empno)</span><br><span class="line">  <span class="keyword">where</span> m.empno=<span class="number">7698</span><span class="comment">--SQL1999语法</span></span><br><span class="line">  <span class="comment">--外连接</span></span><br><span class="line"><span class="comment">--左外连接(LEFT OUTER JOIN):左外连接可以把左表中不满足对应关系的数据查询出来</span></span><br><span class="line"><span class="keyword">select</span> e.empno,e.ename,e.job,e.sal,d.deptno,d.dname</span><br><span class="line">  <span class="keyword">from</span> emp e</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno=d.deptno;<span class="comment">--使用外连接的时候,outer可以忽略</span></span><br><span class="line">  <span class="keyword">select</span> e.empno,e.ename,e.job,e.sal,d.deptno,d.dname</span><br><span class="line">  <span class="keyword">from</span> dept d</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.deptno=d.deptno;<span class="comment">--左表的位置是相对的</span></span><br><span class="line">  <span class="comment">--右外连接(RIGHT OUTER JOIN):右外连接可以把右表中不满足对应关系的数据查询出来</span></span><br><span class="line">  <span class="keyword">select</span> e.empno,e.ename,e.job,e.sal,d.deptno,d.dname</span><br><span class="line">  <span class="keyword">from</span> emp e</span><br><span class="line">  <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno=d.deptno;</span><br><span class="line">  <span class="comment">--全外连接(FULL OUTER JOIN):可以把左右两个表中不满足对应关系的数据都查询出来</span></span><br><span class="line">  <span class="keyword">select</span> e.empno,e.ename,e.job,e.sal,d.deptno,d.dname</span><br><span class="line">  <span class="keyword">from</span> emp e</span><br><span class="line">  <span class="keyword">full</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno=d.deptno;<span class="comment">--Oracle支持全外连接,MySql不支持全外连接</span></span><br><span class="line">  <span class="comment">--join的更多用法见下表</span></span><br><span class="line"><span class="comment">--子查询</span></span><br><span class="line">    <span class="comment">--1.用来给主查询提供查询条件或查询数据而首先执行的一个查询</span></span><br><span class="line">    <span class="comment">--2.主查询使用子查询的结果</span></span><br><span class="line">    <span class="comment">--子查询必须要放在()里面</span></span><br><span class="line">  <span class="comment">--分类</span></span><br><span class="line">    <span class="comment">--出现在where中的子查询,用来给查询提供查询条件的</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> emp</span><br><span class="line">    <span class="keyword">where</span> sal&gt;(<span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">30</span>);<span class="comment">--查询高于30部门所有人工资的员工信息</span></span><br><span class="line">    <span class="comment">--出现下from后面的子查询,用来给主查询提供查询数据的(all,any)</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> emp</span><br><span class="line">    <span class="keyword">where</span> sal&gt;<span class="keyword">all</span>(<span class="keyword">select</span> sal <span class="keyword">from</span> emp);<span class="comment">--查询高于30部门所有人工资的员工信息</span></span><br><span class="line">    <span class="comment">--(了解)出现在查询列表中的子查询,功能类似于外连接的效果</span></span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 数据函数 */</span></span><br><span class="line"><span class="comment">-- abs() 取绝对值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">abs</span>(<span class="number">-1</span>); <span class="comment">-- 1</span></span><br><span class="line"><span class="comment">-- round() 用于数据的四舍五入</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">13.26723</span>,<span class="number">2</span>);<span class="comment">-- 结果13.27</span></span><br><span class="line"><span class="comment">--rand() 生成随机数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rand</span>();<span class="comment">--生成一个0到1之间的随机数</span></span><br><span class="line"><span class="comment">-- ceiling() 向上取整</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ceiling</span>(<span class="number">2.5</span>); <span class="comment">-- 3</span></span><br><span class="line"><span class="comment">-- floor() 向下取整</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="number">2.5</span>); <span class="comment">-- 2</span></span><br><span class="line"><span class="comment">-- sign() 符号函数: 负数返回-1,正数返回1,0返回0</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sign</span>(<span class="number">2</span>);  <span class="comment">-- 1</span></span><br><span class="line"><span class="comment">/* 字符串函数 */</span></span><br><span class="line"><span class="comment">-- char_length(str) 返回字符串包含的字符数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">char_length</span>(<span class="string">&#x27;abcdef&#x27;</span>); <span class="comment">-- 6</span></span><br><span class="line"><span class="comment">-- concat() 合并字符串,参数可以有多个</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;我爱&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;天安门&#x27;</span>); <span class="comment">-- 我爱北京天安门</span></span><br><span class="line"><span class="comment">-- insert() 替换字符串,从某个位置开始替换某个长度</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span>(<span class="string">&#x27;一二三四五六七&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;八八八&#x27;</span>); <span class="comment">-- 八八八四五六七</span></span><br><span class="line"><span class="comment">-- lower() 把字符型数据转换为小写的字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(<span class="string">&#x27;Manaphy&#x27;</span>); <span class="comment">-- manaphy</span></span><br><span class="line"><span class="comment">-- upper() 把字符型数据转换为大写的字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">upper</span>(<span class="string">&#x27;Manaphy&#x27;</span>); <span class="comment">-- MANAPHY</span></span><br><span class="line"><span class="comment">-- left() 从左边截取字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(<span class="string">&#x27;Manaphy&#x27;</span>,<span class="number">3</span>); <span class="comment">-- Man</span></span><br><span class="line"><span class="comment">-- right() 从右边截取字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">right</span>(<span class="string">&#x27;Manaphy&#x27;</span>,<span class="number">3</span>); <span class="comment">-- phy</span></span><br><span class="line"><span class="comment">-- replace() 替换字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(<span class="string">&#x27;一二三四五六七&#x27;</span>,<span class="string">&#x27;四五&#x27;</span>,<span class="string">&#x27;八九&#x27;</span>); <span class="comment">-- 一二三八九六七</span></span><br><span class="line"><span class="comment">-- substr(被截取字段名称,起启下标,截取长度) 截取字符串的函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">&#x27;一二三四五六七&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">-- 一二三</span></span><br><span class="line"><span class="comment">-- reverse() 反转字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">reverse</span>(<span class="string">&#x27;一二三四五六七&#x27;</span>); <span class="comment">-- 七六五四三二一</span></span><br><span class="line"><span class="comment">/* 日期函数 */</span></span><br><span class="line"><span class="comment">-- year(日期字段) 将日期格式化为年(月日时分秒同理)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="keyword">now</span>());<span class="comment">-- 输出今年</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">&#x27;2018-01-01&#x27;</span>);<span class="comment">-- 2018</span></span><br><span class="line"><span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_date</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">curdate</span>();</span><br><span class="line"><span class="comment">-- 获取当前日期和时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">localtime</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>();</span><br><span class="line"><span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">curtime</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_time</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><p>Data Control Language 数据控制语言</p><ul><li>作用:用来定义访问权限和安全级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实体完整性 */</span></span><br><span class="line"><span class="comment">--主键约束 primary key 说明:每个表中要有一个主键, 数据唯一, 且不能为null</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span></span><br><span class="line">);<span class="comment">--创建表时指定主键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">primary <span class="keyword">key</span>(<span class="keyword">id</span>,<span class="keyword">name</span>)</span><br><span class="line">);<span class="comment">--联合主键,创建了两个列作为主键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>;<span class="comment">--在已经有表的情况下使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--唯一约束 unique 说明:数据不能重复</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--自动增长列</span></span><br><span class="line">  <span class="comment">--auto_increment(mysql)</span></span><br><span class="line">  <span class="comment">--identity(sqlserver)</span></span><br><span class="line">  <span class="comment">--sequence(oracle)</span></span><br><span class="line">  <span class="comment">--说明:给主键添加自动增长的数值,列只能是整数类型</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment</span><br><span class="line">);<span class="comment">--mysql的方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 域完整性 */</span></span><br><span class="line"><span class="comment">--数据类型</span></span><br><span class="line">  <span class="comment">--数值类型:tinyint(1字节) int(4字节) bigint(8字节) folat(4字节) double(8字节) decimal</span></span><br><span class="line">  <span class="comment">--日期类型</span></span><br><span class="line">date<span class="comment">--1000-01-01/9999-12-31</span></span><br><span class="line">datetime<span class="comment">--1000-01-01 00:00:00/9999-12-31 23:59:59</span></span><br><span class="line">timestamp<span class="comment">--1970-01-01 00:00:00/2038 结束时间是第 2147483647(2^31-1)秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07</span></span><br><span class="line">time<span class="comment">--&#x27;-838:59:59&#x27;/&#x27;838:59:59&#x27; (±35天)</span></span><br><span class="line">year<span class="comment">--1901/2155</span></span><br><span class="line">  <span class="comment">--字符串类型:char(定长字符串) varchar(变长字符串) binary varbinary text(长文本数据) enum set</span></span><br><span class="line"><span class="comment">--非空约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">--默认值约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">);<span class="comment">--默认是男</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(<span class="keyword">id</span>) <span class="keyword">values</span>(<span class="number">1</span>);<span class="comment">--默认是男</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="number">2</span>,<span class="keyword">default</span>);<span class="comment">--默认是男</span></span><br><span class="line"><span class="keyword">insert</span> unto stu <span class="keyword">values</span>(<span class="number">3</span>,<span class="literal">null</span>);<span class="comment">--此处是null</span></span><br><span class="line"><span class="comment">--check约束</span></span><br><span class="line"><span class="keyword">check</span>(sex=<span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span>  sex=<span class="string">&#x27;女&#x27;</span>)<span class="comment">--（mysql不支持）</span></span><br><span class="line"><span class="comment">/* 引用完整性 */</span></span><br><span class="line"><span class="comment">--外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 左表 <span class="keyword">add</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(左表的某个字段) <span class="keyword">references</span> 右表(主键);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">classno <span class="built_in">bigint</span>,</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(classno) <span class="keyword">references</span> tb_class(classno);</span><br><span class="line">  <span class="comment">--注意</span></span><br><span class="line"><span class="comment">--1.从表的列引用了主表的主键,那么该列就称为外键</span></span><br><span class="line"><span class="comment">--2.外键的名字可以不相同</span></span><br><span class="line"><span class="comment">--3.外键的数据类型必须与主表中主键的数据类型完全相同</span></span><br><span class="line"><span class="comment">--4.外键可以是null值</span></span><br><span class="line"><span class="comment">/* 表与表之间的关系 */</span></span><br><span class="line"><span class="comment">--1.一对多: 一张表中的一条记录再另一张表中出现多次</span></span><br><span class="line"><span class="comment">--2.多对多: 要想两张表之间实现多对多的关系,必须有一张中间表,通过中间表创建与两张表的外键约束,实现多个一对多,使用这种方式创建外键约束,非常适合实现多个一对多。</span></span><br><span class="line"><span class="comment">--3.一对一:一张表里的记录,在另外一张表里只能出现一次.表和表之间的关系必须通过外键来创建,但是外键一创建就是一对多,因此在从表里将外键设置唯一性约束,实现一对一</span></span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p><a href="https://blog.csdn.net/qq_22172133/article/details/81266048">JDBC使用详解</a><br><a href="https://www.cnblogs.com/progor/p/9096463.html">JDBC的基本使用</a></p><pre><code>JDBC全称Java Database ConnectivityJDBC可以通过载入不同的数据库的“驱动程序”而与不同的数据库进行连接。</code></pre><p>JDBC优点:</p><ul><li>使用的驱动不同，即可连接不同的数据库。</li><li>使用同一套操作来操作不同的数据库</li><li>如果每一个数据库java都制订一套连接方式，那么当不同的数据库更新的时候，java也需要更新自己的代码，而使用jdbc，使用同一套代码来操作，使用不同的驱动程序（驱动程序由数据库厂商提供）来连接，这使得可以连接不同的数据库。</li></ul><h2 id="JDBC访问步骤"><a href="#JDBC访问步骤" class="headerlink" title="JDBC访问步骤"></a>JDBC访问步骤</h2><ul><li><strong><em>加载并注册数据库驱动（导入驱动包<code>sqljdbc4.jar</code>)</em></strong></li><li><strong><em>通过<code>DriverManager</code>获取数据库连接</em></strong></li><li><strong><em>通过<code>Connection</code>对象获取<code>Statement</code>对象</em></strong></li><li><strong><em>使用Statement执行<code>SQL</code>语句</em></strong></li><li><strong><em>操作<code>ResultSet</code>结果集</em></strong></li><li><strong><em>关闭资源，释放资源</em></strong></li></ul><h2 id="导入驱动"><a href="#导入驱动" class="headerlink" title="导入驱动"></a>导入驱动</h2><ul><li>在对应的数据库厂商网站获取对应的jar包</li><li>将对应的jar包添加到引用。<br>在eclipse中可以将jar包导入一个<code>文件夹</code>后，右键<code>Build Path</code> -&gt; <code>add to path</code>就可以将jar包添加到当前项目引用的库里面。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/33c99dda93535d189da51d0348a48583.png"></li></ul><h2 id="JDBC实例"><a href="#JDBC实例" class="headerlink" title="JDBC实例"></a>JDBC实例</h2><p>在SQLServer数据库系统创建了一个<code>Student数据库</code>，数据库有一个<code>stu表</code><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/57787c1bb14d5ffc2a0df2170120789a.png"><br>stu表中数据如下：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/181baf3bf37103f87daf6a0fcb93a615.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC_01;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBC_01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Statement stmt=<span class="keyword">null</span>;</span><br><span class="line">ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">Connection conn=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* MySQL和SQLServer加载有以下不同</span></span><br><span class="line"><span class="comment">   1.MySQL加载驱动</span></span><br><span class="line"><span class="comment">   Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">   2.通过DriverManager获取数据库连接</span></span><br><span class="line"><span class="comment">   String url=&quot;jdbc:mysql://localhost:3306/Student?charaterEncoding=utf-8&quot;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//*****************************************************************************************88</span></span><br><span class="line"><span class="comment">//1.加载驱动SQL server</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;1.加载成功&quot;</span>);</span><br><span class="line"><span class="comment">//2.通过DriverManager获取数据库连接</span></span><br><span class="line"><span class="comment">//Student为数据库名</span></span><br><span class="line">String url=<span class="string">&quot;jdbc:sqlserver://localhost:1433;DatabaseName=Student&quot;</span>;</span><br><span class="line">String username=<span class="string">&quot;sa&quot;</span>;</span><br><span class="line">String password=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line">conn=DriverManager.getConnection(url,username,password);</span><br><span class="line">    System.out.println(<span class="string">&quot;2.连接成功&quot;</span>);</span><br><span class="line"><span class="comment">//3.通过Connection对象获取Statement对象</span></span><br><span class="line">stmt=conn.createStatement();</span><br><span class="line">System.out.println(<span class="string">&quot;3.成功获取Statement对象&quot;</span>);</span><br><span class="line"><span class="comment">//4.使用Statement执行SQL语句</span></span><br><span class="line">String sql=<span class="string">&quot;select * from stu&quot;</span>; <span class="comment">//从stu表中查询</span></span><br><span class="line">rs=stmt.executeQuery(sql);</span><br><span class="line">System.out.println(<span class="string">&quot;4.执行SQL结果如下&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//5.操作ResultSet结果集</span></span><br><span class="line">System.out.println(<span class="string">&quot;ID|name|sex&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="string">&quot;ID&quot;</span>);</span><br><span class="line">String name=rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">String sex=rs.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">System.out.println(id+<span class="string">&quot;|&quot;</span>+name+<span class="string">&quot;|&quot;</span>+sex+<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;   <span class="comment">//释放资源，反着关闭</span></span><br><span class="line"><span class="keyword">if</span>(rs!=<span class="keyword">null</span>) &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) &#123;</span><br><span class="line">stmt.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn!=<span class="keyword">null</span>) &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/03/b0204f27e029fadb8fdaddc30cfd035b.png"></p><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><ul><li><p><strong>加载数据库驱动——Driver接口</strong><br>Driver接口由数据库厂家提供，作为java开发人员，只需要使用Driver接口就可以了。在编程中要连接数据库，必须先装载特定厂商的数据库驱动程序，不同的数据库有不同的装载方法。</p><pre><code>  Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //MySQL  Class.forName(&quot;com.microsoft.jdbc.sqlserver.SQLServerDriver&quot;); //SQLServer  Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); //Oracle</code></pre></li><li><p><strong>建立连接——Connection接口</strong><br>客户端与数据库所有交互都是通过<code>connection对象</code>完成的<br>使用DriverManager来获取<br><code>URL</code>用于标识数据库的位置，程序员通过URL地址告诉JDBC程序连接哪个数据库，URL的写法为：</p><pre><code>  String url=jdbc:mysql:［］//localhost:3306/数据库名 ?参数名：参数值  url=jdbc:oracle:thin:@localhost:1521:database   //Oracle  url=jdbc:microsoft:sqlserver://localhost:1433; DatabaseName=database //SQLServer      url=jdbc:mysql://localhost:3306/database   //MySQL  Connection conn = DriverManager.getConnection(url,user,pass); </code></pre></li></ul><table><thead><tr><th align="center">DriverManager类常用方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>registerDriver(Driver driver)</strong></td><td align="center">用于向DriverManager中注册给定的JDBC驱动程序</td></tr><tr><td align="center"><strong>getConnection(String url,String user,String password)</strong></td><td align="center">用于建立和数据库的连接，并返回表示连接的Connction对象</td></tr></tbody></table><hr><table><thead><tr><th>Connection常用方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>createStatement()</strong></td><td>创建向数据库发送sql的statement对象。</td></tr><tr><td><strong>prepareStatement(sql)</strong></td><td>创建向数据库发送预编译sql的PrepareSatement对象。</td></tr><tr><td>prepareCall(sql)</td><td>创建执行存储过程的callableStatement对象。</td></tr><tr><td>setAutoCommit(boolean autoCommit)</td><td>设置事务是否自动提交。</td></tr><tr><td>commit()</td><td>在链接上提交事务。</td></tr><tr><td>rollback()</td><td>在此链接上回滚事务。</td></tr><tr><td>getMetaData()</td><td>用于返回表示数据库的元数据的DatabaseMetaData对象</td></tr></tbody></table><ul><li><strong>执行SQL语句——Statement接口</strong><br>用于执行静态SQL语句并返回它所生成结果的对象。<br>三种Statement类：</li></ul><ol><li> <strong>Statement</strong>：由createStatement创建，用于发送简单的SQL语句（不带参数）。</li><li> <strong>PreparedStatement</strong> ：继承自Statement接口，由preparedStatement创建，用于发送含有一个或多个参数的SQL语句。PreparedStatement对象比Statement对象的效率更高，并且可以防止SQL注入，所以我们一般都使用PreparedStatement。</li><li> <strong>CallableStatement</strong>：继承自PreparedStatement接口，由方法prepareCall创建，用于调用存储过程。</li></ol><pre><code>    Statement st = conn.createStatement(); //获取用于向数据库发送sql语句的statement    StiString sql=&quot;select * from stu&quot;;    st.executeQuery(sql);//向数据库发送sql</code></pre><table><thead><tr><th>Statement对象常用方法</th><th>说明</th></tr></thead><tbody><tr><td>executeQuery(String sql)</td><td>用于向数据发送查询语句,返回ResultSet结果集。</td></tr><tr><td>executeUpdate(String sql)</td><td>用于向数据库发送insert、update或delete语句,返回更新的行数</td></tr><tr><td>execute(String sql)</td><td>用于向数据库发送任意sql语句  ,返回是否有结果集</td></tr><tr><td>addBatch(String sql)</td><td>把多条sql语句放到一个批处理中。</td></tr><tr><td>executeBatch()</td><td>向数据库发送一批sql语句执行。</td></tr></tbody></table><p>  PreperedStatement是Statement的孩子，它的实例对象可以通过调用：</p><pre><code>    PreperedStatement st = conn.preparedStatement()    StiString sql=&quot;select * from users where name=? and password=?&quot;&quot;;    st=conn.preparedStatement(sql);    st.setString(2,password);    st.executeQuery();</code></pre><ul><li><p>Statement会使数据库频繁编译SQL，可能造成数据库缓冲区溢出。PreparedStatement 可对SQL进行预编译，从而提高数据库的执行效率。</p></li><li><p>并且PreperedStatement对于sql中的参数，允许使用占位符的形式进行替换，简化sql语句的编写。</p></li><li><p>** 获取结果——ResultSet接口**<br>Jdbc程序中的<code>ResultSet</code>用于代表Sql语句的执行结果。Resultset封装执行结果时，采用的类似于表格的方式，ResultSet  对象维护了一个<code>指向表格数据行的游标</code>，初始的时候，游标在第一行之前，调用<code>ResultSet.next()  </code>方法，可以使游标指向具体的数据行，进行调用方法获取该行的数据。</p></li></ul><p>1.<strong>获取行</strong><br>ResultSet提供了对结果集进行滚动的方法：</p><pre><code>    next()：移动到下一行    Previous()：移动到前一行    absolute(int row)：移动到指定行    beforeFirst()：移动resultSet的最前面。    afterLast() ：移动到resultSet的最后面。</code></pre><p>2.<strong>获取值</strong><br>ResultSet既然用于封装执行结果的，所以该对象提供的都是用于获取数据的get方法：</p><ul><li>获取任意类型的数据<pre><code>  getObject(int index)  getObject(string columnName)</code></pre></li><li>获取指定类型的数据，例如：<pre><code>  getString(int index)  getString(String columnName)</code></pre></li></ul><table><thead><tr><th>SQL类型</th><th>JDBC对应方法</th><th>返回类型</th></tr></thead><tbody><tr><td>bit(1)，bit(n)</td><td>getBoolean，getBytes()</td><td>Boolean，byte[]</td></tr><tr><td>tinyint</td><td>getByte()</td><td>Byte</td></tr><tr><td>smallint</td><td>getShort()</td><td>Short</td></tr><tr><td>int</td><td>getInt</td><td>Int</td></tr><tr><td>bigint</td><td>getLong()</td><td>Long</td></tr><tr><td>char,varchar,longvarchar</td><td>getString</td><td>String</td></tr><tr><td>text(clob) blob</td><td>getClob()，getblob()</td><td>Clob，blob</td></tr><tr><td>date</td><td>getDate()</td><td>java.sql.Date</td></tr><tr><td>time</td><td>getTime()</td><td>java.sql.Time</td></tr><tr><td>timestamp</td><td>getTimestamp</td><td>java.sql.Timestamp</td></tr></tbody></table><h1 id="Swing程序设计"><a href="#Swing程序设计" class="headerlink" title="Swing程序设计"></a>Swing程序设计</h1><p>实际开发中使用WindowBuilder插件进行图形界面设计，更加方便快捷。<br><a href="https://www.eclipse.org/windowbuilder/download.php">WindowBuilder插件下载</a><br><a href="https://blog.csdn.net/chilongxiaba/article/details/106314810">WindowBuilder插件安装</a><br><a href="https://blog.csdn.net/qq_34491508/article/details/80113911">WindowBuilder插件使用</a><br><code>GUI(图形用户界面)</code>为程序提供图形界面，<code>Swing</code>是AWT组件的增强组件，被称为“<code>轻量级组件</code>”，完全由java语言编写，可以在任何平台上运行，相反，依赖于本地平台的组件被称为“<code>重量级组件</code>”，如<code>AWT</code>。<br>Swng包的层次结构和继承关系：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/51007f38a006bb3bde43c7d9cf60cd39.png"></p><h2 id="常用Swing组件"><a href="#常用Swing组件" class="headerlink" title="常用Swing组件"></a>常用Swing组件</h2><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/d2ab88097bc3f749bf007b3a2b19d39c.png"></p><h2 id="常用窗体"><a href="#常用窗体" class="headerlink" title="常用窗体"></a>常用窗体</h2><p><code>JFrame窗体</code>是一个<code>容器</code>，是各个组件的载体，可以通过继承<code>java.swing.JFrame</code>类创建一个窗口，在窗口中添加组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JFrame</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JFrame</span><span class="params">(String title)</span></span>;</span><br><span class="line"><span class="comment">//语法格式</span></span><br><span class="line">JFrame f=<span class="keyword">new</span> JFrame(title);  <span class="comment">//f为JFrame类的对象</span></span><br><span class="line">Container c=f.getContentPane(); <span class="comment">//c为Container类的对象，可以使用JFrame对象调用getContentPane()方法获取。</span></span><br><span class="line"><span class="comment">//调用getContentPane()方法将窗体转为容器，然后在容器里添加组件。</span></span><br><span class="line">c.add(<span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>));</span><br><span class="line"><span class="comment">//remove()方法将组件从容器里删除</span></span><br><span class="line">c.remove(<span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>));</span><br></pre></td></tr></table></figure><p><code>继承JFrame实现:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;  </span><br><span class="line"><span class="keyword">import</span> java.awt.*;    <span class="comment">//导入awt包</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*; <span class="comment">//导入swing包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_05</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;  <span class="comment">//定义一个类继承JFrame</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateJFrame</span><span class="params">(String title)</span> </span>&#123; <span class="comment">//定义一个方法创建JFrame</span></span><br><span class="line">JFrame f=<span class="keyword">new</span> JFrame(title);    <span class="comment">//实例化一个JFrame对象，并设置窗口名</span></span><br><span class="line">Container c=f.getContentPane();  <span class="comment">//获取容器</span></span><br><span class="line">JLabel l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;这是一个JFrame窗体&quot;</span>); <span class="comment">//标签</span></span><br><span class="line"><span class="comment">//使标签上的文字居中</span></span><br><span class="line">l1.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">c.add(l1);</span><br><span class="line">c.setBackground(Color.white);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">250</span>); <span class="comment">//setSize(int x,int y)</span></span><br><span class="line"><span class="comment">//设置窗体关闭方式</span></span><br><span class="line">f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"><span class="comment">//设置窗口相对于指定组件的位置。 如果组件当前未显示或者 c 为 null，则此窗口将置于屏幕的中央。</span></span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> blog_02_05().CreateJFrame(<span class="string">&quot;创建一个JFrame窗体&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/7a0309cfe31e440dcf68c2a567123149.png"><br>关于窗口关闭方式:<br>1.<code>DO_NOTHING</code>_ON_CLOSE：什么都不做就将窗口关闭。<br>2.<code>DISPOSE</code>_ON_CLOSE：代表任何注册监听程序对象后会自动隐藏并释放窗体。<br>3.<code>HIDE</code>_ON_CLOSE：表示隐藏窗口的默认窗口关闭。<br>4.<code>EXIT</code>_ON_CLOSE：退出应用程序默认窗口关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.导入包:</span></span><br><span class="line"><span class="comment">import java.awt.*;</span></span><br><span class="line"><span class="comment">import javax.swing;</span></span><br><span class="line"><span class="comment">2.定义类，声明组件。</span></span><br><span class="line"><span class="comment">3.构造方法中new所有组件。</span></span><br><span class="line"><span class="comment">4.主方法main()中，new 构造方法。</span></span><br><span class="line"><span class="comment">5,JFrame为容器，JPanel为面板，组件加到面板，面板再加到容器上。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 三个JPanel分别对应三行，即用户名、密码、按钮三行，任何网格布局3行1列布局</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_06</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l1,l2;</span><br><span class="line">JPanel p1,p2,p3;</span><br><span class="line">JButton b1,b2;</span><br><span class="line">JTextField t;</span><br><span class="line">JPasswordField pw;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">blog_02_06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;用户登录界面&quot;</span>);</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;用户名&quot;</span>);</span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;密  码&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">pw=<span class="keyword">new</span> JPasswordField(<span class="number">10</span>);</span><br><span class="line">p1=<span class="keyword">new</span> JPanel();</span><br><span class="line">p2=<span class="keyword">new</span> JPanel();</span><br><span class="line">p3=<span class="keyword">new</span> JPanel();</span><br><span class="line"><span class="comment">//设置按键文本颜色</span></span><br><span class="line">b1.setForeground(Color.BLUE);</span><br><span class="line">b2.setForeground(Color.red);</span><br><span class="line">b1.setBackground(Color.gray);</span><br><span class="line">b2.setBackground(Color.black);</span><br><span class="line"><span class="comment">//第一行</span></span><br><span class="line">p1.add(l1);</span><br><span class="line">p1.add(t);</span><br><span class="line">p1.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//第二行</span></span><br><span class="line">p2.add(l2);</span><br><span class="line">p2.add(pw);</span><br><span class="line">p2.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//第三行</span></span><br><span class="line">p3.add(b1);</span><br><span class="line">p3.add(b2);</span><br><span class="line">p3.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//加到容器</span></span><br><span class="line">f.add(p1);</span><br><span class="line">f.add(p2);</span><br><span class="line">f.add(p3);</span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">1</span>));<span class="comment">//设置网格布局</span></span><br><span class="line">f.setSize(<span class="number">230</span>,<span class="number">150</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);<span class="comment">//窗口大小是否可变</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">new</span> blog_02_06();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/9ee3ba3cd8b946c7cc1e2bba3680195e.png"></p><hr><p>JDialog窗体是Swing组件中的对话框，它继承了AWT组件中的<code>java.awt.Dialog</code>类。<br>JDialog窗体的功能是<code>从一个窗体中弹出另一个窗体</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;构造方法</span><br><span class="line">public JDialog();  &#x2F;&#x2F;没有标题和父窗口的对话框</span><br><span class="line">public JDialog(Frame f); &#x2F;&#x2F;创建一个指定父窗口的对话框</span><br><span class="line">public JDialog(Frame f,boolean model); &#x2F;&#x2F;创建一个指定类型的对话框，并指定父窗口</span><br><span class="line">public JDialog(Frame f,String title);  &#x2F;&#x2F;指定标题和父窗口</span><br><span class="line">public JDialog(Frame f,String title,boolean model); &#x2F;&#x2F;指定标题、窗体、模式的对话框。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJDialog</span> <span class="keyword">extends</span> <span class="title">JDialog</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyJDialog</span><span class="params">(MyFrame frame)</span> </span>&#123;</span><br><span class="line"><span class="comment">//实例化一个JDialog类对象，指定对话框的父窗体、标题和类型</span></span><br><span class="line"><span class="keyword">super</span>(frame,<span class="string">&quot;第一个JDialog窗体&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">Container c=getContentPane(); <span class="comment">//创建一个容器</span></span><br><span class="line">c.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;这是一个对话框&quot;</span>));</span><br><span class="line">setBounds(<span class="number">120</span>,<span class="number">120</span>,<span class="number">100</span>,<span class="number">100</span>); <span class="comment">//设置对话框大小</span></span><br><span class="line">setLocationRelativeTo(<span class="keyword">null</span>); <span class="comment">//居中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Container c=getContentPane(); <span class="comment">//创建容器</span></span><br><span class="line">c.setLayout(<span class="keyword">null</span>);</span><br><span class="line">JLabel l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;这是一个JFrame窗体&quot;</span>);</span><br><span class="line"><span class="comment">//标签居中</span></span><br><span class="line">l1.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">c.add(l1);</span><br><span class="line">JButton b=<span class="keyword">new</span> JButton(<span class="string">&quot;弹出对话框&quot;</span>);</span><br><span class="line">b.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">21</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> MyJDialog(MyFrame.<span class="keyword">this</span>).setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">c.add(b);</span><br><span class="line">setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line">setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">new</span> MyFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/4a41eaf54986fd823f9fa08a63af06a0.png"></p><h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><h3 id="JLabel标签"><a href="#JLabel标签" class="headerlink" title="JLabel标签"></a>JLabel标签</h3><p>标签由JLabel类定义，它的父类为JComponent类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(Icon icon)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(Icon icon,<span class="keyword">int</span> aligment)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(String text,<span class="keyword">int</span> aligment)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JLabel</span><span class="params">(String text,Icon icon,<span class="keyword">int</span> aligment)</span></span>; <span class="comment">//带文本，带图标的JLabel对象，并设置标签内容的水平对齐方式。</span></span><br></pre></td></tr></table></figure><h3 id="图标的使用"><a href="#图标的使用" class="headerlink" title="图标的使用"></a>图标的使用</h3><p>Swing中图标可以放置在按钮、标签等组件上。<br>``java<br>ImageIcon img=new ImageIcon(“图片URL”);<br>JButton b=new JButton(img);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### 文本组件</span><br><span class="line">​&#96;&#96;&#96;java</span><br><span class="line">JTextField t&#x3D;new JTextField(10); &#x2F;&#x2F;长度</span><br><span class="line">JTextArea a&#x3D;new JTextArea(5,5);&#x2F;&#x2F;5行5列</span><br><span class="line">JPasswordField &#x3D;p&#x3D;new JPasswordField();</span><br><span class="line">p.setEchoChar(&quot;%&quot;);&#x2F;&#x2F;设置输入密码显示的字符</span><br></pre></td></tr></table></figure><h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">JFrame f=<span class="keyword">new</span> JFrame();</span><br><span class="line">JPanel p=<span class="keyword">new</span> JPanel();</span><br><span class="line"><span class="comment">//1.创建按钮组对象；</span></span><br><span class="line">ButtonGroup bg=<span class="keyword">new</span> ButtonGroup();</span><br><span class="line"><span class="comment">//2.创建若干单选按钮对象</span></span><br><span class="line">JRadioButton b1=<span class="keyword">new</span> JRadoButton(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">JRadioButton b1=<span class="keyword">new</span> JRadoButton(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">//3.将单选按钮加到按钮组中</span></span><br><span class="line">bg.add(b1);</span><br><span class="line">bg.add(b2);</span><br><span class="line"><span class="comment">//4.将单选按钮加到容器中。</span></span><br><span class="line">p.add(b1);</span><br><span class="line">p.add(b2);</span><br><span class="line">f.add(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 单选和复选按钮 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l,l1;</span><br><span class="line">JButton b1,b2;</span><br><span class="line">JPanel p1,p2,p3;</span><br><span class="line">JCheckBox fx1,fx2,fx3; <span class="comment">//复选按钮</span></span><br><span class="line"></span><br><span class="line">JRadioButton dx1,dx2;  <span class="comment">//单选按钮</span></span><br><span class="line"></span><br><span class="line">ButtonGroup bg;<span class="comment">//把单选按钮放进一个组里,默认功能是组里的按钮只能选一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> 单选和复选按钮() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">p1=<span class="keyword">new</span> JPanel();</span><br><span class="line">p2=<span class="keyword">new</span> JPanel();</span><br><span class="line">p3=<span class="keyword">new</span> JPanel();</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;特长&quot;</span>);</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;性别&quot;</span>);</span><br><span class="line"></span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line"></span><br><span class="line">fx1=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;音乐&quot;</span>);</span><br><span class="line">fx2=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;体育&quot;</span>);</span><br><span class="line">fx3=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;文艺&quot;</span>);</span><br><span class="line"></span><br><span class="line">dx1=<span class="keyword">new</span> JRadioButton(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">dx2=<span class="keyword">new</span> JRadioButton(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">//按钮组 只能选一个勾选 必须填</span></span><br><span class="line">bg=<span class="keyword">new</span> ButtonGroup();</span><br><span class="line">bg.add(dx1);</span><br><span class="line">bg.add(dx2);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">p1.add(l);</span><br><span class="line">p1.add(fx1);</span><br><span class="line">p1.add(fx2);</span><br><span class="line">p1.add(fx3);</span><br><span class="line"></span><br><span class="line">p2.add(l1);</span><br><span class="line"><span class="comment">//还是一个一个加不能添加组</span></span><br><span class="line">p2.add(dx1);</span><br><span class="line">p2.add(dx2);</span><br><span class="line"></span><br><span class="line">p3.add(b1);</span><br><span class="line">p3.add(b2);</span><br><span class="line"></span><br><span class="line">f.add(p1);</span><br><span class="line">f.add(p2);</span><br><span class="line">f.add(p3);</span><br><span class="line"><span class="comment">//其余三个面板为流式布局</span></span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">1</span>)); <span class="comment">//网格布局</span></span><br><span class="line">f.setSize(<span class="number">240</span>,<span class="number">150</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>,<span class="number">280</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 单选和复选按钮();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/d5a8174eeeac14edb4e1a092aec300b3.png"></p><h3 id="下拉框、下拉列表列表和滚动条"><a href="#下拉框、下拉列表列表和滚动条" class="headerlink" title="下拉框、下拉列表列表和滚动条"></a>下拉框、下拉列表列表和滚动条</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下拉框</span></span><br><span class="line"><span class="comment">/*getSelectedItem()的方法得到选择的值和一个getSelectedIndex()得到选择值的索引*/</span></span><br><span class="line">String str[]=&#123;<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;长沙&quot;</span>&#125;;</span><br><span class="line">JComboBox xlk=<span class="keyword">new</span> JComboBox(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//列表</span></span><br><span class="line">JPanel p=<span class="keyword">new</span> JPanel();</span><br><span class="line">String xl[]= &#123;<span class="string">&quot;高中&quot;</span>,<span class="string">&quot;大专&quot;</span>,<span class="string">&quot;本科&quot;</span>,<span class="string">&quot;硕士&quot;</span>,<span class="string">&quot;博士&quot;</span>&#125;;</span><br><span class="line">JList lb=<span class="keyword">new</span> JList(xl);</span><br><span class="line">lb.setVisibleRowCount(<span class="number">3</span>);<span class="comment">//使其滚动  3表示默认显示几个</span></span><br><span class="line">JScrollPane gd=<span class="keyword">new</span> JScrollPane(lb);   <span class="comment">//列表加入滚动</span></span><br><span class="line">p.add(xlk);</span><br><span class="line">p.add(gd); <span class="comment">//面板是添加滚动条。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">/*下拉</span></span><br><span class="line"><span class="comment"> * JComboBox   创建字符组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 滚动条</span></span><br><span class="line"><span class="comment"> * JList  创建字符串组放进去 调用 setVisibleRowCount(3)</span></span><br><span class="line"><span class="comment"> * JScrollPane 放JList</span></span><br><span class="line"><span class="comment"> * 添加滚动</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 下拉列表和滚动条 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p1,p2;</span><br><span class="line">JLabel l1,l2;</span><br><span class="line"></span><br><span class="line">JComboBox xlk;  <span class="comment">//下拉框</span></span><br><span class="line"><span class="comment">/*getSelectedItem()的方法得到选择的值和一个getSelectedIndex()得到选择值的索引*/</span></span><br><span class="line"></span><br><span class="line">JList lb;   <span class="comment">//列表</span></span><br><span class="line"></span><br><span class="line">JScrollPane gd;  <span class="comment">//滚动条</span></span><br><span class="line"><span class="keyword">public</span> 下拉列表和滚动条() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">p1=<span class="keyword">new</span> JPanel();</span><br><span class="line">p2=<span class="keyword">new</span> JPanel();</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;籍贯&quot;</span>);</span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;学历&quot;</span>);</span><br><span class="line"></span><br><span class="line">String jg[]= &#123;<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;长沙&quot;</span>,<span class="string">&quot;湖南&quot;</span>,<span class="string">&quot;安化&quot;</span>,<span class="string">&quot;梅城&quot;</span>&#125;;</span><br><span class="line">xlk=<span class="keyword">new</span> JComboBox(jg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String xl[]= &#123;<span class="string">&quot;高中&quot;</span>,<span class="string">&quot;大专&quot;</span>,<span class="string">&quot;本科&quot;</span>,<span class="string">&quot;硕士&quot;</span>,<span class="string">&quot;博士&quot;</span>&#125;;</span><br><span class="line">lb=<span class="keyword">new</span> JList(xl);</span><br><span class="line"></span><br><span class="line">lb.setVisibleRowCount(<span class="number">3</span>);<span class="comment">//使其滚动  3表示默认显示几个</span></span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(lb);   <span class="comment">//列表加入滚动</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">p1.add(l1);</span><br><span class="line">p1.add(xlk);</span><br><span class="line">p2.add(l2);</span><br><span class="line">p2.add(gd);<span class="comment">//添加滚动条</span></span><br><span class="line">f.add(p1);</span><br><span class="line">f.add(p2);</span><br><span class="line"></span><br><span class="line">f.setTitle(<span class="string">&quot;用户调查&quot;</span>);</span><br><span class="line">f.setSize(<span class="number">200</span>,<span class="number">190</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 下拉列表和滚动条();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/3922831dbe80fb1208cc7db445adb582.png"></p><h3 id="拆分窗口"><a href="#拆分窗口" class="headerlink" title="拆分窗口"></a>拆分窗口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">//图片 Ctrl+C 复制 工程文件右击粘贴 可新建一个文件夹放图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 拆分窗口 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JSplitPane cf; <span class="comment">//拆分成左右两个界面</span></span><br><span class="line">JList lb;</span><br><span class="line">JLabel l;</span><br><span class="line">String str[]= &#123;<span class="string">&quot;软件开发&quot;</span>,<span class="string">&quot;游戏开发&quot;</span>,<span class="string">&quot;平面设计&quot;</span>,<span class="string">&quot;动画制作&quot;</span>,<span class="string">&quot;室内设计&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>  拆分窗口() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line"></span><br><span class="line">lb=<span class="keyword">new</span> JList(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;Image/雪花.jpg&quot;</span>)); <span class="comment">//放java工程路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf=<span class="keyword">new</span> JSplitPane(JSplitPane.HORIZONTAL_SPLIT,lb,l);<span class="comment">//左右拆分</span></span><br><span class="line"><span class="comment">//cf=new JSplitPane(JSplitPane.VERTICAL_SPLIT,lb,l);//上下拆分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cf.setOneTouchExpandable(<span class="keyword">true</span>); <span class="comment">//出现两个拉动箭头 可以覆盖或收缩掉一界面</span></span><br><span class="line"></span><br><span class="line">f.add(cf);</span><br><span class="line"></span><br><span class="line">f.setSize(<span class="number">640</span>,<span class="number">480</span>);</span><br><span class="line">f.setLocation(<span class="number">300</span>,<span class="number">280</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">  <span class="keyword">new</span> 拆分窗口();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/f8ed91217debb2e4a113daefc8d04903.png"></p><h2 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h2><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h3><p>绝对布局指硬性指定组件在容器中的位置和大小，可以使用绝对坐标的方式来指定组件的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用步骤:</span></span><br><span class="line"><span class="comment">1.使用Container.setLayout(null)方法取消布局管理器。</span></span><br><span class="line"><span class="comment">2.使用Container.setBounds()方法设置每个组件的大小与位置。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> Blog_02;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blog_02_07</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">blog_02_07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setTitle(<span class="string">&quot;绝对布局&quot;</span>);</span><br><span class="line">setLayout(<span class="keyword">null</span>);</span><br><span class="line">setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">150</span>);</span><br><span class="line">Container c=getContentPane();</span><br><span class="line">JButton b1=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">JButton b2=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">b1.setBounds(<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">30</span>);</span><br><span class="line">b2.setBounds(<span class="number">60</span>,<span class="number">70</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">c.add(b1);</span><br><span class="line">c.add(b2);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">new</span> blog_02_07();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/143377b7b2dc142b6cddbebffb2630c8.png"></p><h3 id="流动布局"><a href="#流动布局" class="headerlink" title="流动布局"></a>流动布局</h3><p>流动布局指组件像“流”一样从左到右摆放组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line"></span><br><span class="line">JButton b[]; <span class="comment">//按钮数组</span></span><br><span class="line">String str[]= &#123;<span class="string">&quot;话梅&quot;</span>,<span class="string">&quot;果脯&quot;</span>,<span class="string">&quot;薯片&quot;</span>,<span class="string">&quot;饼干&quot;</span>,<span class="string">&quot;巧克力&quot;</span>,<span class="string">&quot;腰果&quot;</span>,<span class="string">&quot;锅巴&quot;</span>,<span class="string">&quot;开心果&quot;</span>&#125;; <span class="comment">//字符串数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlowLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;流动窗口&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton[str.length]; <span class="comment">//等价于 JButton b[]=new JButton[str.length]  相当于创建按键数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">b[i]=<span class="keyword">new</span> JButton(str[i]); <span class="comment">//一个一个new</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网格布局方式  java默认边界布局管理</span></span><br><span class="line">f.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//f.setLayout(new FlowLayout(FlowLayout.LEFT));//向左对齐</span></span><br><span class="line"><span class="comment">//f.setLayout(new FlowLayout(FlowLayout.RIGHT));//向右看齐</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">f.add(b[i]);</span><br><span class="line">&#125;</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">150</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);<span class="comment">//不能最大化 拖动</span></span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> FlowLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/91cc9c0cb639ebd1108108d89a2743e5.png"></p><h3 id="边界布局"><a href="#边界布局" class="headerlink" title="边界布局"></a>边界布局</h3><p>边界布局将容器划分东、南、西、北、中五个区域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BorderLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b,b1,b2,b3,b4;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BorderLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;边界布局&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;东方&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;西方&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;南方&quot;</span>);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;北方&quot;</span>);</span><br><span class="line">b4=<span class="keyword">new</span> JButton(<span class="string">&quot;中方&quot;</span>);</span><br><span class="line"><span class="comment">//边界布局方式</span></span><br><span class="line">f.add(b,BorderLayout.EAST);</span><br><span class="line">f.add(b1,BorderLayout.WEST);</span><br><span class="line">f.add(b2,BorderLayout.SOUTH);</span><br><span class="line">f.add(b3,BorderLayout.NORTH);</span><br><span class="line">f.add(b4,BorderLayout.CENTER);</span><br><span class="line"><span class="comment">//如果不是5个按钮，则会以扩充中部去填补</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使任务管理器中窗口也关闭 ，不占内存 很重要！！！！！</span></span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//使运行后的窗口不占内存  起关闭作用</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"></span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> BorderLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/b1c0d8b1f554da1fc04211f71347eea4.png"></p><h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>网格布局将容器划分为网格，所有组件按行和列排列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Windos;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GridLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b[];</span><br><span class="line">String str[]= &#123;<span class="string">&quot;话梅&quot;</span>,<span class="string">&quot;果脯&quot;</span>,<span class="string">&quot;薯片&quot;</span>,<span class="string">&quot;饼干&quot;</span>,<span class="string">&quot;巧克力&quot;</span>,<span class="string">&quot;腰果&quot;</span>,<span class="string">&quot;锅巴&quot;</span>,<span class="string">&quot;开心果&quot;</span>,<span class="string">&quot;蛋糕&quot;</span>&#125;; <span class="comment">//字符串数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GridLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;网格布局&quot;</span>);</span><br><span class="line"></span><br><span class="line">b=<span class="keyword">new</span> JButton[str.length]; <span class="comment">//等价于JButton b[]=new JButton[大小]  创建数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">b[i]=<span class="keyword">new</span> JButton(str[i]);  <span class="comment">//一个一个添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网格布局格式</span></span><br><span class="line">f.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">13</span>)); <span class="comment">//(行，列，长高的像素空间)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line">f.add(b[i]);</span><br><span class="line">&#125;</span><br><span class="line">f.setSize(<span class="number">380</span>,<span class="number">320</span>);</span><br><span class="line">    f.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    f.setResizable(<span class="keyword">false</span>);<span class="comment">//不能最大化 不能拉伸窗口 使其固定</span></span><br><span class="line">    </span><br><span class="line">    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> GridLayout_1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/8fd9c2b221ae6f0801a34bb6d43e119d.png"></p><h3 id="盒式布局"><a href="#盒式布局" class="headerlink" title="盒式布局"></a>盒式布局</h3><p><code>BoxLayout </code>可以把控件依次进行水平或者垂直排列布局。<br>create<code>HorizontalBox</code>()：返回一个 Box 对象，它采用水平 BoxLayout，即 BoxLayout 沿着水平方向放置组件，让组件在容器内从<code>左到右</code>排列。<br>create<code>VerticalBox</code>()：返回一个 Box 对象，它采用垂直 BoxLayout，即 BoxLayout 沿着垂直方向放置组件，让组件在容器内从<code>上到下</code>进行排列。<br>Box 布局时，可以使用空隙类来调整和控制组件之间的间隔，使组件布局达到要求。<br>空隙类的对象是一种占用空间但不可见的组件。空隙类的对象有两种：<br>支撑组件（<code>Struct</code>）：用于调整组件间的有指定长度的间距<br>1.createVerticalStrut(int height) 2.createHorizontalStrut(int width)<br>胶水组件（<code>Glue</code>）：用于调整组件间的无指定长度的间距<br>1.createHorizontalGlue() 2.createVerticalGlue()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//垂直盒子/水平盒子</span></span><br><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxLayout_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b1,b2,b3;</span><br><span class="line">Box box;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoxLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;盒式布局&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮3&quot;</span>);</span><br><span class="line">box=Box.createVerticalBox();<span class="comment">//垂直盒子</span></span><br><span class="line"><span class="comment">//box=Box.createHorizontalBox()//水平盒子</span></span><br><span class="line">box.add(b1);</span><br><span class="line">box.add(Box.createGlue());</span><br><span class="line"><span class="comment">//box.add(Box.createVerticalStrut(10));</span></span><br><span class="line">box.add(b2);</span><br><span class="line">box.add(Box.createGlue());</span><br><span class="line">box.add(b3);</span><br><span class="line"></span><br><span class="line">f.add(box);</span><br><span class="line"><span class="comment">//f.pack();</span></span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> BoxLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/5a7482a37413c82fc2ace16801d75511.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/9df4f6c4f24517fb0023317a90010328.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变间隔</span></span><br><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxLayout_3</span> </span>&#123;</span><br><span class="line"> JFrame f;</span><br><span class="line"> JButton b;</span><br><span class="line"> Box box;</span><br><span class="line"> String name[]= &#123;<span class="string">&quot;按钮1&quot;</span>,<span class="string">&quot;按钮2&quot;</span>,<span class="string">&quot;按钮3&quot;</span>&#125;;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">BoxLayout_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> f=<span class="keyword">new</span> JFrame();</span><br><span class="line"> box=Box.createVerticalBox();</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;name.length;i++) &#123;</span><br><span class="line"> b=<span class="keyword">new</span> JButton(name[i]);</span><br><span class="line"> <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line"> box.add(Box.createVerticalStrut(<span class="number">10</span>));</span><br><span class="line"> <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line"> box.add(Box.createVerticalStrut(<span class="number">20</span>));</span><br><span class="line"> box.add(b);</span><br><span class="line"> &#125;</span><br><span class="line"> f.add(box);</span><br><span class="line"> f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> BoxLayout_3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/a635d72d75d4c2d0c61cab949c39312e.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxLayout_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JTextField t;</span><br><span class="line">JTextArea jt;</span><br><span class="line">JLabel l1,l2;</span><br><span class="line">JButton b;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">Box H1,H2,V1;</span><br><span class="line"><span class="comment">//水平 水平  垂直</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoxLayout_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line"></span><br><span class="line"><span class="comment">//主题</span></span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;主题:&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">H1=Box.createHorizontalBox();<span class="comment">//水平盒子</span></span><br><span class="line">H1.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//离布局间距</span></span><br><span class="line">H1.add(l1);</span><br><span class="line">H1.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//水平间距</span></span><br><span class="line">H1.add(t);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//setAlignmentX()用于使用了BoxLayout.Y_AXIS时，将控件在X轴方向设置为左对齐、右对齐或居中对</span></span><br><span class="line"><span class="comment">//setAlignmentY()将控件在Y轴方向设置为顶对齐、底对齐或居中对齐</span></span><br><span class="line"><span class="comment">//内容</span></span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;内容:&quot;</span>);</span><br><span class="line">jt=<span class="keyword">new</span> JTextArea();</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(jt);</span><br><span class="line">H2=Box.createHorizontalBox();<span class="comment">//水平</span></span><br><span class="line">H2.setAlignmentX(<span class="number">1</span>);  <span class="comment">//设置靠右对齐 X水平轴</span></span><br><span class="line">H2.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//边界间距</span></span><br><span class="line">l2.setAlignmentY(<span class="number">0</span>);<span class="comment">//设置标签垂直靠上对齐</span></span><br><span class="line">H2.add(l2);</span><br><span class="line">H2.add(Box.createHorizontalStrut(<span class="number">5</span>));<span class="comment">//间距</span></span><br><span class="line">gd.setAlignmentY(<span class="number">0</span>); <span class="comment">//文本域垂直靠上</span></span><br><span class="line">H2.add(gd);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//垂直</span></span><br><span class="line"><span class="comment">//H2和按键垂直</span></span><br><span class="line">V1=Box.createVerticalBox();</span><br><span class="line">V1.add(Box.createVerticalStrut(<span class="number">5</span>));<span class="comment">//和H1间距</span></span><br><span class="line">V1.add(H2);</span><br><span class="line"><span class="comment">//确定</span></span><br><span class="line">jt.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">gd.setViewportView(jt);</span><br><span class="line">V1.add(Box.createVerticalStrut(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">b.setAlignmentX(<span class="number">1</span>);  <span class="comment">//水平靠右</span></span><br><span class="line">V1.add(b);</span><br><span class="line"></span><br><span class="line">f.add(H1,BorderLayout.NORTH);<span class="comment">//主题</span></span><br><span class="line">f.add(V1,BorderLayout.CENTER);<span class="comment">//垂直加中间</span></span><br><span class="line"></span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">500</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span>  BoxLayout_2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/4783a159c0548e8d5d9d29d6d4fecc67.png"></p><h3 id="卡片布局"><a href="#卡片布局" class="headerlink" title="卡片布局"></a>卡片布局</h3><p><code>卡片布局</code>可以通过点击窗口中的按钮切换不同的面板。像卡片一样叠加，一张接着一张的显示</p><p><code>CardLayout成员方法</code>:<br>JPanel cp=new JPanel();<br>CardLayout c=new CardLayout();<br>c.<code>first</code>(cp):显示第一个卡片<br>c.<code>last</code>(cp)：显示最后一个卡片<br>c.<code>next</code>(cp)：显示当前所显示卡片之后的卡片<br>c.<code>previous</code>(cp)：显示当前所显示卡片之前的卡片<br>c.<code>show</code>(cp,String name)：显示指定标签的卡片</p><p>卡片布局使用步骤:<br>1.<code>创建CardLayout布局对象</code><br>CardLayout l = new CardLayout();<br>2.<code>创建容器对象</code><br>JPanel panel = new JPanel();<br>3.<code>设置容器对象的布局或使用默认布局</code><br>panel.setLayout(l);<br>4.<code>向容器中添加组件对象(设组件对象已创建)</code><br>panel.add(组件对象，“名称”);<br>5.<code>显示组件</code><br>l.show(panel,  “名称”);<br>l.first(panel);<br> l.last(panel);<br>l.next(panel);<br>l.previous(panel);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardLayout_1</span> </span>&#123;</span><br><span class="line"> JFrame f;</span><br><span class="line"> <span class="comment">//卡片布局面板</span></span><br><span class="line"> JPanel cp;</span><br><span class="line"> CardLayout c;</span><br><span class="line"> JLabel l;</span><br><span class="line"> <span class="comment">//控制面板</span></span><br><span class="line"> JPanel bp; <span class="comment">//按键面板</span></span><br><span class="line"> JButton b; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">CardLayout_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> f=<span class="keyword">new</span> JFrame();</span><br><span class="line"> <span class="comment">//卡片布局设置</span></span><br><span class="line"> cp=<span class="keyword">new</span> JPanel();</span><br><span class="line"> c=<span class="keyword">new</span> CardLayout();</span><br><span class="line"> cp.setLayout(c);</span><br><span class="line"> f.add(cp,BorderLayout.CENTER);</span><br><span class="line"> <span class="comment">//标签</span></span><br><span class="line"> String lname[]= &#123;<span class="string">&quot;卡片A&quot;</span>,<span class="string">&quot;卡片B&quot;</span>,<span class="string">&quot;卡片C&quot;</span>&#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lname.length;i++) &#123;</span><br><span class="line"> l=<span class="keyword">new</span> JLabel(lname[i]);</span><br><span class="line"> l.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"> l.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷书&quot;</span>,Font.BOLD,<span class="number">16</span>));</span><br><span class="line"> l.setForeground(<span class="keyword">new</span> Color(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="comment">//像采用卡片布局的面板中加卡片</span></span><br><span class="line">cp.add(l,lname[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  bp=<span class="keyword">new</span> JPanel();</span><br><span class="line"> f.add(bp,BorderLayout.SOUTH);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> String bname[]= &#123;<span class="string">&quot;第一个&quot;</span>,<span class="string">&quot;前一个&quot;</span>,<span class="string">&quot;卡片A&quot;</span>,<span class="string">&quot;卡片B&quot;</span>,<span class="string">&quot;卡片C&quot;</span>,<span class="string">&quot;后一个&quot;</span>,<span class="string">&quot;最后一个&quot;</span>&#125;;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bname.length;i++) &#123;</span><br><span class="line"> JButton b=<span class="keyword">new</span> JButton(bname[i]);</span><br><span class="line"> bp.add(b);</span><br><span class="line"> b.addActionListener(<span class="keyword">new</span> ActionListener()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String event=b.getText();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;第一个&quot;</span>)) &#123;</span><br><span class="line">c.first(cp);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;前一个&quot;</span>)) &#123;</span><br><span class="line">c.previous(cp);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;卡片A&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;卡片A&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;卡片B&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;卡片B&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;卡片C&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;卡片C&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;后一个&quot;</span>)) &#123;</span><br><span class="line">c.next(cp);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.equals(<span class="string">&quot;最后一个&quot;</span>)) &#123;</span><br><span class="line">c.last(cp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> f.pack();</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> CardLayout_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​```java</span><br><span class="line"><span class="comment">//利用卡片布局实训相册</span></span><br><span class="line">![](https:<span class="comment">//cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/e348f8e551bc264d616c873b59e80976.png)</span></span><br><span class="line">​```java</span><br><span class="line"><span class="keyword">package</span> Swing_Layout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span>  java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardLayout_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JPanel cp,p;</span><br><span class="line">CardLayout c;</span><br><span class="line">ImageIcon img;</span><br><span class="line">String imgname[]= &#123;<span class="string">&quot;Image/1.jpg&quot;</span>,<span class="string">&quot;Image/2.jpg&quot;</span>,<span class="string">&quot;Image/3.jpg&quot;</span>,<span class="string">&quot;Image/4.jpg&quot;</span>&#125;;</span><br><span class="line">String bname[]= &#123;<span class="string">&quot;第一个&quot;</span>,<span class="string">&quot;前一个&quot;</span>,<span class="string">&quot;图片A&quot;</span>,<span class="string">&quot;图片B&quot;</span>,<span class="string">&quot;图片C&quot;</span>,<span class="string">&quot;图片D&quot;</span>,<span class="string">&quot;后一个&quot;</span>,<span class="string">&quot;最后一个&quot;</span>&#125;;</span><br><span class="line">String imgname2[]= &#123;<span class="string">&quot;图片A&quot;</span>,<span class="string">&quot;图片B&quot;</span>,<span class="string">&quot;图片C&quot;</span>,<span class="string">&quot;图片D&quot;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CardLayout_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">cp=<span class="keyword">new</span> JPanel();</span><br><span class="line">c=<span class="keyword">new</span> CardLayout();</span><br><span class="line">cp.setLayout(c);</span><br><span class="line">f.add(cp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;imgname.length;i++) &#123;</span><br><span class="line">img=<span class="keyword">new</span> ImageIcon(imgname[i]);<span class="comment">//创建图片</span></span><br><span class="line">l=<span class="keyword">new</span> JLabel(img);<span class="comment">//创建标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//像采用卡片布局的面板中加卡片</span></span><br><span class="line"><span class="comment">//并为卡片设置名字</span></span><br><span class="line">cp.add(l,imgname2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">f.add(p,BorderLayout.SOUTH);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bname.length;i++) &#123;</span><br><span class="line">JButton b=<span class="keyword">new</span> JButton(bname[i]);<span class="comment">//防止局部变量</span></span><br><span class="line">p.add(b);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String event=b.getText();<span class="comment">//按键值</span></span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;第一个&quot;</span>))&#123;</span><br><span class="line">c.first(cp);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;前一个&quot;</span>)) &#123;</span><br><span class="line">c.previous(cp);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片A&quot;</span>)) &#123;</span><br><span class="line">c.show(cp,<span class="string">&quot;图片A&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片B&quot;</span>)) &#123;</span><br><span class="line">c.show(cp, <span class="string">&quot;图片B&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片C&quot;</span>)) &#123;</span><br><span class="line">c.show(cp, <span class="string">&quot;图片C&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图片D&quot;</span>)) &#123;</span><br><span class="line">c.show(cp, <span class="string">&quot;图片D&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;后一个&quot;</span>)) &#123;</span><br><span class="line">c.next(cp);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;最后一个&quot;</span>)) &#123;</span><br><span class="line">c.last(cp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> CardLayout_2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/26bef4624ae4de3d1529e8584a3d70e7.png"></p><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>事件处理的一般方法：<br>1.创建将要产生事件的组件对象<br>2.构造实现相应事件监听器接口的类，并创建事件监听器对象<br>3.为组件对象增加事件监听器对象：<code>组件对象</code>.add<code>XxxListener</code>(事件监听器对象);如：button.addActionListener(this);</p><blockquote><p>注：接口中的方法都含有所产生的事件对象参数，使用该参数的<code>getSource()</code>方法可以得到产生该事件的事件源</p></blockquote><h2 id="ActionListener"><a href="#ActionListener" class="headerlink" title="ActionListener"></a>ActionListener</h2><p>动作事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exception_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Exception_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;我是按钮，请点击&quot;</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">b.setText(<span class="string">&quot;我被点击了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(b);</span><br><span class="line"> f.pack();</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> Exception_2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/e4593828130f1643c3b92ecfabe3bbd6.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/5965bf0bb48c3ca5290232e90fe5d34d.png"></p><h2 id="ItemListener"><a href="#ItemListener" class="headerlink" title="ItemListener"></a>ItemListener</h2><p>选择监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemEvent_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JComboBox  xlk;<span class="comment">//下拉框</span></span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">String str[]= &#123;<span class="string">&quot;选项一&quot;</span>,<span class="string">&quot;选项二&quot;</span>,<span class="string">&quot;选项三&quot;</span>,<span class="string">&quot;选项四&quot;</span>,<span class="string">&quot;选项五&quot;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItemEvent_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame();</span><br><span class="line">xlk=<span class="keyword">new</span> JComboBox(str);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">xlk.addItemListener(<span class="keyword">new</span> ItemListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">int</span> stateChange=e.getStateChange();<span class="comment">//获得事件类型</span></span><br><span class="line">String item=e.getItem().toString();<span class="comment">//获得触发此次事件的选项</span></span><br><span class="line"><span class="keyword">if</span>(stateChange==ItemEvent.SELECTED) &#123;   <span class="comment">//查看是否由选中选项触发</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次事件由  选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;此次事件由  选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(stateChange==ItemEvent.DESELECTED) &#123;  <span class="comment">//查看是否由取消选中选项触发</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次事件由  取消选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;此次事件由  取消选中 选项 “&quot;</span>+item+<span class="string">&quot;”触发!&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;  <span class="comment">//由其他原因触发</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次事件由其他原因触发!&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;此次事件由其他原因触发!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(xlk,BorderLayout.NORTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> ItemEvent_1() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/06c581b66a5f8d2d6d2382f8f0ebc607.png"></p><h2 id="KeyListener"><a href="#KeyListener" class="headerlink" title="KeyListener"></a>KeyListener</h2><p>键盘事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyColor_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JButton b1,b2,b3,b4,b5,b6,b7;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KeyColor_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;颜色&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">b1.setBackground(Color.WHITE);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">b2.setBackground(Color.WHITE);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">b3.setBackground(Color.WHITE);</span><br><span class="line">b4=<span class="keyword">new</span> JButton(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">b4.setBackground(Color.WHITE);</span><br><span class="line">b5=<span class="keyword">new</span> JButton(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">b5.setBackground(Color.WHITE);</span><br><span class="line">b6=<span class="keyword">new</span> JButton(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">b6.setBackground(Color.WHITE);</span><br><span class="line">b7=<span class="keyword">new</span> JButton(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">b7.setBackground(Color.WHITE);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;英文键盘模式&quot;</span>);</span><br><span class="line">f.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//f.setFocusable(true);//获得焦点</span></span><br><span class="line">b1.addKeyListener(<span class="keyword">new</span> KeyListener() &#123;  <span class="comment">//b1为焦点</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;  <span class="comment">//按下</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">switch</span>((<span class="keyword">char</span>)e.getKeyCode()) &#123;  <span class="comment">//判断按下的键值</span></span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_1:</span><br><span class="line">b1.setBackground(Color.red);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_2: </span><br><span class="line">b2.setBackground(Color.orange);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_3:</span><br><span class="line">b3.setBackground(Color.YELLOW);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_4:</span><br><span class="line">b4.setBackground(Color.green);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_5:</span><br><span class="line">b5.setBackground(Color.cyan);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_6:</span><br><span class="line">b6.setBackground(Color.blue);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_7:</span><br><span class="line">b7.setBackground(<span class="keyword">new</span> Color(<span class="number">128</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;  <span class="comment">//释放</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">switch</span>((<span class="keyword">char</span>)e.getKeyCode()) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_1:</span><br><span class="line">b1.setBackground(Color.WHITE);  <span class="comment">//null为原来色体</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_2:</span><br><span class="line">b2.setBackground(Color.WHITE);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_3:</span><br><span class="line">b3.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_4:</span><br><span class="line">b4.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_5:</span><br><span class="line">b5.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_6:</span><br><span class="line">b6.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_7:</span><br><span class="line">b7.setBackground(Color.white);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(b1);</span><br><span class="line">f.add(b2);</span><br><span class="line">f.add(b3);</span><br><span class="line">f.add(b4);</span><br><span class="line">f.add(b5);</span><br><span class="line">f.add(b6);</span><br><span class="line">f.add(b7);</span><br><span class="line">f.add(l,BorderLayout.CENTER);</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> KeyColor_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/8ec4a3c05780f2b3a09ca1202b1c90e7.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyListener_1</span>  </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KeyListener_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;键盘事件&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">t.addKeyListener(<span class="keyword">new</span> KeyListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;  <span class="comment">//键盘输入</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String keytext=KeyEvent.getKeyText(e.getKeyCode());<span class="comment">//获得描述keycode的标签</span></span><br><span class="line"><span class="keyword">if</span>(e.isActionKey()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你按下的是动作键“&quot;</span>+keytext+<span class="string">&quot;”&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你按下的是非动作键“&quot;</span>+keytext+<span class="string">&quot;”&quot;</span>);</span><br><span class="line"><span class="comment">//获得与此事件中的键相关联的字符</span></span><br><span class="line"><span class="keyword">int</span> keycode=e.getKeyCode();</span><br><span class="line"><span class="keyword">switch</span>(keycode) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_CONTROL:  <span class="comment">//判断按下的是否为ctrl键</span></span><br><span class="line">System.out.println(<span class="string">&quot;,Ctrl键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_ALT:  <span class="comment">//判断是否为ait</span></span><br><span class="line">System.out.println(<span class="string">&quot;,AIt键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_SHIFT:</span><br><span class="line">System.out.println(<span class="string">&quot;,Shift键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123; <span class="comment">//键盘按下</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//获得输入的字符</span></span><br><span class="line">System.out.println(<span class="string">&quot;此次输入的是“&quot;</span>+e.getKeyChar()+<span class="string">&quot;”&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123; <span class="comment">//键盘松开</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//获得描述Keycode的标签</span></span><br><span class="line">String keyText=KeyEvent.getKeyText(e.getKeyCode());</span><br><span class="line">System.out.println(<span class="string">&quot;你释放的是“&quot;</span>+keyText+<span class="string">&quot;”键&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">t.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">f.add(l,BorderLayout.WEST);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> KeyListener_1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/7dc7641d0ed513e381d08bb4cfef807c.png"></p><h2 id="MouseListener"><a href="#MouseListener" class="headerlink" title="MouseListener"></a>MouseListener</h2><p>鼠标事件<br><code>MouseListener</code>接口中的方法:<br>① void mouse<code>Pressed</code> ( MouseEvent );  //鼠标被按下<br>② void mouse<code>Released </code>( MouseEvent );  //鼠标被释放<br>③ void mouse<code>Clicked</code> ( MouseEvent );  //鼠标被单击<br>④ void mouse<code>Entered</code> ( MouseEvent );  //光标移入组件<br>⑤ void mouse<code>Exit</code> ( MouseEvent );    //光标移出组件</p><hr><p><code>MouseEvent</code>中的常用方法:<br>1.int  <code>getButton</code>()；<br> 返回更改了状态的鼠标按键(如果有)。<br>2.int  <code>getClickCount</code>()；<br> 返回与此事件关联的鼠标单击次数。<br>3.boolean  <code>isAltDown</code>()；<br>返回Alt修饰符在此事件上是否为down。<br>4. boolean  <code>isControlDown</code>()；<br>返回Ctrl修饰符在此事件上是否为down。<br>5.boolean  <code>isShiftDown</code>()；<br>返回Shift修饰符在此事件上是否为down.<br>6.int  <code>getPoint</code>()；<br>返回事件相对于源组件的x，y坐标<br>7.int  <code>getX</code>()；<br>返回事件相对于源组件的水平x坐标。<br>8.int  <code>getY</code>()；<br>返回事件相对于源组件的垂直Y坐标。<br>9.int  <code>isPopupTrigger</code>()；<br>返回鼠标事件是否为该平台的弹出菜单所触发的事件。<br>10.<code>MouseAdapter</code>适配器</p><hr><p><code>MouseMotionListener</code><br>1.当在组件上进行鼠标<code>拖动、移动</code>时产生该事件。<br>2.MouseMotionListener接口中的方法<br>① void <code>mouseDragged</code>( MouseEvent );<br>② void <code>mouseMoved </code>( MouseEvent );<br>3.MouseMotionAdapter适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseEvent_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MouseEvent_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;鼠标事件&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;鼠标测试处&quot;</span>);</span><br><span class="line">l.addMouseListener(<span class="keyword">new</span> MouseListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//鼠标发送单机事件触发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;单击了鼠标按键&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i=e.getButton();<span class="comment">//通过该值可以判断按下的是哪个键</span></span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON1)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标左键&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON2)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标滚轮&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON3)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标右键&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> Clickcount=e.getClickCount();<span class="comment">//点击次数</span></span><br><span class="line">System.out.println(<span class="string">&quot;点击次数为&quot;</span>+Clickcount+<span class="string">&quot;下&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//鼠标按键被按下时触发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;鼠标按键被按下&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i=e.getButton();<span class="comment">//通过该值可以判断按下的是哪个键</span></span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON1)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标左键&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON2)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标滚轮&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(i==MouseEvent.BUTTON3)</span><br><span class="line">System.out.println(<span class="string">&quot;按下的是鼠标右键&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//按下后松下</span></span><br><span class="line">System.out.println(<span class="string">&quot;鼠标已释放&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//光标移入组件被触发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;光标移入组件&quot;</span>);</span><br><span class="line">l.setForeground(Color.red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;光标移出组件&quot;</span>);</span><br><span class="line">l.setForeground(Color.black);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.add(l);</span><br><span class="line">f.pack();</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"> f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"> f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> MouseEvent_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/71c7048f849f53726c315faccec875d3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseMotionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMouseMotionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">JButton b;</span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyMouseMotionListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;MyMouseMotionListener&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;clik and drag the mouse&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">t.addMouseMotionListener(<span class="keyword">new</span> MouseMotionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">count++;</span><br><span class="line">t.append(count+<span class="string">&quot;The mouse is dragged:X=&quot;</span>+e.getX()+<span class="string">&quot;Y=&quot;</span>+e.getY()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">count++;</span><br><span class="line">t.append(count+<span class="string">&quot;The mouse is moving:X=&quot;</span>+e.getX()+<span class="string">&quot;Y=&quot;</span>+e.getY()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">f.add(l,BorderLayout.NORTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.add(b,BorderLayout.SOUTH);</span><br><span class="line">f.setSize(<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span>  MyMouseMotionListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/c0acc0f468ad183dc557eb980c691f22.png"></p><h2 id="WindowListener"><a href="#WindowListener" class="headerlink" title="WindowListener"></a>WindowListener</h2><p>窗口监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowFocusListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowFocusListener_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">JTextArea t;</span><br><span class="line">JLabel l;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindowFocusListener_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;窗口焦点测试&quot;</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">t.setLineWrap(<span class="keyword">true</span>);<span class="comment">//自动换行</span></span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;测试区域&quot;</span>);</span><br><span class="line">l.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>,Font.BOLD,<span class="number">50</span>));</span><br><span class="line">f.addWindowFocusListener(<span class="keyword">new</span> WindowFocusListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowGainedFocus</span><span class="params">(WindowEvent e)</span> </span>&#123;<span class="comment">//获得焦点</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">t.append(<span class="string">&quot;窗口获得焦点&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\&quot;窗口获得焦点\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowLostFocus</span><span class="params">(WindowEvent e)</span> </span>&#123; <span class="comment">//失去焦点</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">t.append(<span class="string">&quot;窗口失去焦点&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\&quot;窗口失去焦点\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">p.add(l);</span><br><span class="line">f.add(p,BorderLayout.CENTER);</span><br><span class="line">f.add(gd,BorderLayout.SOUTH);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> WindowFocusListener_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/25/85873dfabb0f1fc5f7671bf7c8a35632.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_Exception;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowListener_1</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindowListener_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;窗口事件&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;显示&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> JTextArea(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">t.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);</span><br><span class="line">f.add(l,BorderLayout.NORTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.addWindowListener(<span class="keyword">new</span> WindowListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowOpened</span><span class="params">(WindowEvent e)</span> </span>&#123; <span class="comment">//窗口打开时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被打开&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口被打开&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口将要关闭时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口将要被关闭&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口将要被关闭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosed</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口已经被关闭时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口已经被关闭&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口已经被关闭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowIconified</span><span class="params">(WindowEvent e)</span> </span>&#123;    <span class="comment">//窗口最小化时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被最小化&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口已经被最小化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeiconified</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口被非最小化时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被非最小化&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口已经被非最小化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口被激活时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口被激活&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口被激活&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeactivated</span><span class="params">(WindowEvent e)</span> </span>&#123;  <span class="comment">//窗口不再处于激活状态时触发</span></span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(<span class="string">&quot;窗口不再处于激活状态&quot;</span>);</span><br><span class="line">t.append(<span class="string">&quot;窗口不再处于激活状态&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"> <span class="keyword">new</span> WindowListener_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Swing高级"><a href="#Swing高级" class="headerlink" title="Swing高级"></a>Swing高级</h1><h2 id="JTable表格"><a href="#JTable表格" class="headerlink" title="JTable表格"></a>JTable表格</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一.创建表格控件的各种方式:</span><br><span class="line">(<span class="number">1</span>)  调用无参构造函数.</span><br><span class="line">JTable table = <span class="keyword">new</span> JTable();</span><br><span class="line">(<span class="number">2</span>)  以表头和表数据创建表格.</span><br><span class="line">String columnNames[]= &#123;<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;性别&quot;</span>,<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;政治面貌&quot;</span>&#125;;</span><br><span class="line">Object data[][]= &#123;&#123;<span class="string">&quot;陈峰&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;党员&quot;</span>&#125;,</span><br><span class="line">           &#123;<span class="string">&quot;田一飞&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">18</span>),<span class="string">&quot;团员&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;胡锦&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;党员&quot;</span>&#125;&#125;;</span><br><span class="line">JTable table = <span class="keyword">new</span> JTable(data, columnNames);</span><br><span class="line">JTableHeader tablerHeader=table.getTableHeader(); <span class="comment">//获取表格列名.</span></span><br><span class="line">(<span class="number">3</span>)利用表格模型创建表格</span><br><span class="line">DefaultTableModel tableModel=<span class="keyword">new</span> DefaultTableMode();<span class="comment">//创建表格模型</span></span><br><span class="line">JTable table=<span class="keyword">new</span> JTabel(tableModel); <span class="comment">//创建表格</span></span><br><span class="line">table.setRowSorter(<span class="keyword">new</span> TableRowSorter(tableModel)); <span class="comment">//设置排序器</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_list;</span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.DefaultTableModel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableRowSorter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 默认方法创建  </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JTable table;</span><br><span class="line">JLabel l1,l2,l3,l4,l5;</span><br><span class="line">JButton b1,b2,b3;</span><br><span class="line">JTextField t1,t2,t3,t4;</span><br><span class="line">JPanel p;</span><br><span class="line">JScrollPane gd;</span><br><span class="line">DefaultTableModel tableModel;</span><br><span class="line">String Listname[]= &#123;<span class="string">&quot;学号&quot;</span>,<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;专业&quot;</span>&#125;;</span><br><span class="line">Object[][] date= &#123;&#123;<span class="string">&quot;20172001&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">18</span>),<span class="string">&quot;软件工程&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;20172002&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;软件工程&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;20172003&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">19</span>),<span class="string">&quot;软件工程&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;20172004&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="keyword">new</span> Integer(<span class="number">18</span>),<span class="string">&quot;软件工程&quot;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span> 默认方法创建() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;表格&quot;</span>);</span><br><span class="line">tableModel=<span class="keyword">new</span> DefaultTableModel(date,Listname);<span class="comment">//创建表格模型</span></span><br><span class="line">table=<span class="keyword">new</span> JTable(tableModel);<span class="comment">//创建表格</span></span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(table);<span class="comment">//创建滚动面板</span></span><br><span class="line">table.setRowHeight(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//设置表格排序器</span></span><br><span class="line">table.setRowSorter(<span class="keyword">new</span> TableRowSorter(tableModel));</span><br><span class="line"><span class="comment">//设置表格的选择模式为单选</span></span><br><span class="line">table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//为表格添加鼠标事件监听器</span></span><br><span class="line"><span class="comment">//点击表格 修改框反应</span></span><br><span class="line">table.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line"><span class="comment">//发生了单击事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获得被选中行的索引</span></span><br><span class="line"><span class="keyword">int</span> selectedRow=table.getSelectedRow(); <span class="comment">//行数</span></span><br><span class="line"><span class="comment">//从表格模型中获得指定单元格的值</span></span><br><span class="line"><span class="comment">//行数固定 改变列数来获取</span></span><br><span class="line">Object a=tableModel.getValueAt(selectedRow, <span class="number">0</span>);<span class="comment">//行 列</span></span><br><span class="line">Object b=tableModel.getValueAt(selectedRow, <span class="number">1</span>);</span><br><span class="line">Object c=tableModel.getValueAt(selectedRow, <span class="number">2</span>);</span><br><span class="line">Object d=tableModel.getValueAt(selectedRow, <span class="number">3</span>);</span><br><span class="line">t1.setText(a.toString());  <span class="comment">//将值赋给文本框</span></span><br><span class="line">t2.setText(b.toString());</span><br><span class="line">t3.setText(c.toString());</span><br><span class="line">t4.setText(d.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">l1=<span class="keyword">new</span> JLabel(<span class="string">&quot;学号&quot;</span>,JLabel.CENTER);</span><br><span class="line">l2=<span class="keyword">new</span> JLabel(<span class="string">&quot;姓名&quot;</span>,JLabel.CENTER);</span><br><span class="line">l3=<span class="keyword">new</span> JLabel(<span class="string">&quot;年龄&quot;</span>,JLabel.CENTER);</span><br><span class="line">l4=<span class="keyword">new</span> JLabel(<span class="string">&quot;专业&quot;</span>,JLabel.CENTER);</span><br><span class="line">l5=<span class="keyword">new</span> JLabel(<span class="string">&quot;修改表格&quot;</span>,JLabel.CENTER);</span><br><span class="line">t1=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">t2=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">t3=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">t4=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;添加&quot;</span>);</span><br><span class="line">b1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="comment">//创建表格行数组</span></span><br><span class="line">String contents[]= &#123;t1.getText(),t2.getText(),t3.getText(),t4.getText()&#125;;</span><br><span class="line">tableModel.addRow(contents);<span class="comment">//向表格模型中加一行</span></span><br><span class="line">l5.setText(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">l5.setForeground(Color.BLUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;修改&quot;</span>);</span><br><span class="line">b2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">int</span> selectedRow=table.getSelectedRow();<span class="comment">//获得被选中行的索引</span></span><br><span class="line"><span class="keyword">if</span>(selectedRow!=-<span class="number">1</span>) &#123;<span class="comment">//判断是否被选中</span></span><br><span class="line"><span class="comment">//修改表格模型中的指定值</span></span><br><span class="line">tableModel.setValueAt(t1.getText(), selectedRow, <span class="number">0</span>);</span><br><span class="line">tableModel.setValueAt(t2.getText(),selectedRow, <span class="number">0</span>);</span><br><span class="line">tableModel.setValueAt(t3.getText(),selectedRow, <span class="number">0</span>);</span><br><span class="line">tableModel.setValueAt(t4.getText(),selectedRow, <span class="number">0</span>);</span><br><span class="line">l5.setText(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">l5.setForeground(Color.darkGray);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">b3.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">int</span> selectedRow=table.getSelectedRow();<span class="comment">//获得被选中的索引</span></span><br><span class="line"><span class="keyword">if</span>(selectedRow!=-<span class="number">1</span>) &#123;<span class="comment">//判断是否被选中</span></span><br><span class="line"><span class="comment">//从表格中删除指定行</span></span><br><span class="line">tableModel.removeRow(selectedRow);</span><br><span class="line">l5.setText(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">l5.setForeground(Color.red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">p.add(l1);</span><br><span class="line">p.add(t1);</span><br><span class="line">p.add(l2);</span><br><span class="line">p.add(t2);</span><br><span class="line">p.add(l3);</span><br><span class="line">p.add(t3);</span><br><span class="line">p.add(l4);</span><br><span class="line">p.add(t4);</span><br><span class="line">p.add(l5);</span><br><span class="line">p.add(b1);</span><br><span class="line">p.add(b2);</span><br><span class="line">p.add(b3);</span><br><span class="line">p.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">f.add(p,BorderLayout.SOUTH);</span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 默认方法创建();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/791896742af1ff02701adcfb36c82b15.png"></p><h2 id="JTree树"><a href="#JTree树" class="headerlink" title="JTree树"></a>JTree树</h2><p>1.<code>JTree</code>类的构造方法:<br>JTree()<br>JTree(TreeNode root)  //根据指定<code>根节点</code>创建树<br>JTree(TreeModel newModel) //根据指定树模型创建树<br>2.<code>DefaultMutableTreeNode</code>类实现了TreeNode接口，用来创建树的节点。<br>DefaultMutableTreeNode()<br>DefaultMutableTreeNode(Object userObject) //创建一个具有<code>指定标签</code>的节点<br>DefaultMutableTreeNode(Object userObject,boolean allowsChildren) //创建一个具有指定标签的节点，并且允许有子节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Swing_tree;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.tree.DefaultMutableTreeNode;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 创建<span class="title">tree_2</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JTree tree;</span><br><span class="line">DefaultMutableTreeNode top;<span class="comment">//资源管理器</span></span><br><span class="line"><span class="comment">//我的公文包  我的电脑  收藏夹  Readme</span></span><br><span class="line">DefaultMutableTreeNode node1_1,node1_2,node1_3,node1_4;</span><br><span class="line"><span class="comment">//公司文件 私人文件  本机磁盘</span></span><br><span class="line">DefaultMutableTreeNode node2_1,node2_2,node2_3,node2_4,node2_5;</span><br><span class="line"><span class="comment">//网站列表</span></span><br><span class="line">DefaultMutableTreeNode node3_1;</span><br><span class="line"><span class="comment">//空</span></span><br><span class="line">DefaultMutableTreeNode node4_1;</span><br><span class="line"><span class="keyword">public</span> 创建tree_2() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;TreeDemo&quot;</span>);</span><br><span class="line">top=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;资源管理器&quot;</span>);</span><br><span class="line"></span><br><span class="line">node1_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;我的公文包&quot;</span>);</span><br><span class="line">node1_2=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;我的电脑&quot;</span>);</span><br><span class="line">node1_3=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;收藏夹&quot;</span>);</span><br><span class="line">node1_4=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;Readme&quot;</span>);</span><br><span class="line"></span><br><span class="line">node2_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;公司文件&quot;</span>);</span><br><span class="line">node2_2=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;私人文件&quot;</span>);</span><br><span class="line">node2_3=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;本机磁盘(C:)&quot;</span>);</span><br><span class="line">node2_4=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;本机磁盘(D:)&quot;</span>);</span><br><span class="line">node2_5=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;本机磁盘(E:)&quot;</span>);</span><br><span class="line"></span><br><span class="line">node3_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;网站列表&quot;</span>);</span><br><span class="line">node4_1=<span class="keyword">new</span> DefaultMutableTreeNode(<span class="string">&quot;&lt;空&gt;&quot;</span>);</span><br><span class="line">top.add(node1_1);</span><br><span class="line">top.add(node1_2);</span><br><span class="line">top.add(node1_3);</span><br><span class="line">top.add(node1_4);</span><br><span class="line"></span><br><span class="line">node1_1.add(node2_1);</span><br><span class="line">node1_1.add(node2_2);</span><br><span class="line">node1_2.add(node2_3);</span><br><span class="line">node1_2.add(node2_4);</span><br><span class="line">node1_2.add(node2_5);</span><br><span class="line">node1_3.add(node3_1);</span><br><span class="line"></span><br><span class="line">node3_1.add(node4_1);</span><br><span class="line">tree=<span class="keyword">new</span> JTree(top);</span><br><span class="line">f.add(tree);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">true</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 创建tree_2() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/0853fc6e23b16e61770838b0a3dfcd01.png"></p><h2 id="JMenu菜单"><a href="#JMenu菜单" class="headerlink" title="JMenu菜单"></a>JMenu菜单</h2><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p>菜单有如下三大组件：JMenuBar，JMenu，JMenuItem。<br>(1) 菜单栏(JMenuBar)：管理 菜单,不参与用户交互操作<br>(2)  菜单(JMenu)：整合管理菜单项（非叶结点）<br>(3)  菜单项(JMenuItem)：菜单系统中的基本组件（叶结点）<br>创建下拉菜单一般步骤<br>(1) 创建一个<code>JMenuBar</code>菜单栏对象，将其放置在JFrame窗口的顶部；<br>(2)  创建<code>JMenu</code>菜单对象，将其添加到<code>JMenuBar</code>菜单栏中;<br>(3)  创建<code>JMenuItem</code>菜单项，将其添加到<code>JMenu</code>菜单中。<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/934eb444e08650e25707967ce054fc84.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/bc769fbbdc58a62576aa9c3029940943.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/5b00164a192996c8d6ad759f4e05921e.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/c62bd3c3c8f14d05a179d4df64f921a3.png"><br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/dd2dd1585d010fb274ecc1708b91882c.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/c73619116a40401a2ca552128497c308.png"><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/0c6c1db5673153a535c5ad76a841ec5e.png"></p><hr><blockquote><p><code>JCheckboxMenuItem</code>类用于创建复选菜单项。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/fdf48913fb0040aa303702b3332c2f89.png"></p><blockquote><p><code>JRadioButtonMenuItem</code>类用于创建带有单选的菜单项。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/dd5663e6f48a732f3efc4695f33cd629.png"></p><h3 id="弹出菜单"><a href="#弹出菜单" class="headerlink" title="弹出菜单"></a>弹出菜单</h3><p>弹出式菜单：<code>JPopupMenu</code><br>(1) 构造方法： JPopupMenu ( );<br>(2)  常用方法：<br>① add( JMenuItem ) ：将指定菜单项添加到菜单末尾;<br>② <code>show</code>(Component , int , int ) ：<br>在组件调用者的坐标空间指定位置显示弹出菜单。<br>说明：弹出菜单默认不可见，需调用show()方法显示。<br>③<code> setVisible</code>( boolean ) ：设置弹出菜单的可见性。</p><h3 id="定制菜单"><a href="#定制菜单" class="headerlink" title="定制菜单"></a>定制菜单</h3><h4 id="使用分隔线"><a href="#使用分隔线" class="headerlink" title="使用分隔线"></a>使用分隔线</h4><p>(1) 作用：便于集中相似/相关的菜单项；<br>(2) JMenu类、JPopupMenu类提供添加分隔条方法<br><code>addSeparator()</code>：将新分隔符追加到菜单末尾；<br>Jmenu类还提供向指定索引位置插入分隔符方法：insertSeparator(int) 。<br>注意：索引位置从0开始。</p><h4 id="启动-禁用"><a href="#启动-禁用" class="headerlink" title="启动/禁用"></a>启动/禁用</h4><p>方法：<code>setEnable</code>(boolean);<br>① false：禁用菜单/菜单项；<br>② true：启用菜单/菜单项。<br>注意：禁用的菜单/菜单项呈灰色。</p><h4 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h4><p>(1) 作用：为菜单/菜单项设置快捷键；<br>(2) 设置方法<br>① <code>setMnemonic(int)</code>：参数为与键盘助记符对应的键值；<br>例：setMnemonic(KeyEvent.VK_F)，指定F为快捷键。<br>②<code> setMnemonic(char)</code> ：参数是键盘助记符对应的键值；<br>例：setMnemonic(‘F’)，指定F为快捷键。<br>(3) 说明：<br>①  如菜单名中含指定键盘快捷键，会为该键添加下划线；<br>②  快捷键<code>不区分大小写</code>。</p><h4 id="设置加速器"><a href="#设置加速器" class="headerlink" title="设置加速器"></a>设置加速器</h4><p>(1) 作用：不展开菜单 ，加速器可直接激活相应菜单项事件。<br>(2) 设置方法：<code>setaAccelerator(KeyStroke)</code><br>方法：<code>getKeyStroke</code>( int keyCode, int modifiers )<br> ① 作用： 获取<code>KeyStroke</code>对象(KeyStroke类中定义的静态方法)；<br> ②参数<code>keyCode</code>：键盘助记符对应的键值；<br> 由KeyEvent类中定义的VK_开头的静态常量指定。<br>③参数<code>modifiers</code>：多个参数，用|分隔<br>由InputEvent类中定义的静态常量指定。<br>例： CTRL_MASK、ALT_MASK、 SHIFT_MASK等 。<br>如：<br>getKeyStroke(KeyEvent.VK_<code>A</code>, InputEvent.<code>CTRL</code>_MASK | InputEvent.<code>ALT</code>_MASK));<br>//加速器按键为 CTRL+ALT+A</p><h3 id="笔记本实例"><a href="#笔记本实例" class="headerlink" title="笔记本实例"></a>笔记本实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SWng_Menu;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.InputEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 记事本作业版 <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JMenuBar cd;</span><br><span class="line">JMenu filecd,editcd,fontcd,lookcd,helpcd; <span class="comment">//五个主菜单  一级菜单</span></span><br><span class="line"><span class="comment">//文件菜单</span></span><br><span class="line">JMenuItem filemenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">8</span>];<span class="comment">//文件下的8个副菜单 放进数组  二级菜单</span></span><br><span class="line">String filemenuname[]= &#123;<span class="string">&quot;新建(N)&quot;</span>,<span class="string">&quot;新窗口(W)&quot;</span>,<span class="string">&quot;打开(O)&quot;</span>,<span class="string">&quot;保存(S)&quot;</span>,<span class="string">&quot;另存为(A)&quot;</span>,<span class="string">&quot;页面设置(U)&quot;</span>,<span class="string">&quot;打印(P)&quot;</span>,<span class="string">&quot;退出(X)&quot;</span>&#125;;<span class="comment">//文件</span></span><br><span class="line"><span class="comment">//编辑菜单</span></span><br><span class="line">JMenuItem editmenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">13</span>];<span class="comment">//编辑下12个副菜单  二级菜单</span></span><br><span class="line">String editmenuname[]= &#123;<span class="string">&quot;撤销(U)&quot;</span>,<span class="string">&quot;剪切(T)&quot;</span>,<span class="string">&quot;复制(C)&quot;</span>,<span class="string">&quot;粘贴(P)&quot;</span>,<span class="string">&quot;删除(L)&quot;</span>,<span class="string">&quot;使用Bing搜索&quot;</span>,<span class="string">&quot;查找(F)&quot;</span>,<span class="string">&quot;查找下一个(N)&quot;</span>,<span class="string">&quot;查找上一个(V)&quot;</span>,<span class="string">&quot;替换(R)&quot;</span>,<span class="string">&quot;转到(G)&quot;</span>,<span class="string">&quot;全选(V)&quot;</span>,<span class="string">&quot;时间/日期(D)&quot;</span>&#125;; <span class="comment">//编辑</span></span><br><span class="line"><span class="comment">//格式</span></span><br><span class="line">JMenu stylemenuItem[]=<span class="keyword">new</span> JMenu[<span class="number">2</span>];<span class="comment">// 二级菜单</span></span><br><span class="line">String formatmenuname[]= &#123;<span class="string">&quot;自动换行(W)&quot;</span>,<span class="string">&quot;字体(F)&quot;</span>&#125;;<span class="comment">//格式</span></span><br><span class="line"><span class="comment">//字体</span></span><br><span class="line">ButtonGroup bg;</span><br><span class="line">JRadioButtonMenuItem fontbody[]=<span class="keyword">new</span> JRadioButtonMenuItem[<span class="number">4</span>]; <span class="comment">//单选字体   三级菜单</span></span><br><span class="line">String fontbodyname[]= &#123;<span class="string">&quot;黑体&quot;</span>,<span class="string">&quot;宋体&quot;</span>,<span class="string">&quot;楷体&quot;</span>,<span class="string">&quot;隶书&quot;</span>&#125;; <span class="comment">//字体</span></span><br><span class="line"><span class="comment">//查看</span></span><br><span class="line">JMenuItem lookmenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">2</span>];</span><br><span class="line">String lookname[]= &#123;<span class="string">&quot;缩放(Z)&quot;</span>,<span class="string">&quot;状态栏(S)&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//帮助</span></span><br><span class="line">JMenuItem helpmenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">3</span>];</span><br><span class="line">String helpname[]= &#123;<span class="string">&quot;查看帮助(H)&quot;</span>,<span class="string">&quot;发送反馈(F)&quot;</span>,<span class="string">&quot;关于记事本&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//工具栏</span></span><br><span class="line">JToolBar tb;</span><br><span class="line">JButton Toolbu[]=<span class="keyword">new</span> JButton[<span class="number">7</span>];</span><br><span class="line">String Toolname[]= &#123;<span class="string">&quot;新建&quot;</span>,<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;保存&quot;</span>,<span class="string">&quot;剪切&quot;</span>,<span class="string">&quot;复制&quot;</span>,<span class="string">&quot;粘贴&quot;</span>,<span class="string">&quot;字体&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//文本域</span></span><br><span class="line">JTextArea t;</span><br><span class="line">JScrollPane gd;</span><br><span class="line"><span class="comment">//弹出菜单</span></span><br><span class="line">JPopupMenu tm;<span class="comment">//弹出菜单</span></span><br><span class="line">JMenuItem PopumenuItem[]=<span class="keyword">new</span> JMenuItem[<span class="number">4</span>];<span class="comment">//弹出</span></span><br><span class="line">String popname[]= &#123;<span class="string">&quot;全选&quot;</span>,<span class="string">&quot;复制&quot;</span>,<span class="string">&quot;粘贴&quot;</span>,<span class="string">&quot;剪切&quot;</span>&#125;;  <span class="comment">//弹出窗口</span></span><br><span class="line"><span class="keyword">public</span> 记事本作业版() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;新建文本文档-记事本&quot;</span>);</span><br><span class="line">f.setIconImage(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;Image/记事本.png&quot;</span>).getImage());</span><br><span class="line">cd=<span class="keyword">new</span> JMenuBar();<span class="comment">//工具条</span></span><br><span class="line"><span class="comment">//五个主菜单</span></span><br><span class="line">filecd=<span class="keyword">new</span> JMenu(<span class="string">&quot;文件(F)&quot;</span>);</span><br><span class="line">filecd.setMnemonic(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">editcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;编辑(E)&quot;</span>);</span><br><span class="line">editcd.setMnemonic(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">fontcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;格式(O)&quot;</span>);</span><br><span class="line">fontcd.setMnemonic(<span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">lookcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;查看(V)&quot;</span>);</span><br><span class="line">lookcd.setMnemonic(<span class="string">&#x27;V&#x27;</span>);</span><br><span class="line">helpcd=<span class="keyword">new</span> JMenu(<span class="string">&quot;帮助(H)&quot;</span>);</span><br><span class="line">helpcd.setMnemonic(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">cd.add(filecd);</span><br><span class="line">cd.add(editcd);</span><br><span class="line">cd.add(fontcd);</span><br><span class="line">cd.add(lookcd);</span><br><span class="line">cd.add(helpcd);</span><br><span class="line">f.setJMenuBar(cd);</span><br><span class="line"><span class="comment">//文件添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;filemenuname.length;i++) &#123;</span><br><span class="line">filemenuItem[i]=<span class="keyword">new</span> JMenuItem(filemenuname[i]);<span class="comment">//每一个菜单项加名字</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">filecd.addSeparator();</span><br><span class="line">filecd.add(filemenuItem[i]);<span class="comment">//都加到文件主菜单上</span></span><br><span class="line">filemenuItem[i].addActionListener(<span class="keyword">this</span>);<span class="comment">//都加监听</span></span><br><span class="line">&#125;</span><br><span class="line">filemenuItem[<span class="number">1</span>].setEnabled(<span class="keyword">false</span>);<span class="comment">//新窗口</span></span><br><span class="line">filemenuItem[<span class="number">4</span>].setEnabled(<span class="keyword">false</span>);<span class="comment">//另存为</span></span><br><span class="line">filemenuItem[<span class="number">5</span>].setEnabled(<span class="keyword">false</span>);  <span class="comment">//页面设置</span></span><br><span class="line">filemenuItem[<span class="number">6</span>].setEnabled(<span class="keyword">false</span>);  <span class="comment">//打印</span></span><br><span class="line">filemenuItem[<span class="number">0</span>].setMnemonic(<span class="string">&#x27;N&#x27;</span>);</span><br><span class="line">filemenuItem[<span class="number">2</span>].setMnemonic(<span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">filemenuItem[<span class="number">3</span>].setMnemonic(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">filemenuItem[<span class="number">0</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,InputEvent.CTRL_MASK));</span><br><span class="line">filemenuItem[<span class="number">2</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));</span><br><span class="line">filemenuItem[<span class="number">3</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));</span><br><span class="line">filemenuItem[<span class="number">7</span>].setMnemonic(<span class="string">&#x27;X&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编辑添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;editmenuname.length;i++) &#123;</span><br><span class="line">editmenuItem[i]=<span class="keyword">new</span> JMenuItem(editmenuname[i]);<span class="comment">//加名字</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">editcd.addSeparator();</span><br><span class="line">editcd.add(editmenuItem[i]);</span><br><span class="line">editmenuItem[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">editmenuItem[<span class="number">0</span>].setEnabled(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++) &#123;</span><br><span class="line">editmenuItem[i].setEnabled(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">editmenuItem[<span class="number">1</span>].setMnemonic(<span class="string">&#x27;T&#x27;</span>); <span class="comment">//剪切</span></span><br><span class="line">editmenuItem[<span class="number">1</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">2</span>].setMnemonic(<span class="string">&#x27;C&#x27;</span>); <span class="comment">//复制</span></span><br><span class="line">editmenuItem[<span class="number">2</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">3</span>].setMnemonic(<span class="string">&#x27;V&#x27;</span>); <span class="comment">//粘贴</span></span><br><span class="line">editmenuItem[<span class="number">3</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">11</span>].setMnemonic(<span class="string">&#x27;A&#x27;</span>); <span class="comment">//全选</span></span><br><span class="line">editmenuItem[<span class="number">11</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,InputEvent.CTRL_MASK));</span><br><span class="line">editmenuItem[<span class="number">12</span>].setMnemonic(<span class="string">&#x27;D&#x27;</span>);  <span class="comment">//时间</span></span><br><span class="line">editmenuItem[<span class="number">12</span>].setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5,InputEvent.CTRL_MASK));</span><br><span class="line"><span class="comment">//格式添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;formatmenuname.length;i++) &#123;</span><br><span class="line"> stylemenuItem[i]=<span class="keyword">new</span> JMenu(formatmenuname[i]);</span><br><span class="line"> <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line"> fontcd.addSeparator();</span><br><span class="line"> fontcd.add(stylemenuItem[i]);</span><br><span class="line">&#125;</span><br><span class="line">stylemenuItem[<span class="number">0</span>].setMnemonic(<span class="string">&#x27;W&#x27;</span>);</span><br><span class="line">stylemenuItem[<span class="number">0</span>].setEnabled(<span class="keyword">false</span>);</span><br><span class="line">stylemenuItem[<span class="number">1</span>].setMnemonic(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line"><span class="comment">//加字体</span></span><br><span class="line">bg=<span class="keyword">new</span> ButtonGroup();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fontbodyname.length;i++) &#123;</span><br><span class="line">fontbody[i]=<span class="keyword">new</span> JRadioButtonMenuItem(fontbodyname[i]);<span class="comment">//4个字体 加上名字</span></span><br><span class="line">bg.add(fontbody[i]);<span class="comment">//添加到按键组 实现单选</span></span><br><span class="line">stylemenuItem[<span class="number">1</span>].add(fontbody[i]);<span class="comment">//把4个字体文字添加到字体副菜单</span></span><br><span class="line">fontbody[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; lookname.length;i++) &#123;</span><br><span class="line">lookmenuItem[i]=<span class="keyword">new</span> JMenuItem(lookname[i]);</span><br><span class="line">lookmenuItem[i].setEnabled(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">lookcd.addSeparator();</span><br><span class="line">lookcd.add(lookmenuItem[i]);</span><br><span class="line">&#125;</span><br><span class="line">lookmenuItem[<span class="number">0</span>].setMnemonic(<span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">lookmenuItem[<span class="number">1</span>].setMnemonic(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line"><span class="comment">//帮助添加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;helpname.length;i++) &#123;</span><br><span class="line">helpmenuItem[i]=<span class="keyword">new</span> JMenuItem(helpname[i]);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>||i==<span class="number">2</span>)</span><br><span class="line">helpcd.addSeparator();</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>||i==<span class="number">1</span>)</span><br><span class="line">helpmenuItem[i].setEnabled(<span class="keyword">false</span>);</span><br><span class="line">helpcd.add(helpmenuItem[i]);</span><br><span class="line">&#125;</span><br><span class="line">helpmenuItem[<span class="number">2</span>].addActionListener(<span class="keyword">new</span> CreatNewWindos());<span class="comment">//关于记事本</span></span><br><span class="line"><span class="comment">//文本域设置</span></span><br><span class="line">t=<span class="keyword">new</span> JTextArea();</span><br><span class="line">t.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>,Font.PLAIN,<span class="number">20</span>));</span><br><span class="line">gd=<span class="keyword">new</span> JScrollPane(t);  <span class="comment">//文本域加滚动</span></span><br><span class="line">f.add(gd,BorderLayout.CENTER);</span><br><span class="line"><span class="comment">//弹出菜单</span></span><br><span class="line">tm=<span class="keyword">new</span> JPopupMenu();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;popname.length;i++) &#123;</span><br><span class="line">PopumenuItem[i]=<span class="keyword">new</span> JMenuItem(popname[i]);<span class="comment">//名字</span></span><br><span class="line">PopumenuItem[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">tm.addSeparator(); <span class="comment">//加分隔符</span></span><br><span class="line">tm.add(PopumenuItem[i]);<span class="comment">//加到弹出菜单上</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">t.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.isPopupTrigger())</span><br><span class="line">tm.show(e.getComponent(),e.getX(),e.getY());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">String Tooltext[]= &#123;<span class="string">&quot;新建&quot;</span>,<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;保存&quot;</span>,<span class="string">&quot;剪切&quot;</span>,<span class="string">&quot;复制&quot;</span>,<span class="string">&quot;粘贴&quot;</span>,<span class="string">&quot;字体&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//工具栏设置</span></span><br><span class="line">tb=<span class="keyword">new</span> JToolBar();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Toolname.length;i++) &#123;</span><br><span class="line">Toolbu[i]=<span class="keyword">new</span> JButton(Toolname[i]);<span class="comment">//按键加图片</span></span><br><span class="line">Toolbu[i].setToolTipText(Tooltext[i]);<span class="comment">//鼠标指向的时候</span></span><br><span class="line">Toolbu[i].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));<span class="comment">//添加一个手的样子 提示用户可以点击</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>||i==<span class="number">6</span>)</span><br><span class="line">tb.addSeparator(<span class="keyword">new</span> Dimension(<span class="number">20</span>,<span class="number">0</span>));<span class="comment">//分隔符</span></span><br><span class="line">tb.add(Toolbu[i]);<span class="comment">//加到工具栏</span></span><br><span class="line">Toolbu[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.add(tb,BorderLayout.NORTH);<span class="comment">//工具栏设置到北面</span></span><br><span class="line">tb.setVisible(<span class="keyword">true</span>);</span><br><span class="line">f.setSize(<span class="number">800</span>,<span class="number">600</span>);</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setResizable(<span class="keyword">true</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关于记事本的弹出窗口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatNewWindos</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存</span></span><br><span class="line">JFrame F=<span class="keyword">new</span> JFrame(<span class="string">&quot;关于记事本&quot;</span>);</span><br><span class="line">JLabel l=<span class="keyword">new</span> JLabel(<span class="string">&quot;开发者:18软件工程三班李振业&quot;</span>+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;2019.10.26&quot;</span>);</span><br><span class="line">l.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">l.setForeground(Color.GRAY);</span><br><span class="line">F.add(l);</span><br><span class="line">F.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">F.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">F.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 记事本作业版();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"> Object event=e.getSource(); <span class="comment">//取按键变量</span></span><br><span class="line"> <span class="comment">/***新建***/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">0</span>]||event==Toolbu[<span class="number">0</span>]) &#123;</span><br><span class="line"> t.setText(<span class="string">&quot;&quot;</span>); <span class="comment">//清空</span></span><br><span class="line"> f.setTitle(<span class="string">&quot;新建文本文档-记事本&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/***退出***/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">7</span>]) &#123;</span><br><span class="line"> System.exit(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/***打开***/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">2</span>]||event==Toolbu[<span class="number">1</span>]) &#123;</span><br><span class="line"> JFileChooser  filechoose=<span class="keyword">new</span> JFileChooser();<span class="comment">//弹出一个窗口</span></span><br><span class="line"> filechoose.setDialogTitle(<span class="string">&quot;文件打开&quot;</span>);<span class="comment">//显示弹开窗口的标题</span></span><br><span class="line"> filechoose.showOpenDialog(<span class="keyword">null</span>);<span class="comment">//ShowOpen 改变按钮的显示为打开</span></span><br><span class="line"> filechoose.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> String open_filepath=filechoose.getSelectedFile().getAbsolutePath();</span><br><span class="line"><span class="comment">//获取此文件的绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">File open_file=<span class="keyword">new</span> File(open_filepath);<span class="comment">//根据路径创建文件</span></span><br><span class="line">FileReader fr=<span class="keyword">new</span> FileReader(open_file); <span class="comment">//读取流</span></span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(fr); <span class="comment">//缓存流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> byt[]=<span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>)open_file.length()]; <span class="comment">//转为字节流</span></span><br><span class="line"><span class="keyword">int</span> content=br.read(byt);  <span class="comment">//读取内容</span></span><br><span class="line">f.setTitle(open_file.getName());  <span class="comment">//窗口改变名字</span></span><br><span class="line">t.append(<span class="keyword">new</span> String(byt,<span class="number">0</span>,content));<span class="comment">//文本域append追加显示文字</span></span><br><span class="line">fr.close();<span class="comment">//关闭流</span></span><br><span class="line"> &#125;<span class="keyword">catch</span>(Exception e1) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;没有打开文件&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/***保存**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==filemenuItem[<span class="number">3</span>]||event==Toolbu[<span class="number">2</span>]) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"> JFileChooser  filechoose=<span class="keyword">new</span> JFileChooser();<span class="comment">//弹出一个窗口</span></span><br><span class="line"> filechoose.setDialogTitle(<span class="string">&quot;另存为&quot;</span>);<span class="comment">//显示弹开窗口的标题</span></span><br><span class="line"> filechoose.showSaveDialog(<span class="keyword">null</span>);  <span class="comment">//ShowSava 改变按钮的显示为保存</span></span><br><span class="line"> filechoose.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> String save_filepath=filechoose.getSelectedFile().getAbsolutePath();</span><br><span class="line"><span class="comment">//获取此文件的绝对路径</span></span><br><span class="line">  </span><br><span class="line">  File save_file=<span class="keyword">new</span> File(save_filepath);</span><br><span class="line">  FileWriter fw=<span class="keyword">new</span> FileWriter(save_file);<span class="comment">//写入流</span></span><br><span class="line">  BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(fw); <span class="comment">//缓存流</span></span><br><span class="line">  bw.write(t.getText());<span class="comment">//文本域的内容写入文件</span></span><br><span class="line">  bw.close();</span><br><span class="line">  fw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/***全选**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==editmenuItem[<span class="number">11</span>]||event==PopumenuItem[<span class="number">0</span>]) &#123;</span><br><span class="line"> t.selectAll();<span class="comment">//选定指定的开始和结束位置之间的文本。</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/***时间日期**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="keyword">if</span>(event==editmenuItem[<span class="number">12</span>]) &#123;</span><br><span class="line"> Date dt=<span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat time=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss E&quot;</span>);</span><br><span class="line">t.append(time.format(dt));<span class="comment">//文本域append追加显示文字</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/***字体**/</span><span class="comment">////////////////////////////</span></span><br><span class="line"> <span class="comment">//黑体</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">0</span>]) &#123;</span><br><span class="line">  Font old_font=t.getFont();</span><br><span class="line">  Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;黑体&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line">  t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//宋体</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">1</span>]) &#123;</span><br><span class="line"> Font old_font=t.getFont();</span><br><span class="line"> Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line"> t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//楷体</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">2</span>]) &#123;</span><br><span class="line"> Font old_font=t.getFont();</span><br><span class="line"> Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line"> t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//隶书</span></span><br><span class="line"> <span class="keyword">if</span>(event==fontbody[<span class="number">3</span>]) &#123;</span><br><span class="line"> Font old_font=t.getFont();</span><br><span class="line"> Font new_font=<span class="keyword">new</span> Font(<span class="string">&quot;隶书&quot;</span>,old_font.getStyle(),old_font.getSize());</span><br><span class="line"> t.setFont(new_font);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//字体窗口</span></span><br><span class="line"> <span class="keyword">if</span>(event==Toolbu[<span class="number">6</span>]) &#123;</span><br><span class="line"> <span class="keyword">new</span> 字体窗口();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/4897c94084ba1608179813a5c5aab115.png"></p><h2 id="自动弹窗"><a href="#自动弹窗" class="headerlink" title="自动弹窗"></a>自动弹窗</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 自动弹窗;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">/*1.JOptionPane.showMessageDialog(组件, “信息的弹框”);</span></span><br><span class="line"><span class="comment"> * showMessageDialog(Component parentComponent, Object message, String title, int messageType)</span></span><br><span class="line"><span class="comment"> *2. JOptionPane.showMessageDialog(null, “信息的弹框”, “窗口名字”, 默认或者风格);</span></span><br><span class="line"><span class="comment"> *默认或者风格种类: </span></span><br><span class="line"><span class="comment"> *1.参数为1  默认</span></span><br><span class="line"><span class="comment"> *2.参数为-1  无提示类型(图标)</span></span><br><span class="line"><span class="comment"> *3.参数为0   含义为错误(出现错误图标)</span></span><br><span class="line"><span class="comment"> *4.参数为2   含义为警告(出现感叹号图标)</span></span><br><span class="line"><span class="comment"> *5.参数为3  含义为问题(出现问题图标)</span></span><br><span class="line"><span class="comment"> *3.showMessageDialog(Component parentComponent, Object message, String title, int messageType, Icon icon)</span></span><br><span class="line"><span class="comment"> *定义图标，加载图片的图标，可以帮助用户识别正在显示消息的种类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">showMessageDialog</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JPanel p;</span><br><span class="line">ImageIcon img=<span class="keyword">new</span> ImageIcon(<span class="string">&quot;Image/qq图标.jpg&quot;</span>);</span><br><span class="line">JButton b1,b2,b3,b4,b5,b6;<span class="comment">//默认  不带图标 警告 错误 问题 图标</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">showMessageDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">b1=<span class="keyword">new</span> JButton(<span class="string">&quot;默认&quot;</span>);</span><br><span class="line">b1.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b2=<span class="keyword">new</span> JButton(<span class="string">&quot;无图标&quot;</span>);</span><br><span class="line">b2.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b3=<span class="keyword">new</span> JButton(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">b3.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b4=<span class="keyword">new</span> JButton(<span class="string">&quot;警告&quot;</span>);</span><br><span class="line">b4.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b5=<span class="keyword">new</span> JButton(<span class="string">&quot;问题&quot;</span>);</span><br><span class="line">b5.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b6=<span class="keyword">new</span> JButton(<span class="string">&quot;图标&quot;</span>);</span><br><span class="line">b6.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">p.add(b1);</span><br><span class="line">p.add(b2);</span><br><span class="line">p.add(b3);</span><br><span class="line">p.add(b4);</span><br><span class="line">p.add(b5);</span><br><span class="line">p.add(b6);</span><br><span class="line">f.add(p);</span><br><span class="line">f.pack();</span><br><span class="line">f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">    <span class="keyword">new</span> showMessageDialog();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">String event=e.getActionCommand();</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;默认&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;默认&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;无图标&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p,<span class="string">&quot;无图标&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;错误&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p,<span class="string">&quot;错误&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;警告&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;警告&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(event.equals(<span class="string">&quot;问题&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;问题&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">3</span>);</span><br><span class="line">&#125;<span class="keyword">if</span>(event.equals(<span class="string">&quot;图标&quot;</span>)) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(p, <span class="string">&quot;问题&quot;</span>,<span class="string">&quot;提示窗口&quot;</span>,<span class="number">3</span>,img);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件选择器"><a href="#文件选择器" class="headerlink" title="文件选择器"></a>文件选择器</h2><h3 id="文件选择对话框"><a href="#文件选择对话框" class="headerlink" title="文件选择对话框"></a>文件选择对话框</h3><p><code>JFileChooser</code>类提供了一个供用户<code>选择文件</code>的对话框。利用该类创建文件选择对话框以及获取用户选择文件的基本步骤如下：<br>（1）创建一个JFileChooser类的对象。<br>（2）默认情况下每次只能选择一个文件，如果希望允许同时选择多个文件，可以通过调用方法<code>setMultiSelectionEnabled(boolean b)</code>设置，将入口参数设为true即表示允许多选。<br>（3）默认情况下只允许选择文件，如果希望允许选择文件夹，可以通过调用方法<code>setFileSelection- Mode(int mode)</code>设置，入口参数可选的静态常量有<code>FILES_ONLY</code>（只允许选择文件）、<code>DIRECTORIES_ ONLY</code>（只允许选择路径）和<code>FILES_AND_DIRECTORIES</code>（均可选择）。<br>（4）如果只希望在对话框中列出指定类型的文件，可以调用<code>setFileFilter(FileFilter filter)</code>方法设置文件过滤器。<br>（5）设置完成后调用<code>showOpenDialog(Component parent)</code>方法显示对话框，该方法将返回一个int型值，用来判断用户是否选择了文件或路径。<br>（6）如果用户选择了文件或路径，可以通过方法<code>getSelectedFile()</code>或<code>getSelectedFiles()</code>获得，方法getSelectedFile()返回的是File对象，方法getSelectedFiles()返回的是File型数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SWng_Menu;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 文件选择器 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line">JButton b;</span><br><span class="line">JTextField t;</span><br><span class="line">JPanel p;</span><br><span class="line"><span class="keyword">public</span> 文件选择器() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;文件选择器&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;文件:&quot;</span>);</span><br><span class="line">b=<span class="keyword">new</span> JButton(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">JFileChooser wjchoose=<span class="keyword">new</span> JFileChooser();<span class="comment">//创建文件选择器</span></span><br><span class="line"><span class="comment">//显示文件选择对话框</span></span><br><span class="line"><span class="keyword">int</span> i=wjchoose.showOpenDialog(f);</span><br><span class="line"><span class="comment">//判断用户单击的是否为“打开”按钮</span></span><br><span class="line"><span class="keyword">if</span>(i==JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line"><span class="comment">//获取选中的文件对象</span></span><br><span class="line">File selected=wjchoose.getSelectedFile();</span><br><span class="line"><span class="comment">//显示选中文件的名称</span></span><br><span class="line">t.setText(selected.getName());</span><br><span class="line"><span class="comment">//t.setText(selected.getAbsolutePath());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">t=<span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">p=<span class="keyword">new</span> JPanel();</span><br><span class="line">p.add(l);</span><br><span class="line">p.add(t);</span><br><span class="line">p.add(b);</span><br><span class="line">f.add(p);</span><br><span class="line">f.setSize(<span class="number">400</span>,<span class="number">100</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 文件选择器();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">![](https:<span class="comment">//cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/aa5cd174f9d7e46ed9e86f8d280df984.png)</span></span><br></pre></td></tr></table></figure><h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><p>如果只希望在对话框中列出指定类型的文件，可以调用<code>setFileFilter(FileFilter filter)</code>方法设置文件过滤器。</p><p>javax.swing.filechooser.FileFilter类是一个<code>抽象类</code>，该类的具体定义如下：<br>public abstract class FileFilter {<br>    public abstract boolean <code>accept</code>(File f);<br>    public abstract String <code>getDescription</code>();<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SWng_Menu;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileFilter;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 文件选择过滤器 </span>&#123;</span><br><span class="line">JFrame f;</span><br><span class="line">JLabel l;</span><br><span class="line"><span class="keyword">public</span> 文件选择过滤器() &#123;</span><br><span class="line">f=<span class="keyword">new</span> JFrame(<span class="string">&quot;文件选择过滤器&quot;</span>);</span><br><span class="line">l=<span class="keyword">new</span> JLabel(<span class="string">&quot;&lt;双击打开照片&gt;&quot;</span>,SwingConstants.CENTER);</span><br><span class="line">l.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line">JFileChooser wjchoose;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建文件选择对话框</span></span><br><span class="line">wjchoose=<span class="keyword">new</span> JFileChooser();</span><br><span class="line"><span class="comment">//设置文件过滤器，只列出JPG或GIF格式的图片</span></span><br><span class="line">FileFilter file=<span class="keyword">new</span> FileNameExtensionFilter(<span class="string">&quot;图像文件(JPG/GIF)&quot;</span>,<span class="string">&quot;JPG&quot;</span>,<span class="string">&quot;JPEG&quot;</span>,<span class="string">&quot;GIF&quot;</span>);</span><br><span class="line">wjchoose.setFileFilter(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.getClickCount()==<span class="number">2</span>) &#123;<span class="comment">//点击次数</span></span><br><span class="line"><span class="comment">//显示文件选择对话框</span></span><br><span class="line"><span class="keyword">int</span> i=wjchoose.showOpenDialog(f);</span><br><span class="line"><span class="comment">//判断用户点击的是否为“打开”按钮</span></span><br><span class="line"><span class="keyword">if</span>(i==JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line"><span class="comment">//获取选中的图片对象</span></span><br><span class="line">File selectedFile=wjchoose.getSelectedFile();</span><br><span class="line">ImageIcon img=<span class="keyword">new</span> ImageIcon(selectedFile.getAbsolutePath());  <span class="comment">//传入图片路径创建图片对象</span></span><br><span class="line">l.setIcon(img);</span><br><span class="line">f.setSize(img.getIconWidth(),img.getIconHeight());<span class="comment">//图片的大小显示窗口大小</span></span><br><span class="line">l.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">f.add(l);</span><br><span class="line">f.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">f.setResizable(<span class="keyword">false</span>);</span><br><span class="line">f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">new</span> 文件选择过滤器();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/26/eef8a9afcfc97a8209e6d7323fdad6cd.png"></p><h1 id="Applet"><a href="#Applet" class="headerlink" title="Applet"></a>Applet</h1><h2 id="Applet概述"><a href="#Applet概述" class="headerlink" title="Applet概述"></a>Applet概述</h2><ul><li>Applet是指嵌入<code>HTML</code>文件中，能够运行于<code>浏览器</code>的<code>Java类</code>。</li><li>Java 中 Applet 类继承了 <code>java.applet.Applet </code>类。</li><li>Applet 类没有定义 main()，所以一个 Applet 程序<code>不会调用 main() </code>方法。</li><li>Applet 有 Web 浏览器强制执行的严格的安全规则，Applet 的安全机制被称为<code>沙箱安全</code>。</li><li>Applet不能独自运行，执行方式是在<code>浏览器</code>或<code>JDK自带的Appletviewer</code>中运行。</li><li>Applet的运行环境是<code>浏览器</code>，需要编写<code>HTML</code>文件，并嵌入<code>Applet类</code>，浏览器才会加载与运行它。</li><li>Applet的执行过程：<br>1.浏览器<code>加载</code>指定URL的<code>HTML文件</code>；<br>2.浏览器<code>解析</code>HTML文件；<br>3.浏览器<code>加载</code>HTML文件中指定的<code>Applet类</code>；<br>4.浏览器中的<code>Java运行环境</code>运行此Applet。</li></ul><h2 id="Applet生命周期"><a href="#Applet生命周期" class="headerlink" title="Applet生命周期"></a>Applet生命周期</h2><p>Applet生命周期是指从浏览器下载Applet一直到用户终止Applet运行的过程。<br>Applet生命周期包括<code>创建</code>、<code>运行</code>与<code>消亡</code>等几个状态。<br>1、<code>加载Applet</code><br> 当一个Applet被下载到本地系统时，将发生以下操作：</p><ul><li>产生Applet主类的一个<code>实例</code>；</li><li>对Applet自身进行<code>初始化</code>；</li><li>启动Applet运行，将Applet完全显示出来。</li></ul><p>2、<code>离开或返回Applet所在的Web页面</code><br>  当用户离开Applet所在的Web页面，Applet将停止运行。当用户返回时，Applet将再次启动运行。<br>3、<code>重新加载Applet</code><br>  当用户执行浏览器的刷新造作时，浏览器将先卸载此Applet，再加载此Applet。在这个过程中，Applet先停止自身的运行，接着进行善后处理，释放其所占的资源，然后重新加载Applet。<br>4、<code>退出浏览器</code><br>   当用户退出浏览器时，Applet停止运行，进行善后处理，才让浏览器退出。</p><p>生命周期<code>相关方法</code>：</p><ul><li>void <code>init</code>()：该方法的目的是为你的 Applet 提供所需的任何<code>初始化</code>。在 Applet 标记内的 param 标签被处理后调用该方法。</li><li>void <code>start</code>():浏览器调用 init 方法后，该方法被<code>自动调用</code>。每当用户从其他页面返回到包含 Applet 的页面时，则调用该方法。</li><li>void <code>stop</code>():当用户从包含 Applet 的页面<code>移除</code>的时候，该方法自动被调用。因此，可以在相同的 Applet 中反复调用该方法。</li><li>void <code>destroy</code>():此方法仅当浏览器<code>正常关闭时</code>调用。因为 Applet 只有在 HTML 网页上有效，所以你不应该在用户离开包含 Applet 的页面后遗漏任何资源。</li><li>void <code>paint</code>()：该方法在 start() 方法之后立即被调用，或者在 Applet 需要重绘在浏览器的时候调用。paint() 方法实际上继承于 <code>java.awt</code>。<br>如图<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/4b20a79435a19272a525fe6410862610.png"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.applet.Applet;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;</span><br><span class="line">StringBuffer buffer;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">buffer=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">addItem(<span class="string">&quot;Applet初始化...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;addItem(<span class="string">&quot;Applet启动...&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;addItem(<span class="string">&quot;Applet停止运行...&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;addItem(<span class="string">&quot;准备卸载...&quot;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String newWord)</span></span>&#123;</span><br><span class="line">System.out.println(newWord);</span><br><span class="line">buffer.append(newWord);</span><br><span class="line">repaint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">g.drawRect(<span class="number">0</span>,<span class="number">0</span>,getSize().width-<span class="number">1</span>,getSize().height-<span class="number">1</span>);</span><br><span class="line">g.drawString(buffer.toString(),<span class="number">5</span>,<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Applet程序实现"><a href="#Applet程序实现" class="headerlink" title="Applet程序实现"></a>Applet程序实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="comment">//使用JDK自带的Appletviewer运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;  <span class="comment">//继承Applet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;    <span class="comment">//重写paint()方法</span></span><br><span class="line"><span class="comment">//Graphics类参数是画图的关键，可以画点，线，矩形，文字，图像等，还可以设置颜色和字体。</span></span><br><span class="line">g.drawString(<span class="string">&quot;02:05:52&quot;</span>, <span class="number">10</span>, <span class="number">30</span>);<span class="comment">//绘制字符串 坐标x,y</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/9bf00b56f2c81d5904eafc14d1c94943.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock_Applet</span> <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> width,height; <span class="comment">//用于保存Applet的宽度和高底</span></span><br><span class="line"><span class="keyword">int</span> hours=<span class="number">0</span>,minutes=<span class="number">0</span>,seconds=<span class="number">0</span>;<span class="comment">//用于保存时，分，秒的数值</span></span><br><span class="line">String timeString=<span class="string">&quot;&quot;</span>; <span class="comment">//用于以数字方式显示时间的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  <span class="comment">//初始化</span></span><br><span class="line">width=getSize().width; <span class="comment">//获取Applet的宽度</span></span><br><span class="line">height=getSize().height;<span class="comment">//获取Applet的高度</span></span><br><span class="line">setBackground(Color.black); <span class="comment">//设置Applet的背景为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;  <span class="comment">//启动</span></span><br><span class="line">Calendar cal=Calendar.getInstance();<span class="comment">//产生一个新的Calendar</span></span><br><span class="line">hours=cal.get(Calendar.HOUR_OF_DAY);</span><br><span class="line"><span class="keyword">if</span>(hours&gt;<span class="number">12</span>) &#123;</span><br><span class="line">hours-=<span class="number">12</span>;<span class="comment">//转化为12小时制</span></span><br><span class="line">&#125;</span><br><span class="line">minutes=cal.get(Calendar.MINUTE);</span><br><span class="line">seconds=cal.get(Calendar.SECOND);</span><br><span class="line"><span class="comment">//构造表示当前时间的字符串</span></span><br><span class="line">timeString=((hours&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+hours+<span class="string">&quot;:&quot;</span>+((minutes&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+minutes+<span class="string">&quot;:&quot;</span>+((seconds&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+seconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//停止</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123; <span class="comment">//绘制</span></span><br><span class="line">g.setColor(Color.white); <span class="comment">//设置白色来绘制时钟图形</span></span><br><span class="line">Font bigBoldFont=<span class="keyword">new</span> Font(<span class="string">&quot;SanSerif&quot;</span>,Font.BOLD,<span class="number">20</span>); </span><br><span class="line">g.setFont(bigBoldFont);</span><br><span class="line">g.drawString(timeString, (width-<span class="number">80</span>)/<span class="number">2</span>, height-height/<span class="number">2</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/ce1cc49ba7325178ddf4c5c09fd002ec.png"></p><blockquote><p>复杂案例，运用<code>线程</code>和<code>事件处理</code>实现数字时钟和模拟时钟的切换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock_App</span> <span class="keyword">extends</span> <span class="title">Applet</span> <span class="keyword">implements</span> <span class="title">Runnable</span>,<span class="title">MouseListener</span>  </span>&#123;</span><br><span class="line"><span class="keyword">int</span> width,height; <span class="comment">//用于保存Applet的宽度和高度</span></span><br><span class="line">Thread t=<span class="keyword">null</span>; <span class="comment">//用于画图的线程</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> threadSuspended; <span class="comment">//用于标志画图线程是否处于运行状态</span></span><br><span class="line">AudioClip sound;<span class="comment">//声音判断对象</span></span><br><span class="line"><span class="keyword">int</span> hours=<span class="number">0</span>,minutes=<span class="number">0</span>,seconds=<span class="number">0</span>;<span class="comment">//用于保存时，分，秒的数值</span></span><br><span class="line">String timeString=<span class="string">&quot;&quot;</span>; <span class="comment">//以数字方式显示时间的字符串</span></span><br><span class="line"><span class="keyword">boolean</span> digitalmode=<span class="keyword">false</span>;<span class="comment">//用于表示当前的画面是数字还是模拟方式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">width=getSize().width; <span class="comment">//获取Applet的宽度</span></span><br><span class="line">height=getSize().height;<span class="comment">//获取Applet的高度</span></span><br><span class="line">setBackground(Color.black); <span class="comment">//设置Applet的背景为黑色</span></span><br><span class="line">addMouseListener(<span class="keyword">this</span>); <span class="comment">//******注册事件监听程序，this指Applet本身******</span></span><br><span class="line">sound=getAudioClip(getDocumentBase(),<span class="string">&quot;ticker.au&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="keyword">null</span>) &#123;  <span class="comment">//判断绘图线程是否存在</span></span><br><span class="line">t=<span class="keyword">new</span> Thread(<span class="keyword">this</span>);  <span class="comment">//创建一个新线程</span></span><br><span class="line">t.setPriority(Thread.MIN_PRIORITY); <span class="comment">//设置线程为低优先级</span></span><br><span class="line">threadSuspended=<span class="keyword">false</span>; <span class="comment">//设置标志为线程未挂起</span></span><br><span class="line">t.start(); <span class="comment">//启动线程</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123; <span class="comment">//如果线程已存在</span></span><br><span class="line">threadSuspended=<span class="keyword">false</span>;<span class="comment">//设置线程标志为运行状态</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">threadSuspended=<span class="keyword">true</span>;<span class="comment">//设置线程标志为挂起状态</span></span><br><span class="line">sound.stop(); <span class="comment">//声音片段停止</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画秒钟</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHand</span><span class="params">(<span class="keyword">double</span> angle,<span class="keyword">int</span> radius,Graphics g)</span> </span>&#123;</span><br><span class="line">angle-=<span class="number">0.5</span>*Math.PI;<span class="comment">//减去90度，因为坐标与时钟相差90度</span></span><br><span class="line"><span class="keyword">int</span> x=(<span class="keyword">int</span>)(radius*Math.cos(angle));</span><br><span class="line"><span class="keyword">int</span> y=(<span class="keyword">int</span>)(radius*Math.sin(angle));</span><br><span class="line">g.drawLine(width/<span class="number">2</span>, height/<span class="number">2</span>, width/<span class="number">2</span>+x, height/<span class="number">2</span>+y);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//画时针和分针 根据三角函数等计算当前时间的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawWedge</span><span class="params">(<span class="keyword">double</span> angle,<span class="keyword">int</span> radius,Graphics g)</span> </span>&#123;</span><br><span class="line">angle-=<span class="number">0.5</span>*Math.PI;<span class="comment">//减去90度，因为坐标与时钟相差90度</span></span><br><span class="line"><span class="keyword">int</span> x=(<span class="keyword">int</span>)(radius*Math.cos(angle));<span class="comment">//计算针头的x坐标</span></span><br><span class="line"><span class="keyword">int</span> y=(<span class="keyword">int</span>)(radius*Math.sin(angle));<span class="comment">//计算针头的y坐标</span></span><br><span class="line">angle+=<span class="number">2</span>*Math.PI/<span class="number">3</span>;<span class="comment">//将angle调整为第一针尾点的角度</span></span><br><span class="line"><span class="keyword">int</span> x2=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.cos(angle));<span class="comment">//计算第一针尾点的x坐标</span></span><br><span class="line"><span class="keyword">int</span> y2=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.sin(angle));<span class="comment">//计算第一针尾点的y坐标</span></span><br><span class="line">angle+=<span class="number">2</span>*Math.PI/<span class="number">3</span>;<span class="comment">//将angle调整为第二针尾点的角度</span></span><br><span class="line"><span class="keyword">int</span> x3=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.cos(angle));<span class="comment">//计算第二针尾点的x坐标</span></span><br><span class="line"><span class="keyword">int</span> y3=(<span class="keyword">int</span>)(<span class="number">5</span>*Math.sin(angle));<span class="comment">//计算第二针尾点的y坐标</span></span><br><span class="line"><span class="comment">//画左翼</span></span><br><span class="line">g.drawLine(width/<span class="number">2</span>+x2, height/<span class="number">2</span>+y2, width/<span class="number">2</span>+x, height/<span class="number">2</span>+y);</span><br><span class="line"><span class="comment">//画右翼</span></span><br><span class="line">g.drawLine(width/<span class="number">2</span>+x3, height/<span class="number">2</span>+y3, width/<span class="number">2</span>+x, height/<span class="number">2</span>+y);</span><br><span class="line"><span class="comment">//画针尾</span></span><br><span class="line">g.drawLine(width/<span class="number">2</span>+x2, height/<span class="number">2</span>+y2, width/<span class="number">2</span>+x3, height/<span class="number">2</span>+y3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">g.setColor(Color.white); <span class="comment">//设置白色来绘制时钟图像</span></span><br><span class="line"><span class="keyword">if</span>(digitalmode) &#123;  <span class="comment">//判断是否以数字方式显示</span></span><br><span class="line">Font bigBoldFont=<span class="keyword">new</span> Font(<span class="string">&quot;SanSerif&quot;</span>,Font.BOLD,<span class="number">20</span>); </span><br><span class="line">g.setFont(bigBoldFont);</span><br><span class="line">g.drawString(timeString, (width-<span class="number">80</span>)/<span class="number">2</span>, height-height/<span class="number">2</span>+<span class="number">10</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//以模拟方式显示</span></span><br><span class="line">drawWedge(<span class="number">2</span>*Math.PI*hours/<span class="number">12</span>,width/<span class="number">5</span>,g);</span><br><span class="line">drawWedge(<span class="number">2</span>*Math.PI*minutes/<span class="number">60</span>,width/<span class="number">3</span>,g);</span><br><span class="line">drawWedge(<span class="number">2</span>*Math.PI*seconds/<span class="number">60</span>,width/<span class="number">2</span>,g);</span><br><span class="line">&#125;</span><br><span class="line">sound.play();<span class="comment">//声音判断开始部分</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(threadSuspended==<span class="keyword">false</span>) &#123;</span><br><span class="line">Calendar cal=Calendar.getInstance();<span class="comment">//产生一个新的Calendar</span></span><br><span class="line">hours=cal.get(Calendar.HOUR_OF_DAY); <span class="comment">//获取当前时间时</span></span><br><span class="line"><span class="keyword">if</span>(hours&gt;<span class="number">12</span>) &#123;</span><br><span class="line">hours-=<span class="number">12</span>;<span class="comment">//转化为12小时制</span></span><br><span class="line">&#125;</span><br><span class="line">minutes=cal.get(Calendar.MINUTE); <span class="comment">//获取分</span></span><br><span class="line">seconds=cal.get(Calendar.SECOND); <span class="comment">//获取秒</span></span><br><span class="line"><span class="comment">//构造表示当前时间的字符串</span></span><br><span class="line">timeString=((hours&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+hours+<span class="string">&quot;:&quot;</span>+((minutes&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+minutes+<span class="string">&quot;:&quot;</span>+((seconds&gt;<span class="number">9</span>)?<span class="string">&quot;&quot;</span>:<span class="string">&quot;0&quot;</span>)+seconds;</span><br><span class="line">repaint(); <span class="comment">//调用repaint()方法重绘屏幕</span></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">t.sleep(<span class="number">1000</span>); <span class="comment">//等待一秒钟</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line"><span class="comment">//不做处理；</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(digitalmode) <span class="comment">//判断当前是否以数字方式显示时钟</span></span><br><span class="line">digitalmode=<span class="keyword">false</span>;  <span class="comment">//将显示方式改为模拟方式</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">digitalmode=<span class="keyword">true</span>; <span class="comment">//将显示方式改为数字方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/e1c4ab6a587902838a52701a3368c599.png"></p><h3 id="Applet运行方式"><a href="#Applet运行方式" class="headerlink" title="Applet运行方式"></a>Applet运行方式</h3><p>1.Eclipse中JDK自带appletviewer运行(以上均为此方法运行);</p><p>2.Applet嵌入到HTML中<br>applet标签属性:<br>(1)CODEBASE=codebaseURL:指定Applet的URL地址，此URL是包含Applet代码的目录。<br>(2)CODE=appleFile:指定包含Applet或JApplet字节码的文件名。此文件名可以包含相对路径名。<br>(3)ALT=alternateText:指定当Applet不能运行时的替换文字。<br>(4)NAME=appletInstanceName:为即将创建的Applet指定一个名字。<br>(5) WIDTH=pixels HEIGHT=pixels:以像素为单位，指定Applet显示区的宽度和高度。<br>(6) ALIGN=alignment:指定Applet在浏览器中的对齐方式。<br>(7) ASPACE=pixels HSPACE=pixels:指定Applet显示区上下和左右两侧所空出的像素数。<br>(8)ARCHIVE=archiveFiles:可以通过逗号分隔定义多个归档文件（.jar或.zip文件）。ARCHIVE属性并不是＜applet＞标记的基本属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Applet_01;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.applet.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span>  <span class="keyword">extends</span> <span class="title">Applet</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">g.drawString(<span class="string">&quot;Hello World&quot;</span>, <span class="number">25</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">applet</span> <span class="attr">code</span>=<span class="string">&quot;Hello.class&quot;</span> <span class="attr">codebase</span>=<span class="string">&quot;&quot;</span>  <span class="attr">width</span>=<span class="string">300</span> <span class="attr">height</span>=<span class="string">300</span>&gt;</span><span class="tag">&lt;/<span class="name">applet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--code为Applet程序，有包名可以带上包名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--codebase用于指定class文件路径，即绝对路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到bin目录下生成的Hello.class字节码文件，复制到和Html文件同一文件夹下,点击Html文件运行(受版本影响可能没有运行结果)<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/11/29/e8e0424a346a3ec17a5a27df40659a24.png"><br>3.命令appletviewer运行<br>确保环境变量已配好<br>打开DOS命令行，输入</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appletviewer applet.html</span><br></pre></td></tr></table></figure><h3 id="HTML标记方法"><a href="#HTML标记方法" class="headerlink" title="HTML标记方法"></a>HTML标记方法</h3><p>HTML标记方法用于获取HTML文件中关于Applet的信息。</p><ul><li><code>URL getDocumentBase()</code>。 返回包含Applet的HTML的URL。</li><li><code>URL getCodeBase()</code>。返回Applet主类的URL，它可以不同于包含Applet的HTML文件的URL。</li><li><code>String getParameter(String name)</code>。返回定义在HTML文件的<param>标记中指定参数的值。如果指定参数在HTML中无说明，此方法返回null。</li></ul><h3 id="多媒体支持方式"><a href="#多媒体支持方式" class="headerlink" title="多媒体支持方式"></a>多媒体支持方式</h3><p>Applet类提供从指定的URL获取图像和声音的方法，使Applet可以很方便地实现多媒体功能。</p><ul><li><code>Image getImage(URL url)</code>。 返回能够显示在屏幕上的图像对象。</li><li><code>AudioClip getAudioClip(URL url)</code>。返回指定URL上的声音数据，返回一个类型为AudioClip的对象，通过此对象可以实现声音演播。</li><li><code>void play(URL url)</code>。直接演播指定URL地址上的声音文件。</li></ul><h3 id="管理Applet环境"><a href="#管理Applet环境" class="headerlink" title="管理Applet环境"></a>管理Applet环境</h3><p>Applet能够与其运行环境进行交互。但是Applet类中对于Applet环境的管理只能提供有限的支持，因为各种浏览器可能具有不同的特性。 </p><ul><li><code>AppletContext getAppletContext()</code>。返回一个AppletContext类的实例，通过这个实例Applet可以管理它的环境。</li><li><code>Applet getApplet(String name)</code>。返回名为name的Applet。该名字在HTML标记中通过NAME属性说明。如果在同一Web页面上不存在名为name的Applet,该方法返回值为空。</li><li><code>Enumeration getApplets()</code>。返回当前Web页上的所有的Applet的列表。为保证安全性，该方法得到的返回集中的Applet都是与调用此方法的Applet来自同一主机。</li><li><code>Void showDocument(URL url)</code>。用指定的URL置换当前的Web页。</li></ul><h3 id="Applet信息报告方法"><a href="#Applet信息报告方法" class="headerlink" title="Applet信息报告方法"></a>Applet信息报告方法</h3><p>Applet信息报告方法使Applet能简便地向用户报告一些Applet的相关信息，如参数信息等。</p><ul><li><code>void  showStatus(String status)</code>。在浏览器状态栏上显示字符串。</li><li><code>String getAppletInfo()</code>。报告关于Applet的作者、版权、版号等有关信息。</li><li><code>String[][] getParameterInfo()</code>。返回描述Applet参数的字符串数组</li></ul><h3 id="Applet的显示"><a href="#Applet的显示" class="headerlink" title="Applet的显示"></a>Applet的显示</h3><p>（1）Applet显示相关的3个方法<br>① paint()。 具体执行Applet的绘制。定义如下：<br>       <code>public void paint( Graphics g)</code><br>② update(). 用于更新Applet的显示。此方法首先清除背景，再调用paint()完成Applet的具体绘制。定义如下：<br>        <code>public void update(Graphics g)</code><br>③ repaint(). 用于Applet的重新显示。它调用update()方法实现对Applet的更新。定义如下：<br>       <code>public void repaint()</code></p><p>（2）Graphics类<br>Graphics在包java.awt中，是进行Applet绘制的关键类。支持基本绘图，支持图像的显示。<br>提供的绘图方法包括两类：绘制图形和文本。<br>①<code>Graphics图形绘制方法有</code>：画直线(drawLine)，画矩形(drawRect和fillRect), 画椭圆(drawOval和fillOval), 画弧(drawArc和fillArc)<br>② <code>Graphics绘制文本的方法</code>：<br>  drawByte(byte[] data, int offset,int length, int x,int y)<br>  drawChar(char[] data, int offset,int length, int x,int y)<br>  drawString(Sting str,int x,int y);</p><h3 id="播放声音"><a href="#播放声音" class="headerlink" title="播放声音"></a>播放声音</h3><p>java.applet包中的Applet类和<code>AudioClip接口</code>为播放声音提供了支持。<br>在Java 2平台支持的音频文件的种类包括：.au,.aif, .midi, .wav,  .rfm。<br>播放声音的Applet方法有：<br>   (1) 加载声音文件<br>     <code>public AudioClip getAudioClip(URL url)</code><br>    <code>public AudioClip getAudioClip(URL url,String name)</code><br>   (2) 直接演播指定URL中的文件<br>    <code>public void play(URL url)</code><br>     <code>public void play(URL url, String name)</code></p><p>接口AudioClip中所定义的方法有：<br>   (1) <code>public void play()</code> 开始播放声音文件，每次从头播放<br>   (2) <code>public void loop()</code> 开始循环播放声音文件<br>   (3) <code>public void stop()</code> 停止播放声音文件<br>在Applet中，声音文件的加载一般只需进行一次，通常放在init()方法中，声音文件的播放和停止可以进行很多次，所以可放在start()和stop()方法中，或通过相应动作按钮的事件处理机制进行控制。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="2020/11/14/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/11/14/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>感谢<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=5229184494076018340">CodeSheep</a>大佬带我入坑</p><ol><li><p> 什么是GitHub？<br><code>GitHub Page</code>s 是由 GitHub 官方提供的一种免费的<strong>静态站点托管服务</strong>，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。<br><a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages">About GitHub Pages</a></p></li><li><p>什么是Hexo？<br><code>Hexo</code> 是一个快速、简洁且高效的<strong>静态博客框架</strong>，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。<br><a href="https://hexo.io/zh-cn/">Hexo官网</a><br><a href="http://coderunthings.com/2017/08/20/howhexoworks/?utm_source=qq&utm_medium=social&utm_oi=619975022605897728">Hexo工作原理</a></p></li><li><p>什么是Git?<br>GIT(<strong>分布式版本控制系统</strong>),git支持分布式部署，可以有效、高速的处理从很小到非常大的项目版本管理。分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000">Git教程</a></p></li><li><p>什么是Node.js<br>Node.js就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p></li><li><p>Hexo+GitHub文章发布原理<br>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p></li><li><p>SSH运行原理及应用<br>需要使用SSH提供的公钥，可以省去hexo d命令时的密码登录.<br><a href="https://blog.csdn.net/qq_35246620/article/details/54317740?utm_source=qq&utm_medium=social&utm_oi=619975022605897728">SSH运行原理及应用</a></p></li><li><p>Markdown标记语言<br>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。文档后缀为 .md, .markdown。<br><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown API</a><br><a href="https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app">Markdown语法手册</a></p></li></ol><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 <strong>npm（Node.js 已带） 和 git</strong>，因此先搭建本地操作环境，安装 Node.js 和 Git。<br><a href="https://nodejs.org/zh-cn">Node.js下载网址</a><br><a href="https://blog.csdn.net/antma/article/details/86104068">Node.js安装教程</a></p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://git-scm.com/download/win">Git下载地址</a><br><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Git安装及配置</a><br>安装完成后，任意位置右击鼠标<code>Git Bash Here</code>(全程用Git Bash,git为linux命令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br></pre></td></tr></table></figure><p>回车，出现程序版本号即可。</p><blockquote><p>注意:如果出现<code>&quot;npm&quot;</code>不是内部指定，说明环境变量没配好,Node.js文件目录复制路径到Path中即可.</p></blockquote><hr><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><ol><li>通过淘宝镜像安装博客框架</li><li>如果出现”cnpm”不是内部指定，说明环境变量没配好,根据提示目录复制路径到<code>Path</code>中即可</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cnpm -v</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm install -g hexo-cli</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo -v</span></span><br></pre></td></tr></table></figure><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><ul><li><p>创建文件夹，名字随便取，比如我的是<code>C:\blog\lzyblog</code>，这个文件夹就是存放代码的地方。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /c/blog/lzyblog</span></span><br></pre></td></tr></table></figure></li><li><p>在文件夹下右击“Git Bash Here”执行以下命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init   <span class="comment">#创建一个新的hexo项目放在所创建文件夹下</span></span></span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/362ecd9fa0f8486a624b595c6b036add.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g<span class="comment">#生成</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s    <span class="comment">#为hexo在本地起一个http server</span></span></span><br></pre></td></tr></table></figure><ul><li><p>执行后在浏览器中输入”<code>localhost:4000/</code>“,就可以看到博客界面，按<code>ctrl+c</code>关闭本地服务器<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/bc94270ca0697a87070c6fe9ad0fe702.png"><br>若出现端口被占用，请戳<a href="http://blog.haoji.me/windows-port-bind.html?from=xa">Windows下如何查看某个端口被谁占用</a></p></li><li><p>修改博客<br><code>文件名/source/_posts/xxxx.md</code> 中修改博客，修改后操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new xxx  <span class="comment">#新建一篇标题为xxx的文章</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean    <span class="comment">#清除缓存</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g<span class="comment">#生成将要发布的博客网站包含html在内的静态资源</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h1><ol><li><p>注册登录GuiHub<br>注意用户名与网址访问域名要<strong>一致</strong></p></li><li><p>创建GuiHub库(new repository)<br>新建一个名为你的<code>用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了。<br>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p></li></ol><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题，利用SSH登录远程主机。</p><ul><li>登录方式有两种：<ol><li>口令登录</li><li>公钥登录</li><li>区别:口令登录每次都要输入密码，公钥登录不需要输入密码.</li></ol></li></ul><p>安装了 Git Bash，自带了 SSH。检验一下是否安装 SSH，我们在新建的文件夹中右键打开 Git Bash输入命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Gitub用户名&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;GitHub邮箱&quot;</span> </span></span><br></pre></td></tr></table></figure><p>然后检查SSH安装和生成密匙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">&quot;GitHub邮箱&quot;</span></span></span><br></pre></td></tr></table></figure><p>敲四次回车就会生成两个文件，分别为秘钥 id_rsa 和公钥<code> id_rsa.pub.</code> （注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p><ul><li>Linux 系统：~/.ssh</li><li>Mac 系统：~/.ssh</li><li>Windows 10 ：C:/Users/ASUS/.ssh</li></ul><p>然后复制公钥<code> id_rsa.pub</code> 文件里的内容,如果找不到可以通过命令查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.ssh  <span class="comment">#检查本机已存在的ssh密钥</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat id_rsa.pub</span></span><br></pre></td></tr></table></figure><h2 id="添加到Github"><a href="#添加到Github" class="headerlink" title="添加到Github"></a>添加到Github</h2><p>进入GitHub主页，点击右上角。再点击setting-&gt;SSH and GPG keys-&gt;New SSH key-&gt;将复制的id_rsa.pub内容粘贴到key内点击Add SSH key<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/f9347ba62d84ff52d4aeabe7bcfc8cfa.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com <span class="comment">#验证是否成功</span></span></span><br></pre></td></tr></table></figure><h2 id="部署插件"><a href="#部署插件" class="headerlink" title="部署插件"></a>部署插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>配置<code>_config.yml</code>中有关deploy的部分：(推荐使用sublime Text)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="string">https://github.com/lzyblog/lzyblog.github.io</span> <span class="string">（仓库url）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d <span class="comment">#部署到Github</span></span><br></pre></td></tr></table></figure><h1 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">$ hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">$ hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">$ hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">$ hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">$ hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">$ hexo back</span><br></pre></td></tr></table></figure><p>缩写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">hexo b == hexo back</span><br></pre></td></tr></table></figure><p>组合命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">$ hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure><h1 id="修改博客"><a href="#修改博客" class="headerlink" title="修改博客"></a>修改博客</h1><h2 id="目录构成"><a href="#目录构成" class="headerlink" title="目录构成"></a>目录构成</h2><p>打开文件夹,可以看到博客的目录结构如下：<br><img src="https://cdn.jsdelivr.net/gh/lzyblog/image@main/2020/12/24/362ecd9fa0f8486a624b595c6b036add.png"></p><ul><li>node_modules是node.js各种库的目录</li><li>public是生成的网页文件目录</li><li>scaffolds里面就三个文件，存储着新文章和新页面的初始设置</li><li>source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li>themes存放着主题文件，一般也用不到。</li><li>我们平时写文章只需要关注source/_posts这个文件夹就行了。</li></ul><p>通过文件名\source_posts目录下<code>xxx.md</code>文件修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment">#清除缓存</span></span><br><span class="line">$ hexo s  <span class="comment">#可在本地预览</span></span><br><span class="line">$ hexo g   <span class="comment">#部署</span></span><br><span class="line">$ hexo d     <span class="comment">#提交Github</span></span><br></pre></td></tr></table></figure><ul><li>修改提交时创常见问题<br>发现<code>peployer不存在</code>,需要重新引入部署插件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p> <a href="https://hexo.io/themes/">登录Hexo网址</a><br> 本人比较喜欢：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /c/blog/lzyblog</span><br><span class="line"><span class="comment">#git clone 主题url.git themes/主题名</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s <span class="comment">#预览</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>部署完后需要在博客主文件<code>_config.yml</code>中配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span> <span class="comment">#主题名</span></span><br></pre></td></tr></table></figure><p><strong>更改主题常见问题</strong></p><ul><li><strong>Hexo更改主题后启动服务器</strong>，界面显如下字符:<pre><code>  extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial    </code></pre></li></ul><p>解决方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>生成静态文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><ul><li>安装或者切换主题后 hexo s 打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 后抱错</li></ul><pre><code>    extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug</code></pre><p>原因：未安装 pug 依赖和渲染插件依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>关于Butterfly主题优化可以看我的另一篇文章！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo+GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
